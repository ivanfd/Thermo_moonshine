

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Tue Nov 01 15:05:16 2022

Microchip MPLAB XC8 C Compiler v2.36 (Pro license) build 20220127204148 Og9s 
     1                           	processor	18F2320
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    54                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    56                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    57                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    58                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    59                           	psect	pa_nodes0,global,class=CODE,delta=1
    60  0000                     
    61                           ; Version 2.40
    62                           ; Generated 17/11/2021 GMT
    63                           ; 
    64                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    65                           ; All rights reserved.
    66                           ; 
    67                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    68                           ; 
    69                           ; Redistribution and use in source and binary forms, with or without modification, are
    70                           ; permitted provided that the following conditions are met:
    71                           ; 
    72                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    73                           ;        conditions and the following disclaimer.
    74                           ; 
    75                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    76                           ;        of conditions and the following disclaimer in the documentation and/or other
    77                           ;        materials provided with the distribution. Publication is not required when
    78                           ;        this file is used in an embedded application.
    79                           ; 
    80                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    81                           ;        software without specific prior written permission.
    82                           ; 
    83                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    84                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    85                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    86                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    87                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    88                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    89                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    90                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    91                           ; 
    92                           ; 
    93                           ; Code-generator required, PIC18F2320 Definitions
    94                           ; 
    95                           ; SFR Addresses
    96  0000                     
    97                           	psect	idataCOMRAM
    98  001B8C                     __pidataCOMRAM:
    99                           	callstack 0
   100                           
   101                           ;initializer for _temperature_2
   102  001B8C  7FFF               	dw	32767
   103                           
   104                           ;initializer for _temperature_1
   105  001B8E  7FFF               	dw	32767
   106                           
   107                           ;initializer for _dq_num
   108  001B90  01                 	db	1
   109                           
   110                           ;initializer for _select
   111  001B91  01                 	db	1
   112                           
   113                           ;initializer for _minus_2
   114  001B92  2B                 	db	43
   115                           
   116                           ;initializer for _minus_1
   117  001B93  2B                 	db	43
   118                           
   119                           	psect	mediumconst
   120  001E8C                     __pmediumconst:
   121                           	callstack 0
   122  001E8C  00                 	db	0
   123  001E8D                     _HD44780_CYR:
   124                           	callstack 0
   125  001E8D  41                 	db	65
   126  001E8E  A0                 	db	160
   127  001E8F  42                 	db	66
   128  001E90  A1                 	db	161
   129  001E91  E0                 	db	224
   130  001E92  45                 	db	69
   131  001E93  A3                 	db	163
   132  001E94  A4                 	db	164
   133  001E95  A5                 	db	165
   134  001E96  A6                 	db	166
   135  001E97  4B                 	db	75
   136  001E98  A7                 	db	167
   137  001E99  4D                 	db	77
   138  001E9A  48                 	db	72
   139  001E9B  4F                 	db	79
   140  001E9C  A8                 	db	168
   141  001E9D  50                 	db	80
   142  001E9E  43                 	db	67
   143  001E9F  54                 	db	84
   144  001EA0  A9                 	db	169
   145  001EA1  AA                 	db	170
   146  001EA2  58                 	db	88
   147  001EA3  E1                 	db	225
   148  001EA4  AB                 	db	171
   149  001EA5  AC                 	db	172
   150  001EA6  E2                 	db	226
   151  001EA7  AD                 	db	173
   152  001EA8  AE                 	db	174
   153  001EA9  62                 	db	98
   154  001EAA  AF                 	db	175
   155  001EAB  B0                 	db	176
   156  001EAC  B1                 	db	177
   157  001EAD  61                 	db	97
   158  001EAE  B2                 	db	178
   159  001EAF  B3                 	db	179
   160  001EB0  B4                 	db	180
   161  001EB1  E3                 	db	227
   162  001EB2  65                 	db	101
   163  001EB3  B6                 	db	182
   164  001EB4  B7                 	db	183
   165  001EB5  B8                 	db	184
   166  001EB6  B9                 	db	185
   167  001EB7  BA                 	db	186
   168  001EB8  BB                 	db	187
   169  001EB9  BC                 	db	188
   170  001EBA  BD                 	db	189
   171  001EBB  6F                 	db	111
   172  001EBC  BE                 	db	190
   173  001EBD  70                 	db	112
   174  001EBE  63                 	db	99
   175  001EBF  BF                 	db	191
   176  001EC0  79                 	db	121
   177  001EC1  E4                 	db	228
   178  001EC2  78                 	db	120
   179  001EC3  E5                 	db	229
   180  001EC4  C0                 	db	192
   181  001EC5  C1                 	db	193
   182  001EC6  E6                 	db	230
   183  001EC7  C2                 	db	194
   184  001EC8  C3                 	db	195
   185  001EC9  C4                 	db	196
   186  001ECA  C5                 	db	197
   187  001ECB  C6                 	db	198
   188  001ECC  C7                 	db	199
   189  001ECD                     __end_of_HD44780_CYR:
   190                           	callstack 0
   191  001ECD                     _symbol_7:
   192                           	callstack 0
   193  001ECD  0E                 	db	14
   194  001ECE  0A                 	db	10
   195  001ECF  0A                 	db	10
   196  001ED0  0A                 	db	10
   197  001ED1  1A                 	db	26
   198  001ED2  0A                 	db	10
   199  001ED3  0E                 	db	14
   200  001ED4  00                 	db	0
   201  001ED5                     __end_of_symbol_7:
   202                           	callstack 0
   203  001ED5                     _symbol_6:
   204                           	callstack 0
   205  001ED5  00                 	db	0
   206  001ED6  0E                 	db	14
   207  001ED7  1F                 	db	31
   208  001ED8  0A                 	db	10
   209  001ED9  0A                 	db	10
   210  001EDA  0E                 	db	14
   211  001EDB  0E                 	db	14
   212  001EDC  00                 	db	0
   213  001EDD                     __end_of_symbol_6:
   214                           	callstack 0
   215  001EDD                     _symbol_5:
   216                           	callstack 0
   217  001EDD  06                 	db	6
   218  001EDE  09                 	db	9
   219  001EDF  09                 	db	9
   220  001EE0  06                 	db	6
   221  001EE1  00                 	db	0
   222  001EE2  00                 	db	0
   223  001EE3  0F                 	db	15
   224  001EE4  00                 	db	0
   225  001EE5                     __end_of_symbol_5:
   226                           	callstack 0
   227  001EE5                     _symbol_4:
   228                           	callstack 0
   229  001EE5  06                 	db	6
   230  001EE6  09                 	db	9
   231  001EE7  09                 	db	9
   232  001EE8  06                 	db	6
   233  001EE9  00                 	db	0
   234  001EEA  00                 	db	0
   235  001EEB  00                 	db	0
   236  001EEC  00                 	db	0
   237  001EED                     __end_of_symbol_4:
   238                           	callstack 0
   239  0000                     _EECON2	set	4007
   240  0000                     _EEDATA	set	4008
   241  0000                     _EEADR	set	4009
   242  0000                     _PIR1bits	set	3998
   243  0000                     _TMR0L	set	4054
   244  0000                     _TMR0H	set	4055
   245  0000                     _TMR1L	set	4046
   246  0000                     _TMR1H	set	4047
   247  0000                     _LATB	set	3978
   248  0000                     _PORTA	set	3968
   249  0000                     _PORTB	set	3969
   250  0000                     _TRISCbits	set	3988
   251  0000                     _TRISAbits	set	3986
   252  0000                     _LATAbits	set	3977
   253  0000                     _T1CONbits	set	4045
   254  0000                     _PORTAbits	set	3968
   255  0000                     _LATC	set	3979
   256  0000                     _PORTC	set	3970
   257  0000                     _LATA	set	3977
   258  0000                     _LATCbits	set	3979
   259  0000                     _TRISA	set	3986
   260  0000                     _PIE1bits	set	3997
   261  0000                     _IPR1bits	set	3999
   262  0000                     _ADCON1bits	set	4033
   263  0000                     _OSCCONbits	set	4051
   264  0000                     _TRISC	set	3988
   265  0000                     _TRISB	set	3987
   266  0000                     _T0CONbits	set	4053
   267  0000                     _T1CON	set	4045
   268  0000                     _RCONbits	set	4048
   269  0000                     _EECON1bits	set	4006
   270  0000                     _INTCON2bits	set	4081
   271  0000                     _INTCONbits	set	4082
   272  0000                     _RCSTAbits	set	4011
   273  0000                     _TXSTAbits	set	4012
   274  0000                     _TXREG	set	4013
   275  0000                     _SPBRG	set	4015
   276  001EED                     STR_17:
   277  001EED  20                 	db	32
   278  001EEE  20                 	db	32
   279  001EEF  20                 	db	32
   280  001EF0  D2                 	db	-46
   281  001EF1  E0                 	db	-32
   282  001EF2  EA                 	db	-22
   283  001EF3  20                 	db	32
   284  001EF4  20                 	db	32
   285  001EF5  20                 	db	32
   286  001EF6  20                 	db	32
   287  001EF7  20                 	db	32
   288  001EF8  20                 	db	32
   289  001EF9  CD                 	db	-51
   290  001EFA  69                 	db	105	;'i'
   291  001EFB  20                 	db	32
   292  001EFC  20                 	db	32
   293  001EFD  00                 	db	0
   294  001EFE                     STR_16:
   295  001EFE  20                 	db	32
   296  001EFF  D4                 	db	-44
   297  001F00  69                 	db	105	;'i'
   298  001F01  EA                 	db	-22
   299  001F02  F1                 	db	-15
   300  001F03  E0                 	db	-32
   301  001F04  F6                 	db	-10
   302  001F05  69                 	db	105	;'i'
   303  001F06  FF                 	db	-1
   304  001F07  20                 	db	32
   305  001F08  74                 	db	116	;'t'
   306  001F09  20                 	db	32
   307  001F0A  EA                 	db	-22
   308  001F0B  EE                 	db	-18
   309  001F0C  EB                 	db	-21
   310  001F0D  2E                 	db	46
   311  001F0E  00                 	db	0
   312  001F0F                     STR_7:
   313  001F0F  20                 	db	32
   314  001F10  CA                 	db	-54
   315  001F11  EE                 	db	-18
   316  001F12  E4                 	db	-28
   317  001F13  20                 	db	32
   318  001F14  EF                 	db	-17
   319  001F15  F0                 	db	-16
   320  001F16  EE                 	db	-18
   321  001F17  F7                 	db	-9
   322  001F18  E8                 	db	-24
   323  001F19  F2                 	db	-14
   324  001F1A  E0                 	db	-32
   325  001F1B  ED                 	db	-19
   326  001F1C  EE                 	db	-18
   327  001F1D  20                 	db	32
   328  001F1E  00                 	db	0
   329  001F1F                     STR_9:
   330  001F1F  20                 	db	32
   331  001F20  CA                 	db	-54
   332  001F21  EE                 	db	-18
   333  001F22  EB                 	db	-21
   334  001F23  28                 	db	40
   335  001F24  31                 	db	49	;'1'
   336  001F25  29                 	db	41
   337  001F26  20                 	db	32
   338  001F27  20                 	db	32
   339  001F28  CA                 	db	-54
   340  001F29  F3                 	db	-13
   341  001F2A  E1                 	db	-31
   342  001F2B  28                 	db	40
   343  001F2C  32                 	db	50	;'2'
   344  001F2D  29                 	db	41
   345  001F2E  00                 	db	0
   346  001F2F                     STR_1:
   347  001F2F  2D                 	db	45
   348  001F30  2D                 	db	45
   349  001F31  2D                 	db	45
   350  001F32  D2                 	db	-46
   351  001F33  C5                 	db	-59
   352  001F34  D0                 	db	-48
   353  001F35  CC                 	db	-52
   354  001F36  CE                 	db	-50
   355  001F37  CC                 	db	-52
   356  001F38  C5                 	db	-59
   357  001F39  D2                 	db	-46
   358  001F3A  D0                 	db	-48
   359  001F3B  2D                 	db	45
   360  001F3C  2D                 	db	45
   361  001F3D  2D                 	db	45
   362  001F3E  00                 	db	0
   363  001F3F                     STR_3:
   364  001F3F  C4                 	db	-60
   365  001F40  E0                 	db	-32
   366  001F41  F2                 	db	-14
   367  001F42  F7                 	db	-9
   368  001F43  E8                 	db	-24
   369  001F44  EA                 	db	-22
   370  001F45  20                 	db	32
   371  001F46  31                 	db	49	;'1'
   372  001F47  2C                 	db	44
   373  001F48  20                 	db	32
   374  001F49  E0                 	db	-32
   375  001F4A  E1                 	db	-31
   376  001F4B  EE                 	db	-18
   377  001F4C  20                 	db	32
   378  001F4D  32                 	db	50	;'2'
   379  001F4E  00                 	db	0
   380  001F4F                     STR_6:
   381  001F4F  20                 	db	32
   382  001F50  20                 	db	32
   383  001F51  31                 	db	49	;'1'
   384  001F52  20                 	db	32
   385  001F53  20                 	db	32
   386  001F54  20                 	db	32
   387  001F55  20                 	db	32
   388  001F56  20                 	db	32
   389  001F57  32                 	db	50	;'2'
   390  001F58  20                 	db	32
   391  001F59  20                 	db	32
   392  001F5A  20                 	db	32
   393  001F5B  31                 	db	49	;'1'
   394  001F5C  2D                 	db	45
   395  001F5D  32                 	db	50	;'2'
   396  001F5E  00                 	db	0
   397  001F5F                     STR_2:
   398  001F5F  28                 	db	40
   399  001F60  63                 	db	99	;'c'
   400  001F61  29                 	db	41
   401  001F62  49                 	db	73	;'I'
   402  001F63  76                 	db	118	;'v'
   403  001F64  61                 	db	97	;'a'
   404  001F65  6E                 	db	110	;'n'
   405  001F66  5F                 	db	95	;'_'
   406  001F67  66                 	db	102	;'f'
   407  001F68  64                 	db	100	;'d'
   408  001F69  20                 	db	32
   409  001F6A  76                 	db	118	;'v'
   410  001F6B  31                 	db	49	;'1'
   411  001F6C  2E                 	db	46
   412  001F6D  38                 	db	56	;'8'
   413  001F6E  00                 	db	0
   414  001F6F                     STR_5:
   415  001F6F  CF                 	db	-49
   416  001F70  EE                 	db	-18
   417  001F71  F0                 	db	-16
   418  001F72  69                 	db	105	;'i'
   419  001F73  E3                 	db	-29
   420  001F74  20                 	db	32
   421  001F75  D1                 	db	-47
   422  001F76  E8                 	db	-24
   423  001F77  E3                 	db	-29
   424  001F78  ED                 	db	-19
   425  001F79  2E                 	db	46
   426  001F7A  20                 	db	32
   427  001F7B  4C                 	db	76	;'L'
   428  001F7C  65                 	db	101	;'e'
   429  001F7D  64                 	db	100	;'d'
   430  001F7E  00                 	db	0
   431  001F7F                     STR_10:
   432  001F7F  20                 	db	32
   433  001F80  CA                 	db	-54
   434  001F81  EE                 	db	-18
   435  001F82  EB                 	db	-21
   436  001F83  EE                 	db	-18
   437  001F84  ED                 	db	-19
   438  001F85  E0                 	db	-32
   439  001F86  20                 	db	32
   440  001F87  20                 	db	32
   441  001F88  20                 	db	32
   442  001F89  20                 	db	32
   443  001F8A  CA                 	db	-54
   444  001F8B  F3                 	db	-13
   445  001F8C  E1                 	db	-31
   446  001F8D  00                 	db	0
   447  001F8E                     STR_15:
   448  001F8E  D2                 	db	-46
   449  001F8F  E5                 	db	-27
   450  001F90  EC                 	db	-20
   451  001F91  EF                 	db	-17
   452  001F92  20                 	db	32
   453  001F93  CD                 	db	-51
   454  001F94  E8                 	db	-24
   455  001F95  E7                 	db	-25
   456  001F96  3A                 	db	58	;':'
   457  001F97  20                 	db	32
   458  001F98  20                 	db	32
   459  001F99  20                 	db	32
   460  001F9A  20                 	db	32
   461  001F9B  20                 	db	32
   462  001F9C  00                 	db	0
   463  001F9D                     STR_8:
   464  001F9D  20                 	db	32
   465  001F9E  20                 	db	32
   466  001F9F  20                 	db	32
   467  001FA0  20                 	db	32
   468  001FA1  C3                 	db	-61
   469  001FA2  F0                 	db	-16
   470  001FA3  E0                 	db	-32
   471  001FA4  ED                 	db	-19
   472  001FA5  E8                 	db	-24
   473  001FA6  F6                 	db	-10
   474  001FA7  69                 	db	105	;'i'
   475  001FA8  20                 	db	32
   476  001FA9  20                 	db	32
   477  001FAA  00                 	db	0
   478  001FAB                     STR_13:
   479  001FAB  20                 	db	32
   480  001FAC  20                 	db	32
   481  001FAD  20                 	db	32
   482  001FAE  20                 	db	32
   483  001FAF  CA                 	db	-54
   484  001FB0  F3                 	db	-13
   485  001FB1  E1                 	db	-31
   486  001FB2  EE                 	db	-18
   487  001FB3  E2                 	db	-30
   488  001FB4  E0                 	db	-32
   489  001FB5  20                 	db	32
   490  001FB6  20                 	db	32
   491  001FB7  00                 	db	0
   492  001FB8                     STR_11:
   493  001FB8  20                 	db	32
   494  001FB9  20                 	db	32
   495  001FBA  20                 	db	32
   496  001FBB  20                 	db	32
   497  001FBC  CA                 	db	-54
   498  001FBD  EE                 	db	-18
   499  001FBE  EB                 	db	-21
   500  001FBF  EE                 	db	-18
   501  001FC0  ED                 	db	-19
   502  001FC1  E0                 	db	-32
   503  001FC2  20                 	db	32
   504  001FC3  20                 	db	32
   505  001FC4  00                 	db	0
   506  001FC5                     STR_4:
   507  001FC5  C2                 	db	-62
   508  001FC6  E8                 	db	-24
   509  001FC7  E1                 	db	-31
   510  001FC8  69                 	db	105	;'i'
   511  001FC9  F0                 	db	-16
   512  001FCA  20                 	db	32
   513  001FCB  31                 	db	49	;'1'
   514  001FCC  38                 	db	56	;'8'
   515  001FCD  42                 	db	66	;'B'
   516  001FCE  32                 	db	50	;'2'
   517  001FCF  30                 	db	48	;'0'
   518  001FD0  3A                 	db	58	;':'
   519  001FD1  00                 	db	0
   520  001FD2                     STR_12:
   521  001FD2  D2                 	db	-46
   522  001FD3  E5                 	db	-27
   523  001FD4  EC                 	db	-20
   524  001FD5  EF                 	db	-17
   525  001FD6  20                 	db	32
   526  001FD7  C2                 	db	-62
   527  001FD8  E5                 	db	-27
   528  001FD9  F0                 	db	-16
   529  001FDA  F5                 	db	-11
   530  001FDB  3A                 	db	58	;':'
   531  001FDC  00                 	db	0
   532  001FDD                     STR_14:
   533  001FDD  CF                 	db	-49
   534  001FDE  EE                 	db	-18
   535  001FDF  F0                 	db	-16
   536  001FE0  69                 	db	105	;'i'
   537  001FE1  E3                 	db	-29
   538  001FE2  00                 	db	0
   539  001FE3                     STR_18:
   540  001FE3  31                 	db	49	;'1'
   541  001FE4  3A                 	db	58	;':'
   542  001FE5  00                 	db	0
   543  001FE6                     STR_19:
   544  001FE6  32                 	db	50	;'2'
   545  001FE7  3A                 	db	58	;':'
   546  001FE8  00                 	db	0
   547  001FE9                     STR_20:
   548  001FE9  33                 	db	51	;'3'
   549  001FEA  3A                 	db	58	;':'
   550  001FEB  00                 	db	0
   551  001FEC                     STR_21:
   552  001FEC  34                 	db	52	;'4'
   553  001FED  3A                 	db	58	;':'
   554  001FEE  00                 	db	0
   555  001FEF                     STR_22:
   556  001FEF  35                 	db	53	;'5'
   557  001FF0  3A                 	db	58	;':'
   558  001FF1  00                 	db	0
   559  001FF2                     STR_23:
   560  001FF2  36                 	db	54	;'6'
   561  001FF3  3A                 	db	58	;':'
   562  001FF4  00                 	db	0
   563  001FF5                     STR_24:
   564  001FF5  37                 	db	55	;'7'
   565  001FF6  3A                 	db	58	;':'
   566  001FF7  00                 	db	0
   567  001FF8                     STR_25:
   568  001FF8  38                 	db	56	;'8'
   569  001FF9  3A                 	db	58	;':'
   570  001FFA  00                 	db	0
   571  001FFB                     STR_26:
   572  001FFB  39                 	db	57	;'9'
   573  001FFC  3A                 	db	58	;':'
   574  001FFD  00                 	db	0
   575  001FFE  00                 	db	0	; dummy byte at the end
   576  0000                     
   577                           ; #config settings
   578                           
   579                           	psect	cinit
   580  001888                     __pcinit:
   581                           	callstack 0
   582  001888                     start_initialization:
   583                           	callstack 0
   584  001888                     __initialization:
   585                           	callstack 0
   586                           
   587                           ; Initialize objects allocated to COMRAM (8 bytes)
   588                           ; load TBLPTR registers with __pidataCOMRAM
   589  001888  0E8C               	movlw	low __pidataCOMRAM
   590  00188A  6EF6               	movwf	tblptrl,c
   591  00188C  0E1B               	movlw	high __pidataCOMRAM
   592  00188E  6EF7               	movwf	tblptrh,c
   593  001890  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   594  001892  6EF8               	movwf	tblptru,c
   595  001894  EE00  F069         	lfsr	0,__pdataCOMRAM
   596  001898  EE10 F008          	lfsr	1,8
   597  00189C                     copy_data0:
   598  00189C  0009               	tblrd		*+
   599  00189E  CFF5 FFEE          	movff	tablat,postinc0
   600  0018A2  50E5               	movf	postdec1,w,c
   601  0018A4  50E1               	movf	fsr1l,w,c
   602  0018A6  E1FA               	bnz	copy_data0
   603                           
   604                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   605  0018A8  6A71               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   606                           
   607                           ; Clear objects allocated to COMRAM (58 bytes)
   608  0018AA  EE00  F001         	lfsr	0,__pbssCOMRAM
   609  0018AE  0E3A               	movlw	58
   610  0018B0                     clear_0:
   611  0018B0  6AEE               	clrf	postinc0,c
   612  0018B2  06E8               	decf	wreg,f,c
   613  0018B4  E1FD               	bnz	clear_0
   614  0018B6                     end_of_initialization:
   615                           	callstack 0
   616  0018B6                     __end_of__initialization:
   617                           	callstack 0
   618  0018B6  9072               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   619  0018B8  9272               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   620  0018BA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   621  0018BC  6EF8               	movwf	tblptru,c
   622  0018BE  0100               	movlb	0
   623  0018C0  EF34  F000         	goto	_main	;jump to C main() function
   624                           
   625                           	psect	bitbssCOMRAM
   626  000388                     __pbitbssCOMRAM:
   627                           	callstack 0
   628  000388                     _en_snd_b:
   629                           	callstack 0
   630  000388                     	ds	1
   631  000389                     _en_snd_k:
   632                           	callstack 0
   633  000389                     	ds	1
   634  00038A                     _sound_yes:
   635                           	callstack 0
   636  00038A                     	ds	1
   637  00038B                     _read_key:
   638                           	callstack 0
   639  00038B                     	ds	1
   640                           
   641                           	psect	bssCOMRAM
   642  000001                     __pbssCOMRAM:
   643                           	callstack 0
   644  000001                     _rom_dq:
   645                           	callstack 0
   646  000001                     	ds	16
   647  000011                     _temp_ready:
   648                           	callstack 0
   649  000011                     	ds	4
   650  000015                     _dq2_temp:
   651                           	callstack 0
   652  000015                     	ds	4
   653  000019                     key_press@count:
   654                           	callstack 0
   655  000019                     	ds	2
   656  00001B                     _temp1_fix:
   657                           	callstack 0
   658  00001B                     	ds	2
   659  00001D                     _set_t_dq2:
   660                           	callstack 0
   661  00001D                     	ds	2
   662  00001F                     _dq1_dwn_temp:
   663                           	callstack 0
   664  00001F                     	ds	2
   665  000021                     _dq1_up_temp:
   666                           	callstack 0
   667  000021                     	ds	2
   668  000023                     _eusartRxCount:
   669                           	callstack 0
   670  000023                     	ds	1
   671  000024                     _eusartTxBufferRemaining:
   672                           	callstack 0
   673  000024                     	ds	1
   674  000025                     _key_pressed:
   675                           	callstack 0
   676  000025                     	ds	1
   677  000026                     myIntL@snd_delay:
   678                           	callstack 0
   679  000026                     	ds	1
   680  000027                     _dq1_temp_dwn:
   681                           	callstack 0
   682  000027                     	ds	1
   683  000028                     _dq1_temp:
   684                           	callstack 0
   685  000028                     	ds	1
   686  000029                     _set_t_dq1_dwn:
   687                           	callstack 0
   688  000029                     	ds	1
   689  00002A                     _set_t_dq1_up:
   690                           	callstack 0
   691  00002A                     	ds	1
   692  00002B                     _sub_sel_kol:
   693                           	callstack 0
   694  00002B                     	ds	1
   695  00002C                     _sub_sel:
   696                           	callstack 0
   697  00002C                     	ds	1
   698  00002D                     _pressed_key:
   699                           	callstack 0
   700  00002D                     	ds	1
   701  00002E                     _en_sound:
   702                           	callstack 0
   703  00002E                     	ds	1
   704  00002F                     _keyLong:
   705                           	callstack 0
   706  00002F                     	ds	1
   707  000030                     _scratch:
   708                           	callstack 0
   709  000030                     	ds	9
   710  000039                     _time_flag:
   711                           	callstack 0
   712  000039                     	ds	1
   713  00003A                     _timer_val:
   714                           	callstack 0
   715  00003A                     	ds	1
   716                           
   717                           	psect	dataCOMRAM
   718  000069                     __pdataCOMRAM:
   719                           	callstack 0
   720  000069                     _temperature_2:
   721                           	callstack 0
   722  000069                     	ds	2
   723  00006B                     _temperature_1:
   724                           	callstack 0
   725  00006B                     	ds	2
   726  00006D                     _dq_num:
   727                           	callstack 0
   728  00006D                     	ds	1
   729  00006E                     _select:
   730                           	callstack 0
   731  00006E                     	ds	1
   732  00006F                     _minus_2:
   733                           	callstack 0
   734  00006F                     	ds	1
   735  000070                     _minus_1:
   736                           	callstack 0
   737  000070                     	ds	1
   738                           
   739                           	psect	cstackCOMRAM
   740  00003B                     __pcstackCOMRAM:
   741                           	callstack 0
   742  00003B                     ??_myIntL:
   743  00003B                     
   744                           ; 1 bytes @ 0x0
   745  00003B                     	ds	3
   746  00003E                     ??_read_byte:
   747  00003E                     ??_lcdNibble:
   748  00003E                     ?___wmul:
   749                           	callstack 0
   750  00003E                     ?___awdiv:
   751                           	callstack 0
   752  00003E                     ?___lwdiv:
   753                           	callstack 0
   754  00003E                     ds18b20_crc8@data_in:
   755                           	callstack 0
   756  00003E                     ow_reset@presence:
   757                           	callstack 0
   758  00003E                     write_bit@bitval:
   759                           	callstack 0
   760  00003E                     write_eep@data:
   761                           	callstack 0
   762  00003E                     key_press@key:
   763                           	callstack 0
   764  00003E                     key_GetKey@key:
   765                           	callstack 0
   766  00003E                     ___lbdiv@divisor:
   767                           	callstack 0
   768  00003E                     Delay_ms@delay:
   769                           	callstack 0
   770  00003E                     read_eep@address:
   771                           	callstack 0
   772  00003E                     ___wmul@multiplier:
   773                           	callstack 0
   774  00003E                     ___awdiv@dividend:
   775                           	callstack 0
   776  00003E                     ___lwdiv@dividend:
   777                           	callstack 0
   778                           
   779                           ; 2 bytes @ 0x3
   780  00003E                     	ds	1
   781  00003F                     ??_write_byte:
   782  00003F                     ds18b20_crc8@num_bytes:
   783                           	callstack 0
   784  00003F                     lcdNibble@nibble:
   785                           	callstack 0
   786  00003F                     write_eep@address:
   787                           	callstack 0
   788  00003F                     ___lbdiv@dividend:
   789                           	callstack 0
   790                           
   791                           ; 1 bytes @ 0x4
   792  00003F                     	ds	1
   793  000040                     ??_Delay_ms:
   794  000040                     ?_read_eep_16:
   795                           	callstack 0
   796  000040                     ds18b20_crc8@bit_counter:
   797                           	callstack 0
   798  000040                     lcdWrite@type:
   799                           	callstack 0
   800  000040                     read_byte@val:
   801                           	callstack 0
   802  000040                     ___lbdiv@counter:
   803                           	callstack 0
   804  000040                     write_eep_16@data:
   805                           	callstack 0
   806  000040                     ___wmul@multiplicand:
   807                           	callstack 0
   808  000040                     ___awdiv@divisor:
   809                           	callstack 0
   810  000040                     ___lwdiv@divisor:
   811                           	callstack 0
   812                           
   813                           ; 2 bytes @ 0x5
   814  000040                     	ds	1
   815  000041                     ds18b20_crc8@data:
   816                           	callstack 0
   817  000041                     lcdWrite@byte:
   818                           	callstack 0
   819  000041                     read_byte@i:
   820                           	callstack 0
   821  000041                     write_byte@val:
   822                           	callstack 0
   823  000041                     ___lbdiv@quotient:
   824                           	callstack 0
   825  000041                     Delay_ms@i:
   826                           	callstack 0
   827                           
   828                           ; 2 bytes @ 0x6
   829  000041                     	ds	1
   830  000042                     ??_clearLCD:
   831  000042                     ds18b20_crc8@feedback_bit:
   832                           	callstack 0
   833  000042                     lcd_gotoxy@y:
   834                           	callstack 0
   835  000042                     lcd_putc@c:
   836                           	callstack 0
   837  000042                     write_byte@temp:
   838                           	callstack 0
   839  000042                     write_eep_16@address:
   840                           	callstack 0
   841  000042                     ___awdiv@counter:
   842                           	callstack 0
   843  000042                     ___lbmod@divisor:
   844                           	callstack 0
   845  000042                     cgrom_char@symbol:
   846                           	callstack 0
   847  000042                     read_eep_16@data:
   848                           	callstack 0
   849  000042                     ___wmul@product:
   850                           	callstack 0
   851  000042                     ___lwdiv@quotient:
   852                           	callstack 0
   853                           
   854                           ; 2 bytes @ 0x7
   855  000042                     	ds	1
   856  000043                     ??_initLCD:
   857  000043                     ds18b20_crc8@loop_count:
   858                           	callstack 0
   859  000043                     lcd_gotoxy@x:
   860                           	callstack 0
   861  000043                     write_byte@i:
   862                           	callstack 0
   863  000043                     ___awdiv@sign:
   864                           	callstack 0
   865  000043                     ___lbmod@dividend:
   866                           	callstack 0
   867                           
   868                           ; 1 bytes @ 0x8
   869  000043                     	ds	1
   870  000044                     ??_init_ds18b20:
   871  000044                     ds18b20_crc8@crc:
   872                           	callstack 0
   873  000044                     lcd_gotoxy@address:
   874                           	callstack 0
   875  000044                     cgrom_char@address:
   876                           	callstack 0
   877  000044                     read_eep_16@address:
   878                           	callstack 0
   879  000044                     ___lbmod@counter:
   880                           	callstack 0
   881  000044                     ___lwdiv@counter:
   882                           	callstack 0
   883  000044                     ___awdiv@quotient:
   884                           	callstack 0
   885                           
   886                           ; 2 bytes @ 0x9
   887  000044                     	ds	1
   888  000045                     ?___lwmod:
   889                           	callstack 0
   890  000045                     ?___lmul:
   891                           	callstack 0
   892  000045                     ds18b20_readTemp@time_flag:
   893                           	callstack 0
   894  000045                     cgrom_char@i:
   895                           	callstack 0
   896  000045                     ___lbmod@rem:
   897                           	callstack 0
   898  000045                     lcdPrint@t:
   899                           	callstack 0
   900  000045                     ___lwmod@dividend:
   901                           	callstack 0
   902  000045                     ___lmul@multiplier:
   903                           	callstack 0
   904  000045                     ds18b20_readrom@temp_rom:
   905                           	callstack 0
   906                           
   907                           ; 8 bytes @ 0xA
   908  000045                     	ds	1
   909  000046                     ?___awmod:
   910                           	callstack 0
   911  000046                     init_ds18b20@q:
   912                           	callstack 0
   913  000046                     ds18b20_readTemp@timer_val:
   914                           	callstack 0
   915  000046                     ___awmod@dividend:
   916                           	callstack 0
   917                           
   918                           ; 2 bytes @ 0xB
   919  000046                     	ds	1
   920  000047                     ??_lcdPrint:
   921  000047                     ??_ds18b20_readTemp:
   922  000047                     init_ds18b20@i:
   923                           	callstack 0
   924  000047                     ___lwmod@divisor:
   925                           	callstack 0
   926                           
   927                           ; 2 bytes @ 0xC
   928  000047                     	ds	1
   929  000048                     ___awmod@divisor:
   930                           	callstack 0
   931                           
   932                           ; 2 bytes @ 0xD
   933  000048                     	ds	1
   934  000049                     ___lwmod@counter:
   935                           	callstack 0
   936  000049                     ds18b20_readTemp@temp:
   937                           	callstack 0
   938  000049                     ___lmul@multiplicand:
   939                           	callstack 0
   940                           
   941                           ; 4 bytes @ 0xE
   942  000049                     	ds	1
   943  00004A                     ___awmod@counter:
   944                           	callstack 0
   945                           
   946                           ; 1 bytes @ 0xF
   947  00004A                     	ds	1
   948  00004B                     ds18b20_readTemp@j:
   949                           	callstack 0
   950  00004B                     ___awmod@sign:
   951                           	callstack 0
   952                           
   953                           ; 1 bytes @ 0x10
   954  00004B                     	ds	1
   955  00004C                     ds18b20_readTemp@i:
   956                           	callstack 0
   957                           
   958                           ; 1 bytes @ 0x11
   959  00004C                     	ds	1
   960  00004D                     ds18b20_readrom@num_dq:
   961                           	callstack 0
   962  00004D                     ___lmul@product:
   963                           	callstack 0
   964                           
   965                           ; 4 bytes @ 0x12
   966  00004D                     	ds	1
   967  00004E                     ds18b20_readrom@i:
   968                           	callstack 0
   969                           
   970                           ; 1 bytes @ 0x13
   971  00004E                     	ds	3
   972  000051                     ?___lldiv:
   973                           	callstack 0
   974  000051                     ___lldiv@dividend:
   975                           	callstack 0
   976                           
   977                           ; 4 bytes @ 0x16
   978  000051                     	ds	4
   979  000055                     ___lldiv@divisor:
   980                           	callstack 0
   981                           
   982                           ; 4 bytes @ 0x1A
   983  000055                     	ds	4
   984  000059                     ___lldiv@quotient:
   985                           	callstack 0
   986                           
   987                           ; 4 bytes @ 0x1E
   988  000059                     	ds	4
   989  00005D                     ___lldiv@counter:
   990                           	callstack 0
   991                           
   992                           ; 1 bytes @ 0x22
   993  00005D                     	ds	1
   994  00005E                     ?_ds18b20_get_temp:
   995                           	callstack 0
   996  00005E                     ?___llmod:
   997                           	callstack 0
   998  00005E                     ds18b20_get_temp@minus:
   999                           	callstack 0
  1000  00005E                     ___llmod@dividend:
  1001                           	callstack 0
  1002                           
  1003                           ; 4 bytes @ 0x23
  1004  00005E                     	ds	2
  1005  000060                     ??_ds18b20_get_temp:
  1006                           
  1007                           ; 1 bytes @ 0x25
  1008  000060                     	ds	2
  1009  000062                     ds18b20_get_temp@num_dq:
  1010                           	callstack 0
  1011  000062                     ___llmod@divisor:
  1012                           	callstack 0
  1013                           
  1014                           ; 4 bytes @ 0x27
  1015  000062                     	ds	1
  1016  000063                     ds18b20_get_temp@temp:
  1017                           	callstack 0
  1018                           
  1019                           ; 4 bytes @ 0x28
  1020  000063                     	ds	3
  1021  000066                     ___llmod@counter:
  1022                           	callstack 0
  1023                           
  1024                           ; 1 bytes @ 0x2B
  1025  000066                     	ds	1
  1026  000067                     ??_main:
  1027                           
  1028                           ; 1 bytes @ 0x2C
  1029  000067                     	ds	2
  1030                           
  1031 ;;
  1032 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1033 ;;
  1034 ;; *************** function _main *****************
  1035 ;; Defined at:
  1036 ;;		line 47 in file "main.c"
  1037 ;; Parameters:    Size  Location     Type
  1038 ;;		None
  1039 ;; Auto vars:     Size  Location     Type
  1040 ;;		None
  1041 ;; Return value:  Size  Location     Type
  1042 ;;                  1    wreg      void 
  1043 ;; Registers used:
  1044 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1045 ;; Tracked objects:
  1046 ;;		On entry : 0/0
  1047 ;;		On exit  : 0/0
  1048 ;;		Unchanged: 0/0
  1049 ;; Data sizes:     COMRAM   BANK0   BANK1
  1050 ;;      Params:         0       0       0
  1051 ;;      Locals:         0       0       0
  1052 ;;      Temps:          2       0       0
  1053 ;;      Totals:         2       0       0
  1054 ;;Total ram usage:        2 bytes
  1055 ;; Hardware stack levels required when called: 7
  1056 ;; This function calls:
  1057 ;;		_Delay_ms
  1058 ;;		_Main_init
  1059 ;;		___awdiv
  1060 ;;		___awmod
  1061 ;;		___lbdiv
  1062 ;;		___lbmod
  1063 ;;		___lldiv
  1064 ;;		___llmod
  1065 ;;		___lmul
  1066 ;;		___lwdiv
  1067 ;;		___lwmod
  1068 ;;		___wmul
  1069 ;;		_clearLCD
  1070 ;;		_ds18b20_get_temp
  1071 ;;		_ds18b20_readTemp
  1072 ;;		_ds18b20_readrom
  1073 ;;		_key_GetKey
  1074 ;;		_key_press
  1075 ;;		_lcdPrint
  1076 ;;		_lcd_gotoxy
  1077 ;;		_lcd_putc
  1078 ;;		_outValPreset
  1079 ;;		_read_eep
  1080 ;;		_read_eep_16
  1081 ;;		_write_eep
  1082 ;;		_write_eep_16
  1083 ;; This function is called by:
  1084 ;;		Startup code after reset
  1085 ;; This function uses a non-reentrant model
  1086 ;;
  1087                           
  1088                           	psect	text0
  1089  000068                     __ptext0:
  1090                           	callstack 0
  1091  000068                     _main:
  1092                           	callstack 24
  1093                           
  1094                           ;main.c: 48: Main_init();
  1095                           
  1096                           ;incstack = 0
  1097  000068  EC67  F009         	call	_Main_init	;wreg free
  1098                           
  1099                           ;main.c: 50: lcd_gotoxy(1, 1);
  1100  00006C  0E01               	movlw	1
  1101  00006E  6E42               	movwf	lcd_gotoxy@y^0,c
  1102  000070  EC74  F00D         	call	_lcd_gotoxy
  1103                           
  1104                           ;main.c: 51: lcdPrint("---ÒÅÐÌÎÌÅÒÐ---");
  1105  000074  0E2F               	movlw	low STR_1
  1106  000076  6E45               	movwf	lcdPrint@t^0,c
  1107  000078  0E1F               	movlw	high STR_1
  1108  00007A  6E46               	movwf	(lcdPrint@t+1)^0,c
  1109  00007C  EC13  F009         	call	_lcdPrint	;wreg free
  1110                           
  1111                           ;main.c: 52: lcd_gotoxy(1, 2);
  1112  000080  EC67  F007         	call	PL40	;call to abstracted procedure
  1113  000084  EC74  F00D         	call	_lcd_gotoxy
  1114                           
  1115                           ;main.c: 53: lcdPrint("(c)Ivan_fd v1.8");
  1116  000088  0E5F               	movlw	low STR_2
  1117  00008A  6E45               	movwf	lcdPrint@t^0,c
  1118  00008C  0E1F               	movlw	high STR_2
  1119  00008E  6E46               	movwf	(lcdPrint@t+1)^0,c
  1120  000090  EC13  F009         	call	_lcdPrint	;wreg free
  1121                           
  1122                           ;main.c: 54: Delay_ms(2000);
  1123  000094  0E07               	movlw	7
  1124  000096  6E3F               	movwf	(Delay_ms@delay+1)^0,c
  1125  000098  0ED0               	movlw	208
  1126  00009A  6E3E               	movwf	Delay_ms@delay^0,c
  1127  00009C  EC30  F00D         	call	_Delay_ms	;wreg free
  1128                           
  1129                           ;main.c: 55: clearLCD();
  1130  0000A0  EC8F  F00D         	call	_clearLCD	;wreg free
  1131                           
  1132                           ;main.c: 56: if ((PORTB & (1 << 1)) == 0) {
  1133  0000A4  B281               	btfsc	129,1,c	;volatile
  1134  0000A6  D017               	goto	l3500
  1135                           
  1136                           ;main.c: 57: clearLCD();
  1137  0000A8  EC8F  F00D         	call	_clearLCD	;wreg free
  1138                           
  1139                           ;main.c: 58: select = 2;
  1140  0000AC  0E02               	movlw	2
  1141                           
  1142                           ;main.c: 59: lcd_gotoxy(1, 1);
  1143  0000AE  EC83  F007         	call	PL54	;call to abstracted procedure
  1144  0000B2  EC74  F00D         	call	_lcd_gotoxy
  1145                           
  1146                           ;main.c: 60: lcdPrint("Äàò÷èê 1, àáî 2");
  1147  0000B6  0E3F               	movlw	low STR_3
  1148  0000B8  6E45               	movwf	lcdPrint@t^0,c
  1149  0000BA  0E1F               	movlw	high STR_3
  1150  0000BC  6E46               	movwf	(lcdPrint@t+1)^0,c
  1151  0000BE  EC13  F009         	call	_lcdPrint	;wreg free
  1152                           
  1153                           ;main.c: 61: lcd_gotoxy(1, 2);
  1154  0000C2  EC67  F007         	call	PL40	;call to abstracted procedure
  1155  0000C6  EC74  F00D         	call	_lcd_gotoxy
  1156                           
  1157                           ;main.c: 62: lcdPrint("Âèáið 18B20:");
  1158  0000CA  0EC5               	movlw	low STR_4
  1159  0000CC  6E45               	movwf	lcdPrint@t^0,c
  1160  0000CE  0E1F               	movlw	high STR_4
  1161  0000D0  6E46               	movwf	(lcdPrint@t+1)^0,c
  1162  0000D2  EC13  F009         	call	_lcdPrint	;wreg free
  1163  0000D6                     l3500:
  1164                           
  1165                           ;main.c: 64: };main.c: 66: dq1_up_temp = read_eep_16(16);
  1166  0000D6  0E10               	movlw	16
  1167  0000D8  ECE3  F00C         	call	_read_eep_16
  1168  0000DC  C040  F021         	movff	?_read_eep_16,_dq1_up_temp
  1169  0000E0  C041  F022         	movff	?_read_eep_16+1,_dq1_up_temp+1
  1170                           
  1171                           ;main.c: 67: dq1_dwn_temp = read_eep_16(18);
  1172  0000E4  0E12               	movlw	18
  1173  0000E6  ECE3  F00C         	call	_read_eep_16
  1174  0000EA  C040  F01F         	movff	?_read_eep_16,_dq1_dwn_temp
  1175  0000EE  C041  F020         	movff	?_read_eep_16+1,_dq1_dwn_temp+1
  1176                           
  1177                           ;main.c: 68: set_t_dq1_up = dq1_up_temp / 100;
  1178  0000F2  EC6A  F007         	call	PL44	;call to abstracted procedure
  1179  0000F6  EC7F  F007         	call	PL52	;call to abstracted procedure
  1180  0000FA  EC00  F00C         	call	___lwdiv	;wreg free
  1181  0000FE  503E               	movf	?___lwdiv^0,w,c
  1182  000100  6E2A               	movwf	_set_t_dq1_up^0,c
  1183                           
  1184                           ;main.c: 69: set_t_dq1_dwn = dq1_dwn_temp / 100;
  1185  000102  EC6F  F007         	call	PL46	;call to abstracted procedure
  1186  000106  EC7F  F007         	call	PL52	;call to abstracted procedure
  1187  00010A  EC00  F00C         	call	___lwdiv	;wreg free
  1188  00010E  503E               	movf	?___lwdiv^0,w,c
  1189  000110  6E29               	movwf	_set_t_dq1_dwn^0,c
  1190                           
  1191                           ;main.c: 70: set_t_dq2 = (uint16_t) ((uint32_t) read_eep_16(23)*625 / 100);
  1192  000112  0E17               	movlw	23
  1193  000114  ECE3  F00C         	call	_read_eep_16
  1194  000118  EC14  F008         	call	PL6	;call to abstracted procedure
  1195  00011C  ECB5  F00B         	call	___lmul	;wreg free
  1196  000120  EC06  F008         	call	PL2	;call to abstracted procedure
  1197  000124  EC7B  F00A         	call	___lldiv	;wreg free
  1198  000128  C051  F01D         	movff	?___lldiv,_set_t_dq2
  1199  00012C  C052  F01E         	movff	?___lldiv+1,_set_t_dq2+1
  1200                           
  1201                           ;main.c: 71: temp1_fix = read_eep_16(20);
  1202  000130  0E14               	movlw	20
  1203  000132  ECE3  F00C         	call	_read_eep_16
  1204  000136  C040  F01B         	movff	?_read_eep_16,_temp1_fix
  1205  00013A  C041  F01C         	movff	?_read_eep_16+1,_temp1_fix+1
  1206                           
  1207                           ;main.c: 72: en_snd_k = read_eep(53);
  1208  00013E  6A3F               	clrf	(read_eep@address+1)^0,c
  1209  000140  0E35               	movlw	53
  1210  000142  6E3E               	movwf	read_eep@address^0,c
  1211  000144  ECB2  F00D         	call	_read_eep	;wreg free
  1212  000148  6E67               	movwf	??_main^0,c
  1213  00014A  3067               	rrcf	??_main^0,w,c
  1214  00014C  E302               	bnc	u2390
  1215  00014E  8271               	bsf	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  1216  000150  D001               	goto	u2405
  1217  000152                     u2390:
  1218  000152  9271               	bcf	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  1219  000154                     u2405:
  1220                           
  1221                           ;main.c: 73: en_snd_b = read_eep(54);
  1222  000154  6A3F               	clrf	(read_eep@address+1)^0,c
  1223  000156  0E36               	movlw	54
  1224  000158  6E3E               	movwf	read_eep@address^0,c
  1225  00015A  ECB2  F00D         	call	_read_eep	;wreg free
  1226  00015E  6E67               	movwf	??_main^0,c
  1227  000160  3067               	rrcf	??_main^0,w,c
  1228  000162  E302               	bnc	u2410
  1229  000164  8071               	bsf	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  1230  000166  D001               	goto	u2425
  1231  000168                     u2410:
  1232  000168  9071               	bcf	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  1233  00016A                     u2425:
  1234                           
  1235                           ;main.c: 75: if (!(en_snd_k) && !(en_snd_b)) {
  1236  00016A  A271               	btfss	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  1237  00016C  B071               	btfsc	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  1238  00016E  D002               	goto	l200
  1239                           
  1240                           ;main.c: 76: sound_yes = 0;
  1241  000170  9471               	bcf	(_sound_yes/(0+8))^0,_sound_yes& (0+7),c
  1242                           
  1243                           ;main.c: 77: } else
  1244  000172  D001               	goto	l201
  1245  000174                     l200:
  1246                           
  1247                           ;main.c: 78: sound_yes = 1;
  1248  000174  8471               	bsf	(_sound_yes/(0+8))^0,_sound_yes& (0+7),c
  1249  000176                     l201:
  1250                           
  1251                           ;main.c: 88: if (read_key) {
  1252                           
  1253                           ;main.c: 85: while (1) {
  1254  000176  A671               	btfss	(_read_key/(0+8))^0,_read_key& (0+7),c
  1255  000178  D003               	goto	l3526
  1256                           
  1257                           ;main.c: 89: key_press();
  1258  00017A  EC88  F00B         	call	_key_press	;wreg free
  1259                           
  1260                           ;main.c: 90: read_key = 0;
  1261  00017E  9671               	bcf	(_read_key/(0+8))^0,_read_key& (0+7),c
  1262  000180                     l3526:
  1263                           
  1264                           ;main.c: 91: };main.c: 92: pressed_key = key_GetKey();
  1265  000180  ECC1  F00D         	call	_key_GetKey	;wreg free
  1266  000184  6E2D               	movwf	_pressed_key^0,c
  1267                           
  1268                           ;main.c: 94: switch (select) {
  1269  000186  EFE7  F006         	goto	l3972
  1270  00018A                     l3528:
  1271                           
  1272                           ;main.c: 96: if (ds18b20_readTemp(&time_flag, &timer_val)) {
  1273  00018A  0E39               	movlw	low _time_flag
  1274  00018C  6E45               	movwf	ds18b20_readTemp@time_flag^0,c
  1275  00018E  0E3A               	movlw	low _timer_val
  1276  000190  6E46               	movwf	ds18b20_readTemp@timer_val^0,c
  1277  000192  ECA5  F008         	call	_ds18b20_readTemp	;wreg free
  1278  000196  0900               	iorlw	0
  1279  000198  E012               	bz	l3532
  1280                           
  1281                           ;main.c: 99: temperature_1 = ds18b20_get_temp(1, &minus_1);
  1282  00019A  0E70               	movlw	low _minus_1
  1283  00019C  6E5E               	movwf	ds18b20_get_temp@minus^0,c
  1284  00019E  0E01               	movlw	1
  1285  0001A0  ECB8  F009         	call	_ds18b20_get_temp
  1286  0001A4  C05E  F06B         	movff	?_ds18b20_get_temp,_temperature_1
  1287  0001A8  C05F  F06C         	movff	?_ds18b20_get_temp+1,_temperature_1+1
  1288                           
  1289                           ;main.c: 100: temperature_2 = ds18b20_get_temp(2, &minus_2);
  1290  0001AC  0E6F               	movlw	low _minus_2
  1291  0001AE  6E5E               	movwf	ds18b20_get_temp@minus^0,c
  1292  0001B0  0E02               	movlw	2
  1293  0001B2  ECB8  F009         	call	_ds18b20_get_temp
  1294  0001B6  C05E  F069         	movff	?_ds18b20_get_temp,_temperature_2
  1295  0001BA  C05F  F06A         	movff	?_ds18b20_get_temp+1,_temperature_2+1
  1296  0001BE                     l3532:
  1297                           
  1298                           ;main.c: 105: };main.c: 138: lcd_gotoxy(1, 1);
  1299  0001BE  0E01               	movlw	1
  1300  0001C0  6E42               	movwf	lcd_gotoxy@y^0,c
  1301  0001C2  EC74  F00D         	call	_lcd_gotoxy
  1302                           
  1303                           ;main.c: 140: lcd_putc(4);
  1304  0001C6  0E04               	movlw	4
  1305  0001C8  ECBB  F00D         	call	_lcd_putc
  1306                           
  1307                           ;main.c: 141: lcd_putc(':');
  1308  0001CC  0E3A               	movlw	58
  1309  0001CE  ECBB  F00D         	call	_lcd_putc
  1310                           
  1311                           ;main.c: 143: if (!(temperature_1== 32767)) {
  1312  0001D2  286B               	incf	_temperature_1^0,w,c
  1313  0001D4  E104               	bnz	u2470
  1314  0001D6  0E7F               	movlw	127
  1315  0001D8  186C               	xorwf	(_temperature_1+1)^0,w,c
  1316  0001DA  E101 D0D4          	bz	l3550
  1317  0001DE                     u2470:
  1318                           
  1319                           ;main.c: 144: if (((temperature_1 / 10000) % 10) == 0) {
  1320  0001DE  EC58  F007         	call	PL34	;call to abstracted procedure
  1321  0001E2  EC13  F007         	call	PL10	;call to abstracted procedure
  1322  0001E6  EC00  F00C         	call	___lwdiv	;wreg free
  1323  0001EA  EC04  F007         	call	PL4	;call to abstracted procedure
  1324  0001EE  EC25  F00C         	call	___lwmod	;wreg free
  1325  0001F2  5045               	movf	?___lwmod^0,w,c
  1326  0001F4  1046               	iorwf	(?___lwmod+1)^0,w,c
  1327  0001F6  E17E               	bnz	l3548
  1328                           
  1329                           ;main.c: 145: if (((temperature_1 / 1000) % 10) == 0) {
  1330  0001F8  EC43  F007         	call	PL24	;call to abstracted procedure
  1331  0001FC  EC13  F007         	call	PL10	;call to abstracted procedure
  1332  000200  EC00  F00C         	call	___lwdiv	;wreg free
  1333  000204  EC04  F007         	call	PL4	;call to abstracted procedure
  1334  000208  EC25  F00C         	call	___lwmod	;wreg free
  1335  00020C  5045               	movf	?___lwmod^0,w,c
  1336  00020E  1046               	iorwf	(?___lwmod+1)^0,w,c
  1337  000210  E133               	bnz	l3546
  1338                           
  1339                           ;main.c: 146: lcd_putc(((temperature_1 / 100) % 10) + 48);
  1340  000212  6A41               	clrf	(___lwdiv@divisor+1)^0,c
  1341  000214  0E64               	movlw	100
  1342  000216  EC13  F007         	call	PL10	;call to abstracted procedure
  1343  00021A  EC00  F00C         	call	___lwdiv	;wreg free
  1344  00021E  EC04  F007         	call	PL4	;call to abstracted procedure
  1345  000222  EC25  F00C         	call	___lwmod	;wreg free
  1346  000226  5045               	movf	?___lwmod^0,w,c
  1347  000228  0F30               	addlw	48
  1348  00022A  ECBB  F00D         	call	_lcd_putc
  1349                           
  1350                           ;main.c: 147: lcd_putc('.');
  1351  00022E  0E2E               	movlw	46
  1352  000230  ECBB  F00D         	call	_lcd_putc
  1353                           
  1354                           ;main.c: 148: lcd_putc(((temperature_1 / 10) % 10) + 48);
  1355  000234  6A41               	clrf	(___lwdiv@divisor+1)^0,c
  1356  000236  0E0A               	movlw	10
  1357  000238  EC13  F007         	call	PL10	;call to abstracted procedure
  1358  00023C  EC00  F00C         	call	___lwdiv	;wreg free
  1359  000240  EC04  F007         	call	PL4	;call to abstracted procedure
  1360  000244  EC25  F00C         	call	___lwmod	;wreg free
  1361  000248  5045               	movf	?___lwmod^0,w,c
  1362  00024A  0F30               	addlw	48
  1363  00024C  ECBB  F00D         	call	_lcd_putc
  1364                           
  1365                           ;main.c: 149: lcd_putc(((temperature_1 % 10) + 48));
  1366  000250  EC46  F007         	call	PL28	;call to abstracted procedure
  1367  000254  EC3A  F007         	call	PL20	;call to abstracted procedure
  1368  000258  EC25  F00C         	call	___lwmod	;wreg free
  1369  00025C  5045               	movf	?___lwmod^0,w,c
  1370  00025E  0F30               	addlw	48
  1371  000260  ECBB  F00D         	call	_lcd_putc
  1372                           
  1373                           ;main.c: 150: lcd_putc(0x01);
  1374  000264  0E01               	movlw	1
  1375  000266  ECBB  F00D         	call	_lcd_putc
  1376                           
  1377                           ;main.c: 152: lcd_putc(' ');
  1378  00026A  0E20               	movlw	32
  1379  00026C  ECBB  F00D         	call	_lcd_putc
  1380                           
  1381                           ;main.c: 153: lcd_putc(' ');
  1382  000270  0E20               	movlw	32
  1383  000272  ECBB  F00D         	call	_lcd_putc
  1384                           
  1385                           ;main.c: 155: } else {
  1386  000276  D09C               	goto	l212
  1387  000278                     l3546:
  1388                           
  1389                           ;main.c: 156: lcd_putc(((temperature_1 / 1000) % 10) + 48);
  1390  000278  EC43  F007         	call	PL24	;call to abstracted procedure
  1391  00027C  EC13  F007         	call	PL10	;call to abstracted procedure
  1392  000280  EC00  F00C         	call	___lwdiv	;wreg free
  1393  000284  EC04  F007         	call	PL4	;call to abstracted procedure
  1394  000288  EC25  F00C         	call	___lwmod	;wreg free
  1395  00028C  5045               	movf	?___lwmod^0,w,c
  1396  00028E  0F30               	addlw	48
  1397  000290  ECBB  F00D         	call	_lcd_putc
  1398                           
  1399                           ;main.c: 157: lcd_putc(((temperature_1 / 100) % 10) + 48);
  1400  000294  6A41               	clrf	(___lwdiv@divisor+1)^0,c
  1401  000296  0E64               	movlw	100
  1402  000298  EC13  F007         	call	PL10	;call to abstracted procedure
  1403  00029C  EC00  F00C         	call	___lwdiv	;wreg free
  1404  0002A0  EC04  F007         	call	PL4	;call to abstracted procedure
  1405  0002A4  EC25  F00C         	call	___lwmod	;wreg free
  1406  0002A8  5045               	movf	?___lwmod^0,w,c
  1407  0002AA  0F30               	addlw	48
  1408  0002AC  ECBB  F00D         	call	_lcd_putc
  1409                           
  1410                           ;main.c: 158: lcd_putc('.');
  1411  0002B0  0E2E               	movlw	46
  1412  0002B2  ECBB  F00D         	call	_lcd_putc
  1413                           
  1414                           ;main.c: 159: lcd_putc(((temperature_1 / 10) % 10) + 48);
  1415  0002B6  6A41               	clrf	(___lwdiv@divisor+1)^0,c
  1416  0002B8  0E0A               	movlw	10
  1417  0002BA  EC13  F007         	call	PL10	;call to abstracted procedure
  1418  0002BE  EC00  F00C         	call	___lwdiv	;wreg free
  1419  0002C2  EC04  F007         	call	PL4	;call to abstracted procedure
  1420  0002C6  EC25  F00C         	call	___lwmod	;wreg free
  1421  0002CA  5045               	movf	?___lwmod^0,w,c
  1422  0002CC  0F30               	addlw	48
  1423  0002CE  ECBB  F00D         	call	_lcd_putc
  1424                           
  1425                           ;main.c: 160: lcd_putc(((temperature_1 % 10) + 48));
  1426  0002D2  EC46  F007         	call	PL28	;call to abstracted procedure
  1427  0002D6  EC3A  F007         	call	PL20	;call to abstracted procedure
  1428  0002DA  EC25  F00C         	call	___lwmod	;wreg free
  1429  0002DE  5045               	movf	?___lwmod^0,w,c
  1430  0002E0  0F30               	addlw	48
  1431  0002E2  ECBB  F00D         	call	_lcd_putc
  1432                           
  1433                           ;main.c: 161: lcd_putc(0x01);
  1434  0002E6  0E01               	movlw	1
  1435  0002E8  ECBB  F00D         	call	_lcd_putc
  1436                           
  1437                           ;main.c: 162: lcd_putc(' ');
  1438  0002EC  0E20               	movlw	32
  1439  0002EE  ECBB  F00D         	call	_lcd_putc
  1440  0002F2  D05E               	goto	l212
  1441  0002F4                     l3548:
  1442                           
  1443                           ;main.c: 165: lcd_putc(((temperature_1 / 10000) % 10) + 48);
  1444  0002F4  EC58  F007         	call	PL34	;call to abstracted procedure
  1445  0002F8  EC13  F007         	call	PL10	;call to abstracted procedure
  1446  0002FC  EC00  F00C         	call	___lwdiv	;wreg free
  1447  000300  EC04  F007         	call	PL4	;call to abstracted procedure
  1448  000304  EC25  F00C         	call	___lwmod	;wreg free
  1449  000308  5045               	movf	?___lwmod^0,w,c
  1450  00030A  0F30               	addlw	48
  1451  00030C  ECBB  F00D         	call	_lcd_putc
  1452                           
  1453                           ;main.c: 166: lcd_putc(((temperature_1 / 1000) % 10) + 48);
  1454  000310  EC43  F007         	call	PL24	;call to abstracted procedure
  1455  000314  EC13  F007         	call	PL10	;call to abstracted procedure
  1456  000318  EC00  F00C         	call	___lwdiv	;wreg free
  1457  00031C  EC04  F007         	call	PL4	;call to abstracted procedure
  1458  000320  EC25  F00C         	call	___lwmod	;wreg free
  1459  000324  5045               	movf	?___lwmod^0,w,c
  1460  000326  0F30               	addlw	48
  1461  000328  ECBB  F00D         	call	_lcd_putc
  1462                           
  1463                           ;main.c: 167: lcd_putc(((temperature_1 / 100) % 10) + 48);
  1464  00032C  6A41               	clrf	(___lwdiv@divisor+1)^0,c
  1465  00032E  0E64               	movlw	100
  1466  000330  EC13  F007         	call	PL10	;call to abstracted procedure
  1467  000334  EC00  F00C         	call	___lwdiv	;wreg free
  1468  000338  EC04  F007         	call	PL4	;call to abstracted procedure
  1469  00033C  EC25  F00C         	call	___lwmod	;wreg free
  1470  000340  5045               	movf	?___lwmod^0,w,c
  1471  000342  0F30               	addlw	48
  1472  000344  ECBB  F00D         	call	_lcd_putc
  1473                           
  1474                           ;main.c: 168: lcd_putc('.');
  1475  000348  0E2E               	movlw	46
  1476  00034A  ECBB  F00D         	call	_lcd_putc
  1477                           
  1478                           ;main.c: 169: lcd_putc(((temperature_1 / 10) % 10) + 48);
  1479  00034E  6A41               	clrf	(___lwdiv@divisor+1)^0,c
  1480  000350  0E0A               	movlw	10
  1481  000352  EC13  F007         	call	PL10	;call to abstracted procedure
  1482  000356  EC00  F00C         	call	___lwdiv	;wreg free
  1483  00035A  EC04  F007         	call	PL4	;call to abstracted procedure
  1484  00035E  EC25  F00C         	call	___lwmod	;wreg free
  1485  000362  5045               	movf	?___lwmod^0,w,c
  1486  000364  0F30               	addlw	48
  1487  000366  ECBB  F00D         	call	_lcd_putc
  1488                           
  1489                           ;main.c: 170: lcd_putc(((temperature_1 % 10) + 48));
  1490  00036A  EC46  F007         	call	PL28	;call to abstracted procedure
  1491  00036E  EC3A  F007         	call	PL20	;call to abstracted procedure
  1492  000372  EC25  F00C         	call	___lwmod	;wreg free
  1493  000376  5045               	movf	?___lwmod^0,w,c
  1494  000378  0F30               	addlw	48
  1495  00037A  ECBB  F00D         	call	_lcd_putc
  1496                           
  1497                           ;main.c: 171: lcd_putc(0x01);
  1498  00037E  0E01               	movlw	1
  1499  000380  ECBB  F00D         	call	_lcd_putc
  1500  000384  D015               	goto	l212
  1501  000386                     l3550:
  1502                           
  1503                           ;main.c: 175: lcd_putc('-');
  1504  000386  0E2D               	movlw	45
  1505  000388  ECBB  F00D         	call	_lcd_putc
  1506                           
  1507                           ;main.c: 176: lcd_putc('-');
  1508  00038C  0E2D               	movlw	45
  1509  00038E  ECBB  F00D         	call	_lcd_putc
  1510                           
  1511                           ;main.c: 177: lcd_putc('-');
  1512  000392  0E2D               	movlw	45
  1513  000394  ECBB  F00D         	call	_lcd_putc
  1514                           
  1515                           ;main.c: 178: lcd_putc(' ');
  1516  000398  0E20               	movlw	32
  1517  00039A  ECBB  F00D         	call	_lcd_putc
  1518                           
  1519                           ;main.c: 179: lcd_putc(' ');
  1520  00039E  0E20               	movlw	32
  1521  0003A0  ECBB  F00D         	call	_lcd_putc
  1522                           
  1523                           ;main.c: 180: lcd_putc(' ');
  1524  0003A4  0E20               	movlw	32
  1525  0003A6  ECBB  F00D         	call	_lcd_putc
  1526                           
  1527                           ;main.c: 181: lcd_putc(' ');
  1528  0003AA  0E20               	movlw	32
  1529  0003AC  ECBB  F00D         	call	_lcd_putc
  1530  0003B0                     l212:
  1531                           
  1532                           ;main.c: 182: };main.c: 188: lcd_gotoxy(11, 1);
  1533  0003B0  0E01               	movlw	1
  1534  0003B2  6E42               	movwf	lcd_gotoxy@y^0,c
  1535  0003B4  0E0B               	movlw	11
  1536  0003B6  EC74  F00D         	call	_lcd_gotoxy
  1537                           
  1538                           ;main.c: 191: lcd_putc(((temp1_fix / 1000) % 10) + 48);
  1539  0003BA  EC43  F007         	call	PL24	;call to abstracted procedure
  1540  0003BE  EC61  F007         	call	PL38	;call to abstracted procedure
  1541  0003C2  EC00  F00C         	call	___lwdiv	;wreg free
  1542  0003C6  EC04  F007         	call	PL4	;call to abstracted procedure
  1543  0003CA  EC25  F00C         	call	___lwmod	;wreg free
  1544  0003CE  5045               	movf	?___lwmod^0,w,c
  1545  0003D0  0F30               	addlw	48
  1546  0003D2  ECBB  F00D         	call	_lcd_putc
  1547                           
  1548                           ;main.c: 192: lcd_putc(((temp1_fix / 100) % 10) + 48);
  1549  0003D6  6A41               	clrf	(___lwdiv@divisor+1)^0,c
  1550  0003D8  0E64               	movlw	100
  1551  0003DA  EC61  F007         	call	PL38	;call to abstracted procedure
  1552  0003DE  EC00  F00C         	call	___lwdiv	;wreg free
  1553  0003E2  EC04  F007         	call	PL4	;call to abstracted procedure
  1554  0003E6  EC25  F00C         	call	___lwmod	;wreg free
  1555  0003EA  5045               	movf	?___lwmod^0,w,c
  1556  0003EC  0F30               	addlw	48
  1557  0003EE  ECBB  F00D         	call	_lcd_putc
  1558                           
  1559                           ;main.c: 193: lcd_putc('.');
  1560  0003F2  0E2E               	movlw	46
  1561  0003F4  ECBB  F00D         	call	_lcd_putc
  1562                           
  1563                           ;main.c: 194: lcd_putc(((temp1_fix / 10) % 10) + 48);
  1564  0003F8  6A41               	clrf	(___lwdiv@divisor+1)^0,c
  1565  0003FA  0E0A               	movlw	10
  1566  0003FC  EC61  F007         	call	PL38	;call to abstracted procedure
  1567  000400  EC00  F00C         	call	___lwdiv	;wreg free
  1568  000404  EC04  F007         	call	PL4	;call to abstracted procedure
  1569  000408  EC25  F00C         	call	___lwmod	;wreg free
  1570  00040C  5045               	movf	?___lwmod^0,w,c
  1571  00040E  0F30               	addlw	48
  1572  000410  ECBB  F00D         	call	_lcd_putc
  1573                           
  1574                           ;main.c: 195: lcd_putc(((temp1_fix % 10) + 48));
  1575  000414  C01B  F045         	movff	_temp1_fix,___lwmod@dividend
  1576  000418  C01C  F046         	movff	_temp1_fix+1,___lwmod@dividend+1
  1577  00041C  EC3A  F007         	call	PL20	;call to abstracted procedure
  1578  000420  EC25  F00C         	call	___lwmod	;wreg free
  1579  000424  5045               	movf	?___lwmod^0,w,c
  1580  000426  0F30               	addlw	48
  1581  000428  ECBB  F00D         	call	_lcd_putc
  1582                           
  1583                           ;main.c: 196: (en_snd_k) ? lcd_putc(2) : lcd_putc(1);
  1584  00042C  A271               	btfss	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  1585  00042E  D004               	goto	l3556
  1586  000430  0E02               	movlw	2
  1587  000432  ECBB  F00D         	call	_lcd_putc
  1588  000436  D003               	goto	l216
  1589  000438                     l3556:
  1590  000438  0E01               	movlw	1
  1591  00043A  ECBB  F00D         	call	_lcd_putc
  1592  00043E                     l216:
  1593                           
  1594                           ;main.c: 198: lcd_gotoxy(1, 2);
  1595  00043E  EC67  F007         	call	PL40	;call to abstracted procedure
  1596  000442  EC74  F00D         	call	_lcd_gotoxy
  1597                           
  1598                           ;main.c: 200: lcd_putc(3);
  1599  000446  0E03               	movlw	3
  1600  000448  ECBB  F00D         	call	_lcd_putc
  1601                           
  1602                           ;main.c: 201: lcd_putc(':');
  1603  00044C  0E3A               	movlw	58
  1604  00044E  ECBB  F00D         	call	_lcd_putc
  1605                           
  1606                           ;main.c: 203: if (!(temperature_2 == 32767)) {
  1607  000452  2869               	incf	_temperature_2^0,w,c
  1608  000454  E104               	bnz	u2510
  1609  000456  0E7F               	movlw	127
  1610  000458  186A               	xorwf	(_temperature_2+1)^0,w,c
  1611  00045A  E101 D0D4          	bz	l3570
  1612  00045E                     u2510:
  1613                           
  1614                           ;main.c: 204: if (((temperature_2 / 10000) % 10) == 0) {
  1615  00045E  EC58  F007         	call	PL34	;call to abstracted procedure
  1616  000462  EC19  F007         	call	PL12	;call to abstracted procedure
  1617  000466  EC00  F00C         	call	___lwdiv	;wreg free
  1618  00046A  EC04  F007         	call	PL4	;call to abstracted procedure
  1619  00046E  EC25  F00C         	call	___lwmod	;wreg free
  1620  000472  5045               	movf	?___lwmod^0,w,c
  1621  000474  1046               	iorwf	(?___lwmod+1)^0,w,c
  1622  000476  E17E               	bnz	l3568
  1623                           
  1624                           ;main.c: 205: if (((temperature_2 / 1000) % 10) == 0) {
  1625  000478  EC43  F007         	call	PL24	;call to abstracted procedure
  1626  00047C  EC19  F007         	call	PL12	;call to abstracted procedure
  1627  000480  EC00  F00C         	call	___lwdiv	;wreg free
  1628  000484  EC04  F007         	call	PL4	;call to abstracted procedure
  1629  000488  EC25  F00C         	call	___lwmod	;wreg free
  1630  00048C  5045               	movf	?___lwmod^0,w,c
  1631  00048E  1046               	iorwf	(?___lwmod+1)^0,w,c
  1632  000490  E133               	bnz	l3566
  1633                           
  1634                           ;main.c: 206: lcd_putc(((temperature_2 / 100) % 10) + 48);
  1635  000492  6A41               	clrf	(___lwdiv@divisor+1)^0,c
  1636  000494  0E64               	movlw	100
  1637  000496  EC19  F007         	call	PL12	;call to abstracted procedure
  1638  00049A  EC00  F00C         	call	___lwdiv	;wreg free
  1639  00049E  EC04  F007         	call	PL4	;call to abstracted procedure
  1640  0004A2  EC25  F00C         	call	___lwmod	;wreg free
  1641  0004A6  5045               	movf	?___lwmod^0,w,c
  1642  0004A8  0F30               	addlw	48
  1643  0004AA  ECBB  F00D         	call	_lcd_putc
  1644                           
  1645                           ;main.c: 207: lcd_putc('.');
  1646  0004AE  0E2E               	movlw	46
  1647  0004B0  ECBB  F00D         	call	_lcd_putc
  1648                           
  1649                           ;main.c: 208: lcd_putc(((temperature_2 / 10) % 10) + 48);
  1650  0004B4  6A41               	clrf	(___lwdiv@divisor+1)^0,c
  1651  0004B6  0E0A               	movlw	10
  1652  0004B8  EC19  F007         	call	PL12	;call to abstracted procedure
  1653  0004BC  EC00  F00C         	call	___lwdiv	;wreg free
  1654  0004C0  EC04  F007         	call	PL4	;call to abstracted procedure
  1655  0004C4  EC25  F00C         	call	___lwmod	;wreg free
  1656  0004C8  5045               	movf	?___lwmod^0,w,c
  1657  0004CA  0F30               	addlw	48
  1658  0004CC  ECBB  F00D         	call	_lcd_putc
  1659                           
  1660                           ;main.c: 209: lcd_putc(((temperature_2 % 10) + 48));
  1661  0004D0  EC4B  F007         	call	PL30	;call to abstracted procedure
  1662  0004D4  EC3A  F007         	call	PL20	;call to abstracted procedure
  1663  0004D8  EC25  F00C         	call	___lwmod	;wreg free
  1664  0004DC  5045               	movf	?___lwmod^0,w,c
  1665  0004DE  0F30               	addlw	48
  1666  0004E0  ECBB  F00D         	call	_lcd_putc
  1667                           
  1668                           ;main.c: 210: lcd_putc(0x01);
  1669  0004E4  0E01               	movlw	1
  1670  0004E6  ECBB  F00D         	call	_lcd_putc
  1671                           
  1672                           ;main.c: 212: lcd_putc(' ');
  1673  0004EA  0E20               	movlw	32
  1674  0004EC  ECBB  F00D         	call	_lcd_putc
  1675                           
  1676                           ;main.c: 213: lcd_putc(' ');
  1677  0004F0  0E20               	movlw	32
  1678  0004F2  ECBB  F00D         	call	_lcd_putc
  1679                           
  1680                           ;main.c: 215: } else {
  1681  0004F6  D09C               	goto	l222
  1682  0004F8                     l3566:
  1683                           
  1684                           ;main.c: 216: lcd_putc(((temperature_2 / 1000) % 10) + 48);
  1685  0004F8  EC43  F007         	call	PL24	;call to abstracted procedure
  1686  0004FC  EC19  F007         	call	PL12	;call to abstracted procedure
  1687  000500  EC00  F00C         	call	___lwdiv	;wreg free
  1688  000504  EC04  F007         	call	PL4	;call to abstracted procedure
  1689  000508  EC25  F00C         	call	___lwmod	;wreg free
  1690  00050C  5045               	movf	?___lwmod^0,w,c
  1691  00050E  0F30               	addlw	48
  1692  000510  ECBB  F00D         	call	_lcd_putc
  1693                           
  1694                           ;main.c: 217: lcd_putc(((temperature_2 / 100) % 10) + 48);
  1695  000514  6A41               	clrf	(___lwdiv@divisor+1)^0,c
  1696  000516  0E64               	movlw	100
  1697  000518  EC19  F007         	call	PL12	;call to abstracted procedure
  1698  00051C  EC00  F00C         	call	___lwdiv	;wreg free
  1699  000520  EC04  F007         	call	PL4	;call to abstracted procedure
  1700  000524  EC25  F00C         	call	___lwmod	;wreg free
  1701  000528  5045               	movf	?___lwmod^0,w,c
  1702  00052A  0F30               	addlw	48
  1703  00052C  ECBB  F00D         	call	_lcd_putc
  1704                           
  1705                           ;main.c: 218: lcd_putc('.');
  1706  000530  0E2E               	movlw	46
  1707  000532  ECBB  F00D         	call	_lcd_putc
  1708                           
  1709                           ;main.c: 219: lcd_putc(((temperature_2 / 10) % 10) + 48);
  1710  000536  6A41               	clrf	(___lwdiv@divisor+1)^0,c
  1711  000538  0E0A               	movlw	10
  1712  00053A  EC19  F007         	call	PL12	;call to abstracted procedure
  1713  00053E  EC00  F00C         	call	___lwdiv	;wreg free
  1714  000542  EC04  F007         	call	PL4	;call to abstracted procedure
  1715  000546  EC25  F00C         	call	___lwmod	;wreg free
  1716  00054A  5045               	movf	?___lwmod^0,w,c
  1717  00054C  0F30               	addlw	48
  1718  00054E  ECBB  F00D         	call	_lcd_putc
  1719                           
  1720                           ;main.c: 220: lcd_putc(((temperature_2 % 10) + 48));
  1721  000552  EC4B  F007         	call	PL30	;call to abstracted procedure
  1722  000556  EC3A  F007         	call	PL20	;call to abstracted procedure
  1723  00055A  EC25  F00C         	call	___lwmod	;wreg free
  1724  00055E  5045               	movf	?___lwmod^0,w,c
  1725  000560  0F30               	addlw	48
  1726  000562  ECBB  F00D         	call	_lcd_putc
  1727                           
  1728                           ;main.c: 221: lcd_putc(0x01);
  1729  000566  0E01               	movlw	1
  1730  000568  ECBB  F00D         	call	_lcd_putc
  1731                           
  1732                           ;main.c: 222: lcd_putc(' ');
  1733  00056C  0E20               	movlw	32
  1734  00056E  ECBB  F00D         	call	_lcd_putc
  1735  000572  D05E               	goto	l222
  1736  000574                     l3568:
  1737                           
  1738                           ;main.c: 225: lcd_putc(((temperature_2 / 10000) % 10) + 48);
  1739  000574  EC58  F007         	call	PL34	;call to abstracted procedure
  1740  000578  EC19  F007         	call	PL12	;call to abstracted procedure
  1741  00057C  EC00  F00C         	call	___lwdiv	;wreg free
  1742  000580  EC04  F007         	call	PL4	;call to abstracted procedure
  1743  000584  EC25  F00C         	call	___lwmod	;wreg free
  1744  000588  5045               	movf	?___lwmod^0,w,c
  1745  00058A  0F30               	addlw	48
  1746  00058C  ECBB  F00D         	call	_lcd_putc
  1747                           
  1748                           ;main.c: 226: lcd_putc(((temperature_2 / 1000) % 10) + 48);
  1749  000590  EC43  F007         	call	PL24	;call to abstracted procedure
  1750  000594  EC19  F007         	call	PL12	;call to abstracted procedure
  1751  000598  EC00  F00C         	call	___lwdiv	;wreg free
  1752  00059C  EC04  F007         	call	PL4	;call to abstracted procedure
  1753  0005A0  EC25  F00C         	call	___lwmod	;wreg free
  1754  0005A4  5045               	movf	?___lwmod^0,w,c
  1755  0005A6  0F30               	addlw	48
  1756  0005A8  ECBB  F00D         	call	_lcd_putc
  1757                           
  1758                           ;main.c: 227: lcd_putc(((temperature_2 / 100) % 10) + 48);
  1759  0005AC  6A41               	clrf	(___lwdiv@divisor+1)^0,c
  1760  0005AE  0E64               	movlw	100
  1761  0005B0  EC19  F007         	call	PL12	;call to abstracted procedure
  1762  0005B4  EC00  F00C         	call	___lwdiv	;wreg free
  1763  0005B8  EC04  F007         	call	PL4	;call to abstracted procedure
  1764  0005BC  EC25  F00C         	call	___lwmod	;wreg free
  1765  0005C0  5045               	movf	?___lwmod^0,w,c
  1766  0005C2  0F30               	addlw	48
  1767  0005C4  ECBB  F00D         	call	_lcd_putc
  1768                           
  1769                           ;main.c: 228: lcd_putc('.');
  1770  0005C8  0E2E               	movlw	46
  1771  0005CA  ECBB  F00D         	call	_lcd_putc
  1772                           
  1773                           ;main.c: 229: lcd_putc(((temperature_2 / 10) % 10) + 48);
  1774  0005CE  6A41               	clrf	(___lwdiv@divisor+1)^0,c
  1775  0005D0  0E0A               	movlw	10
  1776  0005D2  EC19  F007         	call	PL12	;call to abstracted procedure
  1777  0005D6  EC00  F00C         	call	___lwdiv	;wreg free
  1778  0005DA  EC04  F007         	call	PL4	;call to abstracted procedure
  1779  0005DE  EC25  F00C         	call	___lwmod	;wreg free
  1780  0005E2  5045               	movf	?___lwmod^0,w,c
  1781  0005E4  0F30               	addlw	48
  1782  0005E6  ECBB  F00D         	call	_lcd_putc
  1783                           
  1784                           ;main.c: 230: lcd_putc(((temperature_2 % 10) + 48));
  1785  0005EA  EC4B  F007         	call	PL30	;call to abstracted procedure
  1786  0005EE  EC3A  F007         	call	PL20	;call to abstracted procedure
  1787  0005F2  EC25  F00C         	call	___lwmod	;wreg free
  1788  0005F6  5045               	movf	?___lwmod^0,w,c
  1789  0005F8  0F30               	addlw	48
  1790  0005FA  ECBB  F00D         	call	_lcd_putc
  1791                           
  1792                           ;main.c: 231: lcd_putc(0x01);
  1793  0005FE  0E01               	movlw	1
  1794  000600  ECBB  F00D         	call	_lcd_putc
  1795  000604  D015               	goto	l222
  1796  000606                     l3570:
  1797                           
  1798                           ;main.c: 235: lcd_putc('-');
  1799  000606  0E2D               	movlw	45
  1800  000608  ECBB  F00D         	call	_lcd_putc
  1801                           
  1802                           ;main.c: 236: lcd_putc('-');
  1803  00060C  0E2D               	movlw	45
  1804  00060E  ECBB  F00D         	call	_lcd_putc
  1805                           
  1806                           ;main.c: 237: lcd_putc('-');
  1807  000612  0E2D               	movlw	45
  1808  000614  ECBB  F00D         	call	_lcd_putc
  1809                           
  1810                           ;main.c: 238: lcd_putc(' ');
  1811  000618  0E20               	movlw	32
  1812  00061A  ECBB  F00D         	call	_lcd_putc
  1813                           
  1814                           ;main.c: 239: lcd_putc(' ');
  1815  00061E  0E20               	movlw	32
  1816  000620  ECBB  F00D         	call	_lcd_putc
  1817                           
  1818                           ;main.c: 240: lcd_putc(' ');
  1819  000624  0E20               	movlw	32
  1820  000626  ECBB  F00D         	call	_lcd_putc
  1821                           
  1822                           ;main.c: 241: lcd_putc(' ');
  1823  00062A  0E20               	movlw	32
  1824  00062C  ECBB  F00D         	call	_lcd_putc
  1825  000630                     l222:
  1826                           
  1827                           ;main.c: 242: };main.c: 247: lcd_gotoxy(11, 2);
  1828  000630  EC8C  F007         	call	PL64	;call to abstracted procedure
  1829  000634  EC74  F00D         	call	_lcd_gotoxy
  1830                           
  1831                           ;main.c: 248: lcd_putc(((set_t_dq2 / 1000) % 10) + 48);
  1832  000638  0E03               	movlw	3
  1833  00063A  6E41               	movwf	(___awdiv@divisor+1)^0,c
  1834  00063C  0EE8               	movlw	232
  1835  00063E  EC5B  F007         	call	PL36	;call to abstracted procedure
  1836  000642  EC3F  F00A         	call	___awdiv	;wreg free
  1837  000646  EC50  F007         	call	PL32	;call to abstracted procedure
  1838  00064A  ECF0  F00A         	call	___awmod	;wreg free
  1839  00064E  5046               	movf	?___awmod^0,w,c
  1840  000650  0F30               	addlw	48
  1841  000652  ECBB  F00D         	call	_lcd_putc
  1842                           
  1843                           ;main.c: 249: lcd_putc(((set_t_dq2 / 100) % 10) + 48);
  1844  000656  6A41               	clrf	(___awdiv@divisor+1)^0,c
  1845  000658  0E64               	movlw	100
  1846  00065A  EC5B  F007         	call	PL36	;call to abstracted procedure
  1847  00065E  EC3F  F00A         	call	___awdiv	;wreg free
  1848  000662  EC50  F007         	call	PL32	;call to abstracted procedure
  1849  000666  ECF0  F00A         	call	___awmod	;wreg free
  1850  00066A  5046               	movf	?___awmod^0,w,c
  1851  00066C  0F30               	addlw	48
  1852  00066E  ECBB  F00D         	call	_lcd_putc
  1853                           
  1854                           ;main.c: 250: lcd_putc('.');
  1855  000672  0E2E               	movlw	46
  1856  000674  ECBB  F00D         	call	_lcd_putc
  1857                           
  1858                           ;main.c: 251: lcd_putc(((set_t_dq2 / 10) % 10) + 48);
  1859  000678  6A41               	clrf	(___awdiv@divisor+1)^0,c
  1860  00067A  0E0A               	movlw	10
  1861  00067C  EC5B  F007         	call	PL36	;call to abstracted procedure
  1862  000680  EC3F  F00A         	call	___awdiv	;wreg free
  1863  000684  EC50  F007         	call	PL32	;call to abstracted procedure
  1864  000688  ECF0  F00A         	call	___awmod	;wreg free
  1865  00068C  5046               	movf	?___awmod^0,w,c
  1866  00068E  0F30               	addlw	48
  1867  000690  ECBB  F00D         	call	_lcd_putc
  1868                           
  1869                           ;main.c: 252: lcd_putc(((set_t_dq2 % 10) + 48));
  1870  000694  C01D  F046         	movff	_set_t_dq2,___awmod@dividend
  1871  000698  C01E  F047         	movff	_set_t_dq2+1,___awmod@dividend+1
  1872  00069C  6A49               	clrf	(___awmod@divisor+1)^0,c
  1873  00069E  0E0A               	movlw	10
  1874  0006A0  6E48               	movwf	___awmod@divisor^0,c
  1875  0006A2  ECF0  F00A         	call	___awmod	;wreg free
  1876  0006A6  5046               	movf	?___awmod^0,w,c
  1877  0006A8  0F30               	addlw	48
  1878  0006AA  ECBB  F00D         	call	_lcd_putc
  1879                           
  1880                           ;main.c: 253: (en_snd_b) ? lcd_putc(2) : lcd_putc(1);
  1881  0006AE  A071               	btfss	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  1882  0006B0  D004               	goto	l3576
  1883  0006B2  0E02               	movlw	2
  1884  0006B4  ECBB  F00D         	call	_lcd_putc
  1885  0006B8  D003               	goto	l3578
  1886  0006BA                     l3576:
  1887  0006BA  0E01               	movlw	1
  1888  0006BC  ECBB  F00D         	call	_lcd_putc
  1889  0006C0                     l3578:
  1890                           
  1891                           ;main.c: 260: if (sound_yes) {
  1892  0006C0  A471               	btfss	(_sound_yes/(0+8))^0,_sound_yes& (0+7),c
  1893  0006C2  D030               	goto	l227
  1894                           
  1895                           ;main.c: 261: if (en_snd_k) {
  1896  0006C4  A271               	btfss	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  1897  0006C6  D01F               	goto	l228
  1898                           
  1899                           ;main.c: 262: if (((temperature_1 >= (temp1_fix + set_t_dq1_up)) ||;main.c: 263: (temper
      +                          ature_1 <= (temp1_fix - set_t_dq1_dwn))) &&;main.c: 264: !(temperature_1 == 32767)) {
  1900  0006C8  502A               	movf	_set_t_dq1_up^0,w,c
  1901  0006CA  241B               	addwf	_temp1_fix^0,w,c
  1902  0006CC  6E67               	movwf	??_main^0,c
  1903  0006CE  0E00               	movlw	0
  1904  0006D0  201C               	addwfc	(_temp1_fix+1)^0,w,c
  1905  0006D2  6E68               	movwf	(??_main+1)^0,c
  1906  0006D4  5067               	movf	??_main^0,w,c
  1907  0006D6  5C6B               	subwf	_temperature_1^0,w,c
  1908  0006D8  5068               	movf	(??_main+1)^0,w,c
  1909  0006DA  586C               	subwfb	(_temperature_1+1)^0,w,c
  1910  0006DC  E20B               	bc	u2580
  1911  0006DE  5029               	movf	_set_t_dq1_dwn^0,w,c
  1912  0006E0  5C1B               	subwf	_temp1_fix^0,w,c
  1913  0006E2  6E67               	movwf	??_main^0,c
  1914  0006E4  0E00               	movlw	0
  1915  0006E6  581C               	subwfb	(_temp1_fix+1)^0,w,c
  1916  0006E8  6E68               	movwf	(??_main+1)^0,c
  1917  0006EA  506B               	movf	_temperature_1^0,w,c
  1918  0006EC  5C67               	subwf	??_main^0,w,c
  1919  0006EE  506C               	movf	(_temperature_1+1)^0,w,c
  1920  0006F0  5868               	subwfb	(??_main+1)^0,w,c
  1921  0006F2  E308               	bnc	l229
  1922  0006F4                     u2580:
  1923  0006F4  286B               	incf	_temperature_1^0,w,c
  1924  0006F6  E103               	bnz	u2590
  1925  0006F8  0E7F               	movlw	127
  1926  0006FA  186C               	xorwf	(_temperature_1+1)^0,w,c
  1927  0006FC  E003               	bz	l229
  1928  0006FE                     u2590:
  1929                           
  1930                           ;main.c: 266: en_sound = 1;
  1931  0006FE  0E01               	movlw	1
  1932  000700  6E2E               	movwf	_en_sound^0,c
  1933                           
  1934                           ;main.c: 267: } else
  1935  000702  D001               	goto	l228
  1936  000704                     l229:
  1937                           
  1938                           ;main.c: 268: en_sound = 0;
  1939  000704  6A2E               	clrf	_en_sound^0,c
  1940  000706                     l228:
  1941                           
  1942                           ;main.c: 269: };main.c: 271: if (en_snd_b) {
  1943  000706  A071               	btfss	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  1944  000708  D00F               	goto	l3596
  1945                           
  1946                           ;main.c: 272: if ((temperature_2 >= set_t_dq2) && !(temperature_2 == 32767))
  1947  00070A  501D               	movf	_set_t_dq2^0,w,c
  1948  00070C  5C69               	subwf	_temperature_2^0,w,c
  1949  00070E  501E               	movf	(_set_t_dq2+1)^0,w,c
  1950  000710  586A               	subwfb	(_temperature_2+1)^0,w,c
  1951  000712  E309               	bnc	L1
  1952  000714  2869               	incf	_temperature_2^0,w,c
  1953  000716  E103               	bnz	u2620
  1954  000718  0E7F               	movlw	127
  1955  00071A  186A               	xorwf	(_temperature_2+1)^0,w,c
  1956  00071C  E004               	bz	L1
  1957  00071E                     u2620:
  1958                           
  1959                           ;main.c: 273: en_sound = 1;
  1960  00071E  0E01               	movlw	1
  1961  000720  6E2E               	movwf	_en_sound^0,c
  1962  000722  D002               	goto	l3596
  1963  000724                     l227:
  1964                           
  1965                           ;main.c: 279: LATCbits.LATC4 = 0;
  1966  000724  988B               	bcf	139,4,c	;volatile
  1967  000726                     L1:
  1968                           
  1969                           ;main.c: 280: en_sound = 0;
  1970  000726  6A2E               	clrf	_en_sound^0,c
  1971  000728                     l3596:
  1972                           
  1973                           ;main.c: 281: };main.c: 284: if (pressed_key == 1) {
  1974  000728  042D               	decf	_pressed_key^0,w,c
  1975  00072A  E107               	bnz	l3606
  1976                           
  1977                           ;main.c: 285: sub_sel--;
  1978  00072C  062C               	decf	_sub_sel^0,f,c
  1979                           
  1980                           ;main.c: 286: if (sub_sel == 255)
  1981  00072E  282C               	incf	_sub_sel^0,w,c
  1982  000730  E102               	bnz	l3604
  1983                           
  1984                           ;main.c: 287: sub_sel = VAL_9;
  1985  000732  0E08               	movlw	8
  1986  000734  6E2C               	movwf	_sub_sel^0,c
  1987  000736                     l3604:
  1988                           
  1989                           ;main.c: 288: outValPreset();
  1990  000736  EC93  F007         	call	_outValPreset	;wreg free
  1991  00073A                     l3606:
  1992                           
  1993                           ;main.c: 290: };main.c: 292: if (pressed_key == 2) {
  1994  00073A  0E02               	movlw	2
  1995  00073C  182D               	xorwf	_pressed_key^0,w,c
  1996  00073E  E107               	bnz	l3616
  1997                           
  1998                           ;main.c: 294: sub_sel++;
  1999  000740  2A2C               	incf	_sub_sel^0,f,c
  2000                           
  2001                           ;main.c: 295: if (sub_sel > VAL_9)
  2002  000742  0E08               	movlw	8
  2003  000744  642C               	cpfsgt	_sub_sel^0,c
  2004  000746  D001               	goto	l3614
  2005                           
  2006                           ;main.c: 296: sub_sel = VAL_1;
  2007  000748  6A2C               	clrf	_sub_sel^0,c
  2008  00074A                     l3614:
  2009                           
  2010                           ;main.c: 297: outValPreset();
  2011  00074A  EC93  F007         	call	_outValPreset	;wreg free
  2012  00074E                     l3616:
  2013                           
  2014                           ;main.c: 298: };main.c: 300: if (pressed_key == 3) {
  2015  00074E  0E03               	movlw	3
  2016  000750  182D               	xorwf	_pressed_key^0,w,c
  2017  000752  E001 D510          	bnz	l201
  2018                           
  2019                           ;main.c: 302: clearLCD();
  2020  000756  EC8F  F00D         	call	_clearLCD	;wreg free
  2021                           
  2022                           ;main.c: 303: select = 7;
  2023  00075A  0E07               	movlw	7
  2024                           
  2025                           ;main.c: 304: lcd_gotoxy(1, 1);
  2026  00075C  DBD4               	call	PL54	;call to abstracted procedure
  2027  00075E  EC74  F00D         	call	_lcd_gotoxy
  2028                           
  2029                           ;main.c: 305: lcdPrint("Ïîðiã Ñèãí. Led");
  2030  000762  0E6F               	movlw	low STR_5
  2031  000764  6E45               	movwf	lcdPrint@t^0,c
  2032  000766  0E1F               	movlw	high STR_5
  2033  000768  6E46               	movwf	(lcdPrint@t+1)^0,c
  2034  00076A  EC13  F009         	call	_lcdPrint	;wreg free
  2035                           
  2036                           ;main.c: 306: lcd_gotoxy(1, 2);
  2037  00076E  DBAF               	call	PL40	;call to abstracted procedure
  2038  000770  EC74  F00D         	call	_lcd_gotoxy
  2039                           
  2040                           ;main.c: 307: lcdPrint("  1     2   1-2");
  2041  000774  0E4F               	movlw	low STR_6
  2042  000776  6E45               	movwf	lcdPrint@t^0,c
  2043  000778  0E1F               	movlw	high STR_6
  2044  00077A  6E46               	movwf	(lcdPrint@t+1)^0,c
  2045  00077C  EC13  F009         	call	_lcdPrint	;wreg free
  2046  000780  D4FA               	goto	l201
  2047  000782                     l3630:
  2048                           
  2049                           ;main.c: 318: lcd_gotoxy(14, 2);
  2050  000782  0E02               	movlw	2
  2051  000784  6E42               	movwf	lcd_gotoxy@y^0,c
  2052  000786  0E0E               	movlw	14
  2053  000788  EC74  F00D         	call	_lcd_gotoxy
  2054                           
  2055                           ;main.c: 319: lcd_putc(dq_num + 48);
  2056  00078C  506D               	movf	_dq_num^0,w,c
  2057  00078E  0F30               	addlw	48
  2058  000790  ECBB  F00D         	call	_lcd_putc
  2059                           
  2060                           ;main.c: 320: if (pressed_key == 1) {
  2061  000794  042D               	decf	_pressed_key^0,w,c
  2062  000796  E106               	bnz	l3640
  2063                           
  2064                           ;main.c: 321: dq_num++;
  2065  000798  2A6D               	incf	_dq_num^0,f,c
  2066                           
  2067                           ;main.c: 322: if (dq_num == 3)
  2068  00079A  0E03               	movlw	3
  2069  00079C  186D               	xorwf	_dq_num^0,w,c
  2070  00079E  E102               	bnz	l3640
  2071                           
  2072                           ;main.c: 323: dq_num = 1;
  2073  0007A0  0E01               	movlw	1
  2074  0007A2  6E6D               	movwf	_dq_num^0,c
  2075  0007A4                     l3640:
  2076                           
  2077                           ;main.c: 324: };main.c: 325: if (pressed_key == 2) {
  2078  0007A4  0E02               	movlw	2
  2079  0007A6  182D               	xorwf	_pressed_key^0,w,c
  2080  0007A8  E105               	bnz	l3648
  2081                           
  2082                           ;main.c: 326: dq_num--;
  2083  0007AA  066D               	decf	_dq_num^0,f,c
  2084                           
  2085                           ;main.c: 327: if (dq_num == 0)
  2086  0007AC  506D               	movf	_dq_num^0,w,c
  2087  0007AE  E102               	bnz	l3648
  2088                           
  2089                           ;main.c: 328: dq_num = 2;
  2090  0007B0  0E02               	movlw	2
  2091  0007B2  6E6D               	movwf	_dq_num^0,c
  2092  0007B4                     l3648:
  2093                           
  2094                           ;main.c: 329: };main.c: 330: if (pressed_key == 3) {
  2095  0007B4  0E03               	movlw	3
  2096  0007B6  182D               	xorwf	_pressed_key^0,w,c
  2097  0007B8  E001 D4DD          	bnz	l201
  2098                           
  2099                           ;main.c: 331: if (ds18b20_readrom(dq_num)) {
  2100  0007BC  506D               	movf	_dq_num^0,w,c
  2101  0007BE  EC24  F00B         	call	_ds18b20_readrom
  2102  0007C2  0900               	iorlw	0
  2103  0007C4  E009               	bz	l3656
  2104                           
  2105                           ;main.c: 332: lcd_gotoxy(1, 2);
  2106  0007C6  DB83               	call	PL40	;call to abstracted procedure
  2107  0007C8  EC74  F00D         	call	_lcd_gotoxy
  2108                           
  2109                           ;main.c: 333: lcdPrint(" Êîä ïðî÷èòàíî ");
  2110  0007CC  0E0F               	movlw	low STR_7
  2111  0007CE  6E45               	movwf	lcdPrint@t^0,c
  2112  0007D0  0E1F               	movlw	high STR_7
  2113  0007D2  6E46               	movwf	(lcdPrint@t+1)^0,c
  2114  0007D4  EC13  F009         	call	_lcdPrint	;wreg free
  2115  0007D8                     l3656:
  2116                           
  2117                           ;main.c: 334: };main.c: 336: select = 3;
  2118  0007D8  0E03               	movlw	3
  2119  0007DA  6E6E               	movwf	_select^0,c
  2120  0007DC  D4CC               	goto	l201
  2121  0007DE                     l3658:
  2122                           
  2123                           ;main.c: 342: if (pressed_key == 1) {
  2124  0007DE  042D               	decf	_pressed_key^0,w,c
  2125  0007E0  E115               	bnz	l3672
  2126                           
  2127                           ;main.c: 343: clearLCD();
  2128  0007E2  EC8F  F00D         	call	_clearLCD	;wreg free
  2129                           
  2130                           ;main.c: 344: select = 4;
  2131  0007E6  0E04               	movlw	4
  2132                           
  2133                           ;main.c: 345: lcd_gotoxy(1, 1);
  2134  0007E8  DB8E               	call	PL54	;call to abstracted procedure
  2135  0007EA  EC74  F00D         	call	_lcd_gotoxy
  2136                           
  2137                           ;main.c: 346: lcdPrint("    Ãðàíèöi  ");
  2138  0007EE  0E9D               	movlw	low STR_8
  2139  0007F0  6E45               	movwf	lcdPrint@t^0,c
  2140  0007F2  0E1F               	movlw	high STR_8
  2141  0007F4  6E46               	movwf	(lcdPrint@t+1)^0,c
  2142  0007F6  EC13  F009         	call	_lcdPrint	;wreg free
  2143                           
  2144                           ;main.c: 347: lcd_gotoxy(1, 2);
  2145  0007FA  DB69               	call	PL40	;call to abstracted procedure
  2146  0007FC  EC74  F00D         	call	_lcd_gotoxy
  2147                           
  2148                           ;main.c: 348: lcdPrint(" Êîë(1)  Êóá(2)");
  2149  000800  0E1F               	movlw	low STR_9
  2150  000802  6E45               	movwf	lcdPrint@t^0,c
  2151  000804  0E1F               	movlw	high STR_9
  2152  000806  6E46               	movwf	(lcdPrint@t+1)^0,c
  2153  000808  EC13  F009         	call	_lcdPrint	;wreg free
  2154  00080C                     l3672:
  2155                           
  2156                           ;main.c: 349: };main.c: 351: if (pressed_key == 2) {
  2157  00080C  0E02               	movlw	2
  2158  00080E  182D               	xorwf	_pressed_key^0,w,c
  2159  000810  E10C               	bnz	l3682
  2160                           
  2161                           ;main.c: 352: clearLCD();
  2162  000812  EC8F  F00D         	call	_clearLCD	;wreg free
  2163                           
  2164                           ;main.c: 353: select = 8;
  2165  000816  0E08               	movlw	8
  2166                           
  2167                           ;main.c: 354: lcd_gotoxy(1, 1);
  2168  000818  DB76               	call	PL54	;call to abstracted procedure
  2169  00081A  EC74  F00D         	call	_lcd_gotoxy
  2170                           
  2171                           ;main.c: 355: lcdPrint(" Êîëîíà    Êóá");
  2172  00081E  0E7F               	movlw	low STR_10
  2173  000820  6E45               	movwf	lcdPrint@t^0,c
  2174  000822  0E1F               	movlw	high STR_10
  2175  000824  6E46               	movwf	(lcdPrint@t+1)^0,c
  2176  000826  EC13  F009         	call	_lcdPrint	;wreg free
  2177  00082A                     l3682:
  2178                           
  2179                           ;main.c: 356: };main.c: 357: if (pressed_key == 3) {
  2180  00082A  0E03               	movlw	3
  2181  00082C  182D               	xorwf	_pressed_key^0,w,c
  2182  00082E  E001 D4A2          	bnz	l201
  2183                           
  2184                           ;main.c: 358: LATCbits.LATC5 = !(LATCbits.LATC5);
  2185  000832  BA8B               	btfsc	139,5,c	;volatile
  2186  000834  D003               	goto	u2770
  2187  000836  6A67               	clrf	??_main^0,c
  2188  000838  2A67               	incf	??_main^0,f,c
  2189  00083A  D001               	goto	u2788
  2190  00083C                     u2770:
  2191  00083C  6A67               	clrf	??_main^0,c
  2192  00083E                     u2788:
  2193  00083E  3A67               	swapf	??_main^0,f,c
  2194  000840  4667               	rlncf	??_main^0,f,c
  2195  000842  508B               	movf	139,w,c	;volatile
  2196  000844  1867               	xorwf	??_main^0,w,c
  2197  000846  0BDF               	andlw	-33
  2198  000848  1867               	xorwf	??_main^0,w,c
  2199  00084A  6E8B               	movwf	139,c	;volatile
  2200  00084C                     l3686:
  2201                           
  2202                           ;main.c: 359: select = 1;
  2203  00084C  0E01               	movlw	1
  2204  00084E  6E6E               	movwf	_select^0,c
  2205                           
  2206                           ;main.c: 360: outValPreset();
  2207  000850  EC93  F007         	call	_outValPreset	;wreg free
  2208  000854  D490               	goto	l201
  2209  000856                     l3690:
  2210                           
  2211                           ;main.c: 364: lcd_gotoxy(4, 2);
  2212  000856  0E02               	movlw	2
  2213  000858  6E42               	movwf	lcd_gotoxy@y^0,c
  2214  00085A  0E04               	movlw	4
  2215  00085C  EC74  F00D         	call	_lcd_gotoxy
  2216                           
  2217                           ;main.c: 365: (en_snd_k) ? lcd_putc(0xED) : lcd_putc(0xD5);
  2218  000860  A271               	btfss	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2219  000862  D004               	goto	l3696
  2220  000864  0EED               	movlw	237
  2221  000866  ECBB  F00D         	call	_lcd_putc
  2222  00086A  D003               	goto	l259
  2223  00086C                     l3696:
  2224  00086C  0ED5               	movlw	213
  2225  00086E  ECBB  F00D         	call	_lcd_putc
  2226  000872                     l259:
  2227                           
  2228                           ;main.c: 366: lcd_gotoxy(13, 2);
  2229  000872  0E02               	movlw	2
  2230  000874  6E42               	movwf	lcd_gotoxy@y^0,c
  2231  000876  0E0D               	movlw	13
  2232  000878  EC74  F00D         	call	_lcd_gotoxy
  2233                           
  2234                           ;main.c: 367: (en_snd_b) ? lcd_putc(0xED) : lcd_putc(0xD5);
  2235  00087C  A071               	btfss	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2236  00087E  D004               	goto	l3702
  2237  000880  0EED               	movlw	237
  2238  000882  ECBB  F00D         	call	_lcd_putc
  2239  000886  D003               	goto	l3704
  2240  000888                     l3702:
  2241  000888  0ED5               	movlw	213
  2242  00088A  ECBB  F00D         	call	_lcd_putc
  2243  00088E                     l3704:
  2244                           
  2245                           ;main.c: 369: if (pressed_key == 1) {
  2246  00088E  042D               	decf	_pressed_key^0,w,c
  2247  000890  E105               	bnz	u2835
  2248                           
  2249                           ;main.c: 370: en_snd_k = !(en_snd_k);
  2250  000892  B271               	btfsc	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2251  000894  D002               	goto	u2820
  2252  000896  8271               	bsf	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2253  000898  D001               	goto	u2835
  2254  00089A                     u2820:
  2255  00089A  9271               	bcf	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2256  00089C                     u2835:
  2257                           
  2258                           ;main.c: 371: };main.c: 373: if (pressed_key == 2) {
  2259  00089C  0E02               	movlw	2
  2260  00089E  182D               	xorwf	_pressed_key^0,w,c
  2261  0008A0  E105               	bnz	u2865
  2262                           
  2263                           ;main.c: 374: en_snd_b = !(en_snd_b);
  2264  0008A2  B071               	btfsc	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2265  0008A4  D002               	goto	u2850
  2266  0008A6  8071               	bsf	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2267  0008A8  D001               	goto	u2865
  2268  0008AA                     u2850:
  2269  0008AA  9071               	bcf	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2270  0008AC                     u2865:
  2271                           
  2272                           ;main.c: 375: };main.c: 376: if (pressed_key == 3) {
  2273  0008AC  0E03               	movlw	3
  2274  0008AE  182D               	xorwf	_pressed_key^0,w,c
  2275  0008B0  E001 D461          	bnz	l201
  2276                           
  2277                           ;main.c: 377: if (!(en_snd_k) && !(en_snd_b)) {
  2278  0008B4  A271               	btfss	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2279  0008B6  B071               	btfsc	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2280  0008B8  D002               	goto	l267
  2281                           
  2282                           ;main.c: 378: sound_yes = 0;
  2283  0008BA  9471               	bcf	(_sound_yes/(0+8))^0,_sound_yes& (0+7),c
  2284                           
  2285                           ;main.c: 379: } else
  2286  0008BC  D001               	goto	l3720
  2287  0008BE                     l267:
  2288                           
  2289                           ;main.c: 380: sound_yes = 1;
  2290  0008BE  8471               	bsf	(_sound_yes/(0+8))^0,_sound_yes& (0+7),c
  2291  0008C0                     l3720:
  2292                           
  2293                           ;main.c: 382: write_eep(53, en_snd_k);
  2294  0008C0  0E00               	movlw	0
  2295  0008C2  B271               	btfsc	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2296  0008C4  0E01               	movlw	1
  2297  0008C6  6E3E               	movwf	write_eep@data^0,c
  2298  0008C8  0E35               	movlw	53
  2299  0008CA  EC1E  F00D         	call	_write_eep
  2300                           
  2301                           ;main.c: 383: write_eep(54, en_snd_b);
  2302  0008CE  0E00               	movlw	0
  2303  0008D0  B071               	btfsc	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2304  0008D2  0E01               	movlw	1
  2305  0008D4  6E3E               	movwf	write_eep@data^0,c
  2306  0008D6  0E36               	movlw	54
  2307  0008D8  EC1E  F00D         	call	_write_eep
  2308  0008DC  D7B7               	goto	l3686
  2309  0008DE                     l3726:
  2310                           
  2311                           ;main.c: 390: if (pressed_key == 1) {
  2312  0008DE  042D               	decf	_pressed_key^0,w,c
  2313  0008E0  E125               	bnz	l3744
  2314                           
  2315                           ;main.c: 391: select = 5;
  2316  0008E2  0E05               	movlw	5
  2317  0008E4  6E6E               	movwf	_select^0,c
  2318                           
  2319                           ;main.c: 392: sub_sel_kol = 1;
  2320  0008E6  0E01               	movlw	1
  2321  0008E8  6E2B               	movwf	_sub_sel_kol^0,c
  2322                           
  2323                           ;main.c: 393: dq1_temp = dq1_up_temp/ 625;
  2324  0008EA  DAF4               	call	PL44	;call to abstracted procedure
  2325  0008EC  DB10               	call	PL58	;call to abstracted procedure
  2326  0008EE  EC00  F00C         	call	___lwdiv	;wreg free
  2327  0008F2  503E               	movf	?___lwdiv^0,w,c
  2328  0008F4  6E28               	movwf	_dq1_temp^0,c
  2329                           
  2330                           ;main.c: 394: dq1_temp_dwn = dq1_dwn_temp/ 625;
  2331  0008F6  DAF3               	call	PL46	;call to abstracted procedure
  2332  0008F8  DB0A               	call	PL58	;call to abstracted procedure
  2333  0008FA  EC00  F00C         	call	___lwdiv	;wreg free
  2334  0008FE  503E               	movf	?___lwdiv^0,w,c
  2335  000900  6E27               	movwf	_dq1_temp_dwn^0,c
  2336                           
  2337                           ;main.c: 395: clearLCD();
  2338  000902  EC8F  F00D         	call	_clearLCD	;wreg free
  2339                           
  2340                           ;main.c: 396: lcd_gotoxy(1, 1);
  2341  000906  0E01               	movlw	1
  2342  000908  6E42               	movwf	lcd_gotoxy@y^0,c
  2343  00090A  EC74  F00D         	call	_lcd_gotoxy
  2344                           
  2345                           ;main.c: 397: lcdPrint("    Êîëîíà  ");
  2346  00090E  0EB8               	movlw	low STR_11
  2347  000910  6E45               	movwf	lcdPrint@t^0,c
  2348  000912  0E1F               	movlw	high STR_11
  2349  000914  6E46               	movwf	(lcdPrint@t+1)^0,c
  2350  000916  EC13  F009         	call	_lcdPrint	;wreg free
  2351                           
  2352                           ;main.c: 398: lcd_gotoxy(1, 2);
  2353  00091A  DAD9               	call	PL40	;call to abstracted procedure
  2354  00091C  EC74  F00D         	call	_lcd_gotoxy
  2355                           
  2356                           ;main.c: 399: lcdPrint("Òåìï Âåðõ:");
  2357  000920  0ED2               	movlw	low STR_12
  2358  000922  6E45               	movwf	lcdPrint@t^0,c
  2359  000924  0E1F               	movlw	high STR_12
  2360  000926  6E46               	movwf	(lcdPrint@t+1)^0,c
  2361  000928  EC13  F009         	call	_lcdPrint	;wreg free
  2362  00092C                     l3744:
  2363                           
  2364                           ;main.c: 400: };main.c: 401: if (pressed_key == 2) {
  2365  00092C  0E02               	movlw	2
  2366  00092E  182D               	xorwf	_pressed_key^0,w,c
  2367  000930  E001 D421          	bnz	l201
  2368                           
  2369                           ;main.c: 402: select = 6;
  2370  000934  0E06               	movlw	6
  2371  000936  6E6E               	movwf	_select^0,c
  2372                           
  2373                           ;main.c: 404: clearLCD();
  2374  000938  EC8F  F00D         	call	_clearLCD	;wreg free
  2375                           
  2376                           ;main.c: 405: lcd_gotoxy(1, 1);
  2377  00093C  0E01               	movlw	1
  2378  00093E  6E42               	movwf	lcd_gotoxy@y^0,c
  2379  000940  EC74  F00D         	call	_lcd_gotoxy
  2380                           
  2381                           ;main.c: 406: lcdPrint("    Êóáîâà  ");
  2382  000944  0EAB               	movlw	low STR_13
  2383  000946  6E45               	movwf	lcdPrint@t^0,c
  2384  000948  0E1F               	movlw	high STR_13
  2385  00094A  6E46               	movwf	(lcdPrint@t+1)^0,c
  2386  00094C  EC13  F009         	call	_lcdPrint	;wreg free
  2387                           
  2388                           ;main.c: 407: lcd_gotoxy(1, 2);
  2389  000950  DABE               	call	PL40	;call to abstracted procedure
  2390  000952  EC74  F00D         	call	_lcd_gotoxy
  2391                           
  2392                           ;main.c: 408: lcdPrint("Ïîðiã");
  2393  000956  0EDD               	movlw	low STR_14
  2394  000958  6E45               	movwf	lcdPrint@t^0,c
  2395  00095A  0E1F               	movlw	high STR_14
  2396  00095C  6E46               	movwf	(lcdPrint@t+1)^0,c
  2397  00095E  EC13  F009         	call	_lcdPrint	;wreg free
  2398                           
  2399                           ;main.c: 411: pre_sub_sel = sub_sel;
  2400  000962  0E17               	movlw	23
  2401  000964  ECE3  F00C         	call	_read_eep_16
  2402  000968  DAC5               	call	PL50	;call to abstracted procedure
  2403                           
  2404                           ;main.c: 412: sub_sel = VAL_1;
  2405  00096A  6A2C               	clrf	_sub_sel^0,c
  2406  00096C  D404               	goto	l201
  2407  00096E                     l3762:
  2408                           
  2409                           ;main.c: 421: dq1_up_temp = (uint16_t)dq1_temp* 625;
  2410  00096E  C028  F03E         	movff	_dq1_temp,___wmul@multiplier
  2411  000972  DABA               	call	PL48	;call to abstracted procedure
  2412  000974  ECF8  F00C         	call	___wmul	;wreg free
  2413  000978  C03E  F021         	movff	?___wmul,_dq1_up_temp
  2414  00097C  C03F  F022         	movff	?___wmul+1,_dq1_up_temp+1
  2415                           
  2416                           ;main.c: 422: set_t_dq1_up = dq1_up_temp / 100;
  2417  000980  DAA9               	call	PL44	;call to abstracted procedure
  2418  000982  DABD               	call	PL52	;call to abstracted procedure
  2419  000984  EC00  F00C         	call	___lwdiv	;wreg free
  2420  000988  503E               	movf	?___lwdiv^0,w,c
  2421  00098A  6E2A               	movwf	_set_t_dq1_up^0,c
  2422                           
  2423                           ;main.c: 424: lcd_gotoxy(11, 2);
  2424  00098C  DAC5               	call	PL64	;call to abstracted procedure
  2425  00098E  EC74  F00D         	call	_lcd_gotoxy
  2426                           
  2427                           ;main.c: 425: lcd_putc('+');
  2428  000992  0E2B               	movlw	43
  2429  000994  ECBB  F00D         	call	_lcd_putc
  2430                           
  2431                           ;main.c: 426: lcd_putc('0');
  2432  000998  0E30               	movlw	48
  2433  00099A  ECBB  F00D         	call	_lcd_putc
  2434                           
  2435                           ;main.c: 427: lcd_putc('.');
  2436  00099E  0E2E               	movlw	46
  2437  0009A0  ECBB  F00D         	call	_lcd_putc
  2438                           
  2439                           ;main.c: 428: lcd_putc(((set_t_dq1_up / 10) % 10) + 48);
  2440  0009A4  0E0A               	movlw	10
  2441  0009A6  6E42               	movwf	___lbmod@divisor^0,c
  2442  0009A8  6E3E               	movwf	___lbdiv@divisor^0,c
  2443  0009AA  502A               	movf	_set_t_dq1_up^0,w,c
  2444  0009AC  EC98  F00C         	call	___lbdiv
  2445  0009B0  EC0B  F00D         	call	___lbmod
  2446  0009B4  0F30               	addlw	48
  2447  0009B6  ECBB  F00D         	call	_lcd_putc
  2448                           
  2449                           ;main.c: 429: lcd_putc(((set_t_dq1_up % 10) + 48));
  2450  0009BA  0E0A               	movlw	10
  2451  0009BC  6E42               	movwf	___lbmod@divisor^0,c
  2452  0009BE  502A               	movf	_set_t_dq1_up^0,w,c
  2453  0009C0  EC0B  F00D         	call	___lbmod
  2454  0009C4  0F30               	addlw	48
  2455  0009C6  ECBB  F00D         	call	_lcd_putc
  2456                           
  2457                           ;main.c: 431: if (pressed_key == 1) {
  2458  0009CA  042D               	decf	_pressed_key^0,w,c
  2459  0009CC  E105               	bnz	l3786
  2460                           
  2461                           ;main.c: 432: dq1_temp++;
  2462  0009CE  2A28               	incf	_dq1_temp^0,f,c
  2463                           
  2464                           ;main.c: 433: if (dq1_temp >= 16)
  2465  0009D0  0E0F               	movlw	15
  2466  0009D2  6428               	cpfsgt	_dq1_temp^0,c
  2467  0009D4  D001               	goto	l3786
  2468                           
  2469                           ;main.c: 434: dq1_temp = 0;
  2470  0009D6  6A28               	clrf	_dq1_temp^0,c
  2471  0009D8                     l3786:
  2472                           
  2473                           ;main.c: 435: };main.c: 436: if (pressed_key == 2) {
  2474  0009D8  0E02               	movlw	2
  2475  0009DA  182D               	xorwf	_pressed_key^0,w,c
  2476  0009DC  E105               	bnz	l3794
  2477                           
  2478                           ;main.c: 437: dq1_temp--;
  2479  0009DE  0628               	decf	_dq1_temp^0,f,c
  2480                           
  2481                           ;main.c: 438: if (dq1_temp == 255)
  2482  0009E0  2828               	incf	_dq1_temp^0,w,c
  2483  0009E2  E102               	bnz	l3794
  2484                           
  2485                           ;main.c: 439: dq1_temp = 15;
  2486  0009E4  0E0F               	movlw	15
  2487  0009E6  6E28               	movwf	_dq1_temp^0,c
  2488  0009E8                     l3794:
  2489                           
  2490                           ;main.c: 440: };main.c: 441: if (pressed_key == 3) {
  2491  0009E8  0E03               	movlw	3
  2492  0009EA  182D               	xorwf	_pressed_key^0,w,c
  2493  0009EC  E002 EFBB  F000    	bnz	l201
  2494                           
  2495                           ;main.c: 442: sub_sel_kol = 2;
  2496  0009F2  0E02               	movlw	2
  2497  0009F4  6E2B               	movwf	_sub_sel_kol^0,c
  2498                           
  2499                           ;main.c: 443: lcd_gotoxy(1, 2);
  2500  0009F6  6E42               	movwf	lcd_gotoxy@y^0,c
  2501  0009F8  0E01               	movlw	1
  2502  0009FA  EC74  F00D         	call	_lcd_gotoxy
  2503                           
  2504                           ;main.c: 444: lcdPrint("Òåìï Íèç:     ");
  2505  0009FE  0E8E               	movlw	low STR_15
  2506  000A00  6E45               	movwf	lcdPrint@t^0,c
  2507  000A02  0E1F               	movlw	high STR_15
  2508  000A04  6E46               	movwf	(lcdPrint@t+1)^0,c
  2509  000A06  EC13  F009         	call	_lcdPrint	;wreg free
  2510  000A0A  EFBB  F000         	goto	l201
  2511  000A0E                     l3802:
  2512                           
  2513                           ;main.c: 448: dq1_dwn_temp = (uint16_t) dq1_temp_dwn * 625;
  2514  000A0E  C027  F03E         	movff	_dq1_temp_dwn,___wmul@multiplier
  2515  000A12  DA6A               	call	PL48	;call to abstracted procedure
  2516  000A14  ECF8  F00C         	call	___wmul	;wreg free
  2517  000A18  C03E  F01F         	movff	?___wmul,_dq1_dwn_temp
  2518  000A1C  C03F  F020         	movff	?___wmul+1,_dq1_dwn_temp+1
  2519                           
  2520                           ;main.c: 449: set_t_dq1_dwn = dq1_dwn_temp / 100;
  2521  000A20  DA5E               	call	PL46	;call to abstracted procedure
  2522  000A22  DA6D               	call	PL52	;call to abstracted procedure
  2523  000A24  EC00  F00C         	call	___lwdiv	;wreg free
  2524  000A28  503E               	movf	?___lwdiv^0,w,c
  2525  000A2A  6E29               	movwf	_set_t_dq1_dwn^0,c
  2526                           
  2527                           ;main.c: 451: lcd_gotoxy(10, 2);
  2528  000A2C  EC26  F008         	call	PL62	;call to abstracted procedure
  2529  000A30  EC74  F00D         	call	_lcd_gotoxy
  2530                           
  2531                           ;main.c: 452: lcd_putc('-');
  2532  000A34  0E2D               	movlw	45
  2533  000A36  ECBB  F00D         	call	_lcd_putc
  2534                           
  2535                           ;main.c: 453: lcd_putc('0');
  2536  000A3A  0E30               	movlw	48
  2537  000A3C  ECBB  F00D         	call	_lcd_putc
  2538                           
  2539                           ;main.c: 454: lcd_putc('.');
  2540  000A40  0E2E               	movlw	46
  2541  000A42  ECBB  F00D         	call	_lcd_putc
  2542                           
  2543                           ;main.c: 455: lcd_putc(((set_t_dq1_dwn / 10) % 10) + 48);
  2544  000A46  0E0A               	movlw	10
  2545  000A48  6E42               	movwf	___lbmod@divisor^0,c
  2546  000A4A  6E3E               	movwf	___lbdiv@divisor^0,c
  2547  000A4C  5029               	movf	_set_t_dq1_dwn^0,w,c
  2548  000A4E  EC98  F00C         	call	___lbdiv
  2549  000A52  EC0B  F00D         	call	___lbmod
  2550  000A56  0F30               	addlw	48
  2551  000A58  ECBB  F00D         	call	_lcd_putc
  2552                           
  2553                           ;main.c: 456: lcd_putc(((set_t_dq1_dwn % 10) + 48));
  2554  000A5C  0E0A               	movlw	10
  2555  000A5E  6E42               	movwf	___lbmod@divisor^0,c
  2556  000A60  5029               	movf	_set_t_dq1_dwn^0,w,c
  2557  000A62  EC0B  F00D         	call	___lbmod
  2558  000A66  0F30               	addlw	48
  2559  000A68  ECBB  F00D         	call	_lcd_putc
  2560                           
  2561                           ;main.c: 457: lcd_putc(' ');
  2562  000A6C  0E20               	movlw	32
  2563  000A6E  ECBB  F00D         	call	_lcd_putc
  2564                           
  2565                           ;main.c: 458: lcd_putc(' ');
  2566  000A72  0E20               	movlw	32
  2567  000A74  ECBB  F00D         	call	_lcd_putc
  2568                           
  2569                           ;main.c: 459: if (pressed_key == 1) {
  2570  000A78  042D               	decf	_pressed_key^0,w,c
  2571  000A7A  E105               	bnz	l3830
  2572                           
  2573                           ;main.c: 460: dq1_temp_dwn++;
  2574  000A7C  2A27               	incf	_dq1_temp_dwn^0,f,c
  2575                           
  2576                           ;main.c: 461: if (dq1_temp_dwn >= 16)
  2577  000A7E  0E0F               	movlw	15
  2578  000A80  6427               	cpfsgt	_dq1_temp_dwn^0,c
  2579  000A82  D001               	goto	l3830
  2580                           
  2581                           ;main.c: 462: dq1_temp_dwn = 0;
  2582  000A84  6A27               	clrf	_dq1_temp_dwn^0,c
  2583  000A86                     l3830:
  2584                           
  2585                           ;main.c: 463: };main.c: 464: if (pressed_key == 2) {
  2586  000A86  0E02               	movlw	2
  2587  000A88  182D               	xorwf	_pressed_key^0,w,c
  2588  000A8A  E105               	bnz	l3838
  2589                           
  2590                           ;main.c: 465: dq1_temp_dwn--;
  2591  000A8C  0627               	decf	_dq1_temp_dwn^0,f,c
  2592                           
  2593                           ;main.c: 466: if (dq1_temp_dwn == 255)
  2594  000A8E  2827               	incf	_dq1_temp_dwn^0,w,c
  2595  000A90  E102               	bnz	l3838
  2596                           
  2597                           ;main.c: 467: dq1_temp_dwn = 15;
  2598  000A92  0E0F               	movlw	15
  2599  000A94  6E27               	movwf	_dq1_temp_dwn^0,c
  2600  000A96                     l3838:
  2601                           
  2602                           ;main.c: 468: };main.c: 469: if (pressed_key == 3) {
  2603  000A96  0E03               	movlw	3
  2604  000A98  182D               	xorwf	_pressed_key^0,w,c
  2605  000A9A  E002 EFBB  F000    	bnz	l201
  2606                           
  2607                           ;main.c: 470: sub_sel_kol = 3;
  2608  000AA0  0E03               	movlw	3
  2609  000AA2  6E2B               	movwf	_sub_sel_kol^0,c
  2610                           
  2611                           ;main.c: 471: write_eep_16(16, dq1_up_temp);
  2612  000AA4  C021  F040         	movff	_dq1_up_temp,write_eep_16@data
  2613  000AA8  C022  F041         	movff	_dq1_up_temp+1,write_eep_16@data+1
  2614  000AAC  0E10               	movlw	16
  2615  000AAE  EC9C  F00D         	call	_write_eep_16
  2616                           
  2617                           ;main.c: 472: write_eep_16(18, dq1_dwn_temp);
  2618  000AB2  C01F  F040         	movff	_dq1_dwn_temp,write_eep_16@data
  2619  000AB6  C020  F041         	movff	_dq1_dwn_temp+1,write_eep_16@data+1
  2620  000ABA  0E12               	movlw	18
  2621  000ABC  EC9C  F00D         	call	_write_eep_16
  2622                           
  2623                           ;main.c: 473: lcd_gotoxy(1, 1);
  2624  000AC0  0E01               	movlw	1
  2625  000AC2  6E42               	movwf	lcd_gotoxy@y^0,c
  2626  000AC4  EC74  F00D         	call	_lcd_gotoxy
  2627                           
  2628                           ;main.c: 474: lcdPrint(" Ôiêñàöiÿ t êîë.");
  2629  000AC8  0EFE               	movlw	low STR_16
  2630  000ACA  6E45               	movwf	lcdPrint@t^0,c
  2631  000ACC  0E1E               	movlw	high STR_16
  2632  000ACE  6E46               	movwf	(lcdPrint@t+1)^0,c
  2633  000AD0  EC13  F009         	call	_lcdPrint	;wreg free
  2634                           
  2635                           ;main.c: 475: lcd_gotoxy(1, 2);
  2636  000AD4  D9FC               	call	PL40	;call to abstracted procedure
  2637  000AD6  EC74  F00D         	call	_lcd_gotoxy
  2638                           
  2639                           ;main.c: 476: lcdPrint("   Òàê      Íi  ");
  2640  000ADA  0EED               	movlw	low STR_17
  2641  000ADC  6E45               	movwf	lcdPrint@t^0,c
  2642  000ADE  0E1E               	movlw	high STR_17
  2643  000AE0  6E46               	movwf	(lcdPrint@t+1)^0,c
  2644  000AE2  EC13  F009         	call	_lcdPrint	;wreg free
  2645  000AE6  EFBB  F000         	goto	l201
  2646  000AEA                     l3854:
  2647                           
  2648                           ;main.c: 482: if (pressed_key == 1) {
  2649  000AEA  042D               	decf	_pressed_key^0,w,c
  2650  000AEC  E10F               	bnz	l3864
  2651                           
  2652                           ;main.c: 483: select = 1;
  2653  000AEE  0E01               	movlw	1
  2654  000AF0  6E6E               	movwf	_select^0,c
  2655                           
  2656                           ;main.c: 484: temp1_fix = temperature_1;
  2657  000AF2  C06B  F01B         	movff	_temperature_1,_temp1_fix
  2658  000AF6  C06C  F01C         	movff	_temperature_1+1,_temp1_fix+1
  2659                           
  2660                           ;main.c: 485: write_eep_16(20, temp1_fix);
  2661  000AFA  C01B  F040         	movff	_temp1_fix,write_eep_16@data
  2662  000AFE  C01C  F041         	movff	_temp1_fix+1,write_eep_16@data+1
  2663  000B02  0E14               	movlw	20
  2664  000B04  EC9C  F00D         	call	_write_eep_16
  2665                           
  2666                           ;main.c: 488: outValPreset();
  2667  000B08  EC93  F007         	call	_outValPreset	;wreg free
  2668  000B0C                     l3864:
  2669                           
  2670                           ;main.c: 489: };main.c: 491: if (pressed_key == 2) {
  2671  000B0C  0E02               	movlw	2
  2672  000B0E  182D               	xorwf	_pressed_key^0,w,c
  2673  000B10  E101 D69C          	bz	l3686
  2674  000B14  EFBB  F000         	goto	l201
  2675  000B18                     l3872:
  2676  000B18  502B               	movf	_sub_sel_kol^0,w,c
  2677                           
  2678                           ; Switch size 1, requested type "space"
  2679                           ; Number of cases is 3, Range of values is 1 to 3
  2680                           ; switch strategies available:
  2681                           ; Name         Instructions Cycles
  2682                           ; simple_byte           10     6 (average)
  2683                           ;	Chosen strategy is simple_byte
  2684  000B1A  0A01               	xorlw	1	; case 1
  2685  000B1C  E101 D727          	bz	l3762
  2686  000B20  0A03               	xorlw	3	; case 2
  2687  000B22  E101 D774          	bz	l3802
  2688  000B26  0A01               	xorlw	1	; case 3
  2689  000B28  E0E0               	bz	l3854
  2690  000B2A  EFBB  F000         	goto	l201
  2691  000B2E                     l3874:
  2692                           
  2693                           ;main.c: 502: dq2_temp = ((uint32_t)set_t_dq2 * 625) / 100;
  2694  000B2E  C01D  F045         	movff	_set_t_dq2,___lmul@multiplier
  2695  000B32  C01E  F046         	movff	_set_t_dq2+1,___lmul@multiplier+1
  2696  000B36  0E00               	movlw	0
  2697  000B38  BE46               	btfsc	(___lmul@multiplier+1)^0,7,c
  2698  000B3A  0EFF               	movlw	-1
  2699  000B3C  6E47               	movwf	(___lmul@multiplier+2)^0,c
  2700  000B3E  6E48               	movwf	(___lmul@multiplier+3)^0,c
  2701  000B40  D96B               	call	PL8	;call to abstracted procedure
  2702  000B42  ECB5  F00B         	call	___lmul	;wreg free
  2703  000B46  EC06  F008         	call	PL2	;call to abstracted procedure
  2704  000B4A  EC7B  F00A         	call	___lldiv	;wreg free
  2705  000B4E  C051  F015         	movff	?___lldiv,_dq2_temp
  2706  000B52  C052  F016         	movff	?___lldiv+1,_dq2_temp+1
  2707  000B56  C053  F017         	movff	?___lldiv+2,_dq2_temp+2
  2708  000B5A  C054  F018         	movff	?___lldiv+3,_dq2_temp+3
  2709                           
  2710                           ;main.c: 506: lcd_gotoxy(7, 2);
  2711  000B5E  0E02               	movlw	2
  2712  000B60  6E42               	movwf	lcd_gotoxy@y^0,c
  2713  000B62  0E07               	movlw	7
  2714  000B64  EC74  F00D         	call	_lcd_gotoxy
  2715                           
  2716                           ;main.c: 508: switch (sub_sel) {
  2717  000B68  D03F               	goto	l3896
  2718  000B6A                     l3876:
  2719                           
  2720                           ;main.c: 510: lcdPrint("1:");
  2721  000B6A  0EE3               	movlw	low STR_18
  2722  000B6C  6E45               	movwf	lcdPrint@t^0,c
  2723  000B6E  0E1F               	movlw	high STR_18
  2724  000B70  6E46               	movwf	(lcdPrint@t+1)^0,c
  2725  000B72  EC13  F009         	call	_lcdPrint	;wreg free
  2726                           
  2727                           ;main.c: 511: break;
  2728  000B76  D04A               	goto	l3898
  2729  000B78                     l3878:
  2730                           
  2731                           ;main.c: 513: lcdPrint("2:");
  2732  000B78  0EE6               	movlw	low STR_19
  2733  000B7A  6E45               	movwf	lcdPrint@t^0,c
  2734  000B7C  0E1F               	movlw	high STR_19
  2735  000B7E  6E46               	movwf	(lcdPrint@t+1)^0,c
  2736  000B80  EC13  F009         	call	_lcdPrint	;wreg free
  2737                           
  2738                           ;main.c: 514: break;
  2739  000B84  D043               	goto	l3898
  2740  000B86                     l3880:
  2741                           
  2742                           ;main.c: 516: lcdPrint("3:");
  2743  000B86  0EE9               	movlw	low STR_20
  2744  000B88  6E45               	movwf	lcdPrint@t^0,c
  2745  000B8A  0E1F               	movlw	high STR_20
  2746  000B8C  6E46               	movwf	(lcdPrint@t+1)^0,c
  2747  000B8E  EC13  F009         	call	_lcdPrint	;wreg free
  2748                           
  2749                           ;main.c: 517: break;
  2750  000B92  D03C               	goto	l3898
  2751  000B94                     l3882:
  2752                           
  2753                           ;main.c: 519: lcdPrint("4:");
  2754  000B94  0EEC               	movlw	low STR_21
  2755  000B96  6E45               	movwf	lcdPrint@t^0,c
  2756  000B98  0E1F               	movlw	high STR_21
  2757  000B9A  6E46               	movwf	(lcdPrint@t+1)^0,c
  2758  000B9C  EC13  F009         	call	_lcdPrint	;wreg free
  2759                           
  2760                           ;main.c: 520: break;
  2761  000BA0  D035               	goto	l3898
  2762  000BA2                     l3884:
  2763                           
  2764                           ;main.c: 522: lcdPrint("5:");
  2765  000BA2  0EEF               	movlw	low STR_22
  2766  000BA4  6E45               	movwf	lcdPrint@t^0,c
  2767  000BA6  0E1F               	movlw	high STR_22
  2768  000BA8  6E46               	movwf	(lcdPrint@t+1)^0,c
  2769  000BAA  EC13  F009         	call	_lcdPrint	;wreg free
  2770                           
  2771                           ;main.c: 523: break;
  2772  000BAE  D02E               	goto	l3898
  2773  000BB0                     l3886:
  2774                           
  2775                           ;main.c: 525: lcdPrint("6:");
  2776  000BB0  0EF2               	movlw	low STR_23
  2777  000BB2  6E45               	movwf	lcdPrint@t^0,c
  2778  000BB4  0E1F               	movlw	high STR_23
  2779  000BB6  6E46               	movwf	(lcdPrint@t+1)^0,c
  2780  000BB8  EC13  F009         	call	_lcdPrint	;wreg free
  2781                           
  2782                           ;main.c: 526: break;
  2783  000BBC  D027               	goto	l3898
  2784  000BBE                     l3888:
  2785                           
  2786                           ;main.c: 528: lcdPrint("7:");
  2787  000BBE  0EF5               	movlw	low STR_24
  2788  000BC0  6E45               	movwf	lcdPrint@t^0,c
  2789  000BC2  0E1F               	movlw	high STR_24
  2790  000BC4  6E46               	movwf	(lcdPrint@t+1)^0,c
  2791  000BC6  EC13  F009         	call	_lcdPrint	;wreg free
  2792                           
  2793                           ;main.c: 529: break;
  2794  000BCA  D020               	goto	l3898
  2795  000BCC                     l3890:
  2796                           
  2797                           ;main.c: 531: lcdPrint("8:");
  2798  000BCC  0EF8               	movlw	low STR_25
  2799  000BCE  6E45               	movwf	lcdPrint@t^0,c
  2800  000BD0  0E1F               	movlw	high STR_25
  2801  000BD2  6E46               	movwf	(lcdPrint@t+1)^0,c
  2802  000BD4  EC13  F009         	call	_lcdPrint	;wreg free
  2803                           
  2804                           ;main.c: 532: break;
  2805  000BD8  D019               	goto	l3898
  2806  000BDA                     l3892:
  2807                           
  2808                           ;main.c: 534: lcdPrint("9:");
  2809  000BDA  0EFB               	movlw	low STR_26
  2810  000BDC  6E45               	movwf	lcdPrint@t^0,c
  2811  000BDE  0E1F               	movlw	high STR_26
  2812  000BE0  6E46               	movwf	(lcdPrint@t+1)^0,c
  2813  000BE2  EC13  F009         	call	_lcdPrint	;wreg free
  2814                           
  2815                           ;main.c: 535: break;
  2816  000BE6  D012               	goto	l3898
  2817  000BE8                     l3896:
  2818  000BE8  502C               	movf	_sub_sel^0,w,c
  2819                           
  2820                           ; Switch size 1, requested type "space"
  2821                           ; Number of cases is 9, Range of values is 0 to 8
  2822                           ; switch strategies available:
  2823                           ; Name         Instructions Cycles
  2824                           ; simple_byte           28    15 (average)
  2825                           ;	Chosen strategy is simple_byte
  2826  000BEA  E0BF               	bz	l3876
  2827  000BEC  0A01               	xorlw	1	; case 1
  2828  000BEE  E0C4               	bz	l3878
  2829  000BF0  0A03               	xorlw	3	; case 2
  2830  000BF2  E0C9               	bz	l3880
  2831  000BF4  0A01               	xorlw	1	; case 3
  2832  000BF6  E0CE               	bz	l3882
  2833  000BF8  0A07               	xorlw	7	; case 4
  2834  000BFA  E0D3               	bz	l3884
  2835  000BFC  0A01               	xorlw	1	; case 5
  2836  000BFE  E0D8               	bz	l3886
  2837  000C00  0A03               	xorlw	3	; case 6
  2838  000C02  E0DD               	bz	l3888
  2839  000C04  0A01               	xorlw	1	; case 7
  2840  000C06  E0E2               	bz	l3890
  2841  000C08  0A0F               	xorlw	15	; case 8
  2842  000C0A  E0E7               	bz	l3892
  2843  000C0C                     l3898:
  2844                           
  2845                           ;main.c: 537: lcd_putc(((dq2_temp / 1000) % 10) + 48);
  2846  000C0C  0EE8               	movlw	232
  2847  000C0E  6E55               	movwf	___lldiv@divisor^0,c
  2848  000C10  0E03               	movlw	3
  2849  000C12  6E56               	movwf	(___lldiv@divisor+1)^0,c
  2850  000C14  6A57               	clrf	(___lldiv@divisor+2)^0,c
  2851  000C16  6A58               	clrf	(___lldiv@divisor+3)^0,c
  2852  000C18  C015  F051         	movff	_dq2_temp,___lldiv@dividend
  2853  000C1C  C016  F052         	movff	_dq2_temp+1,___lldiv@dividend+1
  2854  000C20  C017  F053         	movff	_dq2_temp+2,___lldiv@dividend+2
  2855  000C24  C018  F054         	movff	_dq2_temp+3,___lldiv@dividend+3
  2856  000C28  EC7B  F00A         	call	___lldiv	;wreg free
  2857  000C2C  D908               	call	PL14	;call to abstracted procedure
  2858  000C2E  EC57  F00B         	call	___llmod	;wreg free
  2859  000C32  505E               	movf	?___llmod^0,w,c
  2860  000C34  0F30               	addlw	48
  2861  000C36  ECBB  F00D         	call	_lcd_putc
  2862                           
  2863                           ;main.c: 538: lcd_putc(((dq2_temp / 100) % 10) + 48);
  2864  000C3A  0E64               	movlw	100
  2865  000C3C  D90E               	call	PL18	;call to abstracted procedure
  2866  000C3E  EC7B  F00A         	call	___lldiv	;wreg free
  2867  000C42  D8FD               	call	PL14	;call to abstracted procedure
  2868  000C44  EC57  F00B         	call	___llmod	;wreg free
  2869  000C48  505E               	movf	?___llmod^0,w,c
  2870  000C4A  0F30               	addlw	48
  2871  000C4C  ECBB  F00D         	call	_lcd_putc
  2872                           
  2873                           ;main.c: 539: lcd_putc('.');
  2874  000C50  0E2E               	movlw	46
  2875  000C52  ECBB  F00D         	call	_lcd_putc
  2876                           
  2877                           ;main.c: 540: lcd_putc(((dq2_temp / 10) % 10) + 48);
  2878  000C56  0E0A               	movlw	10
  2879  000C58  D900               	call	PL18	;call to abstracted procedure
  2880  000C5A  EC7B  F00A         	call	___lldiv	;wreg free
  2881  000C5E  D8EF               	call	PL14	;call to abstracted procedure
  2882  000C60  EC57  F00B         	call	___llmod	;wreg free
  2883  000C64  505E               	movf	?___llmod^0,w,c
  2884  000C66  0F30               	addlw	48
  2885  000C68  ECBB  F00D         	call	_lcd_putc
  2886                           
  2887                           ;main.c: 541: lcd_putc((dq2_temp % 10) + 48);
  2888  000C6C  C015  F05E         	movff	_dq2_temp,___llmod@dividend
  2889  000C70  C016  F05F         	movff	_dq2_temp+1,___llmod@dividend+1
  2890  000C74  C017  F060         	movff	_dq2_temp+2,___llmod@dividend+2
  2891  000C78  C018  F061         	movff	_dq2_temp+3,___llmod@dividend+3
  2892  000C7C  0E0A               	movlw	10
  2893  000C7E  6E62               	movwf	___llmod@divisor^0,c
  2894  000C80  6A63               	clrf	(___llmod@divisor+1)^0,c
  2895  000C82  6A64               	clrf	(___llmod@divisor+2)^0,c
  2896  000C84  6A65               	clrf	(___llmod@divisor+3)^0,c
  2897  000C86  EC57  F00B         	call	___llmod	;wreg free
  2898  000C8A  505E               	movf	?___llmod^0,w,c
  2899  000C8C  0F30               	addlw	48
  2900  000C8E  ECBB  F00D         	call	_lcd_putc
  2901                           
  2902                           ;main.c: 542: lcd_putc(0x01);
  2903  000C92  0E01               	movlw	1
  2904  000C94  ECBB  F00D         	call	_lcd_putc
  2905                           
  2906                           ;main.c: 544: if (pressed_key == 1) {
  2907  000C98  042D               	decf	_pressed_key^0,w,c
  2908  000C9A  E114               	bnz	l3912
  2909                           
  2910                           ;main.c: 545: if (keyLong)
  2911  000C9C  502F               	movf	_keyLong^0,w,c
  2912  000C9E  E005               	bz	l3906
  2913                           
  2914                           ;main.c: 546: set_t_dq2 += 10;
  2915  000CA0  0E0A               	movlw	10
  2916  000CA2  261D               	addwf	_set_t_dq2^0,f,c
  2917  000CA4  0E00               	movlw	0
  2918  000CA6  221E               	addwfc	(_set_t_dq2+1)^0,f,c
  2919  000CA8  D002               	goto	l3908
  2920  000CAA                     l3906:
  2921                           
  2922                           ;main.c: 547: else;main.c: 548: set_t_dq2++;
  2923  000CAA  4A1D               	infsnz	_set_t_dq2^0,f,c
  2924  000CAC  2A1E               	incf	(_set_t_dq2+1)^0,f,c
  2925  000CAE                     l3908:
  2926                           
  2927                           ;main.c: 550: if (set_t_dq2 > 1584)
  2928  000CAE  BE1E               	btfsc	(_set_t_dq2+1)^0,7,c
  2929  000CB0  D009               	goto	l3912
  2930  000CB2  0E31               	movlw	49
  2931  000CB4  5C1D               	subwf	_set_t_dq2^0,w,c
  2932  000CB6  0E06               	movlw	6
  2933  000CB8  581E               	subwfb	(_set_t_dq2+1)^0,w,c
  2934  000CBA  E304               	bnc	l3912
  2935                           
  2936                           ;main.c: 551: set_t_dq2 = 1584;
  2937  000CBC  0E06               	movlw	6
  2938  000CBE  6E1E               	movwf	(_set_t_dq2+1)^0,c
  2939  000CC0  0E30               	movlw	48
  2940  000CC2  6E1D               	movwf	_set_t_dq2^0,c
  2941  000CC4                     l3912:
  2942                           
  2943                           ;main.c: 552: };main.c: 553: if (pressed_key == 2) {
  2944  000CC4  0E02               	movlw	2
  2945  000CC6  182D               	xorwf	_pressed_key^0,w,c
  2946  000CC8  E113               	bnz	l3924
  2947                           
  2948                           ;main.c: 554: if (keyLong)
  2949  000CCA  502F               	movf	_keyLong^0,w,c
  2950  000CCC  E005               	bz	l3918
  2951                           
  2952                           ;main.c: 555: set_t_dq2 -= 10;
  2953  000CCE  0EF6               	movlw	246
  2954  000CD0  261D               	addwf	_set_t_dq2^0,f,c
  2955  000CD2  0EFF               	movlw	255
  2956  000CD4  221E               	addwfc	(_set_t_dq2+1)^0,f,c
  2957  000CD6  D003               	goto	l3920
  2958  000CD8                     l3918:
  2959                           
  2960                           ;main.c: 556: else;main.c: 557: set_t_dq2--;
  2961  000CD8  061D               	decf	_set_t_dq2^0,f,c
  2962  000CDA  A0D8               	btfss	status,0,c
  2963  000CDC  061E               	decf	(_set_t_dq2+1)^0,f,c
  2964  000CDE                     l3920:
  2965                           
  2966                           ;main.c: 559: if (set_t_dq2 < 1)
  2967  000CDE  BE1E               	btfsc	(_set_t_dq2+1)^0,7,c
  2968  000CE0  D004               	goto	u3090
  2969  000CE2  501E               	movf	(_set_t_dq2+1)^0,w,c
  2970  000CE4  E105               	bnz	l3924
  2971  000CE6  041D               	decf	_set_t_dq2^0,w,c
  2972  000CE8  E203               	bc	l3924
  2973  000CEA                     u3090:
  2974                           
  2975                           ;main.c: 560: set_t_dq2 = 1;
  2976  000CEA  6A1E               	clrf	(_set_t_dq2+1)^0,c
  2977  000CEC  0E01               	movlw	1
  2978  000CEE  6E1D               	movwf	_set_t_dq2^0,c
  2979  000CF0                     l3924:
  2980                           
  2981                           ;main.c: 561: };main.c: 563: if (pressed_key == 3) {
  2982  000CF0  0E03               	movlw	3
  2983  000CF2  182D               	xorwf	_pressed_key^0,w,c
  2984  000CF4  E002 EFBB  F000    	bnz	l201
  2985                           
  2986                           ;main.c: 564: if (keyLong) {
  2987  000CFA  502F               	movf	_keyLong^0,w,c
  2988  000CFC  E048               	bz	l3956
  2989                           
  2990                           ;main.c: 565: sub_sel = VAL_1;
  2991  000CFE  6A2C               	clrf	_sub_sel^0,c
  2992  000D00  D5A5               	goto	l3686
  2993  000D02                     l3936:
  2994                           
  2995                           ;main.c: 574: write_eep_16(23, set_t_dq2);
  2996  000D02  D8BC               	call	PL22	;call to abstracted procedure
  2997  000D04  0E17               	movlw	23
  2998  000D06  EC9C  F00D         	call	_write_eep_16
  2999                           
  3000                           ;main.c: 575: set_t_dq2 = read_eep_16(25);
  3001  000D0A  0E19               	movlw	25
  3002  000D0C  ECE3  F00C         	call	_read_eep_16
  3003  000D10  D037               	goto	L8
  3004  000D12                     l3938:
  3005                           
  3006                           ;main.c: 579: write_eep_16(25, set_t_dq2);
  3007  000D12  D8B4               	call	PL22	;call to abstracted procedure
  3008  000D14  0E19               	movlw	25
  3009  000D16  EC9C  F00D         	call	_write_eep_16
  3010                           
  3011                           ;main.c: 580: set_t_dq2 = read_eep_16(27);
  3012  000D1A  0E1B               	movlw	27
  3013  000D1C  ECE3  F00C         	call	_read_eep_16
  3014  000D20  D02F               	goto	L8
  3015  000D22                     l3940:
  3016                           
  3017                           ;main.c: 584: write_eep_16(27, set_t_dq2);
  3018  000D22  D8AC               	call	PL22	;call to abstracted procedure
  3019  000D24  0E1B               	movlw	27
  3020  000D26  EC9C  F00D         	call	_write_eep_16
  3021                           
  3022                           ;main.c: 585: set_t_dq2 = read_eep_16(29);
  3023  000D2A  0E1D               	movlw	29
  3024  000D2C  ECE3  F00C         	call	_read_eep_16
  3025  000D30  D027               	goto	L8
  3026  000D32                     l3942:
  3027                           
  3028                           ;main.c: 589: write_eep_16(29, set_t_dq2);
  3029  000D32  D8A4               	call	PL22	;call to abstracted procedure
  3030  000D34  0E1D               	movlw	29
  3031  000D36  EC9C  F00D         	call	_write_eep_16
  3032                           
  3033                           ;main.c: 590: set_t_dq2 = read_eep_16(31);
  3034  000D3A  0E1F               	movlw	31
  3035  000D3C  ECE3  F00C         	call	_read_eep_16
  3036  000D40  D01F               	goto	L8
  3037  000D42                     l3944:
  3038                           
  3039                           ;main.c: 594: write_eep_16(31, set_t_dq2);
  3040  000D42  D89C               	call	PL22	;call to abstracted procedure
  3041  000D44  0E1F               	movlw	31
  3042  000D46  EC9C  F00D         	call	_write_eep_16
  3043                           
  3044                           ;main.c: 595: set_t_dq2 = read_eep_16(33);
  3045  000D4A  0E21               	movlw	33
  3046  000D4C  ECE3  F00C         	call	_read_eep_16
  3047  000D50  D017               	goto	L8
  3048  000D52                     l3946:
  3049                           
  3050                           ;main.c: 599: write_eep_16(33, set_t_dq2);
  3051  000D52  D894               	call	PL22	;call to abstracted procedure
  3052  000D54  0E21               	movlw	33
  3053  000D56  EC9C  F00D         	call	_write_eep_16
  3054                           
  3055                           ;main.c: 600: set_t_dq2 = read_eep_16(35);
  3056  000D5A  0E23               	movlw	35
  3057  000D5C  ECE3  F00C         	call	_read_eep_16
  3058  000D60  D00F               	goto	L8
  3059  000D62                     l3948:
  3060                           
  3061                           ;main.c: 604: write_eep_16(35, set_t_dq2);
  3062  000D62  D88C               	call	PL22	;call to abstracted procedure
  3063  000D64  0E23               	movlw	35
  3064  000D66  EC9C  F00D         	call	_write_eep_16
  3065                           
  3066                           ;main.c: 605: set_t_dq2 = read_eep_16(37);
  3067  000D6A  0E25               	movlw	37
  3068  000D6C  ECE3  F00C         	call	_read_eep_16
  3069  000D70  D007               	goto	L8
  3070  000D72                     l3950:
  3071                           
  3072                           ;main.c: 609: write_eep_16(37, set_t_dq2);
  3073  000D72  D884               	call	PL22	;call to abstracted procedure
  3074  000D74  0E25               	movlw	37
  3075  000D76  EC9C  F00D         	call	_write_eep_16
  3076                           
  3077                           ;main.c: 610: set_t_dq2 = read_eep_16(39);
  3078  000D7A  0E27               	movlw	39
  3079  000D7C  ECE3  F00C         	call	_read_eep_16
  3080  000D80                     L8:
  3081  000D80  D8B9               	call	PL50	;call to abstracted procedure
  3082                           
  3083                           ;main.c: 611: break;
  3084  000D82  D017               	goto	l3958
  3085  000D84                     l3952:
  3086                           
  3087                           ;main.c: 614: write_eep_16(39, set_t_dq2);
  3088  000D84  D87B               	call	PL22	;call to abstracted procedure
  3089  000D86  0E27               	movlw	39
  3090  000D88  EC9C  F00D         	call	_write_eep_16
  3091                           
  3092                           ;main.c: 615: break;
  3093  000D8C  D012               	goto	l3958
  3094  000D8E                     l3956:
  3095  000D8E  502C               	movf	_sub_sel^0,w,c
  3096                           
  3097                           ; Switch size 1, requested type "space"
  3098                           ; Number of cases is 9, Range of values is 0 to 8
  3099                           ; switch strategies available:
  3100                           ; Name         Instructions Cycles
  3101                           ; simple_byte           28    15 (average)
  3102                           ;	Chosen strategy is simple_byte
  3103  000D90  E0B8               	bz	l3936
  3104  000D92  0A01               	xorlw	1	; case 1
  3105  000D94  E0BE               	bz	l3938
  3106  000D96  0A03               	xorlw	3	; case 2
  3107  000D98  E0C4               	bz	l3940
  3108  000D9A  0A01               	xorlw	1	; case 3
  3109  000D9C  E0CA               	bz	l3942
  3110  000D9E  0A07               	xorlw	7	; case 4
  3111  000DA0  E0D0               	bz	l3944
  3112  000DA2  0A01               	xorlw	1	; case 5
  3113  000DA4  E0D6               	bz	l3946
  3114  000DA6  0A03               	xorlw	3	; case 6
  3115  000DA8  E0DC               	bz	l3948
  3116  000DAA  0A01               	xorlw	1	; case 7
  3117  000DAC  E0E2               	bz	l3950
  3118  000DAE  0A0F               	xorlw	15	; case 8
  3119  000DB0  E0E9               	bz	l3952
  3120  000DB2                     l3958:
  3121                           
  3122                           ;main.c: 617: };main.c: 619: sub_sel++;
  3123  000DB2  2A2C               	incf	_sub_sel^0,f,c
  3124                           
  3125                           ;main.c: 621: if (sub_sel > VAL_9) {
  3126  000DB4  0E08               	movlw	8
  3127  000DB6  642C               	cpfsgt	_sub_sel^0,c
  3128  000DB8  D005               	goto	l3968
  3129                           
  3130                           ;main.c: 622: sub_sel = VAL_1;
  3131  000DBA  6A2C               	clrf	_sub_sel^0,c
  3132                           
  3133                           ;main.c: 623: select = 1;
  3134  000DBC  0E01               	movlw	1
  3135  000DBE  6E6E               	movwf	_select^0,c
  3136                           
  3137                           ;main.c: 624: outValPreset();
  3138  000DC0  EC93  F007         	call	_outValPreset	;wreg free
  3139  000DC4                     l3968:
  3140                           
  3141                           ;main.c: 629: };main.c: 631: Delay_ms(10);
  3142  000DC4  D8AC               	call	PL66	;call to abstracted procedure
  3143  000DC6  EC30  F00D         	call	_Delay_ms	;wreg free
  3144  000DCA  EFBB  F000         	goto	l201
  3145  000DCE                     l3972:
  3146  000DCE  506E               	movf	_select^0,w,c
  3147                           
  3148                           ; Switch size 1, requested type "space"
  3149                           ; Number of cases is 8, Range of values is 1 to 8
  3150                           ; switch strategies available:
  3151                           ; Name         Instructions Cycles
  3152                           ; simple_byte           25    13 (average)
  3153                           ;	Chosen strategy is simple_byte
  3154  000DD0  0A01               	xorlw	1	; case 1
  3155  000DD2  E102 EFC5  F000    	bz	l3528
  3156  000DD8  0A03               	xorlw	3	; case 2
  3157  000DDA  E101 D4D2          	bz	l3630
  3158  000DDE  0A01               	xorlw	1	; case 3
  3159  000DE0  E102 EFBB  F000    	bz	l201
  3160  000DE6  0A07               	xorlw	7	; case 4
  3161  000DE8  E101 D579          	bz	l3726
  3162  000DEC  0A01               	xorlw	1	; case 5
  3163  000DEE  E101 D693          	bz	l3872
  3164  000DF2  0A03               	xorlw	3	; case 6
  3165  000DF4  E101 D69B          	bz	l3874
  3166  000DF8  0A01               	xorlw	1	; case 7
  3167  000DFA  E101 D4F0          	bz	l3658
  3168  000DFE  0A0F               	xorlw	15	; case 8
  3169  000E00  E101 D529          	bz	l3690
  3170  000E04  EFBB  F000         	goto	l201
  3171  000E08                     __end_of_main:
  3172                           	callstack 0
  3173  000E08                     PL4:
  3174                           	callstack 24
  3175  000E08  C03E  F045         	movff	?___lwdiv,___lwmod@dividend
  3176  000E0C  C03F  F046         	movff	?___lwdiv+1,___lwmod@dividend+1
  3177  000E10  6A48               	clrf	(___lwmod@divisor+1)^0,c
  3178  000E12  0E0A               	movlw	10
  3179  000E14  6E47               	movwf	___lwmod@divisor^0,c
  3180  000E16  0C0A               	retlw	10
  3181  000E18                     __end_ofPL4:
  3182                           	callstack 0
  3183  000E18                     PL8:
  3184                           	callstack 27
  3185  000E18  0E71               	movlw	113
  3186  000E1A  6E49               	movwf	___lmul@multiplicand^0,c
  3187  000E1C  0E02               	movlw	2
  3188  000E1E  6E4A               	movwf	(___lmul@multiplicand+1)^0,c
  3189  000E20  6A4B               	clrf	(___lmul@multiplicand+2)^0,c
  3190  000E22  6A4C               	clrf	(___lmul@multiplicand+3)^0,c
  3191  000E24  0C02               	retlw	2
  3192  000E26                     __end_ofPL8:
  3193                           	callstack 0
  3194  000E26                     PL10:
  3195                           	callstack 24
  3196  000E26  6E40               	movwf	___lwdiv@divisor^0,c
  3197  000E28  C06B  F03E         	movff	_temperature_1,___lwdiv@dividend
  3198  000E2C  C06C  F03F         	movff	_temperature_1+1,___lwdiv@dividend+1
  3199  000E30  0012               	return	
  3200  000E32                     __end_ofPL10:
  3201                           	callstack 0
  3202  000E32                     PL12:
  3203                           	callstack 24
  3204  000E32  6E40               	movwf	___lwdiv@divisor^0,c
  3205  000E34  C069  F03E         	movff	_temperature_2,___lwdiv@dividend
  3206  000E38  C06A  F03F         	movff	_temperature_2+1,___lwdiv@dividend+1
  3207  000E3C  0012               	return	
  3208  000E3E                     __end_ofPL12:
  3209                           	callstack 0
  3210  000E3E                     PL14:
  3211                           	callstack 24
  3212  000E3E  C051  F05E         	movff	?___lldiv,___llmod@dividend
  3213  000E42  C052  F05F         	movff	?___lldiv+1,___llmod@dividend+1
  3214  000E46  C053  F060         	movff	?___lldiv+2,___llmod@dividend+2
  3215  000E4A  C054  F061         	movff	?___lldiv+3,___llmod@dividend+3
  3216  000E4E  0E0A               	movlw	10
  3217  000E50  6E62               	movwf	___llmod@divisor^0,c
  3218  000E52  6A63               	clrf	(___llmod@divisor+1)^0,c
  3219  000E54  6A64               	clrf	(___llmod@divisor+2)^0,c
  3220  000E56  6A65               	clrf	(___llmod@divisor+3)^0,c
  3221  000E58  0C0A               	retlw	10
  3222  000E5A                     __end_ofPL14:
  3223                           	callstack 0
  3224  000E5A                     PL18:
  3225                           	callstack 24
  3226  000E5A  6E55               	movwf	___lldiv@divisor^0,c
  3227  000E5C  6A56               	clrf	(___lldiv@divisor+1)^0,c
  3228  000E5E  6A57               	clrf	(___lldiv@divisor+2)^0,c
  3229  000E60  6A58               	clrf	(___lldiv@divisor+3)^0,c
  3230  000E62  C015  F051         	movff	_dq2_temp,___lldiv@dividend
  3231  000E66  C016  F052         	movff	_dq2_temp+1,___lldiv@dividend+1
  3232  000E6A  C017  F053         	movff	_dq2_temp+2,___lldiv@dividend+2
  3233  000E6E  C018  F054         	movff	_dq2_temp+3,___lldiv@dividend+3
  3234  000E72  0012               	return	
  3235  000E74                     __end_ofPL18:
  3236                           	callstack 0
  3237  000E74                     PL20:
  3238                           	callstack 24
  3239  000E74  6A48               	clrf	(___lwmod@divisor+1)^0,c
  3240  000E76  0E0A               	movlw	10
  3241  000E78  6E47               	movwf	___lwmod@divisor^0,c
  3242  000E7A  0C0A               	retlw	10
  3243  000E7C                     __end_ofPL20:
  3244                           	callstack 0
  3245  000E7C                     PL22:
  3246                           	callstack 24
  3247  000E7C  C01D  F040         	movff	_set_t_dq2,write_eep_16@data
  3248  000E80  C01E  F041         	movff	_set_t_dq2+1,write_eep_16@data+1
  3249  000E84  0012               	return	
  3250  000E86                     __end_ofPL22:
  3251                           	callstack 0
  3252  000E86                     PL24:
  3253                           	callstack 24
  3254  000E86  0E03               	movlw	3
  3255  000E88  6E41               	movwf	(___lwdiv@divisor+1)^0,c
  3256  000E8A  0CE8               	retlw	232
  3257  000E8C                     __end_ofPL24:
  3258                           	callstack 0
  3259  000E8C                     PL28:
  3260                           	callstack 24
  3261  000E8C  C06B  F045         	movff	_temperature_1,___lwmod@dividend
  3262  000E90  C06C  F046         	movff	_temperature_1+1,___lwmod@dividend+1
  3263  000E94  0012               	return	
  3264  000E96                     __end_ofPL28:
  3265                           	callstack 0
  3266  000E96                     PL30:
  3267                           	callstack 24
  3268  000E96  C069  F045         	movff	_temperature_2,___lwmod@dividend
  3269  000E9A  C06A  F046         	movff	_temperature_2+1,___lwmod@dividend+1
  3270  000E9E  0012               	return	
  3271  000EA0                     __end_ofPL30:
  3272                           	callstack 0
  3273  000EA0                     PL32:
  3274                           	callstack 24
  3275  000EA0  C03E  F046         	movff	?___awdiv,___awmod@dividend
  3276  000EA4  C03F  F047         	movff	?___awdiv+1,___awmod@dividend+1
  3277  000EA8  6A49               	clrf	(___awmod@divisor+1)^0,c
  3278  000EAA  0E0A               	movlw	10
  3279  000EAC  6E48               	movwf	___awmod@divisor^0,c
  3280  000EAE  0C0A               	retlw	10
  3281  000EB0                     __end_ofPL32:
  3282                           	callstack 0
  3283  000EB0                     PL34:
  3284                           	callstack 24
  3285  000EB0  0E27               	movlw	39
  3286  000EB2  6E41               	movwf	(___lwdiv@divisor+1)^0,c
  3287  000EB4  0C10               	retlw	16
  3288  000EB6                     __end_ofPL34:
  3289                           	callstack 0
  3290  000EB6                     PL36:
  3291                           	callstack 24
  3292  000EB6  6E40               	movwf	___awdiv@divisor^0,c
  3293  000EB8  C01D  F03E         	movff	_set_t_dq2,___awdiv@dividend
  3294  000EBC  C01E  F03F         	movff	_set_t_dq2+1,___awdiv@dividend+1
  3295  000EC0  0012               	return	
  3296  000EC2                     __end_ofPL36:
  3297                           	callstack 0
  3298  000EC2                     PL38:
  3299                           	callstack 24
  3300  000EC2  6E40               	movwf	___lwdiv@divisor^0,c
  3301  000EC4  C01B  F03E         	movff	_temp1_fix,___lwdiv@dividend
  3302  000EC8  C01C  F03F         	movff	_temp1_fix+1,___lwdiv@dividend+1
  3303  000ECC  0012               	return	
  3304  000ECE                     __end_ofPL38:
  3305                           	callstack 0
  3306  000ECE                     PL40:
  3307                           	callstack 24
  3308  000ECE  0E02               	movlw	2
  3309  000ED0  6E42               	movwf	lcd_gotoxy@y^0,c
  3310  000ED2  0C01               	retlw	1
  3311  000ED4                     __end_ofPL40:
  3312                           	callstack 0
  3313  000ED4                     PL44:
  3314                           	callstack 24
  3315  000ED4  C021  F03E         	movff	_dq1_up_temp,___lwdiv@dividend
  3316  000ED8  C022  F03F         	movff	_dq1_up_temp+1,___lwdiv@dividend+1
  3317  000EDC  0012               	return	
  3318  000EDE                     __end_ofPL44:
  3319                           	callstack 0
  3320  000EDE                     PL46:
  3321                           	callstack 24
  3322  000EDE  C01F  F03E         	movff	_dq1_dwn_temp,___lwdiv@dividend
  3323  000EE2  C020  F03F         	movff	_dq1_dwn_temp+1,___lwdiv@dividend+1
  3324  000EE6  0012               	return	
  3325  000EE8                     __end_ofPL46:
  3326                           	callstack 0
  3327  000EE8                     PL48:
  3328                           	callstack 24
  3329  000EE8  6A3F               	clrf	(___wmul@multiplier+1)^0,c
  3330  000EEA  0E02               	movlw	2
  3331  000EEC  6E41               	movwf	(___wmul@multiplicand+1)^0,c
  3332  000EEE  0E71               	movlw	113
  3333  000EF0  6E40               	movwf	___wmul@multiplicand^0,c
  3334  000EF2  0C71               	retlw	113
  3335  000EF4                     __end_ofPL48:
  3336                           	callstack 0
  3337  000EF4                     PL50:
  3338                           	callstack 24
  3339  000EF4  C040  F01D         	movff	?_read_eep_16,_set_t_dq2
  3340  000EF8  C041  F01E         	movff	?_read_eep_16+1,_set_t_dq2+1
  3341  000EFC  0012               	return	
  3342  000EFE                     __end_ofPL50:
  3343                           	callstack 0
  3344  000EFE                     PL52:
  3345                           	callstack 24
  3346  000EFE  6A41               	clrf	(___lwdiv@divisor+1)^0,c
  3347  000F00  0E64               	movlw	100
  3348  000F02  6E40               	movwf	___lwdiv@divisor^0,c
  3349  000F04  0C64               	retlw	100
  3350  000F06                     __end_ofPL52:
  3351                           	callstack 0
  3352  000F06                     PL54:
  3353                           	callstack 24
  3354  000F06  6E6E               	movwf	_select^0,c
  3355  000F08  0E01               	movlw	1
  3356  000F0A  6E42               	movwf	lcd_gotoxy@y^0,c
  3357  000F0C  0C01               	retlw	1
  3358  000F0E                     __end_ofPL54:
  3359                           	callstack 0
  3360  000F0E                     PL58:
  3361                           	callstack 24
  3362  000F0E  0E02               	movlw	2
  3363  000F10  6E41               	movwf	(___lwdiv@divisor+1)^0,c
  3364  000F12  0E71               	movlw	113
  3365  000F14  6E40               	movwf	___lwdiv@divisor^0,c
  3366  000F16  0C71               	retlw	113
  3367  000F18                     __end_ofPL58:
  3368                           	callstack 0
  3369  000F18                     PL64:
  3370                           	callstack 24
  3371  000F18  0E02               	movlw	2
  3372  000F1A  6E42               	movwf	lcd_gotoxy@y^0,c
  3373  000F1C  0C0B               	retlw	11
  3374  000F1E                     __end_ofPL64:
  3375                           	callstack 0
  3376  000F1E                     PL66:
  3377                           	callstack 26
  3378  000F1E  6A3F               	clrf	(Delay_ms@delay+1)^0,c
  3379  000F20  0E0A               	movlw	10
  3380  000F22  6E3E               	movwf	Delay_ms@delay^0,c
  3381  000F24  0C0A               	retlw	10
  3382  000F26                     __end_ofPL66:
  3383                           	callstack 0
  3384                           
  3385 ;; *************** function _write_eep_16 *****************
  3386 ;; Defined at:
  3387 ;;		line 55 in file "eeprom.c"
  3388 ;; Parameters:    Size  Location     Type
  3389 ;;  address         1    wreg     unsigned char 
  3390 ;;  data            2    5[COMRAM] unsigned int 
  3391 ;; Auto vars:     Size  Location     Type
  3392 ;;  address         1    7[COMRAM] unsigned char 
  3393 ;; Return value:  Size  Location     Type
  3394 ;;                  1    wreg      void 
  3395 ;; Registers used:
  3396 ;;		wreg, status,2, status,0, cstack
  3397 ;; Tracked objects:
  3398 ;;		On entry : 0/0
  3399 ;;		On exit  : 0/0
  3400 ;;		Unchanged: 0/0
  3401 ;; Data sizes:     COMRAM   BANK0   BANK1
  3402 ;;      Params:         2       0       0
  3403 ;;      Locals:         1       0       0
  3404 ;;      Temps:          0       0       0
  3405 ;;      Totals:         3       0       0
  3406 ;;Total ram usage:        3 bytes
  3407 ;; Hardware stack levels used: 1
  3408 ;; Hardware stack levels required when called: 3
  3409 ;; This function calls:
  3410 ;;		_write_eep
  3411 ;; This function is called by:
  3412 ;;		_main
  3413 ;; This function uses a non-reentrant model
  3414 ;;
  3415                           
  3416                           	psect	text1
  3417  001B38                     __ptext1:
  3418                           	callstack 0
  3419  001B38                     _write_eep_16:
  3420                           	callstack 27
  3421                           
  3422                           ;incstack = 0
  3423                           ;write_eep_16@address stored from wreg
  3424  001B38  6E42               	movwf	write_eep_16@address^0,c
  3425                           
  3426                           ;eeprom.c: 56: write_eep(address, (uint8_t) (data >> 8));
  3427  001B3A  C041  F03E         	movff	write_eep_16@data+1,write_eep@data
  3428  001B3E  5042               	movf	write_eep_16@address^0,w,c
  3429  001B40  EC1E  F00D         	call	_write_eep
  3430                           
  3431                           ;eeprom.c: 57: write_eep(address + 1, (uint8_t) data);
  3432  001B44  C040  F03E         	movff	write_eep_16@data,write_eep@data
  3433  001B48  2842               	incf	write_eep_16@address^0,w,c
  3434  001B4A  EF1E  F00D         	goto	_write_eep
  3435  001B4E                     __end_of_write_eep_16:
  3436                           	callstack 0
  3437                           
  3438 ;; *************** function _outValPreset *****************
  3439 ;; Defined at:
  3440 ;;		line 751 in file "main.c"
  3441 ;; Parameters:    Size  Location     Type
  3442 ;;		None
  3443 ;; Auto vars:     Size  Location     Type
  3444 ;;		None
  3445 ;; Return value:  Size  Location     Type
  3446 ;;                  1    wreg      void 
  3447 ;; Registers used:
  3448 ;;		wreg, status,2, status,0, cstack
  3449 ;; Tracked objects:
  3450 ;;		On entry : 0/0
  3451 ;;		On exit  : 0/0
  3452 ;;		Unchanged: 0/0
  3453 ;; Data sizes:     COMRAM   BANK0   BANK1
  3454 ;;      Params:         0       0       0
  3455 ;;      Locals:         0       0       0
  3456 ;;      Temps:          0       0       0
  3457 ;;      Totals:         0       0       0
  3458 ;;Total ram usage:        0 bytes
  3459 ;; Hardware stack levels used: 1
  3460 ;; Hardware stack levels required when called: 5
  3461 ;; This function calls:
  3462 ;;		___lldiv
  3463 ;;		___lmul
  3464 ;;		_clearLCD
  3465 ;;		_lcd_gotoxy
  3466 ;;		_read_eep_16
  3467 ;; This function is called by:
  3468 ;;		_main
  3469 ;; This function uses a non-reentrant model
  3470 ;;
  3471                           
  3472                           	psect	text2
  3473  000F26                     __ptext2:
  3474                           	callstack 0
  3475  000F26                     _outValPreset:
  3476                           	callstack 25
  3477                           
  3478                           ;main.c: 752: clearLCD();
  3479                           
  3480                           ;incstack = 0
  3481  000F26  EC8F  F00D         	call	_clearLCD	;wreg free
  3482                           
  3483                           ;main.c: 753: lcd_gotoxy(10, 2);
  3484  000F2A  D890               	call	PL62	;call to abstracted procedure
  3485  000F2C  EC74  F00D         	call	_lcd_gotoxy
  3486                           
  3487                           ;main.c: 754: switch (sub_sel) {
  3488  000F30  D05A               	goto	l3242
  3489  000F32                     l3222:
  3490                           
  3491                           ;main.c: 757: set_t_dq2 = (uint16_t) ((uint32_t) read_eep_16(23) * 625 / 100);
  3492  000F32  0E17               	movlw	23
  3493  000F34  ECE3  F00C         	call	_read_eep_16
  3494  000F38  D877               	call	PL6	;call to abstracted procedure
  3495  000F3A  ECB5  F00B         	call	___lmul	;wreg free
  3496  000F3E  D866               	call	PL2	;call to abstracted procedure
  3497  000F40  EC7B  F00A         	call	___lldiv	;wreg free
  3498                           
  3499                           ;main.c: 759: break;
  3500  000F44  D07E               	goto	PL16	;call to abstracted procedure
  3501  000F46                     l3224:
  3502                           
  3503                           ;main.c: 761: set_t_dq2 = (uint16_t) ((uint32_t) read_eep_16(25) * 625 / 100);
  3504  000F46  0E19               	movlw	25
  3505  000F48  ECE3  F00C         	call	_read_eep_16
  3506  000F4C  D86D               	call	PL6	;call to abstracted procedure
  3507  000F4E  ECB5  F00B         	call	___lmul	;wreg free
  3508  000F52  D85C               	call	PL2	;call to abstracted procedure
  3509  000F54  EC7B  F00A         	call	___lldiv	;wreg free
  3510                           
  3511                           ;main.c: 763: break;
  3512  000F58  D074               	goto	PL16	;call to abstracted procedure
  3513  000F5A                     l3226:
  3514                           
  3515                           ;main.c: 765: set_t_dq2 = (uint16_t) ((uint32_t) read_eep_16(27) * 625 / 100);
  3516  000F5A  0E1B               	movlw	27
  3517  000F5C  ECE3  F00C         	call	_read_eep_16
  3518  000F60  D863               	call	PL6	;call to abstracted procedure
  3519  000F62  ECB5  F00B         	call	___lmul	;wreg free
  3520  000F66  D852               	call	PL2	;call to abstracted procedure
  3521  000F68  EC7B  F00A         	call	___lldiv	;wreg free
  3522                           
  3523                           ;main.c: 767: break;
  3524  000F6C  D06A               	goto	PL16	;call to abstracted procedure
  3525  000F6E                     l3228:
  3526                           
  3527                           ;main.c: 769: set_t_dq2 = (uint16_t) ((uint32_t) read_eep_16(29) * 625 / 100);
  3528  000F6E  0E1D               	movlw	29
  3529  000F70  ECE3  F00C         	call	_read_eep_16
  3530  000F74  D859               	call	PL6	;call to abstracted procedure
  3531  000F76  ECB5  F00B         	call	___lmul	;wreg free
  3532  000F7A  D848               	call	PL2	;call to abstracted procedure
  3533  000F7C  EC7B  F00A         	call	___lldiv	;wreg free
  3534                           
  3535                           ;main.c: 771: break;
  3536  000F80  D060               	goto	PL16	;call to abstracted procedure
  3537  000F82                     l3230:
  3538                           
  3539                           ;main.c: 773: set_t_dq2 = (uint16_t) ((uint32_t) read_eep_16(31) * 625 / 100);
  3540  000F82  0E1F               	movlw	31
  3541  000F84  ECE3  F00C         	call	_read_eep_16
  3542  000F88  D84F               	call	PL6	;call to abstracted procedure
  3543  000F8A  ECB5  F00B         	call	___lmul	;wreg free
  3544  000F8E  D83E               	call	PL2	;call to abstracted procedure
  3545  000F90  EC7B  F00A         	call	___lldiv	;wreg free
  3546                           
  3547                           ;main.c: 775: break;
  3548  000F94  D056               	goto	PL16	;call to abstracted procedure
  3549  000F96                     l3232:
  3550                           
  3551                           ;main.c: 777: set_t_dq2 = (uint16_t) ((uint32_t) read_eep_16(33) * 625 / 100);
  3552  000F96  0E21               	movlw	33
  3553  000F98  ECE3  F00C         	call	_read_eep_16
  3554  000F9C  D845               	call	PL6	;call to abstracted procedure
  3555  000F9E  ECB5  F00B         	call	___lmul	;wreg free
  3556  000FA2  D834               	call	PL2	;call to abstracted procedure
  3557  000FA4  EC7B  F00A         	call	___lldiv	;wreg free
  3558                           
  3559                           ;main.c: 779: break;
  3560  000FA8  D04C               	goto	PL16	;call to abstracted procedure
  3561  000FAA                     l3234:
  3562                           
  3563                           ;main.c: 781: set_t_dq2 = (uint16_t) ((uint32_t) read_eep_16(35) * 625 / 100);
  3564  000FAA  0E23               	movlw	35
  3565  000FAC  ECE3  F00C         	call	_read_eep_16
  3566  000FB0  D83B               	call	PL6	;call to abstracted procedure
  3567  000FB2  ECB5  F00B         	call	___lmul	;wreg free
  3568  000FB6  D82A               	call	PL2	;call to abstracted procedure
  3569  000FB8  EC7B  F00A         	call	___lldiv	;wreg free
  3570                           
  3571                           ;main.c: 783: break;
  3572  000FBC  D042               	goto	PL16	;call to abstracted procedure
  3573  000FBE                     l3236:
  3574                           
  3575                           ;main.c: 785: set_t_dq2 = (uint16_t) ((uint32_t) read_eep_16(37) * 625 / 100);
  3576  000FBE  0E25               	movlw	37
  3577  000FC0  ECE3  F00C         	call	_read_eep_16
  3578  000FC4  D831               	call	PL6	;call to abstracted procedure
  3579  000FC6  ECB5  F00B         	call	___lmul	;wreg free
  3580  000FCA  D820               	call	PL2	;call to abstracted procedure
  3581  000FCC  EC7B  F00A         	call	___lldiv	;wreg free
  3582                           
  3583                           ;main.c: 787: break;
  3584  000FD0  D038               	goto	PL16	;call to abstracted procedure
  3585  000FD2                     l3238:
  3586                           
  3587                           ;main.c: 789: set_t_dq2 = (uint16_t) ((uint32_t) read_eep_16(39) * 625 / 100);
  3588  000FD2  0E27               	movlw	39
  3589  000FD4  ECE3  F00C         	call	_read_eep_16
  3590  000FD8  D827               	call	PL6	;call to abstracted procedure
  3591  000FDA  ECB5  F00B         	call	___lmul	;wreg free
  3592  000FDE  D816               	call	PL2	;call to abstracted procedure
  3593  000FE0  EC7B  F00A         	call	___lldiv	;wreg free
  3594                           
  3595                           ;main.c: 791: break;
  3596  000FE4  D02E               	goto	PL16	;call to abstracted procedure
  3597  000FE6                     l3242:
  3598  000FE6  502C               	movf	_sub_sel^0,w,c
  3599                           
  3600                           ; Switch size 1, requested type "space"
  3601                           ; Number of cases is 9, Range of values is 0 to 8
  3602                           ; switch strategies available:
  3603                           ; Name         Instructions Cycles
  3604                           ; simple_byte           28    15 (average)
  3605                           ;	Chosen strategy is simple_byte
  3606  000FE8  E0A4               	bz	l3222
  3607  000FEA  0A01               	xorlw	1	; case 1
  3608  000FEC  E0AC               	bz	l3224
  3609  000FEE  0A03               	xorlw	3	; case 2
  3610  000FF0  E0B4               	bz	l3226
  3611  000FF2  0A01               	xorlw	1	; case 3
  3612  000FF4  E0BC               	bz	l3228
  3613  000FF6  0A07               	xorlw	7	; case 4
  3614  000FF8  E0C4               	bz	l3230
  3615  000FFA  0A01               	xorlw	1	; case 5
  3616  000FFC  E0CC               	bz	l3232
  3617  000FFE  0A03               	xorlw	3	; case 6
  3618  001000  E0D4               	bz	l3234
  3619  001002  0A01               	xorlw	1	; case 7
  3620  001004  E0DC               	bz	l3236
  3621  001006  0A0F               	xorlw	15	; case 8
  3622  001008  E0E4               	bz	l3238
  3623  00100A  0012               	return		;funcret
  3624  00100C                     __end_of_outValPreset:
  3625                           	callstack 0
  3626  00100C                     PL2:
  3627                           	callstack 24
  3628  00100C  C045  F051         	movff	?___lmul,___lldiv@dividend
  3629  001010  C046  F052         	movff	?___lmul+1,___lldiv@dividend+1
  3630  001014  C047  F053         	movff	?___lmul+2,___lldiv@dividend+2
  3631  001018  C048  F054         	movff	?___lmul+3,___lldiv@dividend+3
  3632  00101C  0E64               	movlw	100
  3633  00101E  6E55               	movwf	___lldiv@divisor^0,c
  3634  001020  6A56               	clrf	(___lldiv@divisor+1)^0,c
  3635  001022  6A57               	clrf	(___lldiv@divisor+2)^0,c
  3636  001024  6A58               	clrf	(___lldiv@divisor+3)^0,c
  3637  001026  0C64               	retlw	100
  3638  001028                     __end_ofPL2:
  3639                           	callstack 0
  3640  001028                     PL6:
  3641                           	callstack 24
  3642  001028  C040  F045         	movff	?_read_eep_16,___lmul@multiplier
  3643  00102C  C041  F046         	movff	?_read_eep_16+1,___lmul@multiplier+1
  3644  001030  6A47               	clrf	(___lmul@multiplier+2)^0,c
  3645  001032  6A48               	clrf	(___lmul@multiplier+3)^0,c
  3646  001034  0E71               	movlw	113
  3647  001036  6E49               	movwf	___lmul@multiplicand^0,c
  3648  001038  0E02               	movlw	2
  3649  00103A  6E4A               	movwf	(___lmul@multiplicand+1)^0,c
  3650  00103C  6A4B               	clrf	(___lmul@multiplicand+2)^0,c
  3651  00103E  6A4C               	clrf	(___lmul@multiplicand+3)^0,c
  3652  001040  0C02               	retlw	2
  3653  001042                     __end_ofPL6:
  3654                           	callstack 0
  3655  001042                     PL16:
  3656                           	callstack 25
  3657  001042  C051  F01D         	movff	?___lldiv,_set_t_dq2
  3658  001046  C052  F01E         	movff	?___lldiv+1,_set_t_dq2+1
  3659  00104A  0012               	return	
  3660  00104C                     __end_ofPL16:
  3661                           	callstack 0
  3662  00104C                     PL62:
  3663                           	callstack 24
  3664  00104C  0E02               	movlw	2
  3665  00104E  6E42               	movwf	lcd_gotoxy@y^0,c
  3666  001050  0C0A               	retlw	10
  3667  001052                     __end_ofPL62:
  3668                           	callstack 0
  3669                           
  3670 ;; *************** function _read_eep_16 *****************
  3671 ;; Defined at:
  3672 ;;		line 60 in file "eeprom.c"
  3673 ;; Parameters:    Size  Location     Type
  3674 ;;  address         1    wreg     unsigned char 
  3675 ;; Auto vars:     Size  Location     Type
  3676 ;;  address         1    9[COMRAM] unsigned char 
  3677 ;;  data            2    7[COMRAM] unsigned int 
  3678 ;; Return value:  Size  Location     Type
  3679 ;;                  2    5[COMRAM] unsigned int 
  3680 ;; Registers used:
  3681 ;;		wreg, status,2, status,0, cstack
  3682 ;; Tracked objects:
  3683 ;;		On entry : 0/0
  3684 ;;		On exit  : 0/0
  3685 ;;		Unchanged: 0/0
  3686 ;; Data sizes:     COMRAM   BANK0   BANK1
  3687 ;;      Params:         2       0       0
  3688 ;;      Locals:         3       0       0
  3689 ;;      Temps:          0       0       0
  3690 ;;      Totals:         5       0       0
  3691 ;;Total ram usage:        5 bytes
  3692 ;; Hardware stack levels used: 1
  3693 ;; Hardware stack levels required when called: 3
  3694 ;; This function calls:
  3695 ;;		_read_eep
  3696 ;; This function is called by:
  3697 ;;		_main
  3698 ;;		_outValPreset
  3699 ;; This function uses a non-reentrant model
  3700 ;;
  3701                           
  3702                           	psect	text3
  3703  0019C6                     __ptext3:
  3704                           	callstack 0
  3705  0019C6                     _read_eep_16:
  3706                           	callstack 27
  3707                           
  3708                           ;incstack = 0
  3709                           ;read_eep_16@address stored from wreg
  3710  0019C6  6E44               	movwf	read_eep_16@address^0,c
  3711                           
  3712                           ;eeprom.c: 63: data = read_eep(address) << 8;
  3713  0019C8  C044  F03E         	movff	read_eep_16@address,read_eep@address
  3714  0019CC  6A3F               	clrf	(read_eep@address+1)^0,c
  3715  0019CE  ECB2  F00D         	call	_read_eep	;wreg free
  3716  0019D2  6E43               	movwf	(read_eep_16@data+1)^0,c
  3717  0019D4  6A42               	clrf	read_eep_16@data^0,c
  3718                           
  3719                           ;eeprom.c: 64: data |= read_eep(address+1);
  3720  0019D6  2844               	incf	read_eep_16@address^0,w,c
  3721  0019D8  6E3E               	movwf	read_eep@address^0,c
  3722  0019DA  6A3F               	clrf	(read_eep@address+1)^0,c
  3723  0019DC  0E00               	movlw	0
  3724  0019DE  223F               	addwfc	(read_eep@address+1)^0,f,c
  3725  0019E0  ECB2  F00D         	call	_read_eep	;wreg free
  3726  0019E4  1242               	iorwf	read_eep_16@data^0,f,c
  3727                           
  3728                           ;eeprom.c: 65: return data;
  3729  0019E6  C042  F040         	movff	read_eep_16@data,?_read_eep_16
  3730  0019EA  C043  F041         	movff	read_eep_16@data+1,?_read_eep_16+1
  3731  0019EE  0012               	return		;funcret
  3732  0019F0                     __end_of_read_eep_16:
  3733                           	callstack 0
  3734                           
  3735 ;; *************** function _lcd_putc *****************
  3736 ;; Defined at:
  3737 ;;		line 90 in file "hd44780.c"
  3738 ;; Parameters:    Size  Location     Type
  3739 ;;  c               1    wreg     unsigned char 
  3740 ;; Auto vars:     Size  Location     Type
  3741 ;;  c               1    7[COMRAM] unsigned char 
  3742 ;; Return value:  Size  Location     Type
  3743 ;;                  1    wreg      void 
  3744 ;; Registers used:
  3745 ;;		wreg, status,2, status,0, cstack
  3746 ;; Tracked objects:
  3747 ;;		On entry : 0/0
  3748 ;;		On exit  : 0/0
  3749 ;;		Unchanged: 0/0
  3750 ;; Data sizes:     COMRAM   BANK0   BANK1
  3751 ;;      Params:         0       0       0
  3752 ;;      Locals:         1       0       0
  3753 ;;      Temps:          0       0       0
  3754 ;;      Totals:         1       0       0
  3755 ;;Total ram usage:        1 bytes
  3756 ;; Hardware stack levels used: 1
  3757 ;; Hardware stack levels required when called: 4
  3758 ;; This function calls:
  3759 ;;		_lcdWrite
  3760 ;; This function is called by:
  3761 ;;		_main
  3762 ;; This function uses a non-reentrant model
  3763 ;;
  3764                           
  3765                           	psect	text4
  3766  001B76                     __ptext4:
  3767                           	callstack 0
  3768  001B76                     _lcd_putc:
  3769                           	callstack 26
  3770                           
  3771                           ;incstack = 0
  3772                           ;lcd_putc@c stored from wreg
  3773  001B76  6E42               	movwf	lcd_putc@c^0,c
  3774                           
  3775                           ;hd44780.c: 92: lcdWrite(c, DATA);
  3776  001B78  0E01               	movlw	1
  3777  001B7A  6E40               	movwf	lcdWrite@type^0,c
  3778  001B7C  5042               	movf	lcd_putc@c^0,w,c
  3779  001B7E  EF42  F00D         	goto	_lcdWrite
  3780  001B82                     __end_of_lcd_putc:
  3781                           	callstack 0
  3782                           
  3783 ;; *************** function _lcdPrint *****************
  3784 ;; Defined at:
  3785 ;;		line 96 in file "hd44780.c"
  3786 ;; Parameters:    Size  Location     Type
  3787 ;;  t               2   10[COMRAM] PTR const unsigned char 
  3788 ;;		 -> STR_26(3), STR_25(3), STR_24(3), STR_23(3), 
  3789 ;;		 -> STR_22(3), STR_21(3), STR_20(3), STR_19(3), 
  3790 ;;		 -> STR_18(3), STR_17(17), STR_16(17), STR_15(15), 
  3791 ;;		 -> STR_14(6), STR_13(13), STR_12(11), STR_11(13), 
  3792 ;;		 -> STR_10(15), STR_9(16), STR_8(14), STR_7(16), 
  3793 ;;		 -> STR_6(16), STR_5(16), STR_4(13), STR_3(16), 
  3794 ;;		 -> STR_2(16), STR_1(16), 
  3795 ;; Auto vars:     Size  Location     Type
  3796 ;;		None
  3797 ;; Return value:  Size  Location     Type
  3798 ;;                  1    wreg      void 
  3799 ;; Registers used:
  3800 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3801 ;; Tracked objects:
  3802 ;;		On entry : 0/0
  3803 ;;		On exit  : 0/0
  3804 ;;		Unchanged: 0/0
  3805 ;; Data sizes:     COMRAM   BANK0   BANK1
  3806 ;;      Params:         2       0       0
  3807 ;;      Locals:         0       0       0
  3808 ;;      Temps:          4       0       0
  3809 ;;      Totals:         6       0       0
  3810 ;;Total ram usage:        6 bytes
  3811 ;; Hardware stack levels used: 1
  3812 ;; Hardware stack levels required when called: 5
  3813 ;; This function calls:
  3814 ;;		_lcdWrite
  3815 ;;		_lcd_gotoxy
  3816 ;; This function is called by:
  3817 ;;		_main
  3818 ;; This function uses a non-reentrant model
  3819 ;;
  3820                           
  3821                           	psect	text5
  3822  001226                     __ptext5:
  3823                           	callstack 0
  3824  001226                     _lcdPrint:
  3825                           	callstack 25
  3826                           
  3827                           ;hd44780.c: 97: while(*t != '\0'){
  3828                           
  3829                           ;incstack = 0
  3830  001226  D046               	goto	l3078
  3831  001228                     l3058:
  3832                           
  3833                           ;hd44780.c: 100: lcdWrite(1, COMMAND);
  3834  001228  D84F               	call	PL68	;call to abstracted procedure
  3835  00122A  EC42  F00D         	call	_lcdWrite
  3836                           
  3837                           ;hd44780.c: 101: _delay((unsigned long)((2)*(8000000/4000.0)));
  3838  00122E  0E06               	movlw	6
  3839  001230  6E47               	movwf	??_lcdPrint^0,c
  3840  001232  0E30               	movlw	48
  3841  001234                     u3137:
  3842  001234  2EE8               	decfsz	wreg,f,c
  3843  001236  D7FE               	bra	u3137
  3844  001238  2E47               	decfsz	??_lcdPrint^0,f,c
  3845  00123A  D7FC               	bra	u3137
  3846  00123C  D000               	nop2	
  3847                           
  3848                           ;hd44780.c: 102: break;
  3849  00123E  D038               	goto	l3076
  3850  001240                     l3062:
  3851                           
  3852                           ;hd44780.c: 105: lcd_gotoxy(1, 2);
  3853  001240  EC67  F007         	call	PL40	;call to abstracted procedure
  3854  001244  EC74  F00D         	call	_lcd_gotoxy
  3855                           
  3856                           ;hd44780.c: 106: break;
  3857  001248  D033               	goto	l3076
  3858  00124A                     l3064:
  3859                           
  3860                           ;hd44780.c: 109: lcdWrite(0x10, COMMAND);
  3861  00124A  0E00               	movlw	0
  3862  00124C  6E40               	movwf	lcdWrite@type^0,c
  3863  00124E  0E10               	movlw	16
  3864  001250  EC42  F00D         	call	_lcdWrite
  3865                           
  3866                           ;hd44780.c: 110: break;
  3867  001254  D02D               	goto	l3076
  3868  001256                     l3066:
  3869                           
  3870                           ;hd44780.c: 113: if (*t < 0xC0) {
  3871  001256  C045  FFF6         	movff	lcdPrint@t,tblptrl
  3872  00125A  C046  FFF7         	movff	lcdPrint@t+1,tblptrh
  3873  00125E                     	if	0	;tblptru may be non-zero
  3874  00125E                     	endif
  3875  00125E                     	if	0	;tblptru may be non-zero
  3876  00125E                     	endif
  3877  00125E  0EC0               	movlw	192
  3878  001260  0008               	tblrd		*
  3879  001262  60F5               	cpfslt	tablat,c
  3880  001264  D006               	goto	l3070
  3881                           
  3882                           ;hd44780.c: 114: lcdWrite(*t, DATA);
  3883  001266  0E01               	movlw	1
  3884  001268  6E40               	movwf	lcdWrite@type^0,c
  3885  00126A  D827               	call	PL26	;call to abstracted procedure
  3886  00126C  EC42  F00D         	call	_lcdWrite
  3887                           
  3888                           ;hd44780.c: 115: } else {
  3889  001270  D01F               	goto	l3076
  3890  001272                     l3070:
  3891                           
  3892                           ;hd44780.c: 116: lcdWrite(HD44780_CYR[(unsigned char) (*t) - 0xC0], DATA);
  3893  001272  0E01               	movlw	1
  3894  001274  6E40               	movwf	lcdWrite@type^0,c
  3895  001276  0E40               	movlw	64
  3896  001278  6E47               	movwf	??_lcdPrint^0,c
  3897  00127A  6848               	setf	(??_lcdPrint+1)^0,c
  3898  00127C  D81E               	call	PL26	;call to abstracted procedure
  3899  00127E  6E49               	movwf	(??_lcdPrint+2)^0,c
  3900  001280  6A4A               	clrf	(??_lcdPrint+3)^0,c
  3901  001282  5047               	movf	??_lcdPrint^0,w,c
  3902  001284  2649               	addwf	(??_lcdPrint+2)^0,f,c
  3903  001286  5048               	movf	(??_lcdPrint+1)^0,w,c
  3904  001288  224A               	addwfc	(??_lcdPrint+3)^0,f,c
  3905  00128A  0E8D               	movlw	low _HD44780_CYR
  3906  00128C  2449               	addwf	(??_lcdPrint+2)^0,w,c
  3907  00128E  6EF6               	movwf	tblptrl,c
  3908  001290  0E1E               	movlw	high _HD44780_CYR
  3909  001292  204A               	addwfc	(??_lcdPrint+3)^0,w,c
  3910  001294  6EF7               	movwf	tblptrh,c
  3911  001296                     	if	0	;There are less than 3 active tblptr bytes
  3912  001296                     	endif
  3913  001296  0008               	tblrd		*
  3914  001298  50F5               	movf	tablat,w,c
  3915  00129A  EC42  F00D         	call	_lcdWrite
  3916  00129E  D008               	goto	l3076
  3917  0012A0                     l3074:
  3918  0012A0  D80C               	call	PL26	;call to abstracted procedure
  3919                           
  3920                           ; Switch size 1, requested type "space"
  3921                           ; Number of cases is 3, Range of values is 8 to 12
  3922                           ; switch strategies available:
  3923                           ; Name         Instructions Cycles
  3924                           ; simple_byte           10     6 (average)
  3925                           ;	Chosen strategy is simple_byte
  3926  0012A2  0A08               	xorlw	8	; case 8
  3927  0012A4  E0D2               	bz	l3064
  3928  0012A6  0A02               	xorlw	2	; case 10
  3929  0012A8  E0CB               	bz	l3062
  3930  0012AA  0A06               	xorlw	6	; case 12
  3931  0012AC  E0BD               	bz	l3058
  3932  0012AE  D7D3               	goto	l3066
  3933  0012B0                     l3076:
  3934                           
  3935                           ;hd44780.c: 121: *t++;
  3936  0012B0  4A45               	infsnz	lcdPrint@t^0,f,c
  3937  0012B2  2A46               	incf	(lcdPrint@t+1)^0,f,c
  3938  0012B4                     l3078:
  3939  0012B4  D802               	call	PL26	;call to abstracted procedure
  3940  0012B6  E1F4               	bnz	l3074
  3941  0012B8  0012               	return		;funcret
  3942  0012BA                     __end_of_lcdPrint:
  3943                           	callstack 0
  3944  0012BA                     PL26:
  3945                           	callstack 25
  3946  0012BA  C045  FFF6         	movff	lcdPrint@t,tblptrl
  3947  0012BE  C046  FFF7         	movff	lcdPrint@t+1,tblptrh
  3948  0012C2                     	if	0	;tblptru may be non-zero
  3949  0012C2                     	endif
  3950  0012C2                     	if	0	;tblptru may be non-zero
  3951  0012C2                     	endif
  3952  0012C2  0008               	tblrd		*
  3953  0012C4  50F5               	movf	tablat,w,c
  3954  0012C6  0012               	return	
  3955  0012C8                     __end_ofPL26:
  3956                           	callstack 0
  3957  0012C8                     PL68:
  3958                           	callstack 25
  3959  0012C8  0E00               	movlw	0
  3960  0012CA  6E40               	movwf	lcdWrite@type^0,c
  3961  0012CC  0C01               	retlw	1
  3962  0012CE                     __end_ofPL68:
  3963                           	callstack 0
  3964                           
  3965 ;; *************** function _lcd_gotoxy *****************
  3966 ;; Defined at:
  3967 ;;		line 76 in file "hd44780.c"
  3968 ;; Parameters:    Size  Location     Type
  3969 ;;  x               1    wreg     unsigned char 
  3970 ;;  y               1    7[COMRAM] unsigned char 
  3971 ;; Auto vars:     Size  Location     Type
  3972 ;;  x               1    8[COMRAM] unsigned char 
  3973 ;;  address         1    9[COMRAM] unsigned char 
  3974 ;; Return value:  Size  Location     Type
  3975 ;;                  1    wreg      void 
  3976 ;; Registers used:
  3977 ;;		wreg, status,2, status,0, cstack
  3978 ;; Tracked objects:
  3979 ;;		On entry : 0/0
  3980 ;;		On exit  : 0/0
  3981 ;;		Unchanged: 0/0
  3982 ;; Data sizes:     COMRAM   BANK0   BANK1
  3983 ;;      Params:         1       0       0
  3984 ;;      Locals:         2       0       0
  3985 ;;      Temps:          0       0       0
  3986 ;;      Totals:         3       0       0
  3987 ;;Total ram usage:        3 bytes
  3988 ;; Hardware stack levels used: 1
  3989 ;; Hardware stack levels required when called: 4
  3990 ;; This function calls:
  3991 ;;		_lcdWrite
  3992 ;; This function is called by:
  3993 ;;		_main
  3994 ;;		_outValPreset
  3995 ;;		_lcdPrint
  3996 ;; This function uses a non-reentrant model
  3997 ;;
  3998                           
  3999                           	psect	text6
  4000  001AE8                     __ptext6:
  4001                           	callstack 0
  4002  001AE8                     _lcd_gotoxy:
  4003                           	callstack 25
  4004                           
  4005                           ;incstack = 0
  4006                           ;lcd_gotoxy@x stored from wreg
  4007  001AE8  6E43               	movwf	lcd_gotoxy@x^0,c
  4008                           
  4009                           ;hd44780.c: 77: uint8_t address;;hd44780.c: 79: if (y != 1)
  4010  001AEA  0442               	decf	lcd_gotoxy@y^0,w,c
  4011  001AEC  E003               	bz	l480
  4012                           
  4013                           ;hd44780.c: 80: address = 0x40;
  4014  001AEE  0E40               	movlw	64
  4015  001AF0  6E44               	movwf	lcd_gotoxy@address^0,c
  4016  001AF2  D001               	goto	l2794
  4017  001AF4                     l480:
  4018                           
  4019                           ;hd44780.c: 81: else;hd44780.c: 82: address = 0;
  4020  001AF4  6A44               	clrf	lcd_gotoxy@address^0,c
  4021  001AF6                     l2794:
  4022                           
  4023                           ;hd44780.c: 84: address += x - 1;
  4024  001AF6  0443               	decf	lcd_gotoxy@x^0,w,c
  4025  001AF8  2644               	addwf	lcd_gotoxy@address^0,f,c
  4026                           
  4027                           ;hd44780.c: 85: lcdWrite(0x80 | address, COMMAND);
  4028  001AFA  6A40               	clrf	lcdWrite@type^0,c
  4029  001AFC  5044               	movf	lcd_gotoxy@address^0,w,c
  4030  001AFE  0980               	iorlw	128
  4031  001B00  EF42  F00D         	goto	_lcdWrite
  4032  001B04                     __end_of_lcd_gotoxy:
  4033                           	callstack 0
  4034                           
  4035 ;; *************** function _key_press *****************
  4036 ;; Defined at:
  4037 ;;		line 7 in file "key.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;		None
  4040 ;; Auto vars:     Size  Location     Type
  4041 ;;  key             1    3[COMRAM] unsigned char 
  4042 ;; Return value:  Size  Location     Type
  4043 ;;                  1    wreg      void 
  4044 ;; Registers used:
  4045 ;;		wreg, status,2, status,0
  4046 ;; Tracked objects:
  4047 ;;		On entry : 0/0
  4048 ;;		On exit  : 0/0
  4049 ;;		Unchanged: 0/0
  4050 ;; Data sizes:     COMRAM   BANK0   BANK1
  4051 ;;      Params:         0       0       0
  4052 ;;      Locals:         1       0       0
  4053 ;;      Temps:          0       0       0
  4054 ;;      Totals:         1       0       0
  4055 ;;Total ram usage:        1 bytes
  4056 ;; Hardware stack levels used: 1
  4057 ;; Hardware stack levels required when called: 2
  4058 ;; This function calls:
  4059 ;;		Nothing
  4060 ;; This function is called by:
  4061 ;;		_main
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           	psect	text7
  4066  001710                     __ptext7:
  4067                           	callstack 0
  4068  001710                     _key_press:
  4069                           	callstack 28
  4070                           
  4071                           ;key.c: 9: static uint16_t count = 0;;key.c: 10: uint8_t key;;key.c: 11: if (((PORTB & (
      +                          1 << 1)) == 0) && ((PORTB & (1 << 2)) == 0))
  4072                           
  4073                           ;incstack = 0
  4074  001710  A281               	btfss	129,1,c	;volatile
  4075  001712  B481               	btfsc	129,2,c	;volatile
  4076  001714  D002               	goto	l587
  4077                           
  4078                           ;key.c: 12: key = 3;
  4079  001716  0E03               	movlw	3
  4080  001718  D007               	goto	L10
  4081  00171A                     l587:
  4082                           
  4083                           ;key.c: 13: else if ((PORTB & (1 << 1)) == 0)
  4084  00171A  B281               	btfsc	129,1,c	;volatile
  4085  00171C  D002               	goto	l589
  4086                           
  4087                           ;key.c: 14: key = 1;
  4088  00171E  0E01               	movlw	1
  4089  001720  D003               	goto	L10
  4090  001722                     l589:
  4091                           
  4092                           ;key.c: 15: else if ((PORTB & (1 << 2)) == 0)
  4093  001722  B481               	btfsc	129,2,c	;volatile
  4094  001724  D003               	goto	l591
  4095                           
  4096                           ;key.c: 16: key = 2;
  4097  001726  0E02               	movlw	2
  4098  001728                     L10:
  4099  001728  6E3E               	movwf	key_press@key^0,c
  4100  00172A  D001               	goto	l3090
  4101  00172C                     l591:
  4102                           
  4103                           ;key.c: 17: else;key.c: 18: key = 0;
  4104  00172C  6A3E               	clrf	key_press@key^0,c
  4105  00172E                     l3090:
  4106                           
  4107                           ;key.c: 21: if (key) {
  4108  00172E  503E               	movf	key_press@key^0,w,c
  4109  001730  E019               	bz	l593
  4110                           
  4111                           ;key.c: 22: if (count > 300) {
  4112  001732  0E2D               	movlw	45
  4113  001734  5C19               	subwf	key_press@count^0,w,c
  4114  001736  0E01               	movlw	1
  4115  001738  581A               	subwfb	(key_press@count+1)^0,w,c
  4116  00173A  E309               	bnc	l3102
  4117                           
  4118                           ;key.c: 23: count = 300 - 20;
  4119  00173C  0E01               	movlw	1
  4120  00173E  6E1A               	movwf	(key_press@count+1)^0,c
  4121  001740  0E18               	movlw	24
  4122  001742  6E19               	movwf	key_press@count^0,c
  4123                           
  4124                           ;key.c: 24: key_pressed = key;
  4125  001744  C03E  F025         	movff	key_press@key,_key_pressed	;volatile
  4126                           
  4127                           ;key.c: 25: keyLong = 1;
  4128  001748  0E01               	movlw	1
  4129  00174A  6E2F               	movwf	_keyLong^0,c
  4130  00174C  0C01               	retlw	1
  4131  00174E                     l3102:
  4132  00174E  4A19               	infsnz	key_press@count^0,f,c
  4133  001750  2A1A               	incf	(key_press@count+1)^0,f,c
  4134                           
  4135                           ;key.c: 29: if (count == 15) {
  4136  001752  0E0F               	movlw	15
  4137  001754  1819               	xorwf	key_press@count^0,w,c
  4138  001756  101A               	iorwf	(key_press@count+1)^0,w,c
  4139  001758  A4D8               	btfss	status,2,c
  4140  00175A  0012               	return	
  4141                           
  4142                           ;key.c: 30: key_pressed = key;
  4143  00175C  C03E  F025         	movff	key_press@key,_key_pressed	;volatile
  4144                           
  4145                           ;key.c: 31: keyLong = 0;
  4146  001760  6A2F               	clrf	_keyLong^0,c
  4147                           
  4148                           ;key.c: 32: return;
  4149  001762  0012               	return	
  4150  001764                     l593:
  4151  001764  6A19               	clrf	key_press@count^0,c
  4152  001766  6A1A               	clrf	(key_press@count+1)^0,c
  4153  001768  0012               	return		;funcret
  4154  00176A                     __end_of_key_press:
  4155                           	callstack 0
  4156                           
  4157 ;; *************** function _key_GetKey *****************
  4158 ;; Defined at:
  4159 ;;		line 52 in file "key.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;		None
  4162 ;; Auto vars:     Size  Location     Type
  4163 ;;  key             1    3[COMRAM] unsigned char 
  4164 ;; Return value:  Size  Location     Type
  4165 ;;                  1    wreg      unsigned char 
  4166 ;; Registers used:
  4167 ;;		wreg, status,2
  4168 ;; Tracked objects:
  4169 ;;		On entry : 0/0
  4170 ;;		On exit  : 0/0
  4171 ;;		Unchanged: 0/0
  4172 ;; Data sizes:     COMRAM   BANK0   BANK1
  4173 ;;      Params:         0       0       0
  4174 ;;      Locals:         1       0       0
  4175 ;;      Temps:          0       0       0
  4176 ;;      Totals:         1       0       0
  4177 ;;Total ram usage:        1 bytes
  4178 ;; Hardware stack levels used: 1
  4179 ;; Hardware stack levels required when called: 2
  4180 ;; This function calls:
  4181 ;;		Nothing
  4182 ;; This function is called by:
  4183 ;;		_main
  4184 ;; This function uses a non-reentrant model
  4185 ;;
  4186                           
  4187                           	psect	text8
  4188  001B82                     __ptext8:
  4189                           	callstack 0
  4190  001B82                     _key_GetKey:
  4191                           	callstack 28
  4192                           
  4193                           ;key.c: 54: uint8_t key = key_pressed;
  4194                           
  4195                           ;incstack = 0
  4196  001B82  C025  F03E         	movff	_key_pressed,key_GetKey@key	;volatile
  4197                           
  4198                           ;key.c: 56: key_pressed = 0;
  4199  001B86  6A25               	clrf	_key_pressed^0,c	;volatile
  4200                           
  4201                           ;key.c: 57: return key;
  4202  001B88  503E               	movf	key_GetKey@key^0,w,c
  4203  001B8A  0012               	return		;funcret
  4204  001B8C                     __end_of_key_GetKey:
  4205                           	callstack 0
  4206                           
  4207 ;; *************** function _ds18b20_readrom *****************
  4208 ;; Defined at:
  4209 ;;		line 172 in file "ds18b20.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;  num_dq          1    wreg     unsigned char 
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;  num_dq          1   18[COMRAM] unsigned char 
  4214 ;;  temp_rom        8   10[COMRAM] unsigned char [8]
  4215 ;;  i               1   19[COMRAM] unsigned char 
  4216 ;; Return value:  Size  Location     Type
  4217 ;;                  1    wreg      unsigned char 
  4218 ;; Registers used:
  4219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4220 ;; Tracked objects:
  4221 ;;		On entry : 0/0
  4222 ;;		On exit  : 0/0
  4223 ;;		Unchanged: 0/0
  4224 ;; Data sizes:     COMRAM   BANK0   BANK1
  4225 ;;      Params:         0       0       0
  4226 ;;      Locals:        10       0       0
  4227 ;;      Temps:          0       0       0
  4228 ;;      Totals:        10       0       0
  4229 ;;Total ram usage:       10 bytes
  4230 ;; Hardware stack levels used: 1
  4231 ;; Hardware stack levels required when called: 4
  4232 ;; This function calls:
  4233 ;;		_Delay_ms
  4234 ;;		_ds18b20_crc8
  4235 ;;		_ow_reset
  4236 ;;		_read_byte
  4237 ;;		_write_byte
  4238 ;;		_write_eep
  4239 ;; This function is called by:
  4240 ;;		_main
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           	psect	text9
  4245  001648                     __ptext9:
  4246                           	callstack 0
  4247  001648                     _ds18b20_readrom:
  4248                           	callstack 26
  4249                           
  4250                           ;incstack = 0
  4251                           ;ds18b20_readrom@num_dq stored from wreg
  4252  001648  6E4D               	movwf	ds18b20_readrom@num_dq^0,c
  4253                           
  4254                           ;ds18b20.c: 173: uint8_t i;;ds18b20.c: 174: uint8_t temp_rom[8];;ds18b20.c: 176: if (!ow
      +                          _reset())
  4255  00164A  ECCB  F00C         	call	_ow_reset	;wreg free
  4256  00164E  0900               	iorlw	0
  4257  001650  E10C               	bnz	u2100
  4258                           
  4259                           ;ds18b20.c: 177: {;ds18b20.c: 178: write_byte(0x33);
  4260  001652  0E33               	movlw	51
  4261  001654  EC7D  F00C         	call	_write_byte
  4262                           
  4263                           ;ds18b20.c: 179: for (i = 0; i < 8; i++) {
  4264  001658  6A4E               	clrf	ds18b20_readrom@i^0,c
  4265  00165A                     l3254:
  4266                           
  4267                           ;ds18b20.c: 180: temp_rom[i] = read_byte();
  4268  00165A  D824               	call	PL60	;call to abstracted procedure
  4269  00165C  EC62  F00C         	call	_read_byte	;wreg free
  4270  001660  6EDF               	movwf	indf2,c
  4271  001662  2A4E               	incf	ds18b20_readrom@i^0,f,c
  4272  001664  0E07               	movlw	7
  4273  001666  644E               	cpfsgt	ds18b20_readrom@i^0,c
  4274  001668  D7F8               	goto	l3254
  4275  00166A                     u2100:
  4276                           
  4277                           ;ds18b20.c: 181: };ds18b20.c: 182: };ds18b20.c: 183: if (!(ds18b20_crc8(temp_rom, 8))) {
  4278  00166A  0E45               	movlw	low ds18b20_readrom@temp_rom
  4279  00166C  6E3E               	movwf	ds18b20_crc8@data_in^0,c
  4280  00166E  0E08               	movlw	8
  4281  001670  6E3F               	movwf	ds18b20_crc8@num_bytes^0,c
  4282  001672  ECDB  F00B         	call	_ds18b20_crc8	;wreg free
  4283  001676  0900               	iorlw	0
  4284  001678  E114               	bnz	l3280
  4285                           
  4286                           ;ds18b20.c: 184: for (i = 0; i < 8; i++) {
  4287  00167A  6A4E               	clrf	ds18b20_readrom@i^0,c
  4288  00167C                     l3268:
  4289                           
  4290                           ;ds18b20.c: 185: write_eep(((num_dq - 1)*8) + i, temp_rom[i]);
  4291  00167C  D813               	call	PL60	;call to abstracted procedure
  4292  00167E  50DF               	movf	indf2,w,c
  4293  001680  6E3E               	movwf	write_eep@data^0,c
  4294  001682  504D               	movf	ds18b20_readrom@num_dq^0,w,c
  4295  001684  0D08               	mullw	8
  4296  001686  50F3               	movf	243,w,c
  4297  001688  244E               	addwf	ds18b20_readrom@i^0,w,c
  4298  00168A  0FF8               	addlw	248
  4299  00168C  EC1E  F00D         	call	_write_eep
  4300  001690  2A4E               	incf	ds18b20_readrom@i^0,f,c
  4301  001692  0E07               	movlw	7
  4302  001694  644E               	cpfsgt	ds18b20_readrom@i^0,c
  4303  001696  D7F2               	goto	l3268
  4304                           
  4305                           ;ds18b20.c: 186: };ds18b20.c: 187: Delay_ms(10);
  4306  001698  EC8F  F007         	call	PL66	;call to abstracted procedure
  4307  00169C  EC30  F00D         	call	_Delay_ms	;wreg free
  4308                           
  4309                           ;ds18b20.c: 188: return 1;
  4310  0016A0  0C01               	retlw	1
  4311  0016A2                     l3280:
  4312                           
  4313                           ;ds18b20.c: 189: };ds18b20.c: 190: return 0;
  4314  0016A2  0C00               	retlw	0	;funcret
  4315  0016A4                     __end_of_ds18b20_readrom:
  4316                           	callstack 0
  4317  0016A4                     PL60:
  4318                           	callstack 26
  4319  0016A4  504E               	movf	ds18b20_readrom@i^0,w,c
  4320  0016A6  0F45               	addlw	low ds18b20_readrom@temp_rom
  4321  0016A8  6ED9               	movwf	fsr2l,c
  4322  0016AA  6ADA               	clrf	fsr2h,c
  4323  0016AC  0012               	return	
  4324  0016AE                     __end_ofPL60:
  4325                           	callstack 0
  4326                           
  4327 ;; *************** function _write_eep *****************
  4328 ;; Defined at:
  4329 ;;		line 5 in file "eeprom.c"
  4330 ;; Parameters:    Size  Location     Type
  4331 ;;  address         1    wreg     unsigned char 
  4332 ;;  data            1    3[COMRAM] unsigned char 
  4333 ;; Auto vars:     Size  Location     Type
  4334 ;;  address         1    4[COMRAM] unsigned char 
  4335 ;; Return value:  Size  Location     Type
  4336 ;;                  1    wreg      void 
  4337 ;; Registers used:
  4338 ;;		wreg, status,2
  4339 ;; Tracked objects:
  4340 ;;		On entry : 0/0
  4341 ;;		On exit  : 0/0
  4342 ;;		Unchanged: 0/0
  4343 ;; Data sizes:     COMRAM   BANK0   BANK1
  4344 ;;      Params:         1       0       0
  4345 ;;      Locals:         1       0       0
  4346 ;;      Temps:          0       0       0
  4347 ;;      Totals:         2       0       0
  4348 ;;Total ram usage:        2 bytes
  4349 ;; Hardware stack levels used: 1
  4350 ;; Hardware stack levels required when called: 2
  4351 ;; This function calls:
  4352 ;;		Nothing
  4353 ;; This function is called by:
  4354 ;;		_main
  4355 ;;		_ds18b20_readrom
  4356 ;;		_write_eep_16
  4357 ;; This function uses a non-reentrant model
  4358 ;;
  4359                           
  4360                           	psect	text10
  4361  001A3C                     __ptext10:
  4362                           	callstack 0
  4363  001A3C                     _write_eep:
  4364                           	callstack 27
  4365                           
  4366                           ;incstack = 0
  4367                           ;write_eep@address stored from wreg
  4368  001A3C  6E3F               	movwf	write_eep@address^0,c
  4369  001A3E                     
  4370                           ;eeprom.c: 8: {}
  4371  001A3E  B2A6               	btfsc	166,1,c	;volsfr
  4372  001A40  D7FE               	goto	l2814
  4373                           
  4374                           ;eeprom.c: 11: EEADR = address;
  4375  001A42  C03F  FFA9         	movff	write_eep@address,4009	;volatile
  4376                           
  4377                           ;eeprom.c: 12: EEDATA = data;
  4378  001A46  C03E  FFA8         	movff	write_eep@data,4008	;volatile
  4379                           
  4380                           ;eeprom.c: 13: EECON1bits.EEPGD = 0;
  4381  001A4A  9EA6               	bcf	166,7,c	;volsfr
  4382                           
  4383                           ;eeprom.c: 14: EECON1bits.CFGS = 0;
  4384  001A4C  9CA6               	bcf	166,6,c	;volsfr
  4385                           
  4386                           ;eeprom.c: 15: EECON1bits.WREN = 1;
  4387  001A4E  84A6               	bsf	166,2,c	;volsfr
  4388                           
  4389                           ;eeprom.c: 16: INTCONbits.GIE = 0;
  4390  001A50  9EF2               	bcf	242,7,c	;volatile
  4391                           
  4392                           ;eeprom.c: 18: EECON2 = 0x55;
  4393  001A52  0E55               	movlw	85
  4394  001A54  6EA7               	movwf	167,c	;volsfr
  4395                           
  4396                           ;eeprom.c: 19: EECON2 = 0xAA;
  4397  001A56  0EAA               	movlw	170
  4398  001A58  6EA7               	movwf	167,c	;volsfr
  4399                           
  4400                           ;eeprom.c: 20: EECON1bits.WR = 1;
  4401  001A5A  82A6               	bsf	166,1,c	;volsfr
  4402                           
  4403                           ;eeprom.c: 22: INTCONbits.GIE = 1;
  4404  001A5C  8EF2               	bsf	242,7,c	;volatile
  4405  001A5E  0CAA               	retlw	170	;funcret
  4406  001A60                     __end_of_write_eep:
  4407                           	callstack 0
  4408                           
  4409 ;; *************** function _Delay_ms *****************
  4410 ;; Defined at:
  4411 ;;		line 703 in file "main.c"
  4412 ;; Parameters:    Size  Location     Type
  4413 ;;  delay           2    3[COMRAM] unsigned int 
  4414 ;; Auto vars:     Size  Location     Type
  4415 ;;  i               2    6[COMRAM] unsigned int 
  4416 ;; Return value:  Size  Location     Type
  4417 ;;                  1    wreg      void 
  4418 ;; Registers used:
  4419 ;;		wreg, status,2, status,0
  4420 ;; Tracked objects:
  4421 ;;		On entry : 0/0
  4422 ;;		On exit  : 0/0
  4423 ;;		Unchanged: 0/0
  4424 ;; Data sizes:     COMRAM   BANK0   BANK1
  4425 ;;      Params:         2       0       0
  4426 ;;      Locals:         2       0       0
  4427 ;;      Temps:          1       0       0
  4428 ;;      Totals:         5       0       0
  4429 ;;Total ram usage:        5 bytes
  4430 ;; Hardware stack levels used: 1
  4431 ;; Hardware stack levels required when called: 2
  4432 ;; This function calls:
  4433 ;;		Nothing
  4434 ;; This function is called by:
  4435 ;;		_main
  4436 ;;		_ds18b20_readrom
  4437 ;; This function uses a non-reentrant model
  4438 ;;
  4439                           
  4440                           	psect	text11
  4441  001A60                     __ptext11:
  4442                           	callstack 0
  4443  001A60                     _Delay_ms:
  4444                           	callstack 27
  4445                           
  4446                           ;main.c: 704: for (uint16_t i = 0; i <= delay; i++)
  4447                           
  4448                           ;incstack = 0
  4449  001A60  6A41               	clrf	Delay_ms@i^0,c
  4450  001A62  6A42               	clrf	(Delay_ms@i+1)^0,c
  4451  001A64  D009               	goto	l333
  4452  001A66                     l2800:
  4453                           
  4454                           ;main.c: 705: _delay((unsigned long)((1)*(8000000/4000.0)));
  4455  001A66  0E03               	movlw	3
  4456  001A68  6E40               	movwf	??_Delay_ms^0,c
  4457  001A6A  0E98               	movlw	152
  4458  001A6C                     u3147:
  4459  001A6C  2EE8               	decfsz	wreg,f,c
  4460  001A6E  D7FE               	bra	u3147
  4461  001A70  2E40               	decfsz	??_Delay_ms^0,f,c
  4462  001A72  D7FC               	bra	u3147
  4463  001A74  4A41               	infsnz	Delay_ms@i^0,f,c
  4464  001A76  2A42               	incf	(Delay_ms@i+1)^0,f,c
  4465  001A78                     l333:
  4466  001A78  5041               	movf	Delay_ms@i^0,w,c
  4467  001A7A  5C3E               	subwf	Delay_ms@delay^0,w,c
  4468  001A7C  5042               	movf	(Delay_ms@i+1)^0,w,c
  4469  001A7E  583F               	subwfb	(Delay_ms@delay+1)^0,w,c
  4470  001A80  E2F2               	bc	l2800
  4471  001A82  0012               	return		;funcret
  4472  001A84                     __end_of_Delay_ms:
  4473                           	callstack 0
  4474                           
  4475 ;; *************** function _ds18b20_readTemp *****************
  4476 ;; Defined at:
  4477 ;;		line 117 in file "ds18b20.c"
  4478 ;; Parameters:    Size  Location     Type
  4479 ;;  time_flag       1   10[COMRAM] PTR unsigned char 
  4480 ;;		 -> time_flag(1), 
  4481 ;;  timer_val       1   11[COMRAM] PTR unsigned char 
  4482 ;;		 -> timer_val(1), 
  4483 ;; Auto vars:     Size  Location     Type
  4484 ;;  j               1   16[COMRAM] unsigned char 
  4485 ;;  temp            2   14[COMRAM] unsigned int 
  4486 ;;  i               1   17[COMRAM] unsigned char 
  4487 ;; Return value:  Size  Location     Type
  4488 ;;                  1    wreg      unsigned char 
  4489 ;; Registers used:
  4490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4491 ;; Tracked objects:
  4492 ;;		On entry : 0/0
  4493 ;;		On exit  : 0/0
  4494 ;;		Unchanged: 0/0
  4495 ;; Data sizes:     COMRAM   BANK0   BANK1
  4496 ;;      Params:         2       0       0
  4497 ;;      Locals:         4       0       0
  4498 ;;      Temps:          2       0       0
  4499 ;;      Totals:         8       0       0
  4500 ;;Total ram usage:        8 bytes
  4501 ;; Hardware stack levels used: 1
  4502 ;; Hardware stack levels required when called: 4
  4503 ;; This function calls:
  4504 ;;		_ds18b20_crc8
  4505 ;;		_ow_reset
  4506 ;;		_read_byte
  4507 ;;		_write_byte
  4508 ;; This function is called by:
  4509 ;;		_main
  4510 ;; This function uses a non-reentrant model
  4511 ;;
  4512                           
  4513                           	psect	text12
  4514  00114A                     __ptext12:
  4515                           	callstack 0
  4516  00114A                     _ds18b20_readTemp:
  4517                           	callstack 26
  4518                           
  4519                           ;ds18b20.c: 120: uint8_t i;;ds18b20.c: 122: switch (*time_flag) {
  4520                           
  4521                           ;incstack = 0
  4522  00114A  D05D               	goto	l3194
  4523  00114C                     l3116:
  4524                           
  4525                           ;ds18b20.c: 124: if (!ow_reset())
  4526  00114C  ECCB  F00C         	call	_ow_reset	;wreg free
  4527  001150  0900               	iorlw	0
  4528  001152  A4D8               	btfss	status,2,c
  4529  001154  0C00               	retlw	0
  4530                           
  4531                           ;ds18b20.c: 125: {;ds18b20.c: 126: write_byte(0xCC);
  4532  001156  0ECC               	movlw	204
  4533  001158  EC7D  F00C         	call	_write_byte
  4534                           
  4535                           ;ds18b20.c: 127: write_byte(0x44);
  4536  00115C  0E44               	movlw	68
  4537  00115E  EC7D  F00C         	call	_write_byte
  4538                           
  4539                           ;ds18b20.c: 128: *timer_val = 0;
  4540  001162  5046               	movf	ds18b20_readTemp@timer_val^0,w,c
  4541  001164  6ED9               	movwf	fsr2l,c
  4542  001166  6ADA               	clrf	fsr2h,c
  4543  001168  6ADF               	clrf	indf2,c
  4544                           
  4545                           ;ds18b20.c: 129: *time_flag = 2;
  4546  00116A  5045               	movf	ds18b20_readTemp@time_flag^0,w,c
  4547  00116C  6ED9               	movwf	fsr2l,c
  4548  00116E  6ADA               	clrf	fsr2h,c
  4549  001170  0E02               	movlw	2
  4550  001172  6EDF               	movwf	indf2,c
  4551                           
  4552                           ;ds18b20.c: 130: T1CONbits.TMR1ON = 1;
  4553  001174  80CD               	bsf	205,0,c	;volatile
  4554                           
  4555                           ;ds18b20.c: 132: return 0;
  4556  001176  0C00               	retlw	0
  4557  001178                     l414:
  4558                           
  4559                           ;ds18b20.c: 136: for (uint8_t j = 0; j < 2; j++) {
  4560  001178  6A4B               	clrf	ds18b20_readTemp@j^0,c
  4561  00117A                     l415:
  4562                           
  4563                           ;ds18b20.c: 137: (INTCONbits.GIE = 0);
  4564  00117A  9EF2               	bcf	242,7,c	;volatile
  4565                           
  4566                           ;ds18b20.c: 138: ow_reset();
  4567  00117C  ECCB  F00C         	call	_ow_reset	;wreg free
  4568                           
  4569                           ;ds18b20.c: 139: write_byte(0x55);
  4570  001180  0E55               	movlw	85
  4571  001182  EC7D  F00C         	call	_write_byte
  4572                           
  4573                           ;ds18b20.c: 140: for (i = 0; i < 8; i++) {
  4574  001186  6A4C               	clrf	ds18b20_readTemp@i^0,c
  4575  001188                     l3144:
  4576                           
  4577                           ;ds18b20.c: 141: write_byte(rom_dq[j][i]);
  4578  001188  504B               	movf	ds18b20_readTemp@j^0,w,c
  4579  00118A  0D08               	mullw	8
  4580  00118C  50F3               	movf	243,w,c
  4581  00118E  0F01               	addlw	low _rom_dq
  4582  001190  244C               	addwf	ds18b20_readTemp@i^0,w,c
  4583  001192  6ED9               	movwf	fsr2l,c
  4584  001194  6ADA               	clrf	fsr2h,c
  4585  001196  50DF               	movf	indf2,w,c
  4586  001198  EC7D  F00C         	call	_write_byte
  4587  00119C  2A4C               	incf	ds18b20_readTemp@i^0,f,c
  4588  00119E  0E07               	movlw	7
  4589  0011A0  644C               	cpfsgt	ds18b20_readTemp@i^0,c
  4590  0011A2  D7F2               	goto	l3144
  4591                           
  4592                           ;ds18b20.c: 142: };ds18b20.c: 143: write_byte(0xBE);
  4593  0011A4  0EBE               	movlw	190
  4594  0011A6  EC7D  F00C         	call	_write_byte
  4595                           
  4596                           ;ds18b20.c: 145: for (i = 0; i < 9; i++)
  4597  0011AA  6A4C               	clrf	ds18b20_readTemp@i^0,c
  4598  0011AC                     l3158:
  4599                           
  4600                           ;ds18b20.c: 146: {;ds18b20.c: 147: scratch[i] = read_byte();
  4601  0011AC  504C               	movf	ds18b20_readTemp@i^0,w,c
  4602  0011AE  0F30               	addlw	low _scratch
  4603  0011B0  6ED9               	movwf	fsr2l,c
  4604  0011B2  6ADA               	clrf	fsr2h,c
  4605  0011B4  EC62  F00C         	call	_read_byte	;wreg free
  4606  0011B8  6EDF               	movwf	indf2,c
  4607  0011BA  2A4C               	incf	ds18b20_readTemp@i^0,f,c
  4608  0011BC  0E08               	movlw	8
  4609  0011BE  644C               	cpfsgt	ds18b20_readTemp@i^0,c
  4610  0011C0  D7F5               	goto	l3158
  4611                           
  4612                           ;ds18b20.c: 148: };ds18b20.c: 150: if (!(ds18b20_crc8(scratch, 9))) {
  4613  0011C2  0E30               	movlw	low _scratch
  4614  0011C4  6E3E               	movwf	ds18b20_crc8@data_in^0,c
  4615  0011C6  0E09               	movlw	9
  4616  0011C8  6E3F               	movwf	ds18b20_crc8@num_bytes^0,c
  4617  0011CA  ECDB  F00B         	call	_ds18b20_crc8	;wreg free
  4618  0011CE  0900               	iorlw	0
  4619  0011D0  E10C               	bnz	l3170
  4620                           
  4621                           ;ds18b20.c: 151: temp = (((uint16_t) scratch[1]) << 8) | ((uint16_t) scratch[0]);
  4622  0011D2  5031               	movf	(_scratch+1)^0,w,c
  4623  0011D4  6E47               	movwf	??_ds18b20_readTemp^0,c
  4624  0011D6  5030               	movf	_scratch^0,w,c
  4625  0011D8  6E49               	movwf	ds18b20_readTemp@temp^0,c
  4626  0011DA  C047  F04A         	movff	??_ds18b20_readTemp,ds18b20_readTemp@temp+1
  4627                           
  4628                           ;ds18b20.c: 152: temp_ready[j] = temp;
  4629  0011DE  D81C               	call	PL42	;call to abstracted procedure
  4630  0011E0  C049  FFDE         	movff	ds18b20_readTemp@temp,postinc2
  4631  0011E4  C04A  FFDD         	movff	ds18b20_readTemp@temp+1,postdec2
  4632                           
  4633                           ;ds18b20.c: 153: }else
  4634  0011E8  D004               	goto	l3172
  4635  0011EA                     l3170:
  4636                           
  4637                           ;ds18b20.c: 154: temp_ready[j] = 32767;
  4638  0011EA  D816               	call	PL42	;call to abstracted procedure
  4639  0011EC  68DE               	setf	postinc2,c
  4640  0011EE  0E7F               	movlw	127
  4641  0011F0  6EDD               	movwf	postdec2,c
  4642  0011F2                     l3172:
  4643                           
  4644                           ;ds18b20.c: 155: (INTCONbits.GIE = 1);
  4645  0011F2  8EF2               	bsf	242,7,c	;volatile
  4646  0011F4  2A4B               	incf	ds18b20_readTemp@j^0,f,c
  4647  0011F6  0E01               	movlw	1
  4648  0011F8  644B               	cpfsgt	ds18b20_readTemp@j^0,c
  4649  0011FA  D7BF               	goto	l415
  4650                           
  4651                           ;ds18b20.c: 156: };ds18b20.c: 157: *time_flag = 0;
  4652  0011FC  5045               	movf	ds18b20_readTemp@time_flag^0,w,c
  4653  0011FE  6ED9               	movwf	fsr2l,c
  4654  001200  6ADA               	clrf	fsr2h,c
  4655  001202  6ADF               	clrf	indf2,c
  4656                           
  4657                           ;ds18b20.c: 158: return 1;
  4658  001204  0C01               	retlw	1
  4659  001206                     l3194:
  4660  001206  5045               	movf	ds18b20_readTemp@time_flag^0,w,c
  4661  001208  6ED9               	movwf	fsr2l,c
  4662  00120A  6ADA               	clrf	fsr2h,c
  4663  00120C  50DF               	movf	indf2,w,c
  4664                           
  4665                           ; Switch size 1, requested type "space"
  4666                           ; Number of cases is 3, Range of values is 0 to 2
  4667                           ; switch strategies available:
  4668                           ; Name         Instructions Cycles
  4669                           ; simple_byte           10     6 (average)
  4670                           ;	Chosen strategy is simple_byte
  4671  00120E  E09E               	bz	l3116
  4672  001210  0A01               	xorlw	1	; case 1
  4673  001212  E0B2               	bz	l414
  4674  001214  0A03               	xorlw	3	; case 2
  4675  001216  0C00               	retlw	0
  4676  001218                     __end_of_ds18b20_readTemp:
  4677                           	callstack 0
  4678  001218                     PL42:
  4679                           	callstack 26
  4680  001218  504B               	movf	ds18b20_readTemp@j^0,w,c
  4681  00121A  0D02               	mullw	2
  4682  00121C  50F3               	movf	243,w,c
  4683  00121E  0F11               	addlw	low _temp_ready
  4684  001220  6ED9               	movwf	fsr2l,c
  4685  001222  6ADA               	clrf	fsr2h,c
  4686  001224  0012               	return	
  4687  001226                     __end_ofPL42:
  4688                           	callstack 0
  4689                           
  4690 ;; *************** function _read_byte *****************
  4691 ;; Defined at:
  4692 ;;		line 50 in file "onewire.c"
  4693 ;; Parameters:    Size  Location     Type
  4694 ;;		None
  4695 ;; Auto vars:     Size  Location     Type
  4696 ;;  i               1    6[COMRAM] unsigned char 
  4697 ;;  val             1    5[COMRAM] unsigned char 
  4698 ;; Return value:  Size  Location     Type
  4699 ;;                  1    wreg      unsigned char 
  4700 ;; Registers used:
  4701 ;;		wreg, status,2, status,0, cstack
  4702 ;; Tracked objects:
  4703 ;;		On entry : 0/0
  4704 ;;		On exit  : 0/0
  4705 ;;		Unchanged: 0/0
  4706 ;; Data sizes:     COMRAM   BANK0   BANK1
  4707 ;;      Params:         0       0       0
  4708 ;;      Locals:         2       0       0
  4709 ;;      Temps:          2       0       0
  4710 ;;      Totals:         4       0       0
  4711 ;;Total ram usage:        4 bytes
  4712 ;; Hardware stack levels used: 1
  4713 ;; Hardware stack levels required when called: 3
  4714 ;; This function calls:
  4715 ;;		_read_bit
  4716 ;; This function is called by:
  4717 ;;		_ds18b20_readTemp
  4718 ;;		_ds18b20_readrom
  4719 ;; This function uses a non-reentrant model
  4720 ;;
  4721                           
  4722                           	psect	text13
  4723  0018C4                     __ptext13:
  4724                           	callstack 0
  4725  0018C4                     _read_byte:
  4726                           	callstack 26
  4727                           
  4728                           ;onewire.c: 52: uint8_t i;;onewire.c: 53: uint8_t val = 0;
  4729                           
  4730                           ;incstack = 0
  4731  0018C4  6A40               	clrf	read_byte@val^0,c
  4732                           
  4733                           ;onewire.c: 55: for(i=0;i<8;i++)
  4734  0018C6  6A41               	clrf	read_byte@i^0,c
  4735  0018C8                     l2918:
  4736                           
  4737                           ;onewire.c: 56: {;onewire.c: 57: if(read_bit()) val |= (0x01 << i);
  4738  0018C8  ECA7  F00D         	call	_read_bit	;wreg free
  4739  0018CC  0900               	iorlw	0
  4740  0018CE  E00C               	bz	l2922
  4741  0018D0  C041  F03E         	movff	read_byte@i,??_read_byte
  4742  0018D4  0E01               	movlw	1
  4743  0018D6  6E3F               	movwf	(??_read_byte+1)^0,c
  4744  0018D8  2A3E               	incf	??_read_byte^0,f,c
  4745  0018DA  D002               	goto	u1824
  4746  0018DC                     u1825:
  4747  0018DC  90D8               	bcf	status,0,c
  4748  0018DE  363F               	rlcf	(??_read_byte+1)^0,f,c
  4749  0018E0                     u1824:
  4750  0018E0  2E3E               	decfsz	??_read_byte^0,f,c
  4751  0018E2  D7FC               	goto	u1825
  4752  0018E4  503F               	movf	(??_read_byte+1)^0,w,c
  4753  0018E6  1240               	iorwf	read_byte@val^0,f,c
  4754  0018E8                     l2922:
  4755                           
  4756                           ;onewire.c: 58: _delay((unsigned long)((120)*(8000000/4000000.0)));
  4757  0018E8  0E50               	movlw	80
  4758  0018EA                     u3157:
  4759  0018EA  2EE8               	decfsz	wreg,f,c
  4760  0018EC  D7FE               	bra	u3157
  4761  0018EE  2A41               	incf	read_byte@i^0,f,c
  4762  0018F0  0E07               	movlw	7
  4763  0018F2  6441               	cpfsgt	read_byte@i^0,c
  4764  0018F4  D7E9               	goto	l2918
  4765                           
  4766                           ;onewire.c: 59: };onewire.c: 61: return val;
  4767  0018F6  5040               	movf	read_byte@val^0,w,c
  4768  0018F8  0012               	return		;funcret
  4769  0018FA                     __end_of_read_byte:
  4770                           	callstack 0
  4771                           
  4772 ;; *************** function _read_bit *****************
  4773 ;; Defined at:
  4774 ;;		line 22 in file "onewire.c"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;		None
  4777 ;; Auto vars:     Size  Location     Type
  4778 ;;		None
  4779 ;; Return value:  Size  Location     Type
  4780 ;;                  1    wreg      unsigned char 
  4781 ;; Registers used:
  4782 ;;		wreg
  4783 ;; Tracked objects:
  4784 ;;		On entry : 0/0
  4785 ;;		On exit  : 0/0
  4786 ;;		Unchanged: 0/0
  4787 ;; Data sizes:     COMRAM   BANK0   BANK1
  4788 ;;      Params:         0       0       0
  4789 ;;      Locals:         0       0       0
  4790 ;;      Temps:          0       0       0
  4791 ;;      Totals:         0       0       0
  4792 ;;Total ram usage:        0 bytes
  4793 ;; Hardware stack levels used: 1
  4794 ;; Hardware stack levels required when called: 2
  4795 ;; This function calls:
  4796 ;;		Nothing
  4797 ;; This function is called by:
  4798 ;;		_read_byte
  4799 ;; This function uses a non-reentrant model
  4800 ;;
  4801                           
  4802                           	psect	text14
  4803  001B4E                     __ptext14:
  4804                           	callstack 0
  4805  001B4E                     _read_bit:
  4806                           	callstack 26
  4807                           
  4808                           ;onewire.c: 24: PORTAbits.RA6 = 0;
  4809                           
  4810                           ;incstack = 0
  4811  001B4E  9C80               	bcf	128,6,c	;volatile
  4812                           
  4813                           ;onewire.c: 25: TRISAbits.TRISA6 = 0;
  4814  001B50  9C92               	bcf	146,6,c	;volatile
  4815                           
  4816                           ;onewire.c: 26: _delay((unsigned long)((1)*(8000000/4000000.0)));
  4817  001B52  D000               	nop2		;2 cycle nop
  4818                           
  4819                           ;onewire.c: 27: PORTAbits.RA6 = 1;
  4820  001B54  8C80               	bsf	128,6,c	;volatile
  4821                           
  4822                           ;onewire.c: 28: TRISAbits.TRISA6 = 1;
  4823  001B56  8C92               	bsf	146,6,c	;volatile
  4824                           
  4825                           ;onewire.c: 29: _delay((unsigned long)((6)*(8000000/4000000.0)));
  4826  001B58  0E04               	movlw	4
  4827  001B5A                     u3167:
  4828  001B5A  2EE8               	decfsz	wreg,f,c
  4829  001B5C  D7FE               	bra	u3167
  4830                           
  4831                           ;onewire.c: 30: return(PORTAbits.RA6);
  4832  001B5E  BC80               	btfsc	128,6,c	;volatile
  4833  001B60  0C01               	retlw	1
  4834  001B62  0C00               	retlw	0	;funcret
  4835  001B64                     __end_of_read_bit:
  4836                           	callstack 0
  4837                           
  4838 ;; *************** function _ds18b20_crc8 *****************
  4839 ;; Defined at:
  4840 ;;		line 224 in file "ds18b20.c"
  4841 ;; Parameters:    Size  Location     Type
  4842 ;;  data_in         1    3[COMRAM] PTR unsigned char 
  4843 ;;		 -> ds18b20_readrom@temp_rom(8), scratch(9), 
  4844 ;;  num_bytes       1    4[COMRAM] unsigned char 
  4845 ;; Auto vars:     Size  Location     Type
  4846 ;;  crc             1    9[COMRAM] unsigned char 
  4847 ;;  loop_count      1    8[COMRAM] unsigned char 
  4848 ;;  feedback_bit    1    7[COMRAM] unsigned char 
  4849 ;;  data            1    6[COMRAM] unsigned char 
  4850 ;;  bit_counter     1    5[COMRAM] unsigned char 
  4851 ;; Return value:  Size  Location     Type
  4852 ;;                  1    wreg      unsigned char 
  4853 ;; Registers used:
  4854 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4855 ;; Tracked objects:
  4856 ;;		On entry : 0/0
  4857 ;;		On exit  : 0/0
  4858 ;;		Unchanged: 0/0
  4859 ;; Data sizes:     COMRAM   BANK0   BANK1
  4860 ;;      Params:         2       0       0
  4861 ;;      Locals:         5       0       0
  4862 ;;      Temps:          0       0       0
  4863 ;;      Totals:         7       0       0
  4864 ;;Total ram usage:        7 bytes
  4865 ;; Hardware stack levels used: 1
  4866 ;; Hardware stack levels required when called: 2
  4867 ;; This function calls:
  4868 ;;		Nothing
  4869 ;; This function is called by:
  4870 ;;		_ds18b20_readTemp
  4871 ;;		_ds18b20_readrom
  4872 ;; This function uses a non-reentrant model
  4873 ;;
  4874                           
  4875                           	psect	text15
  4876  0017B6                     __ptext15:
  4877                           	callstack 0
  4878  0017B6                     _ds18b20_crc8:
  4879                           	callstack 27
  4880                           
  4881                           ;ds18b20.c: 225: uint8_t crc;;ds18b20.c: 226: uint8_t loop_count;;ds18b20.c: 227: uint8_
      +                          t bit_counter;;ds18b20.c: 228: uint8_t data;;ds18b20.c: 229: uint8_t feedback_bit;;ds18b
      +                          20.c: 231: crc = 0x00;
  4882                           
  4883                           ;incstack = 0
  4884  0017B6  6A44               	clrf	ds18b20_crc8@crc^0,c
  4885                           
  4886                           ;ds18b20.c: 233: for (loop_count = 0; loop_count != num_bytes; loop_count++) {
  4887  0017B8  6A43               	clrf	ds18b20_crc8@loop_count^0,c
  4888  0017BA  D01D               	goto	l2952
  4889  0017BC                     l2932:
  4890                           
  4891                           ;ds18b20.c: 234: data = data_in[loop_count];
  4892  0017BC  503E               	movf	ds18b20_crc8@data_in^0,w,c
  4893  0017BE  2443               	addwf	ds18b20_crc8@loop_count^0,w,c
  4894  0017C0  6ED9               	movwf	fsr2l,c
  4895  0017C2  6ADA               	clrf	fsr2h,c
  4896  0017C4  50DF               	movf	indf2,w,c
  4897  0017C6  6E41               	movwf	ds18b20_crc8@data^0,c
  4898                           
  4899                           ;ds18b20.c: 236: bit_counter = 8;
  4900  0017C8  0E08               	movlw	8
  4901  0017CA  6E40               	movwf	ds18b20_crc8@bit_counter^0,c
  4902  0017CC                     l2936:
  4903                           
  4904                           ;ds18b20.c: 238: feedback_bit = (crc ^ data) & 0x01;
  4905  0017CC  5044               	movf	ds18b20_crc8@crc^0,w,c
  4906  0017CE  1841               	xorwf	ds18b20_crc8@data^0,w,c
  4907  0017D0  0B01               	andlw	1
  4908  0017D2  6E42               	movwf	ds18b20_crc8@feedback_bit^0,c
  4909                           
  4910                           ;ds18b20.c: 240: if (feedback_bit == 0x01) {
  4911  0017D4  0442               	decf	ds18b20_crc8@feedback_bit^0,w,c
  4912  0017D6  E102               	bnz	l443
  4913                           
  4914                           ;ds18b20.c: 241: crc = crc ^ 0x18;
  4915  0017D8  0E18               	movlw	24
  4916  0017DA  1A44               	xorwf	ds18b20_crc8@crc^0,f,c
  4917  0017DC                     l443:
  4918                           
  4919                           ;ds18b20.c: 242: };ds18b20.c: 243: crc = (crc >> 1) & 0x7F;
  4920  0017DC  90D8               	bcf	status,0,c
  4921  0017DE  3044               	rrcf	ds18b20_crc8@crc^0,w,c
  4922  0017E0  0B7F               	andlw	127
  4923  0017E2  6E44               	movwf	ds18b20_crc8@crc^0,c
  4924                           
  4925                           ;ds18b20.c: 244: if (feedback_bit == 0x01) {
  4926  0017E4  0442               	decf	ds18b20_crc8@feedback_bit^0,w,c
  4927  0017E6  E101               	bnz	l2944
  4928                           
  4929                           ;ds18b20.c: 245: crc = crc | 0x80;
  4930  0017E8  8E44               	bsf	ds18b20_crc8@crc^0,7,c
  4931  0017EA                     l2944:
  4932                           
  4933                           ;ds18b20.c: 246: };ds18b20.c: 248: data = data >> 1;
  4934  0017EA  90D8               	bcf	status,0,c
  4935  0017EC  3241               	rrcf	ds18b20_crc8@data^0,f,c
  4936                           
  4937                           ;ds18b20.c: 249: bit_counter--;
  4938  0017EE  0640               	decf	ds18b20_crc8@bit_counter^0,f,c
  4939                           
  4940                           ;ds18b20.c: 251: } while (bit_counter > 0);
  4941  0017F0  5040               	movf	ds18b20_crc8@bit_counter^0,w,c
  4942  0017F2  E1EC               	bnz	l2936
  4943  0017F4  2A43               	incf	ds18b20_crc8@loop_count^0,f,c
  4944  0017F6                     l2952:
  4945  0017F6  503F               	movf	ds18b20_crc8@num_bytes^0,w,c
  4946  0017F8  1843               	xorwf	ds18b20_crc8@loop_count^0,w,c
  4947  0017FA  E1E0               	bnz	l2932
  4948                           
  4949                           ;ds18b20.c: 252: };ds18b20.c: 254: return crc;
  4950  0017FC  5044               	movf	ds18b20_crc8@crc^0,w,c
  4951  0017FE  0012               	return		;funcret
  4952  001800                     __end_of_ds18b20_crc8:
  4953                           	callstack 0
  4954                           
  4955 ;; *************** function _ds18b20_get_temp *****************
  4956 ;; Defined at:
  4957 ;;		line 198 in file "ds18b20.c"
  4958 ;; Parameters:    Size  Location     Type
  4959 ;;  num_dq          1    wreg     unsigned char 
  4960 ;;  minus           1   35[COMRAM] PTR unsigned char 
  4961 ;;		 -> minus_2(1), minus_1(1), 
  4962 ;; Auto vars:     Size  Location     Type
  4963 ;;  num_dq          1   39[COMRAM] unsigned char 
  4964 ;;  temp            4   40[COMRAM] unsigned long 
  4965 ;;  tmp             1    0        unsigned char 
  4966 ;; Return value:  Size  Location     Type
  4967 ;;                  2   35[COMRAM] unsigned int 
  4968 ;; Registers used:
  4969 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4970 ;; Tracked objects:
  4971 ;;		On entry : 0/0
  4972 ;;		On exit  : 0/0
  4973 ;;		Unchanged: 0/0
  4974 ;; Data sizes:     COMRAM   BANK0   BANK1
  4975 ;;      Params:         2       0       0
  4976 ;;      Locals:         5       0       0
  4977 ;;      Temps:          2       0       0
  4978 ;;      Totals:         9       0       0
  4979 ;;Total ram usage:        9 bytes
  4980 ;; Hardware stack levels used: 1
  4981 ;; Hardware stack levels required when called: 3
  4982 ;; This function calls:
  4983 ;;		___lldiv
  4984 ;;		___lmul
  4985 ;; This function is called by:
  4986 ;;		_main
  4987 ;; This function uses a non-reentrant model
  4988 ;;
  4989                           
  4990                           	psect	text16
  4991  001370                     __ptext16:
  4992                           	callstack 0
  4993  001370                     _ds18b20_get_temp:
  4994                           	callstack 27
  4995                           
  4996                           ;incstack = 0
  4997                           ;ds18b20_get_temp@num_dq stored from wreg
  4998  001370  6E62               	movwf	ds18b20_get_temp@num_dq^0,c
  4999                           
  5000                           ;ds18b20.c: 199: uint32_t temp = temp_ready[num_dq-1];
  5001  001372  5062               	movf	ds18b20_get_temp@num_dq^0,w,c
  5002  001374  0D02               	mullw	2
  5003  001376  50F3               	movf	243,w,c
  5004  001378  0F0F               	addlw	low (_temp_ready+254)
  5005  00137A  6ED9               	movwf	fsr2l,c
  5006  00137C  6ADA               	clrf	fsr2h,c
  5007  00137E  CFDE F060          	movff	postinc2,??_ds18b20_get_temp
  5008  001382  CFDD F061          	movff	postdec2,??_ds18b20_get_temp+1
  5009  001386  C060  F063         	movff	??_ds18b20_get_temp,ds18b20_get_temp@temp
  5010  00138A  C061  F064         	movff	??_ds18b20_get_temp+1,ds18b20_get_temp@temp+1
  5011  00138E  6A65               	clrf	(ds18b20_get_temp@temp+2)^0,c
  5012  001390  6A66               	clrf	(ds18b20_get_temp@temp+3)^0,c
  5013                           
  5014                           ;ds18b20.c: 200: uint8_t tmp;;ds18b20.c: 201: *minus = '+';
  5015  001392  505E               	movf	ds18b20_get_temp@minus^0,w,c
  5016  001394  6ED9               	movwf	fsr2l,c
  5017  001396  6ADA               	clrf	fsr2h,c
  5018  001398  0E2B               	movlw	43
  5019  00139A  6EDF               	movwf	indf2,c
  5020                           
  5021                           ;ds18b20.c: 202: if(temp == 32767)
  5022  00139C  2863               	incf	ds18b20_get_temp@temp^0,w,c
  5023  00139E  E10A               	bnz	l435
  5024  0013A0  0E7F               	movlw	127
  5025  0013A2  1864               	xorwf	(ds18b20_get_temp@temp+1)^0,w,c
  5026  0013A4  1065               	iorwf	(ds18b20_get_temp@temp+2)^0,w,c
  5027  0013A6  1066               	iorwf	(ds18b20_get_temp@temp+3)^0,w,c
  5028  0013A8  E105               	bnz	l435
  5029  0013AA                     u2070:
  5030                           
  5031                           ;ds18b20.c: 203: return temp;
  5032  0013AA  C063  F05E         	movff	ds18b20_get_temp@temp,?_ds18b20_get_temp
  5033  0013AE  C064  F05F         	movff	ds18b20_get_temp@temp+1,?_ds18b20_get_temp+1
  5034  0013B2  0012               	return	
  5035  0013B4                     l435:
  5036                           
  5037                           ;ds18b20.c: 204: if (temp & 0x8000) {
  5038  0013B4  AE64               	btfss	(ds18b20_get_temp@temp+1)^0,7,c
  5039  0013B6  D00D               	goto	l3212
  5040                           
  5041                           ;ds18b20.c: 205: temp = -temp;
  5042  0013B8  1E66               	comf	(ds18b20_get_temp@temp+3)^0,f,c
  5043  0013BA  1E65               	comf	(ds18b20_get_temp@temp+2)^0,f,c
  5044  0013BC  1E64               	comf	(ds18b20_get_temp@temp+1)^0,f,c
  5045  0013BE  6C63               	negf	ds18b20_get_temp@temp^0,c
  5046  0013C0  0E00               	movlw	0
  5047  0013C2  2264               	addwfc	(ds18b20_get_temp@temp+1)^0,f,c
  5048  0013C4  2265               	addwfc	(ds18b20_get_temp@temp+2)^0,f,c
  5049  0013C6  2266               	addwfc	(ds18b20_get_temp@temp+3)^0,f,c
  5050                           
  5051                           ;ds18b20.c: 206: *minus = '-';
  5052  0013C8  505E               	movf	ds18b20_get_temp@minus^0,w,c
  5053  0013CA  6ED9               	movwf	fsr2l,c
  5054  0013CC  6ADA               	clrf	fsr2h,c
  5055  0013CE  0E2D               	movlw	45
  5056  0013D0  6EDF               	movwf	indf2,c
  5057  0013D2                     l3212:
  5058                           
  5059                           ;ds18b20.c: 207: };ds18b20.c: 209: temp = (temp * 625)/100;
  5060  0013D2  C063  F045         	movff	ds18b20_get_temp@temp,___lmul@multiplier
  5061  0013D6  C064  F046         	movff	ds18b20_get_temp@temp+1,___lmul@multiplier+1
  5062  0013DA  C065  F047         	movff	ds18b20_get_temp@temp+2,___lmul@multiplier+2
  5063  0013DE  C066  F048         	movff	ds18b20_get_temp@temp+3,___lmul@multiplier+3
  5064  0013E2  EC0C  F007         	call	PL8	;call to abstracted procedure
  5065  0013E6  ECB5  F00B         	call	___lmul	;wreg free
  5066  0013EA  EC06  F008         	call	PL2	;call to abstracted procedure
  5067  0013EE  EC7B  F00A         	call	___lldiv	;wreg free
  5068  0013F2  C051  F063         	movff	?___lldiv,ds18b20_get_temp@temp
  5069  0013F6  C052  F064         	movff	?___lldiv+1,ds18b20_get_temp@temp+1
  5070  0013FA  C053  F065         	movff	?___lldiv+2,ds18b20_get_temp@temp+2
  5071  0013FE  C054  F066         	movff	?___lldiv+3,ds18b20_get_temp@temp+3
  5072  001402  D7D3               	goto	u2070
  5073  001404                     __end_of_ds18b20_get_temp:
  5074                           	callstack 0
  5075                           
  5076 ;; *************** function ___lmul *****************
  5077 ;; Defined at:
  5078 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\Umul32.c"
  5079 ;; Parameters:    Size  Location     Type
  5080 ;;  multiplier      4   10[COMRAM] unsigned long 
  5081 ;;  multiplicand    4   14[COMRAM] unsigned long 
  5082 ;; Auto vars:     Size  Location     Type
  5083 ;;  product         4   18[COMRAM] unsigned long 
  5084 ;; Return value:  Size  Location     Type
  5085 ;;                  4   10[COMRAM] unsigned long 
  5086 ;; Registers used:
  5087 ;;		wreg, status,2, status,0
  5088 ;; Tracked objects:
  5089 ;;		On entry : 0/0
  5090 ;;		On exit  : 0/0
  5091 ;;		Unchanged: 0/0
  5092 ;; Data sizes:     COMRAM   BANK0   BANK1
  5093 ;;      Params:         8       0       0
  5094 ;;      Locals:         4       0       0
  5095 ;;      Temps:          0       0       0
  5096 ;;      Totals:        12       0       0
  5097 ;;Total ram usage:       12 bytes
  5098 ;; Hardware stack levels used: 1
  5099 ;; Hardware stack levels required when called: 2
  5100 ;; This function calls:
  5101 ;;		Nothing
  5102 ;; This function is called by:
  5103 ;;		_main
  5104 ;;		_outValPreset
  5105 ;;		_ds18b20_get_temp
  5106 ;; This function uses a non-reentrant model
  5107 ;;
  5108                           
  5109                           	psect	text17
  5110  00176A                     __ptext17:
  5111                           	callstack 0
  5112  00176A                     ___lmul:
  5113                           	callstack 27
  5114                           
  5115                           ;incstack = 0
  5116  00176A  6A4D               	clrf	___lmul@product^0,c
  5117  00176C  6A4E               	clrf	(___lmul@product+1)^0,c
  5118  00176E  6A4F               	clrf	(___lmul@product+2)^0,c
  5119  001770  6A50               	clrf	(___lmul@product+3)^0,c
  5120  001772                     l682:
  5121  001772  A045               	btfss	___lmul@multiplier^0,0,c
  5122  001774  D008               	goto	l2962
  5123  001776  5049               	movf	___lmul@multiplicand^0,w,c
  5124  001778  264D               	addwf	___lmul@product^0,f,c
  5125  00177A  504A               	movf	(___lmul@multiplicand+1)^0,w,c
  5126  00177C  224E               	addwfc	(___lmul@product+1)^0,f,c
  5127  00177E  504B               	movf	(___lmul@multiplicand+2)^0,w,c
  5128  001780  224F               	addwfc	(___lmul@product+2)^0,f,c
  5129  001782  504C               	movf	(___lmul@multiplicand+3)^0,w,c
  5130  001784  2250               	addwfc	(___lmul@product+3)^0,f,c
  5131  001786                     l2962:
  5132  001786  90D8               	bcf	status,0,c
  5133  001788  3649               	rlcf	___lmul@multiplicand^0,f,c
  5134  00178A  364A               	rlcf	(___lmul@multiplicand+1)^0,f,c
  5135  00178C  364B               	rlcf	(___lmul@multiplicand+2)^0,f,c
  5136  00178E  364C               	rlcf	(___lmul@multiplicand+3)^0,f,c
  5137  001790  90D8               	bcf	status,0,c
  5138  001792  3248               	rrcf	(___lmul@multiplier+3)^0,f,c
  5139  001794  3247               	rrcf	(___lmul@multiplier+2)^0,f,c
  5140  001796  3246               	rrcf	(___lmul@multiplier+1)^0,f,c
  5141  001798  3245               	rrcf	___lmul@multiplier^0,f,c
  5142  00179A  5045               	movf	___lmul@multiplier^0,w,c
  5143  00179C  1046               	iorwf	(___lmul@multiplier+1)^0,w,c
  5144  00179E  1047               	iorwf	(___lmul@multiplier+2)^0,w,c
  5145  0017A0  1048               	iorwf	(___lmul@multiplier+3)^0,w,c
  5146  0017A2  E1E7               	bnz	l682
  5147  0017A4  C04D  F045         	movff	___lmul@product,?___lmul
  5148  0017A8  C04E  F046         	movff	___lmul@product+1,?___lmul+1
  5149  0017AC  C04F  F047         	movff	___lmul@product+2,?___lmul+2
  5150  0017B0  C050  F048         	movff	___lmul@product+3,?___lmul+3
  5151  0017B4  0012               	return		;funcret
  5152  0017B6                     __end_of___lmul:
  5153                           	callstack 0
  5154                           
  5155 ;; *************** function ___lldiv *****************
  5156 ;; Defined at:
  5157 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\__lldiv.c"
  5158 ;; Parameters:    Size  Location     Type
  5159 ;;  dividend        4   22[COMRAM] unsigned long 
  5160 ;;  divisor         4   26[COMRAM] unsigned long 
  5161 ;; Auto vars:     Size  Location     Type
  5162 ;;  quotient        4   30[COMRAM] unsigned long 
  5163 ;;  counter         1   34[COMRAM] unsigned char 
  5164 ;; Return value:  Size  Location     Type
  5165 ;;                  4   22[COMRAM] unsigned long 
  5166 ;; Registers used:
  5167 ;;		wreg, status,2, status,0
  5168 ;; Tracked objects:
  5169 ;;		On entry : 0/0
  5170 ;;		On exit  : 0/0
  5171 ;;		Unchanged: 0/0
  5172 ;; Data sizes:     COMRAM   BANK0   BANK1
  5173 ;;      Params:         8       0       0
  5174 ;;      Locals:         5       0       0
  5175 ;;      Temps:          0       0       0
  5176 ;;      Totals:        13       0       0
  5177 ;;Total ram usage:       13 bytes
  5178 ;; Hardware stack levels used: 1
  5179 ;; Hardware stack levels required when called: 2
  5180 ;; This function calls:
  5181 ;;		Nothing
  5182 ;; This function is called by:
  5183 ;;		_main
  5184 ;;		_outValPreset
  5185 ;;		_ds18b20_get_temp
  5186 ;; This function uses a non-reentrant model
  5187 ;;
  5188                           
  5189                           	psect	text18
  5190  0014F6                     __ptext18:
  5191                           	callstack 0
  5192  0014F6                     ___lldiv:
  5193                           	callstack 27
  5194                           
  5195                           ;incstack = 0
  5196  0014F6  6A59               	clrf	___lldiv@quotient^0,c
  5197  0014F8  6A5A               	clrf	(___lldiv@quotient+1)^0,c
  5198  0014FA  6A5B               	clrf	(___lldiv@quotient+2)^0,c
  5199  0014FC  6A5C               	clrf	(___lldiv@quotient+3)^0,c
  5200  0014FE  5055               	movf	___lldiv@divisor^0,w,c
  5201  001500  1056               	iorwf	(___lldiv@divisor+1)^0,w,c
  5202  001502  1057               	iorwf	(___lldiv@divisor+2)^0,w,c
  5203  001504  1058               	iorwf	(___lldiv@divisor+3)^0,w,c
  5204  001506  E029               	bz	l700
  5205  001508  0E01               	movlw	1
  5206  00150A  6E5D               	movwf	___lldiv@counter^0,c
  5207  00150C  D006               	goto	l2974
  5208  00150E                     l2972:
  5209  00150E  90D8               	bcf	status,0,c
  5210  001510  3655               	rlcf	___lldiv@divisor^0,f,c
  5211  001512  3656               	rlcf	(___lldiv@divisor+1)^0,f,c
  5212  001514  3657               	rlcf	(___lldiv@divisor+2)^0,f,c
  5213  001516  3658               	rlcf	(___lldiv@divisor+3)^0,f,c
  5214  001518  2A5D               	incf	___lldiv@counter^0,f,c
  5215  00151A                     l2974:
  5216  00151A  AE58               	btfss	(___lldiv@divisor+3)^0,7,c
  5217  00151C  D7F8               	goto	l2972
  5218  00151E                     u1910:
  5219  00151E  90D8               	bcf	status,0,c
  5220  001520  3659               	rlcf	___lldiv@quotient^0,f,c
  5221  001522  365A               	rlcf	(___lldiv@quotient+1)^0,f,c
  5222  001524  365B               	rlcf	(___lldiv@quotient+2)^0,f,c
  5223  001526  365C               	rlcf	(___lldiv@quotient+3)^0,f,c
  5224  001528  5055               	movf	___lldiv@divisor^0,w,c
  5225  00152A  5C51               	subwf	___lldiv@dividend^0,w,c
  5226  00152C  5056               	movf	(___lldiv@divisor+1)^0,w,c
  5227  00152E  5852               	subwfb	(___lldiv@dividend+1)^0,w,c
  5228  001530  5057               	movf	(___lldiv@divisor+2)^0,w,c
  5229  001532  5853               	subwfb	(___lldiv@dividend+2)^0,w,c
  5230  001534  5058               	movf	(___lldiv@divisor+3)^0,w,c
  5231  001536  5854               	subwfb	(___lldiv@dividend+3)^0,w,c
  5232  001538  E309               	bnc	l2984
  5233  00153A  5055               	movf	___lldiv@divisor^0,w,c
  5234  00153C  5E51               	subwf	___lldiv@dividend^0,f,c
  5235  00153E  5056               	movf	(___lldiv@divisor+1)^0,w,c
  5236  001540  5A52               	subwfb	(___lldiv@dividend+1)^0,f,c
  5237  001542  5057               	movf	(___lldiv@divisor+2)^0,w,c
  5238  001544  5A53               	subwfb	(___lldiv@dividend+2)^0,f,c
  5239  001546  5058               	movf	(___lldiv@divisor+3)^0,w,c
  5240  001548  5A54               	subwfb	(___lldiv@dividend+3)^0,f,c
  5241  00154A  8059               	bsf	___lldiv@quotient^0,0,c
  5242  00154C                     l2984:
  5243  00154C  90D8               	bcf	status,0,c
  5244  00154E  3258               	rrcf	(___lldiv@divisor+3)^0,f,c
  5245  001550  3257               	rrcf	(___lldiv@divisor+2)^0,f,c
  5246  001552  3256               	rrcf	(___lldiv@divisor+1)^0,f,c
  5247  001554  3255               	rrcf	___lldiv@divisor^0,f,c
  5248  001556  2E5D               	decfsz	___lldiv@counter^0,f,c
  5249  001558  D7E2               	goto	u1910
  5250  00155A                     l700:
  5251  00155A  C059  F051         	movff	___lldiv@quotient,?___lldiv
  5252  00155E  C05A  F052         	movff	___lldiv@quotient+1,?___lldiv+1
  5253  001562  C05B  F053         	movff	___lldiv@quotient+2,?___lldiv+2
  5254  001566  C05C  F054         	movff	___lldiv@quotient+3,?___lldiv+3
  5255  00156A  0012               	return		;funcret
  5256  00156C                     __end_of___lldiv:
  5257                           	callstack 0
  5258                           
  5259 ;; *************** function ___wmul *****************
  5260 ;; Defined at:
  5261 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\Umul16.c"
  5262 ;; Parameters:    Size  Location     Type
  5263 ;;  multiplier      2    3[COMRAM] unsigned int 
  5264 ;;  multiplicand    2    5[COMRAM] unsigned int 
  5265 ;; Auto vars:     Size  Location     Type
  5266 ;;  product         2    7[COMRAM] unsigned int 
  5267 ;; Return value:  Size  Location     Type
  5268 ;;                  2    3[COMRAM] unsigned int 
  5269 ;; Registers used:
  5270 ;;		wreg, status,2, status,0, prodl, prodh
  5271 ;; Tracked objects:
  5272 ;;		On entry : 0/0
  5273 ;;		On exit  : 0/0
  5274 ;;		Unchanged: 0/0
  5275 ;; Data sizes:     COMRAM   BANK0   BANK1
  5276 ;;      Params:         4       0       0
  5277 ;;      Locals:         2       0       0
  5278 ;;      Temps:          0       0       0
  5279 ;;      Totals:         6       0       0
  5280 ;;Total ram usage:        6 bytes
  5281 ;; Hardware stack levels used: 1
  5282 ;; Hardware stack levels required when called: 2
  5283 ;; This function calls:
  5284 ;;		Nothing
  5285 ;; This function is called by:
  5286 ;;		_main
  5287 ;; This function uses a non-reentrant model
  5288 ;;
  5289                           
  5290                           	psect	text19
  5291  0019F0                     __ptext19:
  5292                           	callstack 0
  5293  0019F0                     ___wmul:
  5294                           	callstack 28
  5295                           
  5296                           ;incstack = 0
  5297  0019F0  503E               	movf	___wmul@multiplier^0,w,c
  5298  0019F2  0240               	mulwf	___wmul@multiplicand^0,c
  5299  0019F4  CFF3 F042          	movff	prodl,___wmul@product
  5300  0019F8  CFF4 F043          	movff	prodh,___wmul@product+1
  5301  0019FC  503E               	movf	___wmul@multiplier^0,w,c
  5302  0019FE  0241               	mulwf	(___wmul@multiplicand+1)^0,c
  5303  001A00  50F3               	movf	243,w,c
  5304  001A02  2643               	addwf	(___wmul@product+1)^0,f,c
  5305  001A04  503F               	movf	(___wmul@multiplier+1)^0,w,c
  5306  001A06  0240               	mulwf	___wmul@multiplicand^0,c
  5307  001A08  50F3               	movf	243,w,c
  5308  001A0A  2643               	addwf	(___wmul@product+1)^0,f,c
  5309  001A0C  C042  F03E         	movff	___wmul@product,?___wmul
  5310  001A10  C043  F03F         	movff	___wmul@product+1,?___wmul+1
  5311  001A14  0012               	return		;funcret
  5312  001A16                     __end_of___wmul:
  5313                           	callstack 0
  5314                           
  5315 ;; *************** function ___lwmod *****************
  5316 ;; Defined at:
  5317 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwmod.c"
  5318 ;; Parameters:    Size  Location     Type
  5319 ;;  dividend        2   10[COMRAM] unsigned int 
  5320 ;;  divisor         2   12[COMRAM] unsigned int 
  5321 ;; Auto vars:     Size  Location     Type
  5322 ;;  counter         1   14[COMRAM] unsigned char 
  5323 ;; Return value:  Size  Location     Type
  5324 ;;                  2   10[COMRAM] unsigned int 
  5325 ;; Registers used:
  5326 ;;		wreg, status,2, status,0
  5327 ;; Tracked objects:
  5328 ;;		On entry : 0/0
  5329 ;;		On exit  : 0/0
  5330 ;;		Unchanged: 0/0
  5331 ;; Data sizes:     COMRAM   BANK0   BANK1
  5332 ;;      Params:         4       0       0
  5333 ;;      Locals:         1       0       0
  5334 ;;      Temps:          0       0       0
  5335 ;;      Totals:         5       0       0
  5336 ;;Total ram usage:        5 bytes
  5337 ;; Hardware stack levels used: 1
  5338 ;; Hardware stack levels required when called: 2
  5339 ;; This function calls:
  5340 ;;		Nothing
  5341 ;; This function is called by:
  5342 ;;		_main
  5343 ;; This function uses a non-reentrant model
  5344 ;;
  5345                           
  5346                           	psect	text20
  5347  00184A                     __ptext20:
  5348                           	callstack 0
  5349  00184A                     ___lwmod:
  5350                           	callstack 28
  5351                           
  5352                           ;incstack = 0
  5353  00184A  5047               	movf	___lwmod@divisor^0,w,c
  5354  00184C  1048               	iorwf	(___lwmod@divisor+1)^0,w,c
  5355  00184E  E017               	bz	l1162
  5356  001850  0E01               	movlw	1
  5357  001852  6E49               	movwf	___lwmod@counter^0,c
  5358  001854  D004               	goto	l3462
  5359  001856                     l3460:
  5360  001856  90D8               	bcf	status,0,c
  5361  001858  3647               	rlcf	___lwmod@divisor^0,f,c
  5362  00185A  3648               	rlcf	(___lwmod@divisor+1)^0,f,c
  5363  00185C  2A49               	incf	___lwmod@counter^0,f,c
  5364  00185E                     l3462:
  5365  00185E  AE48               	btfss	(___lwmod@divisor+1)^0,7,c
  5366  001860  D7FA               	goto	l3460
  5367  001862                     u2360:
  5368  001862  5047               	movf	___lwmod@divisor^0,w,c
  5369  001864  5C45               	subwf	___lwmod@dividend^0,w,c
  5370  001866  5048               	movf	(___lwmod@divisor+1)^0,w,c
  5371  001868  5846               	subwfb	(___lwmod@dividend+1)^0,w,c
  5372  00186A  E304               	bnc	l3468
  5373  00186C  5047               	movf	___lwmod@divisor^0,w,c
  5374  00186E  5E45               	subwf	___lwmod@dividend^0,f,c
  5375  001870  5048               	movf	(___lwmod@divisor+1)^0,w,c
  5376  001872  5A46               	subwfb	(___lwmod@dividend+1)^0,f,c
  5377  001874                     l3468:
  5378  001874  90D8               	bcf	status,0,c
  5379  001876  3248               	rrcf	(___lwmod@divisor+1)^0,f,c
  5380  001878  3247               	rrcf	___lwmod@divisor^0,f,c
  5381  00187A  2E49               	decfsz	___lwmod@counter^0,f,c
  5382  00187C  D7F2               	goto	u2360
  5383  00187E                     l1162:
  5384  00187E  C045  F045         	movff	___lwmod@dividend,?___lwmod
  5385  001882  C046  F046         	movff	___lwmod@dividend+1,?___lwmod+1
  5386  001886  0012               	return		;funcret
  5387  001888                     __end_of___lwmod:
  5388                           	callstack 0
  5389                           
  5390 ;; *************** function ___lwdiv *****************
  5391 ;; Defined at:
  5392 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwdiv.c"
  5393 ;; Parameters:    Size  Location     Type
  5394 ;;  dividend        2    3[COMRAM] unsigned int 
  5395 ;;  divisor         2    5[COMRAM] unsigned int 
  5396 ;; Auto vars:     Size  Location     Type
  5397 ;;  quotient        2    7[COMRAM] unsigned int 
  5398 ;;  counter         1    9[COMRAM] unsigned char 
  5399 ;; Return value:  Size  Location     Type
  5400 ;;                  2    3[COMRAM] unsigned int 
  5401 ;; Registers used:
  5402 ;;		wreg, status,2, status,0
  5403 ;; Tracked objects:
  5404 ;;		On entry : 0/0
  5405 ;;		On exit  : 0/0
  5406 ;;		Unchanged: 0/0
  5407 ;; Data sizes:     COMRAM   BANK0   BANK1
  5408 ;;      Params:         4       0       0
  5409 ;;      Locals:         3       0       0
  5410 ;;      Temps:          0       0       0
  5411 ;;      Totals:         7       0       0
  5412 ;;Total ram usage:        7 bytes
  5413 ;; Hardware stack levels used: 1
  5414 ;; Hardware stack levels required when called: 2
  5415 ;; This function calls:
  5416 ;;		Nothing
  5417 ;; This function is called by:
  5418 ;;		_main
  5419 ;; This function uses a non-reentrant model
  5420 ;;
  5421                           
  5422                           	psect	text21
  5423  001800                     __ptext21:
  5424                           	callstack 0
  5425  001800                     ___lwdiv:
  5426                           	callstack 28
  5427                           
  5428                           ;incstack = 0
  5429  001800  6A42               	clrf	___lwdiv@quotient^0,c
  5430  001802  6A43               	clrf	(___lwdiv@quotient+1)^0,c
  5431  001804  5040               	movf	___lwdiv@divisor^0,w,c
  5432  001806  1041               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5433  001808  E01B               	bz	l1152
  5434  00180A  0E01               	movlw	1
  5435  00180C  6E44               	movwf	___lwdiv@counter^0,c
  5436  00180E  D004               	goto	l3442
  5437  001810                     l3440:
  5438  001810  90D8               	bcf	status,0,c
  5439  001812  3640               	rlcf	___lwdiv@divisor^0,f,c
  5440  001814  3641               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5441  001816  2A44               	incf	___lwdiv@counter^0,f,c
  5442  001818                     l3442:
  5443  001818  AE41               	btfss	(___lwdiv@divisor+1)^0,7,c
  5444  00181A  D7FA               	goto	l3440
  5445  00181C                     u2330:
  5446  00181C  90D8               	bcf	status,0,c
  5447  00181E  3642               	rlcf	___lwdiv@quotient^0,f,c
  5448  001820  3643               	rlcf	(___lwdiv@quotient+1)^0,f,c
  5449  001822  5040               	movf	___lwdiv@divisor^0,w,c
  5450  001824  5C3E               	subwf	___lwdiv@dividend^0,w,c
  5451  001826  5041               	movf	(___lwdiv@divisor+1)^0,w,c
  5452  001828  583F               	subwfb	(___lwdiv@dividend+1)^0,w,c
  5453  00182A  E305               	bnc	l3452
  5454  00182C  5040               	movf	___lwdiv@divisor^0,w,c
  5455  00182E  5E3E               	subwf	___lwdiv@dividend^0,f,c
  5456  001830  5041               	movf	(___lwdiv@divisor+1)^0,w,c
  5457  001832  5A3F               	subwfb	(___lwdiv@dividend+1)^0,f,c
  5458  001834  8042               	bsf	___lwdiv@quotient^0,0,c
  5459  001836                     l3452:
  5460  001836  90D8               	bcf	status,0,c
  5461  001838  3241               	rrcf	(___lwdiv@divisor+1)^0,f,c
  5462  00183A  3240               	rrcf	___lwdiv@divisor^0,f,c
  5463  00183C  2E44               	decfsz	___lwdiv@counter^0,f,c
  5464  00183E  D7EE               	goto	u2330
  5465  001840                     l1152:
  5466  001840  C042  F03E         	movff	___lwdiv@quotient,?___lwdiv
  5467  001844  C043  F03F         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5468  001848  0012               	return		;funcret
  5469  00184A                     __end_of___lwdiv:
  5470                           	callstack 0
  5471                           
  5472 ;; *************** function ___llmod *****************
  5473 ;; Defined at:
  5474 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\llmod.c"
  5475 ;; Parameters:    Size  Location     Type
  5476 ;;  dividend        4   35[COMRAM] unsigned long 
  5477 ;;  divisor         4   39[COMRAM] unsigned long 
  5478 ;; Auto vars:     Size  Location     Type
  5479 ;;  counter         1   43[COMRAM] unsigned char 
  5480 ;; Return value:  Size  Location     Type
  5481 ;;                  4   35[COMRAM] unsigned long 
  5482 ;; Registers used:
  5483 ;;		wreg, status,2, status,0
  5484 ;; Tracked objects:
  5485 ;;		On entry : 0/0
  5486 ;;		On exit  : 0/0
  5487 ;;		Unchanged: 0/0
  5488 ;; Data sizes:     COMRAM   BANK0   BANK1
  5489 ;;      Params:         8       0       0
  5490 ;;      Locals:         1       0       0
  5491 ;;      Temps:          0       0       0
  5492 ;;      Totals:         9       0       0
  5493 ;;Total ram usage:        9 bytes
  5494 ;; Hardware stack levels used: 1
  5495 ;; Hardware stack levels required when called: 2
  5496 ;; This function calls:
  5497 ;;		Nothing
  5498 ;; This function is called by:
  5499 ;;		_main
  5500 ;; This function uses a non-reentrant model
  5501 ;;
  5502                           
  5503                           	psect	text22
  5504  0016AE                     __ptext22:
  5505                           	callstack 0
  5506  0016AE                     ___llmod:
  5507                           	callstack 28
  5508                           
  5509                           ;incstack = 0
  5510  0016AE  5062               	movf	___llmod@divisor^0,w,c
  5511  0016B0  1063               	iorwf	(___llmod@divisor+1)^0,w,c
  5512  0016B2  1064               	iorwf	(___llmod@divisor+2)^0,w,c
  5513  0016B4  1065               	iorwf	(___llmod@divisor+3)^0,w,c
  5514  0016B6  E023               	bz	l1081
  5515  0016B8  0E01               	movlw	1
  5516  0016BA  6E66               	movwf	___llmod@counter^0,c
  5517  0016BC  D006               	goto	l3424
  5518  0016BE                     l3422:
  5519  0016BE  90D8               	bcf	status,0,c
  5520  0016C0  3662               	rlcf	___llmod@divisor^0,f,c
  5521  0016C2  3663               	rlcf	(___llmod@divisor+1)^0,f,c
  5522  0016C4  3664               	rlcf	(___llmod@divisor+2)^0,f,c
  5523  0016C6  3665               	rlcf	(___llmod@divisor+3)^0,f,c
  5524  0016C8  2A66               	incf	___llmod@counter^0,f,c
  5525  0016CA                     l3424:
  5526  0016CA  AE65               	btfss	(___llmod@divisor+3)^0,7,c
  5527  0016CC  D7F8               	goto	l3422
  5528  0016CE                     u2300:
  5529  0016CE  5062               	movf	___llmod@divisor^0,w,c
  5530  0016D0  5C5E               	subwf	___llmod@dividend^0,w,c
  5531  0016D2  5063               	movf	(___llmod@divisor+1)^0,w,c
  5532  0016D4  585F               	subwfb	(___llmod@dividend+1)^0,w,c
  5533  0016D6  5064               	movf	(___llmod@divisor+2)^0,w,c
  5534  0016D8  5860               	subwfb	(___llmod@dividend+2)^0,w,c
  5535  0016DA  5065               	movf	(___llmod@divisor+3)^0,w,c
  5536  0016DC  5861               	subwfb	(___llmod@dividend+3)^0,w,c
  5537  0016DE  E308               	bnc	l3430
  5538  0016E0  5062               	movf	___llmod@divisor^0,w,c
  5539  0016E2  5E5E               	subwf	___llmod@dividend^0,f,c
  5540  0016E4  5063               	movf	(___llmod@divisor+1)^0,w,c
  5541  0016E6  5A5F               	subwfb	(___llmod@dividend+1)^0,f,c
  5542  0016E8  5064               	movf	(___llmod@divisor+2)^0,w,c
  5543  0016EA  5A60               	subwfb	(___llmod@dividend+2)^0,f,c
  5544  0016EC  5065               	movf	(___llmod@divisor+3)^0,w,c
  5545  0016EE  5A61               	subwfb	(___llmod@dividend+3)^0,f,c
  5546  0016F0                     l3430:
  5547  0016F0  90D8               	bcf	status,0,c
  5548  0016F2  3265               	rrcf	(___llmod@divisor+3)^0,f,c
  5549  0016F4  3264               	rrcf	(___llmod@divisor+2)^0,f,c
  5550  0016F6  3263               	rrcf	(___llmod@divisor+1)^0,f,c
  5551  0016F8  3262               	rrcf	___llmod@divisor^0,f,c
  5552  0016FA  2E66               	decfsz	___llmod@counter^0,f,c
  5553  0016FC  D7E8               	goto	u2300
  5554  0016FE                     l1081:
  5555  0016FE  C05E  F05E         	movff	___llmod@dividend,?___llmod
  5556  001702  C05F  F05F         	movff	___llmod@dividend+1,?___llmod+1
  5557  001706  C060  F060         	movff	___llmod@dividend+2,?___llmod+2
  5558  00170A  C061  F061         	movff	___llmod@dividend+3,?___llmod+3
  5559  00170E  0012               	return		;funcret
  5560  001710                     __end_of___llmod:
  5561                           	callstack 0
  5562                           
  5563 ;; *************** function ___lbmod *****************
  5564 ;; Defined at:
  5565 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lbmod.c"
  5566 ;; Parameters:    Size  Location     Type
  5567 ;;  dividend        1    wreg     unsigned char 
  5568 ;;  divisor         1    7[COMRAM] unsigned char 
  5569 ;; Auto vars:     Size  Location     Type
  5570 ;;  dividend        1    8[COMRAM] unsigned char 
  5571 ;;  rem             1   10[COMRAM] unsigned char 
  5572 ;;  counter         1    9[COMRAM] unsigned char 
  5573 ;; Return value:  Size  Location     Type
  5574 ;;                  1    wreg      unsigned char 
  5575 ;; Registers used:
  5576 ;;		wreg, status,2, status,0
  5577 ;; Tracked objects:
  5578 ;;		On entry : 0/0
  5579 ;;		On exit  : 0/0
  5580 ;;		Unchanged: 0/0
  5581 ;; Data sizes:     COMRAM   BANK0   BANK1
  5582 ;;      Params:         1       0       0
  5583 ;;      Locals:         3       0       0
  5584 ;;      Temps:          0       0       0
  5585 ;;      Totals:         4       0       0
  5586 ;;Total ram usage:        4 bytes
  5587 ;; Hardware stack levels used: 1
  5588 ;; Hardware stack levels required when called: 2
  5589 ;; This function calls:
  5590 ;;		Nothing
  5591 ;; This function is called by:
  5592 ;;		_main
  5593 ;; This function uses a non-reentrant model
  5594 ;;
  5595                           
  5596                           	psect	text23
  5597  001A16                     __ptext23:
  5598                           	callstack 0
  5599  001A16                     ___lbmod:
  5600                           	callstack 28
  5601                           
  5602                           ;incstack = 0
  5603                           ;___lbmod@dividend stored from wreg
  5604  001A16  6E43               	movwf	___lbmod@dividend^0,c
  5605  001A18  0E08               	movlw	8
  5606  001A1A  6E44               	movwf	___lbmod@counter^0,c
  5607  001A1C  6A45               	clrf	___lbmod@rem^0,c
  5608  001A1E                     l3404:
  5609  001A1E  90D8               	bcf	status,0,c
  5610  001A20  3443               	rlcf	___lbmod@dividend^0,w,c
  5611  001A22  3445               	rlcf	___lbmod@rem^0,w,c
  5612  001A24  6E45               	movwf	___lbmod@rem^0,c
  5613  001A26  90D8               	bcf	status,0,c
  5614  001A28  3643               	rlcf	___lbmod@dividend^0,f,c
  5615  001A2A  5042               	movf	___lbmod@divisor^0,w,c
  5616  001A2C  5C45               	subwf	___lbmod@rem^0,w,c
  5617  001A2E  E302               	bnc	l3412
  5618  001A30  5042               	movf	___lbmod@divisor^0,w,c
  5619  001A32  5E45               	subwf	___lbmod@rem^0,f,c
  5620  001A34                     l3412:
  5621  001A34  2E44               	decfsz	___lbmod@counter^0,f,c
  5622  001A36  D7F3               	goto	l3404
  5623  001A38  5045               	movf	___lbmod@rem^0,w,c
  5624  001A3A  0012               	return		;funcret
  5625  001A3C                     __end_of___lbmod:
  5626                           	callstack 0
  5627                           
  5628 ;; *************** function ___lbdiv *****************
  5629 ;; Defined at:
  5630 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lbdiv.c"
  5631 ;; Parameters:    Size  Location     Type
  5632 ;;  dividend        1    wreg     unsigned char 
  5633 ;;  divisor         1    3[COMRAM] unsigned char 
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;  dividend        1    4[COMRAM] unsigned char 
  5636 ;;  quotient        1    6[COMRAM] unsigned char 
  5637 ;;  counter         1    5[COMRAM] unsigned char 
  5638 ;; Return value:  Size  Location     Type
  5639 ;;                  1    wreg      unsigned char 
  5640 ;; Registers used:
  5641 ;;		wreg, status,2, status,0
  5642 ;; Tracked objects:
  5643 ;;		On entry : 0/0
  5644 ;;		On exit  : 0/0
  5645 ;;		Unchanged: 0/0
  5646 ;; Data sizes:     COMRAM   BANK0   BANK1
  5647 ;;      Params:         1       0       0
  5648 ;;      Locals:         3       0       0
  5649 ;;      Temps:          0       0       0
  5650 ;;      Totals:         4       0       0
  5651 ;;Total ram usage:        4 bytes
  5652 ;; Hardware stack levels used: 1
  5653 ;; Hardware stack levels required when called: 2
  5654 ;; This function calls:
  5655 ;;		Nothing
  5656 ;; This function is called by:
  5657 ;;		_main
  5658 ;; This function uses a non-reentrant model
  5659 ;;
  5660                           
  5661                           	psect	text24
  5662  001930                     __ptext24:
  5663                           	callstack 0
  5664  001930                     ___lbdiv:
  5665                           	callstack 28
  5666                           
  5667                           ;incstack = 0
  5668                           ;___lbdiv@dividend stored from wreg
  5669  001930  6E3F               	movwf	___lbdiv@dividend^0,c
  5670  001932  6A41               	clrf	___lbdiv@quotient^0,c
  5671  001934  503E               	movf	___lbdiv@divisor^0,w,c
  5672  001936  E014               	bz	l3396
  5673  001938  0E01               	movlw	1
  5674  00193A  6E40               	movwf	___lbdiv@counter^0,c
  5675  00193C  D003               	goto	l3384
  5676  00193E                     l3380:
  5677  00193E  90D8               	bcf	status,0,c
  5678  001940  363E               	rlcf	___lbdiv@divisor^0,f,c
  5679  001942  2A40               	incf	___lbdiv@counter^0,f,c
  5680  001944                     l3384:
  5681  001944  AE3E               	btfss	___lbdiv@divisor^0,7,c
  5682  001946  D7FB               	goto	l3380
  5683  001948                     u2260:
  5684  001948  90D8               	bcf	status,0,c
  5685  00194A  3641               	rlcf	___lbdiv@quotient^0,f,c
  5686  00194C  503E               	movf	___lbdiv@divisor^0,w,c
  5687  00194E  5C3F               	subwf	___lbdiv@dividend^0,w,c
  5688  001950  E303               	bnc	l3392
  5689  001952  503E               	movf	___lbdiv@divisor^0,w,c
  5690  001954  5E3F               	subwf	___lbdiv@dividend^0,f,c
  5691  001956  8041               	bsf	___lbdiv@quotient^0,0,c
  5692  001958                     l3392:
  5693  001958  90D8               	bcf	status,0,c
  5694  00195A  323E               	rrcf	___lbdiv@divisor^0,f,c
  5695  00195C  2E40               	decfsz	___lbdiv@counter^0,f,c
  5696  00195E  D7F4               	goto	u2260
  5697  001960                     l3396:
  5698  001960  5041               	movf	___lbdiv@quotient^0,w,c
  5699  001962  0012               	return		;funcret
  5700  001964                     __end_of___lbdiv:
  5701                           	callstack 0
  5702                           
  5703 ;; *************** function ___awmod *****************
  5704 ;; Defined at:
  5705 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\awmod.c"
  5706 ;; Parameters:    Size  Location     Type
  5707 ;;  dividend        2   11[COMRAM] int 
  5708 ;;  divisor         2   13[COMRAM] int 
  5709 ;; Auto vars:     Size  Location     Type
  5710 ;;  sign            1   16[COMRAM] unsigned char 
  5711 ;;  counter         1   15[COMRAM] unsigned char 
  5712 ;; Return value:  Size  Location     Type
  5713 ;;                  2   11[COMRAM] int 
  5714 ;; Registers used:
  5715 ;;		wreg, status,2, status,0
  5716 ;; Tracked objects:
  5717 ;;		On entry : 0/0
  5718 ;;		On exit  : 0/0
  5719 ;;		Unchanged: 0/0
  5720 ;; Data sizes:     COMRAM   BANK0   BANK1
  5721 ;;      Params:         4       0       0
  5722 ;;      Locals:         2       0       0
  5723 ;;      Temps:          0       0       0
  5724 ;;      Totals:         6       0       0
  5725 ;;Total ram usage:        6 bytes
  5726 ;; Hardware stack levels used: 1
  5727 ;; Hardware stack levels required when called: 2
  5728 ;; This function calls:
  5729 ;;		Nothing
  5730 ;; This function is called by:
  5731 ;;		_main
  5732 ;; This function uses a non-reentrant model
  5733 ;;
  5734                           
  5735                           	psect	text25
  5736  0015E0                     __ptext25:
  5737                           	callstack 0
  5738  0015E0                     ___awmod:
  5739                           	callstack 28
  5740                           
  5741                           ;incstack = 0
  5742  0015E0  6A4B               	clrf	___awmod@sign^0,c
  5743  0015E2  AE47               	btfss	(___awmod@dividend+1)^0,7,c
  5744  0015E4  D006               	goto	l3346
  5745  0015E6  6C46               	negf	___awmod@dividend^0,c
  5746  0015E8  1E47               	comf	(___awmod@dividend+1)^0,f,c
  5747  0015EA  B0D8               	btfsc	status,0,c
  5748  0015EC  2A47               	incf	(___awmod@dividend+1)^0,f,c
  5749  0015EE  0E01               	movlw	1
  5750  0015F0  6E4B               	movwf	___awmod@sign^0,c
  5751  0015F2                     l3346:
  5752  0015F2  AE49               	btfss	(___awmod@divisor+1)^0,7,c
  5753  0015F4  D004               	goto	l3350
  5754  0015F6  6C48               	negf	___awmod@divisor^0,c
  5755  0015F8  1E49               	comf	(___awmod@divisor+1)^0,f,c
  5756  0015FA  B0D8               	btfsc	status,0,c
  5757  0015FC  2A49               	incf	(___awmod@divisor+1)^0,f,c
  5758  0015FE                     l3350:
  5759  0015FE  5048               	movf	___awmod@divisor^0,w,c
  5760  001600  1049               	iorwf	(___awmod@divisor+1)^0,w,c
  5761  001602  E017               	bz	l3366
  5762  001604  0E01               	movlw	1
  5763  001606  6E4A               	movwf	___awmod@counter^0,c
  5764  001608  D004               	goto	l3356
  5765  00160A                     l3354:
  5766  00160A  90D8               	bcf	status,0,c
  5767  00160C  3648               	rlcf	___awmod@divisor^0,f,c
  5768  00160E  3649               	rlcf	(___awmod@divisor+1)^0,f,c
  5769  001610  2A4A               	incf	___awmod@counter^0,f,c
  5770  001612                     l3356:
  5771  001612  AE49               	btfss	(___awmod@divisor+1)^0,7,c
  5772  001614  D7FA               	goto	l3354
  5773  001616                     u2220:
  5774  001616  5048               	movf	___awmod@divisor^0,w,c
  5775  001618  5C46               	subwf	___awmod@dividend^0,w,c
  5776  00161A  5049               	movf	(___awmod@divisor+1)^0,w,c
  5777  00161C  5847               	subwfb	(___awmod@dividend+1)^0,w,c
  5778  00161E  E304               	bnc	l3362
  5779  001620  5048               	movf	___awmod@divisor^0,w,c
  5780  001622  5E46               	subwf	___awmod@dividend^0,f,c
  5781  001624  5049               	movf	(___awmod@divisor+1)^0,w,c
  5782  001626  5A47               	subwfb	(___awmod@dividend+1)^0,f,c
  5783  001628                     l3362:
  5784  001628  90D8               	bcf	status,0,c
  5785  00162A  3249               	rrcf	(___awmod@divisor+1)^0,f,c
  5786  00162C  3248               	rrcf	___awmod@divisor^0,f,c
  5787  00162E  2E4A               	decfsz	___awmod@counter^0,f,c
  5788  001630  D7F2               	goto	u2220
  5789  001632                     l3366:
  5790  001632  504B               	movf	___awmod@sign^0,w,c
  5791  001634  E004               	bz	l3370
  5792  001636  6C46               	negf	___awmod@dividend^0,c
  5793  001638  1E47               	comf	(___awmod@dividend+1)^0,f,c
  5794  00163A  B0D8               	btfsc	status,0,c
  5795  00163C  2A47               	incf	(___awmod@dividend+1)^0,f,c
  5796  00163E                     l3370:
  5797  00163E  C046  F046         	movff	___awmod@dividend,?___awmod
  5798  001642  C047  F047         	movff	___awmod@dividend+1,?___awmod+1
  5799  001646  0012               	return		;funcret
  5800  001648                     __end_of___awmod:
  5801                           	callstack 0
  5802                           
  5803 ;; *************** function ___awdiv *****************
  5804 ;; Defined at:
  5805 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\awdiv.c"
  5806 ;; Parameters:    Size  Location     Type
  5807 ;;  dividend        2    3[COMRAM] int 
  5808 ;;  divisor         2    5[COMRAM] int 
  5809 ;; Auto vars:     Size  Location     Type
  5810 ;;  quotient        2    9[COMRAM] int 
  5811 ;;  sign            1    8[COMRAM] unsigned char 
  5812 ;;  counter         1    7[COMRAM] unsigned char 
  5813 ;; Return value:  Size  Location     Type
  5814 ;;                  2    3[COMRAM] int 
  5815 ;; Registers used:
  5816 ;;		wreg, status,2, status,0
  5817 ;; Tracked objects:
  5818 ;;		On entry : 0/0
  5819 ;;		On exit  : 0/0
  5820 ;;		Unchanged: 0/0
  5821 ;; Data sizes:     COMRAM   BANK0   BANK1
  5822 ;;      Params:         4       0       0
  5823 ;;      Locals:         4       0       0
  5824 ;;      Temps:          0       0       0
  5825 ;;      Totals:         8       0       0
  5826 ;;Total ram usage:        8 bytes
  5827 ;; Hardware stack levels used: 1
  5828 ;; Hardware stack levels required when called: 2
  5829 ;; This function calls:
  5830 ;;		Nothing
  5831 ;; This function is called by:
  5832 ;;		_main
  5833 ;; This function uses a non-reentrant model
  5834 ;;
  5835                           
  5836                           	psect	text26
  5837  00147E                     __ptext26:
  5838                           	callstack 0
  5839  00147E                     ___awdiv:
  5840                           	callstack 28
  5841                           
  5842                           ;incstack = 0
  5843  00147E  6A43               	clrf	___awdiv@sign^0,c
  5844  001480  AE41               	btfss	(___awdiv@divisor+1)^0,7,c
  5845  001482  D006               	goto	l3302
  5846  001484  6C40               	negf	___awdiv@divisor^0,c
  5847  001486  1E41               	comf	(___awdiv@divisor+1)^0,f,c
  5848  001488  B0D8               	btfsc	status,0,c
  5849  00148A  2A41               	incf	(___awdiv@divisor+1)^0,f,c
  5850  00148C  0E01               	movlw	1
  5851  00148E  6E43               	movwf	___awdiv@sign^0,c
  5852  001490                     l3302:
  5853  001490  AE3F               	btfss	(___awdiv@dividend+1)^0,7,c
  5854  001492  D006               	goto	l3308
  5855  001494  6C3E               	negf	___awdiv@dividend^0,c
  5856  001496  1E3F               	comf	(___awdiv@dividend+1)^0,f,c
  5857  001498  B0D8               	btfsc	status,0,c
  5858  00149A  2A3F               	incf	(___awdiv@dividend+1)^0,f,c
  5859  00149C  0E01               	movlw	1
  5860  00149E  1A43               	xorwf	___awdiv@sign^0,f,c
  5861  0014A0                     l3308:
  5862  0014A0  6A44               	clrf	___awdiv@quotient^0,c
  5863  0014A2  6A45               	clrf	(___awdiv@quotient+1)^0,c
  5864  0014A4  5040               	movf	___awdiv@divisor^0,w,c
  5865  0014A6  1041               	iorwf	(___awdiv@divisor+1)^0,w,c
  5866  0014A8  E01B               	bz	l3330
  5867  0014AA  0E01               	movlw	1
  5868  0014AC  6E42               	movwf	___awdiv@counter^0,c
  5869  0014AE  D004               	goto	l3316
  5870  0014B0                     l3314:
  5871  0014B0  90D8               	bcf	status,0,c
  5872  0014B2  3640               	rlcf	___awdiv@divisor^0,f,c
  5873  0014B4  3641               	rlcf	(___awdiv@divisor+1)^0,f,c
  5874  0014B6  2A42               	incf	___awdiv@counter^0,f,c
  5875  0014B8                     l3316:
  5876  0014B8  AE41               	btfss	(___awdiv@divisor+1)^0,7,c
  5877  0014BA  D7FA               	goto	l3314
  5878  0014BC                     u2160:
  5879  0014BC  90D8               	bcf	status,0,c
  5880  0014BE  3644               	rlcf	___awdiv@quotient^0,f,c
  5881  0014C0  3645               	rlcf	(___awdiv@quotient+1)^0,f,c
  5882  0014C2  5040               	movf	___awdiv@divisor^0,w,c
  5883  0014C4  5C3E               	subwf	___awdiv@dividend^0,w,c
  5884  0014C6  5041               	movf	(___awdiv@divisor+1)^0,w,c
  5885  0014C8  583F               	subwfb	(___awdiv@dividend+1)^0,w,c
  5886  0014CA  E305               	bnc	l3326
  5887  0014CC  5040               	movf	___awdiv@divisor^0,w,c
  5888  0014CE  5E3E               	subwf	___awdiv@dividend^0,f,c
  5889  0014D0  5041               	movf	(___awdiv@divisor+1)^0,w,c
  5890  0014D2  5A3F               	subwfb	(___awdiv@dividend+1)^0,f,c
  5891  0014D4  8044               	bsf	___awdiv@quotient^0,0,c
  5892  0014D6                     l3326:
  5893  0014D6  90D8               	bcf	status,0,c
  5894  0014D8  3241               	rrcf	(___awdiv@divisor+1)^0,f,c
  5895  0014DA  3240               	rrcf	___awdiv@divisor^0,f,c
  5896  0014DC  2E42               	decfsz	___awdiv@counter^0,f,c
  5897  0014DE  D7EE               	goto	u2160
  5898  0014E0                     l3330:
  5899  0014E0  5043               	movf	___awdiv@sign^0,w,c
  5900  0014E2  E004               	bz	l3334
  5901  0014E4  6C44               	negf	___awdiv@quotient^0,c
  5902  0014E6  1E45               	comf	(___awdiv@quotient+1)^0,f,c
  5903  0014E8  B0D8               	btfsc	status,0,c
  5904  0014EA  2A45               	incf	(___awdiv@quotient+1)^0,f,c
  5905  0014EC                     l3334:
  5906  0014EC  C044  F03E         	movff	___awdiv@quotient,?___awdiv
  5907  0014F0  C045  F03F         	movff	___awdiv@quotient+1,?___awdiv+1
  5908  0014F4  0012               	return		;funcret
  5909  0014F6                     __end_of___awdiv:
  5910                           	callstack 0
  5911                           
  5912 ;; *************** function _Main_init *****************
  5913 ;; Defined at:
  5914 ;;		line 646 in file "main.c"
  5915 ;; Parameters:    Size  Location     Type
  5916 ;;		None
  5917 ;; Auto vars:     Size  Location     Type
  5918 ;;		None
  5919 ;; Return value:  Size  Location     Type
  5920 ;;                  1    wreg      void 
  5921 ;; Registers used:
  5922 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5923 ;; Tracked objects:
  5924 ;;		On entry : 0/0
  5925 ;;		On exit  : 0/0
  5926 ;;		Unchanged: 0/0
  5927 ;; Data sizes:     COMRAM   BANK0   BANK1
  5928 ;;      Params:         0       0       0
  5929 ;;      Locals:         0       0       0
  5930 ;;      Temps:          0       0       0
  5931 ;;      Totals:         0       0       0
  5932 ;;Total ram usage:        0 bytes
  5933 ;; Hardware stack levels used: 1
  5934 ;; Hardware stack levels required when called: 6
  5935 ;; This function calls:
  5936 ;;		_cgrom_char
  5937 ;;		_initLCD
  5938 ;;		_init_ds18b20
  5939 ;;		_init_uart
  5940 ;; This function is called by:
  5941 ;;		_main
  5942 ;; This function uses a non-reentrant model
  5943 ;;
  5944                           
  5945                           	psect	text27
  5946  0012CE                     __ptext27:
  5947                           	callstack 0
  5948  0012CE                     _Main_init:
  5949                           	callstack 24
  5950                           
  5951                           ;main.c: 649: PORTA = 0;
  5952                           
  5953                           ;incstack = 0
  5954  0012CE  6A80               	clrf	128,c	;volatile
  5955                           
  5956                           ;main.c: 650: LATA = 0;
  5957  0012D0  6A89               	clrf	137,c	;volatile
  5958                           
  5959                           ;main.c: 651: TRISA = 0;
  5960  0012D2  6A92               	clrf	146,c	;volatile
  5961                           
  5962                           ;main.c: 652: PORTB = 0;
  5963  0012D4  6A81               	clrf	129,c	;volatile
  5964                           
  5965                           ;main.c: 653: LATB = 0;
  5966  0012D6  6A8A               	clrf	138,c	;volatile
  5967                           
  5968                           ;main.c: 654: TRISB = 0b00000110;
  5969  0012D8  0E06               	movlw	6
  5970  0012DA  6E93               	movwf	147,c	;volatile
  5971                           
  5972                           ;main.c: 655: PORTC = 0;
  5973  0012DC  6A82               	clrf	130,c	;volatile
  5974                           
  5975                           ;main.c: 656: LATC = 0;
  5976  0012DE  6A8B               	clrf	139,c	;volatile
  5977                           
  5978                           ;main.c: 657: TRISC = 0;
  5979  0012E0  6A94               	clrf	148,c	;volatile
  5980                           
  5981                           ;main.c: 658: OSCCONbits.SCS0 = 0;
  5982  0012E2  90D3               	bcf	211,0,c	;volatile
  5983                           
  5984                           ;main.c: 659: OSCCONbits.SCS1 = 1;
  5985  0012E4  82D3               	bsf	211,1,c	;volatile
  5986                           
  5987                           ;main.c: 660: OSCCONbits.IRCF = 0b111;
  5988  0012E6  0E70               	movlw	112
  5989  0012E8  12D3               	iorwf	211,f,c	;volatile
  5990                           
  5991                           ;main.c: 661: ADCON1bits.PCFG = 0b1111;
  5992  0012EA  0E0F               	movlw	15
  5993  0012EC  12C1               	iorwf	193,f,c	;volatile
  5994                           
  5995                           ;main.c: 663: PORTAbits.RA6 = 1;
  5996  0012EE  8C80               	bsf	128,6,c	;volatile
  5997                           
  5998                           ;main.c: 665: init_ds18b20();
  5999  0012F0  ECB6  F00A         	call	_init_ds18b20	;wreg free
  6000                           
  6001                           ;main.c: 667: T1CON = 0b10000000;
  6002  0012F4  0E80               	movlw	128
  6003  0012F6  6ECD               	movwf	205,c	;volatile
  6004                           
  6005                           ;main.c: 669: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
  6006  0012F8  0E3C               	movlw	60
  6007  0012FA  6ECF               	movwf	207,c	;volatile
  6008                           
  6009                           ;main.c: 670: TMR1L = ((unsigned char)((15536)&0xFF));
  6010  0012FC  0EB0               	movlw	176
  6011  0012FE  6ECE               	movwf	206,c	;volatile
  6012                           
  6013                           ;main.c: 671: IPR1bits.TMR1IP = 1;
  6014  001300  809F               	bsf	159,0,c	;volatile
  6015                           
  6016                           ;main.c: 673: T0CONbits.T0PS = 0b000;
  6017  001302  0EF8               	movlw	-8
  6018  001304  16D5               	andwf	213,f,c	;volatile
  6019                           
  6020                           ;main.c: 674: T0CONbits.PSA = 1;
  6021  001306  86D5               	bsf	213,3,c	;volatile
  6022                           
  6023                           ;main.c: 675: T0CONbits.T08BIT = 0;
  6024  001308  9CD5               	bcf	213,6,c	;volatile
  6025                           
  6026                           ;main.c: 676: T0CONbits.T0CS = 0;
  6027  00130A  9AD5               	bcf	213,5,c	;volatile
  6028                           
  6029                           ;main.c: 677: T0CONbits.TMR0ON = 1;
  6030  00130C  8ED5               	bsf	213,7,c	;volatile
  6031                           
  6032                           ;main.c: 678: TMR0H = ((unsigned char)(((45536)>>8)&0xFF));
  6033  00130E  0EB1               	movlw	177
  6034  001310  6ED7               	movwf	215,c	;volatile
  6035                           
  6036                           ;main.c: 679: TMR0L = ((unsigned char)((45536)&0xFF));
  6037  001312  0EE0               	movlw	224
  6038  001314  6ED6               	movwf	214,c	;volatile
  6039                           
  6040                           ;main.c: 680: INTCONbits.T0IE = 1;
  6041  001316  8AF2               	bsf	242,5,c	;volatile
  6042                           
  6043                           ;main.c: 681: INTCON2bits.T0IP = 0;
  6044  001318  94F1               	bcf	241,2,c	;volatile
  6045                           
  6046                           ;main.c: 682: INTCON2bits.RBPU = 0;
  6047  00131A  9EF1               	bcf	241,7,c	;volatile
  6048                           
  6049                           ;main.c: 686: PIE1bits.TMR1IE = 1;
  6050  00131C  809D               	bsf	157,0,c	;volatile
  6051                           
  6052                           ;main.c: 687: RCONbits.IPEN = 1;
  6053  00131E  8ED0               	bsf	208,7,c	;volatile
  6054                           
  6055                           ;main.c: 688: INTCONbits.PEIE = 1;
  6056  001320  8CF2               	bsf	242,6,c	;volatile
  6057                           
  6058                           ;main.c: 689: INTCONbits.GIE = 1;
  6059  001322  8EF2               	bsf	242,7,c	;volatile
  6060                           
  6061                           ;main.c: 690: initLCD();
  6062  001324  EC29  F008         	call	_initLCD	;wreg free
  6063                           
  6064                           ;main.c: 691: init_uart();
  6065  001328  EC82  F00D         	call	_init_uart	;wreg free
  6066                           
  6067                           ;main.c: 692: cgrom_char(symbol_4, 1);
  6068  00132C  0EE5               	movlw	low _symbol_4
  6069  00132E  6E42               	movwf	cgrom_char@symbol^0,c
  6070  001330  0E1E               	movlw	high _symbol_4
  6071  001332  6E43               	movwf	(cgrom_char@symbol+1)^0,c
  6072  001334  0E01               	movlw	1
  6073  001336  6E44               	movwf	cgrom_char@address^0,c
  6074  001338  ECB2  F00C         	call	_cgrom_char	;wreg free
  6075                           
  6076                           ;main.c: 693: cgrom_char(symbol_5, 2);
  6077  00133C  0EDD               	movlw	low _symbol_5
  6078  00133E  6E42               	movwf	cgrom_char@symbol^0,c
  6079  001340  0E1E               	movlw	high _symbol_5
  6080  001342  6E43               	movwf	(cgrom_char@symbol+1)^0,c
  6081  001344  0E02               	movlw	2
  6082  001346  6E44               	movwf	cgrom_char@address^0,c
  6083  001348  ECB2  F00C         	call	_cgrom_char	;wreg free
  6084                           
  6085                           ;main.c: 694: cgrom_char(symbol_6, 3);
  6086  00134C  0ED5               	movlw	low _symbol_6
  6087  00134E  6E42               	movwf	cgrom_char@symbol^0,c
  6088  001350  0E1E               	movlw	high _symbol_6
  6089  001352  6E43               	movwf	(cgrom_char@symbol+1)^0,c
  6090  001354  0E03               	movlw	3
  6091  001356  6E44               	movwf	cgrom_char@address^0,c
  6092  001358  ECB2  F00C         	call	_cgrom_char	;wreg free
  6093                           
  6094                           ;main.c: 695: cgrom_char(symbol_7, 4);
  6095  00135C  0ECD               	movlw	low _symbol_7
  6096  00135E  6E42               	movwf	cgrom_char@symbol^0,c
  6097  001360  0E1E               	movlw	high _symbol_7
  6098  001362  6E43               	movwf	(cgrom_char@symbol+1)^0,c
  6099  001364  0E04               	movlw	4
  6100  001366  6E44               	movwf	cgrom_char@address^0,c
  6101  001368  ECB2  F00C         	call	_cgrom_char	;wreg free
  6102                           
  6103                           ;main.c: 699: snd_all = 0;
  6104  00136C  988B               	bcf	139,4,c	;volatile
  6105  00136E  0012               	return		;funcret
  6106  001370                     __end_of_Main_init:
  6107                           	callstack 0
  6108                           
  6109 ;; *************** function _init_uart *****************
  6110 ;; Defined at:
  6111 ;;		line 28 in file "eusart.c"
  6112 ;; Parameters:    Size  Location     Type
  6113 ;;		None
  6114 ;; Auto vars:     Size  Location     Type
  6115 ;;		None
  6116 ;; Return value:  Size  Location     Type
  6117 ;;                  1    wreg      void 
  6118 ;; Registers used:
  6119 ;;		wreg, status,2
  6120 ;; Tracked objects:
  6121 ;;		On entry : 0/0
  6122 ;;		On exit  : 0/0
  6123 ;;		Unchanged: 0/0
  6124 ;; Data sizes:     COMRAM   BANK0   BANK1
  6125 ;;      Params:         0       0       0
  6126 ;;      Locals:         0       0       0
  6127 ;;      Temps:          0       0       0
  6128 ;;      Totals:         0       0       0
  6129 ;;Total ram usage:        0 bytes
  6130 ;; Hardware stack levels used: 1
  6131 ;; Hardware stack levels required when called: 2
  6132 ;; This function calls:
  6133 ;;		Nothing
  6134 ;; This function is called by:
  6135 ;;		_Main_init
  6136 ;; This function uses a non-reentrant model
  6137 ;;
  6138                           
  6139                           	psect	text28
  6140  001B04                     __ptext28:
  6141                           	callstack 0
  6142  001B04                     _init_uart:
  6143                           	callstack 27
  6144                           
  6145                           ;eusart.c: 30: TRISCbits.RC6 = 0;
  6146                           
  6147                           ;incstack = 0
  6148  001B04  9C94               	bcf	148,6,c	;volatile
  6149                           
  6150                           ;eusart.c: 31: TRISCbits.RC7 = 1;
  6151  001B06  8E94               	bsf	148,7,c	;volatile
  6152                           
  6153                           ;eusart.c: 32: TXSTAbits.SYNC = 0;
  6154  001B08  98AC               	bcf	172,4,c	;volatile
  6155                           
  6156                           ;eusart.c: 33: TXSTAbits.TXEN = 1;
  6157  001B0A  8AAC               	bsf	172,5,c	;volatile
  6158                           
  6159                           ;eusart.c: 34: RCSTAbits.CREN = 1;
  6160  001B0C  88AB               	bsf	171,4,c	;volatile
  6161                           
  6162                           ;eusart.c: 35: RCSTAbits.SPEN = 1;
  6163  001B0E  8EAB               	bsf	171,7,c	;volatile
  6164                           
  6165                           ;eusart.c: 38: TXSTAbits.BRGH = 1;
  6166  001B10  84AC               	bsf	172,2,c	;volatile
  6167                           
  6168                           ;eusart.c: 52: eusartTxHead = 0;
  6169  001B12  0E33               	movlw	51
  6170  001B14  6EAF               	movwf	175,c	;volatile
  6171                           
  6172                           ;eusart.c: 57: eusartRxTail = 0;
  6173  001B16  0E10               	movlw	16
  6174  001B18  6E24               	movwf	_eusartTxBufferRemaining^0,c	;volatile
  6175                           
  6176                           ;eusart.c: 58: eusartRxCount = 0;
  6177  001B1A  6A23               	clrf	_eusartRxCount^0,c	;volatile
  6178  001B1C  0012               	return		;funcret
  6179  001B1E                     __end_of_init_uart:
  6180                           	callstack 0
  6181                           
  6182 ;; *************** function _init_ds18b20 *****************
  6183 ;; Defined at:
  6184 ;;		line 18 in file "ds18b20.c"
  6185 ;; Parameters:    Size  Location     Type
  6186 ;;		None
  6187 ;; Auto vars:     Size  Location     Type
  6188 ;;  i               1   12[COMRAM] unsigned char 
  6189 ;;  q               1   11[COMRAM] unsigned char 
  6190 ;; Return value:  Size  Location     Type
  6191 ;;                  1    wreg      void 
  6192 ;; Registers used:
  6193 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6194 ;; Tracked objects:
  6195 ;;		On entry : 0/0
  6196 ;;		On exit  : 0/0
  6197 ;;		Unchanged: 0/0
  6198 ;; Data sizes:     COMRAM   BANK0   BANK1
  6199 ;;      Params:         0       0       0
  6200 ;;      Locals:         2       0       0
  6201 ;;      Temps:          2       0       0
  6202 ;;      Totals:         4       0       0
  6203 ;;Total ram usage:        4 bytes
  6204 ;; Hardware stack levels used: 1
  6205 ;; Hardware stack levels required when called: 4
  6206 ;; This function calls:
  6207 ;;		_ow_reset
  6208 ;;		_read_eep
  6209 ;;		_write_byte
  6210 ;; This function is called by:
  6211 ;;		_Main_init
  6212 ;; This function uses a non-reentrant model
  6213 ;;
  6214                           
  6215                           	psect	text29
  6216  00156C                     __ptext29:
  6217                           	callstack 0
  6218  00156C                     _init_ds18b20:
  6219                           	callstack 25
  6220                           
  6221                           ;ds18b20.c: 20: if (!ow_reset())
  6222                           
  6223                           ;incstack = 0
  6224  00156C  ECCB  F00C         	call	_ow_reset	;wreg free
  6225  001570  0900               	iorlw	0
  6226  001572  E10F               	bnz	l2840
  6227                           
  6228                           ;ds18b20.c: 21: {;ds18b20.c: 23: write_byte(0xCC);
  6229  001574  0ECC               	movlw	204
  6230  001576  EC7D  F00C         	call	_write_byte
  6231                           
  6232                           ;ds18b20.c: 24: write_byte(0x4E);
  6233  00157A  0E4E               	movlw	78
  6234  00157C  EC7D  F00C         	call	_write_byte
  6235                           
  6236                           ;ds18b20.c: 25: write_byte(0x00);
  6237  001580  0E00               	movlw	0
  6238  001582  EC7D  F00C         	call	_write_byte
  6239                           
  6240                           ;ds18b20.c: 26: write_byte(0x00);
  6241  001586  0E00               	movlw	0
  6242  001588  EC7D  F00C         	call	_write_byte
  6243                           
  6244                           ;ds18b20.c: 27: write_byte(0x7F);
  6245  00158C  0E7F               	movlw	127
  6246  00158E  EC7D  F00C         	call	_write_byte
  6247  001592                     l2840:
  6248                           
  6249                           ;ds18b20.c: 28: };ds18b20.c: 30: for (uint8_t q = 0; q < 2; q++) {
  6250  001592  6A46               	clrf	init_ds18b20@q^0,c
  6251  001594                     l402:
  6252                           
  6253                           ;ds18b20.c: 31: for (uint8_t i = 0; i < 8; i++) {
  6254  001594  6A47               	clrf	init_ds18b20@i^0,c
  6255  001596                     l2850:
  6256                           
  6257                           ;ds18b20.c: 32: rom_dq[q][i] = read_eep((q*8) + i);
  6258  001596  5046               	movf	init_ds18b20@q^0,w,c
  6259  001598  0D08               	mullw	8
  6260  00159A  50F3               	movf	243,w,c
  6261  00159C  0F01               	addlw	low _rom_dq
  6262  00159E  2447               	addwf	init_ds18b20@i^0,w,c
  6263  0015A0  6ED9               	movwf	fsr2l,c
  6264  0015A2  6ADA               	clrf	fsr2h,c
  6265  0015A4  5046               	movf	init_ds18b20@q^0,w,c
  6266  0015A6  6E44               	movwf	??_init_ds18b20^0,c
  6267  0015A8  6A45               	clrf	(??_init_ds18b20+1)^0,c
  6268  0015AA  90D8               	bcf	status,0,c
  6269  0015AC  3644               	rlcf	??_init_ds18b20^0,f,c
  6270  0015AE  3645               	rlcf	(??_init_ds18b20+1)^0,f,c
  6271  0015B0  90D8               	bcf	status,0,c
  6272  0015B2  3644               	rlcf	??_init_ds18b20^0,f,c
  6273  0015B4  3645               	rlcf	(??_init_ds18b20+1)^0,f,c
  6274  0015B6  90D8               	bcf	status,0,c
  6275  0015B8  3644               	rlcf	??_init_ds18b20^0,f,c
  6276  0015BA  3645               	rlcf	(??_init_ds18b20+1)^0,f,c
  6277  0015BC  5047               	movf	init_ds18b20@i^0,w,c
  6278  0015BE  2444               	addwf	??_init_ds18b20^0,w,c
  6279  0015C0  6E3E               	movwf	read_eep@address^0,c
  6280  0015C2  0E00               	movlw	0
  6281  0015C4  2045               	addwfc	(??_init_ds18b20+1)^0,w,c
  6282  0015C6  6E3F               	movwf	(read_eep@address+1)^0,c
  6283  0015C8  ECB2  F00D         	call	_read_eep	;wreg free
  6284  0015CC  6EDF               	movwf	indf2,c
  6285  0015CE  2A47               	incf	init_ds18b20@i^0,f,c
  6286  0015D0  0E07               	movlw	7
  6287  0015D2  6447               	cpfsgt	init_ds18b20@i^0,c
  6288  0015D4  D7E0               	goto	l2850
  6289  0015D6  2A46               	incf	init_ds18b20@q^0,f,c
  6290  0015D8  0E01               	movlw	1
  6291  0015DA  6446               	cpfsgt	init_ds18b20@q^0,c
  6292  0015DC  D7DB               	goto	l402
  6293  0015DE  0C01               	retlw	1
  6294  0015E0                     __end_of_init_ds18b20:
  6295                           	callstack 0
  6296                           
  6297 ;; *************** function _write_byte *****************
  6298 ;; Defined at:
  6299 ;;		line 66 in file "onewire.c"
  6300 ;; Parameters:    Size  Location     Type
  6301 ;;  val             1    wreg     unsigned char 
  6302 ;; Auto vars:     Size  Location     Type
  6303 ;;  val             1    6[COMRAM] unsigned char 
  6304 ;;  i               1    8[COMRAM] unsigned char 
  6305 ;;  temp            1    7[COMRAM] unsigned char 
  6306 ;; Return value:  Size  Location     Type
  6307 ;;                  1    wreg      void 
  6308 ;; Registers used:
  6309 ;;		wreg, status,2, status,0, cstack
  6310 ;; Tracked objects:
  6311 ;;		On entry : 0/0
  6312 ;;		On exit  : 0/0
  6313 ;;		Unchanged: 0/0
  6314 ;; Data sizes:     COMRAM   BANK0   BANK1
  6315 ;;      Params:         0       0       0
  6316 ;;      Locals:         3       0       0
  6317 ;;      Temps:          2       0       0
  6318 ;;      Totals:         5       0       0
  6319 ;;Total ram usage:        5 bytes
  6320 ;; Hardware stack levels used: 1
  6321 ;; Hardware stack levels required when called: 3
  6322 ;; This function calls:
  6323 ;;		_write_bit
  6324 ;; This function is called by:
  6325 ;;		_init_ds18b20
  6326 ;;		_ds18b20_readTemp
  6327 ;;		_ds18b20_readrom
  6328 ;; This function uses a non-reentrant model
  6329 ;;
  6330                           
  6331                           	psect	text30
  6332  0018FA                     __ptext30:
  6333                           	callstack 0
  6334  0018FA                     _write_byte:
  6335                           	callstack 26
  6336                           
  6337                           ;incstack = 0
  6338                           ;write_byte@val stored from wreg
  6339  0018FA  6E41               	movwf	write_byte@val^0,c
  6340                           
  6341                           ;onewire.c: 68: uint8_t i;;onewire.c: 69: uint8_t temp;;onewire.c: 71: for (i=0;i<8;i++)
  6342  0018FC  6A43               	clrf	write_byte@i^0,c
  6343  0018FE                     l2774:
  6344                           
  6345                           ;onewire.c: 72: {;onewire.c: 73: temp = val >> i;
  6346  0018FE  C043  F03F         	movff	write_byte@i,??_write_byte
  6347  001902  C041  F040         	movff	write_byte@val,??_write_byte+1
  6348  001906  2A3F               	incf	??_write_byte^0,f,c
  6349  001908  D002               	goto	u1714
  6350  00190A                     u1715:
  6351  00190A  90D8               	bcf	status,0,c
  6352  00190C  3240               	rrcf	(??_write_byte+1)^0,f,c
  6353  00190E                     u1714:
  6354  00190E  2E3F               	decfsz	??_write_byte^0,f,c
  6355  001910  D7FC               	goto	u1715
  6356  001912  5040               	movf	(??_write_byte+1)^0,w,c
  6357  001914  6E42               	movwf	write_byte@temp^0,c
  6358                           
  6359                           ;onewire.c: 74: temp &= 0x01;
  6360  001916  0E01               	movlw	1
  6361  001918  1642               	andwf	write_byte@temp^0,f,c
  6362                           
  6363                           ;onewire.c: 75: write_bit(temp);
  6364  00191A  5042               	movf	write_byte@temp^0,w,c
  6365  00191C  EC65  F00D         	call	_write_bit
  6366  001920  2A43               	incf	write_byte@i^0,f,c
  6367  001922  0E07               	movlw	7
  6368  001924  6443               	cpfsgt	write_byte@i^0,c
  6369  001926  D7EB               	goto	l2774
  6370                           
  6371                           ;onewire.c: 76: };onewire.c: 78: _delay((unsigned long)((105)*(8000000/4000000.0)));
  6372  001928  0E46               	movlw	70
  6373  00192A                     u3177:
  6374  00192A  2EE8               	decfsz	wreg,f,c
  6375  00192C  D7FE               	bra	u3177
  6376  00192E  0012               	return		;funcret
  6377  001930                     __end_of_write_byte:
  6378                           	callstack 0
  6379                           
  6380 ;; *************** function _write_bit *****************
  6381 ;; Defined at:
  6382 ;;		line 34 in file "onewire.c"
  6383 ;; Parameters:    Size  Location     Type
  6384 ;;  bitval          1    wreg     unsigned char 
  6385 ;; Auto vars:     Size  Location     Type
  6386 ;;  bitval          1    3[COMRAM] unsigned char 
  6387 ;; Return value:  Size  Location     Type
  6388 ;;                  1    wreg      void 
  6389 ;; Registers used:
  6390 ;;		wreg, status,2, status,0, cstack
  6391 ;; Tracked objects:
  6392 ;;		On entry : 0/0
  6393 ;;		On exit  : 0/0
  6394 ;;		Unchanged: 0/0
  6395 ;; Data sizes:     COMRAM   BANK0   BANK1
  6396 ;;      Params:         0       0       0
  6397 ;;      Locals:         1       0       0
  6398 ;;      Temps:          0       0       0
  6399 ;;      Totals:         1       0       0
  6400 ;;Total ram usage:        1 bytes
  6401 ;; Hardware stack levels used: 1
  6402 ;; Hardware stack levels required when called: 2
  6403 ;; This function calls:
  6404 ;;		Nothing
  6405 ;; This function is called by:
  6406 ;;		_write_byte
  6407 ;; This function uses a non-reentrant model
  6408 ;;
  6409                           
  6410                           	psect	text31
  6411  001ACA                     __ptext31:
  6412                           	callstack 0
  6413  001ACA                     _write_bit:
  6414                           	callstack 26
  6415                           
  6416                           ;incstack = 0
  6417                           ;write_bit@bitval stored from wreg
  6418  001ACA  6E3E               	movwf	write_bit@bitval^0,c
  6419                           
  6420                           ;onewire.c: 36: PORTAbits.RA6 = 0;
  6421  001ACC  9C80               	bcf	128,6,c	;volatile
  6422                           
  6423                           ;onewire.c: 37: TRISAbits.TRISA6 = 0;
  6424  001ACE  9C92               	bcf	146,6,c	;volatile
  6425                           
  6426                           ;onewire.c: 38: if(bitval == 1) {
  6427  001AD0  043E               	decf	write_bit@bitval^0,w,c
  6428  001AD2  E104               	bnz	l2740
  6429                           
  6430                           ;onewire.c: 39: _delay((unsigned long)((2)*(8000000/4000000.0)));
  6431  001AD4  D000               	nop2		;2 cycle nop
  6432  001AD6  D000               	nop2		;2 cycle nop
  6433                           
  6434                           ;onewire.c: 40: PORTAbits.RA6 = 1;
  6435  001AD8  8C80               	bsf	128,6,c	;volatile
  6436                           
  6437                           ;onewire.c: 41: TRISAbits.TRISA6 = 1;
  6438  001ADA  8C92               	bsf	146,6,c	;volatile
  6439  001ADC                     l2740:
  6440                           
  6441                           ;onewire.c: 42: };onewire.c: 43: _delay((unsigned long)((105)*(8000000/4000000.0)));
  6442  001ADC  0E46               	movlw	70
  6443  001ADE                     u3187:
  6444  001ADE  2EE8               	decfsz	wreg,f,c
  6445  001AE0  D7FE               	bra	u3187
  6446                           
  6447                           ;onewire.c: 44: PORTAbits.RA6 = 1;
  6448  001AE2  8C80               	bsf	128,6,c	;volatile
  6449                           
  6450                           ;onewire.c: 45: TRISAbits.TRISA6 = 1;
  6451  001AE4  8C92               	bsf	146,6,c	;volatile
  6452  001AE6  0012               	return		;funcret
  6453  001AE8                     __end_of_write_bit:
  6454                           	callstack 0
  6455                           
  6456 ;; *************** function _read_eep *****************
  6457 ;; Defined at:
  6458 ;;		line 25 in file "eeprom.c"
  6459 ;; Parameters:    Size  Location     Type
  6460 ;;  address         2    3[COMRAM] unsigned short 
  6461 ;; Auto vars:     Size  Location     Type
  6462 ;;		None
  6463 ;; Return value:  Size  Location     Type
  6464 ;;                  1    wreg      unsigned char 
  6465 ;; Registers used:
  6466 ;;		wreg, status,2
  6467 ;; Tracked objects:
  6468 ;;		On entry : 0/0
  6469 ;;		On exit  : 0/0
  6470 ;;		Unchanged: 0/0
  6471 ;; Data sizes:     COMRAM   BANK0   BANK1
  6472 ;;      Params:         2       0       0
  6473 ;;      Locals:         0       0       0
  6474 ;;      Temps:          0       0       0
  6475 ;;      Totals:         2       0       0
  6476 ;;Total ram usage:        2 bytes
  6477 ;; Hardware stack levels used: 1
  6478 ;; Hardware stack levels required when called: 2
  6479 ;; This function calls:
  6480 ;;		Nothing
  6481 ;; This function is called by:
  6482 ;;		_main
  6483 ;;		_init_ds18b20
  6484 ;;		_read_eep_16
  6485 ;; This function uses a non-reentrant model
  6486 ;;
  6487                           
  6488                           	psect	text32
  6489  001B64                     __ptext32:
  6490                           	callstack 0
  6491  001B64                     _read_eep:
  6492                           	callstack 27
  6493                           
  6494                           ;eeprom.c: 28: {}
  6495                           
  6496                           ;incstack = 0
  6497  001B64  B2A6               	btfsc	166,1,c	;volsfr
  6498  001B66  D7FE               	goto	__ptext32
  6499                           
  6500                           ;eeprom.c: 30: EEADR = address;
  6501  001B68  C03E  FFA9         	movff	read_eep@address,4009	;volatile
  6502                           
  6503                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
  6504  001B6C  9EA6               	bcf	166,7,c	;volsfr
  6505                           
  6506                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
  6507  001B6E  9CA6               	bcf	166,6,c	;volsfr
  6508                           
  6509                           ;eeprom.c: 33: EECON1bits.RD = 1;
  6510  001B70  80A6               	bsf	166,0,c	;volsfr
  6511                           
  6512                           ;eeprom.c: 34: return( EEDATA );
  6513  001B72  50A8               	movf	168,w,c	;volatile
  6514  001B74  0012               	return		;funcret
  6515  001B76                     __end_of_read_eep:
  6516                           	callstack 0
  6517                           
  6518 ;; *************** function _ow_reset *****************
  6519 ;; Defined at:
  6520 ;;		line 5 in file "onewire.c"
  6521 ;; Parameters:    Size  Location     Type
  6522 ;;		None
  6523 ;; Auto vars:     Size  Location     Type
  6524 ;;  presence        1    3[COMRAM] unsigned char 
  6525 ;; Return value:  Size  Location     Type
  6526 ;;                  1    wreg      unsigned char 
  6527 ;; Registers used:
  6528 ;;		wreg, status,2
  6529 ;; Tracked objects:
  6530 ;;		On entry : 0/0
  6531 ;;		On exit  : 0/0
  6532 ;;		Unchanged: 0/0
  6533 ;; Data sizes:     COMRAM   BANK0   BANK1
  6534 ;;      Params:         0       0       0
  6535 ;;      Locals:         1       0       0
  6536 ;;      Temps:          0       0       0
  6537 ;;      Totals:         1       0       0
  6538 ;;Total ram usage:        1 bytes
  6539 ;; Hardware stack levels used: 1
  6540 ;; Hardware stack levels required when called: 2
  6541 ;; This function calls:
  6542 ;;		Nothing
  6543 ;; This function is called by:
  6544 ;;		_init_ds18b20
  6545 ;;		_ds18b20_readTemp
  6546 ;;		_ds18b20_readrom
  6547 ;; This function uses a non-reentrant model
  6548 ;;
  6549                           
  6550                           	psect	text33
  6551  001996                     __ptext33:
  6552                           	callstack 0
  6553  001996                     _ow_reset:
  6554                           	callstack 27
  6555                           
  6556                           ;onewire.c: 7: uint8_t presence;;onewire.c: 8: PORTAbits.RA6 = 0;
  6557                           
  6558                           ;incstack = 0
  6559  001996  9C80               	bcf	128,6,c	;volatile
  6560                           
  6561                           ;onewire.c: 9: TRISAbits.TRISA6 = 0;
  6562  001998  9C92               	bcf	146,6,c	;volatile
  6563                           
  6564                           ;onewire.c: 10: _delay((unsigned long)((500)*(8000000/4000000.0)));
  6565  00199A  0EC8               	movlw	200
  6566  00199C                     u3197:
  6567  00199C  D000               	nop2	
  6568  00199E  2EE8               	decfsz	wreg,f,c
  6569  0019A0  D7FD               	bra	u3197
  6570                           
  6571                           ;onewire.c: 11: PORTAbits.RA6 = 1;
  6572  0019A2  8C80               	bsf	128,6,c	;volatile
  6573                           
  6574                           ;onewire.c: 12: TRISAbits.TRISA6 = 1;
  6575  0019A4  8C92               	bsf	146,6,c	;volatile
  6576                           
  6577                           ;onewire.c: 13: _delay((unsigned long)((100)*(8000000/4000000.0)));
  6578  0019A6  0E42               	movlw	66
  6579  0019A8                     u3207:
  6580  0019A8  2EE8               	decfsz	wreg,f,c
  6581  0019AA  D7FE               	bra	u3207
  6582  0019AC  D000               	nop2	
  6583                           
  6584                           ;onewire.c: 14: presence = PORTAbits.RA6;
  6585  0019AE  0E00               	movlw	0
  6586  0019B0  BC80               	btfsc	128,6,c	;volatile
  6587  0019B2  0E01               	movlw	1
  6588  0019B4  6E3E               	movwf	ow_reset@presence^0,c
  6589                           
  6590                           ;onewire.c: 15: _delay((unsigned long)((424)*(8000000/4000000.0)));
  6591  0019B6  0EA9               	movlw	169
  6592  0019B8                     u3217:
  6593  0019B8  D000               	nop2	
  6594  0019BA  2EE8               	decfsz	wreg,f,c
  6595  0019BC  D7FD               	bra	u3217
  6596  0019BE  D000               	nop2	
  6597  0019C0  F000               	nop	
  6598                           
  6599                           ;onewire.c: 16: return(presence);
  6600  0019C2  503E               	movf	ow_reset@presence^0,w,c
  6601  0019C4  0012               	return		;funcret
  6602  0019C6                     __end_of_ow_reset:
  6603                           	callstack 0
  6604                           
  6605 ;; *************** function _initLCD *****************
  6606 ;; Defined at:
  6607 ;;		line 10 in file "hd44780.c"
  6608 ;; Parameters:    Size  Location     Type
  6609 ;;		None
  6610 ;; Auto vars:     Size  Location     Type
  6611 ;;		None
  6612 ;; Return value:  Size  Location     Type
  6613 ;;                  1    wreg      void 
  6614 ;; Registers used:
  6615 ;;		wreg, status,2, status,0, cstack
  6616 ;; Tracked objects:
  6617 ;;		On entry : 0/0
  6618 ;;		On exit  : 0/0
  6619 ;;		Unchanged: 0/0
  6620 ;; Data sizes:     COMRAM   BANK0   BANK1
  6621 ;;      Params:         0       0       0
  6622 ;;      Locals:         0       0       0
  6623 ;;      Temps:          1       0       0
  6624 ;;      Totals:         1       0       0
  6625 ;;Total ram usage:        1 bytes
  6626 ;; Hardware stack levels used: 1
  6627 ;; Hardware stack levels required when called: 5
  6628 ;; This function calls:
  6629 ;;		_clearLCD
  6630 ;;		_lcdNibble
  6631 ;;		_lcdWrite
  6632 ;; This function is called by:
  6633 ;;		_Main_init
  6634 ;; This function uses a non-reentrant model
  6635 ;;
  6636                           
  6637                           	psect	text34
  6638  001052                     __ptext34:
  6639                           	callstack 0
  6640  001052                     _initLCD:
  6641                           	callstack 24
  6642                           
  6643                           ;hd44780.c: 11: LATAbits.LATA2 = 0;
  6644                           
  6645                           ;incstack = 0
  6646  001052  9489               	bcf	137,2,c	;volatile
  6647                           
  6648                           ;hd44780.c: 12: LATAbits.LATA1 = 0;
  6649  001054  9289               	bcf	137,1,c	;volatile
  6650                           
  6651                           ;hd44780.c: 14: _delay((unsigned long)((10)*(8000000/4000.0)));
  6652  001056  0E1A               	movlw	26
  6653  001058  6E43               	movwf	??_initLCD^0,c
  6654  00105A  0EF8               	movlw	248
  6655  00105C                     u3227:
  6656  00105C  2EE8               	decfsz	wreg,f,c
  6657  00105E  D7FE               	bra	u3227
  6658  001060  2E43               	decfsz	??_initLCD^0,f,c
  6659  001062  D7FC               	bra	u3227
  6660  001064  D000               	nop2	
  6661                           
  6662                           ;hd44780.c: 15: _delay((unsigned long)((10)*(8000000/4000.0)));
  6663  001066  0E1A               	movlw	26
  6664  001068  6E43               	movwf	??_initLCD^0,c
  6665  00106A  0EF8               	movlw	248
  6666  00106C                     u3237:
  6667  00106C  2EE8               	decfsz	wreg,f,c
  6668  00106E  D7FE               	bra	u3237
  6669  001070  2E43               	decfsz	??_initLCD^0,f,c
  6670  001072  D7FC               	bra	u3237
  6671  001074  D000               	nop2	
  6672                           
  6673                           ;hd44780.c: 16: _delay((unsigned long)((10)*(8000000/4000.0)));
  6674  001076  0E1A               	movlw	26
  6675  001078  6E43               	movwf	??_initLCD^0,c
  6676  00107A  0EF8               	movlw	248
  6677  00107C                     u3247:
  6678  00107C  2EE8               	decfsz	wreg,f,c
  6679  00107E  D7FE               	bra	u3247
  6680  001080  2E43               	decfsz	??_initLCD^0,f,c
  6681  001082  D7FC               	bra	u3247
  6682  001084  D000               	nop2	
  6683                           
  6684                           ;hd44780.c: 17: _delay((unsigned long)((10)*(8000000/4000.0)));
  6685  001086  0E1A               	movlw	26
  6686  001088  6E43               	movwf	??_initLCD^0,c
  6687  00108A  0EF8               	movlw	248
  6688  00108C                     u3257:
  6689  00108C  2EE8               	decfsz	wreg,f,c
  6690  00108E  D7FE               	bra	u3257
  6691  001090  2E43               	decfsz	??_initLCD^0,f,c
  6692  001092  D7FC               	bra	u3257
  6693  001094  D000               	nop2	
  6694                           
  6695                           ;hd44780.c: 21: lcdNibble(0b0011);
  6696  001096  0E03               	movlw	3
  6697  001098  EC02  F00A         	call	_lcdNibble
  6698                           
  6699                           ;hd44780.c: 22: _delay((unsigned long)((5)*(8000000/4000.0)));
  6700  00109C  0E0D               	movlw	13
  6701  00109E  6E43               	movwf	??_initLCD^0,c
  6702  0010A0  0EFC               	movlw	252
  6703  0010A2                     u3267:
  6704  0010A2  2EE8               	decfsz	wreg,f,c
  6705  0010A4  D7FE               	bra	u3267
  6706  0010A6  2E43               	decfsz	??_initLCD^0,f,c
  6707  0010A8  D7FC               	bra	u3267
  6708                           
  6709                           ;hd44780.c: 23: lcdNibble(0b0011);
  6710  0010AA  0E03               	movlw	3
  6711  0010AC  EC02  F00A         	call	_lcdNibble
  6712                           
  6713                           ;hd44780.c: 24: _delay((unsigned long)((5)*(8000000/4000.0)));
  6714  0010B0  0E0D               	movlw	13
  6715  0010B2  6E43               	movwf	??_initLCD^0,c
  6716  0010B4  0EFC               	movlw	252
  6717  0010B6                     u3277:
  6718  0010B6  2EE8               	decfsz	wreg,f,c
  6719  0010B8  D7FE               	bra	u3277
  6720  0010BA  2E43               	decfsz	??_initLCD^0,f,c
  6721  0010BC  D7FC               	bra	u3277
  6722                           
  6723                           ;hd44780.c: 25: lcdNibble(0b0011);
  6724  0010BE  0E03               	movlw	3
  6725  0010C0  EC02  F00A         	call	_lcdNibble
  6726                           
  6727                           ;hd44780.c: 26: _delay((unsigned long)((5)*(8000000/4000.0)));
  6728  0010C4  0E0D               	movlw	13
  6729  0010C6  6E43               	movwf	??_initLCD^0,c
  6730  0010C8  0EFC               	movlw	252
  6731  0010CA                     u3287:
  6732  0010CA  2EE8               	decfsz	wreg,f,c
  6733  0010CC  D7FE               	bra	u3287
  6734  0010CE  2E43               	decfsz	??_initLCD^0,f,c
  6735  0010D0  D7FC               	bra	u3287
  6736                           
  6737                           ;hd44780.c: 27: lcdNibble(0b0010);
  6738  0010D2  0E02               	movlw	2
  6739  0010D4  EC02  F00A         	call	_lcdNibble
  6740                           
  6741                           ;hd44780.c: 28: _delay((unsigned long)((5)*(8000000/4000.0)));
  6742  0010D8  0E0D               	movlw	13
  6743  0010DA  6E43               	movwf	??_initLCD^0,c
  6744  0010DC  0EFC               	movlw	252
  6745  0010DE                     u3297:
  6746  0010DE  2EE8               	decfsz	wreg,f,c
  6747  0010E0  D7FE               	bra	u3297
  6748  0010E2  2E43               	decfsz	??_initLCD^0,f,c
  6749  0010E4  D7FC               	bra	u3297
  6750                           
  6751                           ;hd44780.c: 31: lcdWrite(((0b0010 << 4) | (1 << 3)), COMMAND);
  6752  0010E6  0E00               	movlw	0
  6753  0010E8  6E40               	movwf	lcdWrite@type^0,c
  6754  0010EA  0E28               	movlw	40
  6755  0010EC  EC42  F00D         	call	_lcdWrite
  6756                           
  6757                           ;hd44780.c: 32: _delay((unsigned long)((5)*(8000000/4000.0)));
  6758  0010F0  0E0D               	movlw	13
  6759  0010F2  6E43               	movwf	??_initLCD^0,c
  6760  0010F4  0EFC               	movlw	252
  6761  0010F6                     u3307:
  6762  0010F6  2EE8               	decfsz	wreg,f,c
  6763  0010F8  D7FE               	bra	u3307
  6764  0010FA  2E43               	decfsz	??_initLCD^0,f,c
  6765  0010FC  D7FC               	bra	u3307
  6766                           
  6767                           ;hd44780.c: 33: lcdWrite(((0b1100) | (0 << 1) | (0 << 0)), COMMAND);
  6768  0010FE  0E00               	movlw	0
  6769  001100  6E40               	movwf	lcdWrite@type^0,c
  6770  001102  0E0C               	movlw	12
  6771  001104  EC42  F00D         	call	_lcdWrite
  6772                           
  6773                           ;hd44780.c: 34: _delay((unsigned long)((8)*(8000000/4000.0)));
  6774  001108  0E15               	movlw	21
  6775  00110A  6E43               	movwf	??_initLCD^0,c
  6776  00110C  0EC6               	movlw	198
  6777  00110E                     u3317:
  6778  00110E  2EE8               	decfsz	wreg,f,c
  6779  001110  D7FE               	bra	u3317
  6780  001112  2E43               	decfsz	??_initLCD^0,f,c
  6781  001114  D7FC               	bra	u3317
  6782  001116  D000               	nop2	
  6783                           
  6784                           ;hd44780.c: 35: clearLCD();
  6785  001118  EC8F  F00D         	call	_clearLCD	;wreg free
  6786                           
  6787                           ;hd44780.c: 36: _delay((unsigned long)((5)*(8000000/4000.0)));
  6788  00111C  0E0D               	movlw	13
  6789  00111E  6E43               	movwf	??_initLCD^0,c
  6790  001120  0EFC               	movlw	252
  6791  001122                     u3327:
  6792  001122  2EE8               	decfsz	wreg,f,c
  6793  001124  D7FE               	bra	u3327
  6794  001126  2E43               	decfsz	??_initLCD^0,f,c
  6795  001128  D7FC               	bra	u3327
  6796                           
  6797                           ;hd44780.c: 37: lcdWrite(0x06, COMMAND);
  6798  00112A  0E00               	movlw	0
  6799  00112C  6E40               	movwf	lcdWrite@type^0,c
  6800  00112E  0E06               	movlw	6
  6801  001130  EC42  F00D         	call	_lcdWrite
  6802                           
  6803                           ;hd44780.c: 38: _delay((unsigned long)((5)*(8000000/4000.0)));
  6804  001134  0E0D               	movlw	13
  6805  001136  6E43               	movwf	??_initLCD^0,c
  6806  001138  0EFC               	movlw	252
  6807  00113A                     u3337:
  6808  00113A  2EE8               	decfsz	wreg,f,c
  6809  00113C  D7FE               	bra	u3337
  6810  00113E  2E43               	decfsz	??_initLCD^0,f,c
  6811  001140  D7FC               	bra	u3337
  6812                           
  6813                           ;hd44780.c: 39: clearLCD();
  6814  001142  EC8F  F00D         	call	_clearLCD	;wreg free
  6815                           
  6816                           ;hd44780.c: 41: LATAbits.LATA2 = 1;
  6817  001146  8489               	bsf	137,2,c	;volatile
  6818  001148  0012               	return		;funcret
  6819  00114A                     __end_of_initLCD:
  6820                           	callstack 0
  6821                           
  6822 ;; *************** function _clearLCD *****************
  6823 ;; Defined at:
  6824 ;;		line 45 in file "hd44780.c"
  6825 ;; Parameters:    Size  Location     Type
  6826 ;;		None
  6827 ;; Auto vars:     Size  Location     Type
  6828 ;;		None
  6829 ;; Return value:  Size  Location     Type
  6830 ;;                  1    wreg      void 
  6831 ;; Registers used:
  6832 ;;		wreg, status,2, status,0, cstack
  6833 ;; Tracked objects:
  6834 ;;		On entry : 0/0
  6835 ;;		On exit  : 0/0
  6836 ;;		Unchanged: 0/0
  6837 ;; Data sizes:     COMRAM   BANK0   BANK1
  6838 ;;      Params:         0       0       0
  6839 ;;      Locals:         0       0       0
  6840 ;;      Temps:          1       0       0
  6841 ;;      Totals:         1       0       0
  6842 ;;Total ram usage:        1 bytes
  6843 ;; Hardware stack levels used: 1
  6844 ;; Hardware stack levels required when called: 4
  6845 ;; This function calls:
  6846 ;;		_lcdWrite
  6847 ;; This function is called by:
  6848 ;;		_main
  6849 ;;		_outValPreset
  6850 ;;		_initLCD
  6851 ;; This function uses a non-reentrant model
  6852 ;;
  6853                           
  6854                           	psect	text35
  6855  001B1E                     __ptext35:
  6856                           	callstack 0
  6857  001B1E                     _clearLCD:
  6858                           	callstack 0
  6859                           
  6860                           ;hd44780.c: 46: lcdWrite(0x01, COMMAND);
  6861                           
  6862                           ;incstack = 0
  6863  001B1E  EC64  F009         	call	PL68	;call to abstracted procedure
  6864  001B22  EC42  F00D         	call	_lcdWrite
  6865                           
  6866                           ;hd44780.c: 47: _delay((unsigned long)((2)*(8000000/4000.0)));
  6867  001B26  0E06               	movlw	6
  6868  001B28  6E42               	movwf	??_clearLCD^0,c
  6869  001B2A  0E30               	movlw	48
  6870  001B2C                     u3347:
  6871  001B2C  2EE8               	decfsz	wreg,f,c
  6872  001B2E  D7FE               	bra	u3347
  6873  001B30  2E42               	decfsz	??_clearLCD^0,f,c
  6874  001B32  D7FC               	bra	u3347
  6875  001B34  D000               	nop2	
  6876  001B36  0012               	return		;funcret
  6877  001B38                     __end_of_clearLCD:
  6878                           	callstack 0
  6879                           
  6880 ;; *************** function _cgrom_char *****************
  6881 ;; Defined at:
  6882 ;;		line 127 in file "hd44780.c"
  6883 ;; Parameters:    Size  Location     Type
  6884 ;;  symbol          2    7[COMRAM] PTR unsigned char 
  6885 ;;		 -> symbol_7(8), symbol_6(8), symbol_5(8), symbol_4(8), 
  6886 ;;  address         1    9[COMRAM] unsigned char 
  6887 ;; Auto vars:     Size  Location     Type
  6888 ;;  i               1   10[COMRAM] unsigned char 
  6889 ;; Return value:  Size  Location     Type
  6890 ;;                  1    wreg      void 
  6891 ;; Registers used:
  6892 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6893 ;; Tracked objects:
  6894 ;;		On entry : 0/0
  6895 ;;		On exit  : 0/0
  6896 ;;		Unchanged: 0/0
  6897 ;; Data sizes:     COMRAM   BANK0   BANK1
  6898 ;;      Params:         3       0       0
  6899 ;;      Locals:         1       0       0
  6900 ;;      Temps:          0       0       0
  6901 ;;      Totals:         4       0       0
  6902 ;;Total ram usage:        4 bytes
  6903 ;; Hardware stack levels used: 1
  6904 ;; Hardware stack levels required when called: 4
  6905 ;; This function calls:
  6906 ;;		_lcdWrite
  6907 ;; This function is called by:
  6908 ;;		_Main_init
  6909 ;; This function uses a non-reentrant model
  6910 ;;
  6911                           
  6912                           	psect	text36
  6913  001964                     __ptext36:
  6914                           	callstack 0
  6915  001964                     _cgrom_char:
  6916                           	callstack 25
  6917                           
  6918                           ;hd44780.c: 128: uint8_t i;;hd44780.c: 129: lcdWrite(0x40 | (address * 8), COMMAND);
  6919                           
  6920                           ;incstack = 0
  6921  001964  6A40               	clrf	lcdWrite@type^0,c
  6922  001966  5044               	movf	cgrom_char@address^0,w,c
  6923  001968  0D08               	mullw	8
  6924  00196A  50F3               	movf	243,w,c
  6925  00196C  0940               	iorlw	64
  6926  00196E  EC42  F00D         	call	_lcdWrite
  6927                           
  6928                           ;hd44780.c: 130: for (i = 0; i < 8; i++)
  6929  001972  6A45               	clrf	cgrom_char@i^0,c
  6930  001974                     l2904:
  6931                           
  6932                           ;hd44780.c: 131: lcdWrite(*symbol++, DATA);
  6933  001974  0E01               	movlw	1
  6934  001976  6E40               	movwf	lcdWrite@type^0,c
  6935  001978  C042  FFF6         	movff	cgrom_char@symbol,tblptrl
  6936  00197C  C043  FFF7         	movff	cgrom_char@symbol+1,tblptrh
  6937  001980                     	if	0	;tblptru may be non-zero
  6938  001980                     	endif
  6939  001980                     	if	0	;tblptru may be non-zero
  6940  001980                     	endif
  6941  001980  0008               	tblrd		*
  6942  001982  50F5               	movf	tablat,w,c
  6943  001984  EC42  F00D         	call	_lcdWrite
  6944  001988  4A42               	infsnz	cgrom_char@symbol^0,f,c
  6945  00198A  2A43               	incf	(cgrom_char@symbol+1)^0,f,c
  6946  00198C  2A45               	incf	cgrom_char@i^0,f,c
  6947  00198E  0E07               	movlw	7
  6948  001990  6445               	cpfsgt	cgrom_char@i^0,c
  6949  001992  D7F0               	goto	l2904
  6950  001994  0C07               	retlw	7
  6951  001996                     __end_of_cgrom_char:
  6952                           	callstack 0
  6953                           
  6954 ;; *************** function _lcdWrite *****************
  6955 ;; Defined at:
  6956 ;;		line 50 in file "hd44780.c"
  6957 ;; Parameters:    Size  Location     Type
  6958 ;;  byte            1    wreg     unsigned char 
  6959 ;;  type            1    5[COMRAM] enum E2045
  6960 ;; Auto vars:     Size  Location     Type
  6961 ;;  byte            1    6[COMRAM] unsigned char 
  6962 ;; Return value:  Size  Location     Type
  6963 ;;                  1    wreg      void 
  6964 ;; Registers used:
  6965 ;;		wreg, status,2, status,0, cstack
  6966 ;; Tracked objects:
  6967 ;;		On entry : 0/0
  6968 ;;		On exit  : 0/0
  6969 ;;		Unchanged: 0/0
  6970 ;; Data sizes:     COMRAM   BANK0   BANK1
  6971 ;;      Params:         1       0       0
  6972 ;;      Locals:         1       0       0
  6973 ;;      Temps:          0       0       0
  6974 ;;      Totals:         2       0       0
  6975 ;;Total ram usage:        2 bytes
  6976 ;; Hardware stack levels used: 1
  6977 ;; Hardware stack levels required when called: 3
  6978 ;; This function calls:
  6979 ;;		_lcdNibble
  6980 ;; This function is called by:
  6981 ;;		_initLCD
  6982 ;;		_clearLCD
  6983 ;;		_lcd_gotoxy
  6984 ;;		_lcd_putc
  6985 ;;		_lcdPrint
  6986 ;;		_cgrom_char
  6987 ;; This function uses a non-reentrant model
  6988 ;;
  6989                           
  6990                           	psect	text37
  6991  001A84                     __ptext37:
  6992                           	callstack 0
  6993  001A84                     _lcdWrite:
  6994                           	callstack 25
  6995                           
  6996                           ;incstack = 0
  6997                           ;lcdWrite@byte stored from wreg
  6998  001A84  6E41               	movwf	lcdWrite@byte^0,c
  6999                           
  7000                           ;hd44780.c: 51: if (type == COMMAND)
  7001  001A86  5040               	movf	lcdWrite@type^0,w,c
  7002  001A88  E102               	bnz	l472
  7003                           
  7004                           ;hd44780.c: 52: LATAbits.LATA2 = 0;
  7005  001A8A  9489               	bcf	137,2,c	;volatile
  7006  001A8C  D001               	goto	l2728
  7007  001A8E                     l472:
  7008                           
  7009                           ;hd44780.c: 53: else;hd44780.c: 54: LATAbits.LATA2 = 1;
  7010  001A8E  8489               	bsf	137,2,c	;volatile
  7011  001A90                     l2728:
  7012                           
  7013                           ;hd44780.c: 56: _delay((unsigned long)((100)*(8000000/4000000.0)));
  7014  001A90  0E42               	movlw	66
  7015  001A92                     u3357:
  7016  001A92  2EE8               	decfsz	wreg,f,c
  7017  001A94  D7FE               	bra	u3357
  7018  001A96  D000               	nop2	
  7019                           
  7020                           ;hd44780.c: 58: lcdNibble(byte >> 4);
  7021  001A98  3841               	swapf	lcdWrite@byte^0,w,c
  7022  001A9A  0B0F               	andlw	15
  7023  001A9C  EC02  F00A         	call	_lcdNibble
  7024                           
  7025                           ;hd44780.c: 59: lcdNibble(byte & 0x0F);
  7026  001AA0  5041               	movf	lcdWrite@byte^0,w,c
  7027  001AA2  0B0F               	andlw	15
  7028  001AA4  EF02  F00A         	goto	_lcdNibble
  7029  001AA8                     __end_of_lcdWrite:
  7030                           	callstack 0
  7031                           
  7032 ;; *************** function _lcdNibble *****************
  7033 ;; Defined at:
  7034 ;;		line 63 in file "hd44780.c"
  7035 ;; Parameters:    Size  Location     Type
  7036 ;;  nibble          1    wreg     unsigned char 
  7037 ;; Auto vars:     Size  Location     Type
  7038 ;;  nibble          1    4[COMRAM] unsigned char 
  7039 ;; Return value:  Size  Location     Type
  7040 ;;                  1    wreg      void 
  7041 ;; Registers used:
  7042 ;;		wreg, status,2, status,0
  7043 ;; Tracked objects:
  7044 ;;		On entry : 0/0
  7045 ;;		On exit  : 0/0
  7046 ;;		Unchanged: 0/0
  7047 ;; Data sizes:     COMRAM   BANK0   BANK1
  7048 ;;      Params:         0       0       0
  7049 ;;      Locals:         1       0       0
  7050 ;;      Temps:          1       0       0
  7051 ;;      Totals:         2       0       0
  7052 ;;Total ram usage:        2 bytes
  7053 ;; Hardware stack levels used: 1
  7054 ;; Hardware stack levels required when called: 2
  7055 ;; This function calls:
  7056 ;;		Nothing
  7057 ;; This function is called by:
  7058 ;;		_initLCD
  7059 ;;		_lcdWrite
  7060 ;; This function uses a non-reentrant model
  7061 ;;
  7062                           
  7063                           	psect	text38
  7064  001404                     __ptext38:
  7065                           	callstack 0
  7066  001404                     _lcdNibble:
  7067                           	callstack 25
  7068                           
  7069                           ;incstack = 0
  7070                           ;lcdNibble@nibble stored from wreg
  7071  001404  6E3F               	movwf	lcdNibble@nibble^0,c
  7072                           
  7073                           ;hd44780.c: 64: LATCbits.LATC0 = (nibble & 0x01) ? 1 : 0;
  7074  001406  A03F               	btfss	lcdNibble@nibble^0,0,c
  7075  001408  D003               	goto	u1600
  7076  00140A  6A3E               	clrf	??_lcdNibble^0,c
  7077  00140C  2A3E               	incf	??_lcdNibble^0,f,c
  7078  00140E  D001               	goto	u1618
  7079  001410                     u1600:
  7080  001410  6A3E               	clrf	??_lcdNibble^0,c
  7081  001412                     u1618:
  7082  001412  508B               	movf	139,w,c	;volatile
  7083  001414  183E               	xorwf	??_lcdNibble^0,w,c
  7084  001416  0BFE               	andlw	-2
  7085  001418  183E               	xorwf	??_lcdNibble^0,w,c
  7086  00141A  6E8B               	movwf	139,c	;volatile
  7087                           
  7088                           ;hd44780.c: 65: LATCbits.LATC1 = (nibble & 0x02) ? 1 : 0;
  7089  00141C  A23F               	btfss	lcdNibble@nibble^0,1,c
  7090  00141E  D003               	goto	u1620
  7091  001420  6A3E               	clrf	??_lcdNibble^0,c
  7092  001422  2A3E               	incf	??_lcdNibble^0,f,c
  7093  001424  D001               	goto	u1638
  7094  001426                     u1620:
  7095  001426  6A3E               	clrf	??_lcdNibble^0,c
  7096  001428                     u1638:
  7097  001428  463E               	rlncf	??_lcdNibble^0,f,c
  7098  00142A  508B               	movf	139,w,c	;volatile
  7099  00142C  183E               	xorwf	??_lcdNibble^0,w,c
  7100  00142E  0BFD               	andlw	-3
  7101  001430  183E               	xorwf	??_lcdNibble^0,w,c
  7102  001432  6E8B               	movwf	139,c	;volatile
  7103                           
  7104                           ;hd44780.c: 66: LATCbits.LATC2 = (nibble & 0x04) ? 1 : 0;
  7105  001434  A43F               	btfss	lcdNibble@nibble^0,2,c
  7106  001436  D003               	goto	u1640
  7107  001438  6A3E               	clrf	??_lcdNibble^0,c
  7108  00143A  2A3E               	incf	??_lcdNibble^0,f,c
  7109  00143C  D001               	goto	u1658
  7110  00143E                     u1640:
  7111  00143E  6A3E               	clrf	??_lcdNibble^0,c
  7112  001440                     u1658:
  7113  001440  D819               	call	PL56	;call to abstracted procedure
  7114  001442  0BFB               	andlw	-5
  7115  001444  183E               	xorwf	??_lcdNibble^0,w,c
  7116  001446  6E8B               	movwf	139,c	;volatile
  7117                           
  7118                           ;hd44780.c: 67: LATCbits.LATC3 = (nibble & 0x08) ? 1 : 0;
  7119  001448  A63F               	btfss	lcdNibble@nibble^0,3,c
  7120  00144A  D003               	goto	u1660
  7121  00144C  6A3E               	clrf	??_lcdNibble^0,c
  7122  00144E  2A3E               	incf	??_lcdNibble^0,f,c
  7123  001450  D001               	goto	u1678
  7124  001452                     u1660:
  7125  001452  6A3E               	clrf	??_lcdNibble^0,c
  7126  001454                     u1678:
  7127  001454  463E               	rlncf	??_lcdNibble^0,f,c
  7128  001456  D80E               	call	PL56	;call to abstracted procedure
  7129  001458  0BF7               	andlw	-9
  7130  00145A  183E               	xorwf	??_lcdNibble^0,w,c
  7131  00145C  6E8B               	movwf	139,c	;volatile
  7132                           
  7133                           ;hd44780.c: 70: LATAbits.LATA1 = 1;
  7134  00145E  8289               	bsf	137,1,c	;volatile
  7135                           
  7136                           ;hd44780.c: 71: _delay((unsigned long)((100)*(8000000/4000000.0)));
  7137  001460  0E42               	movlw	66
  7138  001462                     u3367:
  7139  001462  2EE8               	decfsz	wreg,f,c
  7140  001464  D7FE               	bra	u3367
  7141  001466  D000               	nop2	
  7142                           
  7143                           ;hd44780.c: 72: LATAbits.LATA1 = 0;
  7144  001468  9289               	bcf	137,1,c	;volatile
  7145                           
  7146                           ;hd44780.c: 73: _delay((unsigned long)((100)*(8000000/4000000.0)));
  7147  00146A  0E42               	movlw	66
  7148  00146C                     u3377:
  7149  00146C  2EE8               	decfsz	wreg,f,c
  7150  00146E  D7FE               	bra	u3377
  7151  001470  D000               	nop2	
  7152  001472  0012               	return		;funcret
  7153  001474                     __end_of_lcdNibble:
  7154                           	callstack 0
  7155  001474                     PL56:
  7156                           	callstack 25
  7157  001474  463E               	rlncf	??_lcdNibble^0,f,c
  7158  001476  463E               	rlncf	??_lcdNibble^0,f,c
  7159  001478  508B               	movf	139,w,c	;volatile
  7160  00147A  183E               	xorwf	??_lcdNibble^0,w,c
  7161  00147C  0012               	return	
  7162  00147E                     __end_ofPL56:
  7163                           	callstack 0
  7164                           
  7165 ;; *************** function _myIntL *****************
  7166 ;; Defined at:
  7167 ;;		line 726 in file "main.c"
  7168 ;; Parameters:    Size  Location     Type
  7169 ;;		None
  7170 ;; Auto vars:     Size  Location     Type
  7171 ;;		None
  7172 ;; Return value:  Size  Location     Type
  7173 ;;                  1    wreg      void 
  7174 ;; Registers used:
  7175 ;;		wreg, status,2, status,0
  7176 ;; Tracked objects:
  7177 ;;		On entry : 0/0
  7178 ;;		On exit  : 0/0
  7179 ;;		Unchanged: 0/0
  7180 ;; Data sizes:     COMRAM   BANK0   BANK1
  7181 ;;      Params:         0       0       0
  7182 ;;      Locals:         0       0       0
  7183 ;;      Temps:          3       0       0
  7184 ;;      Totals:         3       0       0
  7185 ;;Total ram usage:        3 bytes
  7186 ;; Hardware stack levels used: 1
  7187 ;; Hardware stack levels required when called: 1
  7188 ;; This function calls:
  7189 ;;		Nothing
  7190 ;; This function is called by:
  7191 ;;		Interrupt level 1
  7192 ;; This function uses a non-reentrant model
  7193 ;;
  7194                           
  7195                           	psect	intcodelo
  7196  000018                     __pintcodelo:
  7197                           	callstack 0
  7198  000018                     _myIntL:
  7199                           	callstack 24
  7200                           
  7201                           ;incstack = 0
  7202  000018  8072               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  7203  00001A  CFD8 F03B          	movff	status,??_myIntL
  7204  00001E  CFE8 F03C          	movff	wreg,??_myIntL+1
  7205  000022  CFE0 F03D          	movff	bsr,??_myIntL+2
  7206                           
  7207                           ;main.c: 727: static uint8_t snd_delay;;main.c: 729: if (INTCONbits.T0IF == 1) {
  7208  000026  A4F2               	btfss	242,2,c	;volatile
  7209  000028  D015               	goto	i1l356
  7210                           
  7211                           ;main.c: 730: INTCONbits.T0IF = 0;
  7212  00002A  94F2               	bcf	242,2,c	;volatile
  7213                           
  7214                           ;main.c: 731: TMR0H = ((unsigned char)(((45536)>>8)&0xFF));
  7215  00002C  0EB1               	movlw	177
  7216  00002E  6ED7               	movwf	215,c	;volatile
  7217                           
  7218                           ;main.c: 732: TMR0L = ((unsigned char)((45536)&0xFF));
  7219  000030  0EE0               	movlw	224
  7220  000032  6ED6               	movwf	214,c	;volatile
  7221                           
  7222                           ;main.c: 735: tik_time_b++;
  7223  000034  8671               	bsf	(_read_key/(0+8))^0,_read_key& (0+7),c
  7224                           
  7225                           ;main.c: 736: if (en_sound) {
  7226  000036  502E               	movf	_en_sound^0,w,c
  7227  000038  E00C               	bz	i1l351
  7228                           
  7229                           ;main.c: 737: snd_delay++;
  7230  00003A  2A26               	incf	myIntL@snd_delay^0,f,c
  7231                           
  7232                           ;main.c: 738: if (snd_delay <= 40) {
  7233  00003C  0E29               	movlw	41
  7234  00003E  6026               	cpfslt	myIntL@snd_delay^0,c
  7235  000040  D002               	goto	i1l352
  7236                           
  7237                           ;main.c: 739: LATCbits.LATC4 = 1;
  7238  000042  888B               	bsf	139,4,c	;volatile
  7239                           
  7240                           ;main.c: 740: } else
  7241  000044  D001               	goto	i1l2710
  7242  000046                     i1l352:
  7243                           
  7244                           ;main.c: 741: LATCbits.LATC4 = 0;
  7245  000046  988B               	bcf	139,4,c	;volatile
  7246  000048                     i1l2710:
  7247                           
  7248                           ;main.c: 742: if (snd_delay > 80)
  7249  000048  0E50               	movlw	80
  7250  00004A  6426               	cpfsgt	myIntL@snd_delay^0,c
  7251  00004C  D003               	goto	i1l356
  7252                           
  7253                           ;main.c: 743: snd_delay = 0;
  7254  00004E  6A26               	clrf	myIntL@snd_delay^0,c
  7255  000050  D001               	goto	i1l356
  7256  000052                     i1l351:
  7257                           
  7258                           ;main.c: 745: LATCbits.LATC4 = 0;
  7259  000052  988B               	bcf	139,4,c	;volatile
  7260  000054                     i1l356:
  7261  000054  C03D  FFE0         	movff	??_myIntL+2,bsr
  7262  000058  C03C  FFE8         	movff	??_myIntL+1,wreg
  7263  00005C  C03B  FFD8         	movff	??_myIntL,status
  7264  000060  9072               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  7265  000062  0010               	retfie	
  7266  000064                     __end_of_myIntL:
  7267                           	callstack 0
  7268                           
  7269 ;; *************** function _myIntH *****************
  7270 ;; Defined at:
  7271 ;;		line 708 in file "main.c"
  7272 ;; Parameters:    Size  Location     Type
  7273 ;;		None
  7274 ;; Auto vars:     Size  Location     Type
  7275 ;;		None
  7276 ;; Return value:  Size  Location     Type
  7277 ;;                  1    wreg      void 
  7278 ;; Registers used:
  7279 ;;		wreg, status,2, status,0
  7280 ;; Tracked objects:
  7281 ;;		On entry : 0/0
  7282 ;;		On exit  : 0/0
  7283 ;;		Unchanged: 0/0
  7284 ;; Data sizes:     COMRAM   BANK0   BANK1
  7285 ;;      Params:         0       0       0
  7286 ;;      Locals:         0       0       0
  7287 ;;      Temps:          0       0       0
  7288 ;;      Totals:         0       0       0
  7289 ;;Total ram usage:        0 bytes
  7290 ;; Hardware stack levels used: 1
  7291 ;; This function calls:
  7292 ;;		Nothing
  7293 ;; This function is called by:
  7294 ;;		Interrupt level 2
  7295 ;; This function uses a non-reentrant model
  7296 ;;
  7297                           
  7298                           	psect	intcode
  7299  000008                     __pintcode:
  7300                           	callstack 0
  7301  000008                     _myIntH:
  7302                           	callstack 24
  7303                           
  7304                           ;incstack = 0
  7305  000008  8272               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7306  00000A  EF54  F00D         	goto	int_func
  7307                           
  7308                           	psect	intcode_body
  7309  001AA8                     __pintcode_body:
  7310                           	callstack 24
  7311  001AA8                     int_func:
  7312                           	callstack 24
  7313                           
  7314                           ;main.c: 710: if (PIR1bits.TMR1IF == 1) {
  7315  001AA8  A09E               	btfss	158,0,c	;volatile
  7316  001AAA  D00D               	goto	i2l343
  7317                           
  7318                           ;main.c: 711: PIR1bits.TMR1IF = 0;
  7319  001AAC  909E               	bcf	158,0,c	;volatile
  7320                           
  7321                           ;main.c: 712: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
  7322  001AAE  0E3C               	movlw	60
  7323  001AB0  6ECF               	movwf	207,c	;volatile
  7324                           
  7325                           ;main.c: 713: TMR1L = ((unsigned char)((15536)&0xFF));
  7326  001AB2  0EB0               	movlw	176
  7327  001AB4  6ECE               	movwf	206,c	;volatile
  7328                           
  7329                           ;main.c: 714: if (++timer_val >= 30)
  7330  001AB6  2A3A               	incf	_timer_val^0,f,c
  7331  001AB8  0E1D               	movlw	29
  7332  001ABA  643A               	cpfsgt	_timer_val^0,c
  7333  001ABC  D004               	goto	i2l343
  7334                           
  7335                           ;main.c: 715: {;main.c: 716: timer_val = 0;
  7336  001ABE  6A3A               	clrf	_timer_val^0,c
  7337                           
  7338                           ;main.c: 717: time_flag = 1;
  7339  001AC0  0E01               	movlw	1
  7340  001AC2  6E39               	movwf	_time_flag^0,c
  7341                           
  7342                           ;main.c: 718: T1CONbits.TMR1ON = 0;
  7343  001AC4  90CD               	bcf	205,0,c	;volatile
  7344  001AC6                     i2l343:
  7345  001AC6  9272               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7346  001AC8  0011               	retfie		f
  7347  001ACA                     __end_of_myIntH:
  7348                           	callstack 0
  7349                           
  7350                           	psect	rparam
  7351  0000                     
  7352                           	psect	temp
  7353  000072                     btemp:
  7354                           	callstack 0
  7355  000072                     	ds	1
  7356  0000                     int$flags	set	btemp
  7357  0000                     wtemp8	set	btemp+1
  7358  0000                     ttemp5	set	btemp+1
  7359  0000                     ttemp6	set	btemp+4
  7360  0000                     ttemp7	set	btemp+8
  7361                           
  7362                           	psect	idloc
  7363                           
  7364                           ;Config register IDLOC0 @ 0x200000
  7365                           ;	unspecified, using default values
  7366  200000                     	org	2097152
  7367  200000  FF                 	db	255
  7368                           
  7369                           ;Config register IDLOC1 @ 0x200001
  7370                           ;	unspecified, using default values
  7371  200001                     	org	2097153
  7372  200001  FF                 	db	255
  7373                           
  7374                           ;Config register IDLOC2 @ 0x200002
  7375                           ;	unspecified, using default values
  7376  200002                     	org	2097154
  7377  200002  FF                 	db	255
  7378                           
  7379                           ;Config register IDLOC3 @ 0x200003
  7380                           ;	unspecified, using default values
  7381  200003                     	org	2097155
  7382  200003  FF                 	db	255
  7383                           
  7384                           ;Config register IDLOC4 @ 0x200004
  7385                           ;	unspecified, using default values
  7386  200004                     	org	2097156
  7387  200004  FF                 	db	255
  7388                           
  7389                           ;Config register IDLOC5 @ 0x200005
  7390                           ;	unspecified, using default values
  7391  200005                     	org	2097157
  7392  200005  FF                 	db	255
  7393                           
  7394                           ;Config register IDLOC6 @ 0x200006
  7395                           ;	unspecified, using default values
  7396  200006                     	org	2097158
  7397  200006  FF                 	db	255
  7398                           
  7399                           ;Config register IDLOC7 @ 0x200007
  7400                           ;	unspecified, using default values
  7401  200007                     	org	2097159
  7402  200007  FF                 	db	255
  7403                           
  7404                           	psect	config
  7405                           
  7406                           ; Padding undefined space
  7407  300000                     	org	3145728
  7408  300000  FF                 	db	255
  7409                           
  7410                           ;Config register CONFIG1H @ 0x300001
  7411                           ;	Oscillator Selection bits
  7412                           ;	OSC = INTIO2, Internal RC oscillator, port function on RA6 and port function on RA7
  7413                           ;	Fail-Safe Clock Monitor Enable bit
  7414                           ;	FSCM = OFF, Fail-Safe Clock Monitor disabled
  7415                           ;	Internal/External Switchover bit
  7416                           ;	IESO = OFF, Internal/External Switchover mode disabled
  7417  300001                     	org	3145729
  7418  300001  08                 	db	8
  7419                           
  7420                           ;Config register CONFIG2L @ 0x300002
  7421                           ;	Power-up Timer enable bit
  7422                           ;	PWRT = ON, PWRT enabled
  7423                           ;	Brown-out Reset enable bit
  7424                           ;	BOR = ON, Brown-out Reset enabled
  7425                           ;	Brown-out Reset Voltage bits
  7426                           ;	BORV = 27, VBOR set to 2.7V
  7427  300002                     	org	3145730
  7428  300002  0A                 	db	10
  7429                           
  7430                           ;Config register CONFIG2H @ 0x300003
  7431                           ;	Watchdog Timer Enable bit
  7432                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  7433                           ;	Watchdog Timer Postscale Select bits
  7434                           ;	WDTPS = 32768, 1:32768
  7435  300003                     	org	3145731
  7436  300003  1E                 	db	30
  7437                           
  7438                           ; Padding undefined space
  7439  300004                     	org	3145732
  7440  300004  FF                 	db	255
  7441                           
  7442                           ;Config register CONFIG3H @ 0x300005
  7443                           ;	CCP2 MUX bit
  7444                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  7445                           ;	PORTB A/D Enable bit
  7446                           ;	PBAD = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  7447                           ;	MCLR Pin Enable bit
  7448                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  7449  300005                     	org	3145733
  7450  300005  81                 	db	129
  7451                           
  7452                           ;Config register CONFIG4L @ 0x300006
  7453                           ;	Stack Full/Underflow Reset Enable bit
  7454                           ;	STVR = ON, Stack full/underflow will cause Reset
  7455                           ;	Single-Supply ICSP Enable bit
  7456                           ;	LVP = OFF, Single-Supply ICSP disabled
  7457                           ;	Background Debugger Enable bit
  7458                           ;	DEBUG = 0x1, unprogrammed default
  7459  300006                     	org	3145734
  7460  300006  81                 	db	129
  7461                           
  7462                           ; Padding undefined space
  7463  300007                     	org	3145735
  7464  300007  FF                 	db	255
  7465                           
  7466                           ;Config register CONFIG5L @ 0x300008
  7467                           ;	Code Protection bit
  7468                           ;	CP0 = OFF, Block 0 (000200-0007FFh) not code-protected
  7469                           ;	Code Protection bit
  7470                           ;	CP1 = OFF, Block 1 (000800-000FFFh) not code-protected
  7471                           ;	Code Protection bit
  7472                           ;	CP2 = OFF, Block 2 (001000-0017FFh) not code-protected
  7473                           ;	Code Protection bit
  7474                           ;	CP3 = OFF, Block 3 (001800-001FFFh) not code-protected
  7475  300008                     	org	3145736
  7476  300008  0F                 	db	15
  7477                           
  7478                           ;Config register CONFIG5H @ 0x300009
  7479                           ;	Boot Block Code Protection bit
  7480                           ;	CPB = OFF, Boot block (000000-0001FFh) is not code-protected
  7481                           ;	Data EEPROM Code Protection bit
  7482                           ;	CPD = OFF, Data EEPROM is not code-protected
  7483  300009                     	org	3145737
  7484  300009  C0                 	db	192
  7485                           
  7486                           ;Config register CONFIG6L @ 0x30000A
  7487                           ;	Write Protection bit
  7488                           ;	WRT0 = OFF, Block 0 (000200-0007FFh) not write-protected
  7489                           ;	Write Protection bit
  7490                           ;	WRT1 = OFF, Block 1 (000800-000FFFh) not write-protected
  7491                           ;	Write Protection bit
  7492                           ;	WRT2 = OFF, Block 2 (001000-0017FFh) not write-protected
  7493                           ;	Write Protection bit
  7494                           ;	WRT3 = OFF, Block 3 (001800-001FFFh) not write-protected
  7495  30000A                     	org	3145738
  7496  30000A  0F                 	db	15
  7497                           
  7498                           ;Config register CONFIG6H @ 0x30000B
  7499                           ;	Configuration Register Write Protection bit
  7500                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  7501                           ;	Boot Block Write Protection bit
  7502                           ;	WRTB = OFF, Boot block (000000-0001FFh) is not write-protected
  7503                           ;	Data EEPROM Write Protection bit
  7504                           ;	WRTD = OFF, Data EEPROM is not write-protected
  7505  30000B                     	org	3145739
  7506  30000B  E0                 	db	224
  7507                           
  7508                           ;Config register CONFIG7L @ 0x30000C
  7509                           ;	Table Read Protection bit
  7510                           ;	EBTR0 = OFF, Block 0 (000200-0007FFh) not protected from table reads executed in other
      +                           blocks
  7511                           ;	Table Read Protection bit
  7512                           ;	EBTR1 = OFF, Block 1 (000800-000FFFh) not protected from table reads executed in other
      +                           blocks
  7513                           ;	Table Read Protection bit
  7514                           ;	EBTR2 = OFF, Block 2 (001000-0017FFh) not protected from table reads executed in other
      +                           blocks
  7515                           ;	Table Read Protection bit
  7516                           ;	EBTR3 = OFF, Block 3 (001800-001FFFh) not protected from table reads executed in other
      +                           blocks
  7517  30000C                     	org	3145740
  7518  30000C  0F                 	db	15
  7519                           
  7520                           ;Config register CONFIG7H @ 0x30000D
  7521                           ;	Boot Block Table Read Protection bit
  7522                           ;	EBTRB = OFF, Boot block (000000-0001FFh) is not protected from table reads executed in
      +                           other blocks
  7523  30000D                     	org	3145741
  7524  30000D  40                 	db	64
  7525                           tosu	equ	0xFFF
  7526                           tosh	equ	0xFFE
  7527                           tosl	equ	0xFFD
  7528                           stkptr	equ	0xFFC
  7529                           pclatu	equ	0xFFB
  7530                           pclath	equ	0xFFA
  7531                           pcl	equ	0xFF9
  7532                           tblptru	equ	0xFF8
  7533                           tblptrh	equ	0xFF7
  7534                           tblptrl	equ	0xFF6
  7535                           tablat	equ	0xFF5
  7536                           prodh	equ	0xFF4
  7537                           prodl	equ	0xFF3
  7538                           indf0	equ	0xFEF
  7539                           postinc0	equ	0xFEE
  7540                           postdec0	equ	0xFED
  7541                           preinc0	equ	0xFEC
  7542                           plusw0	equ	0xFEB
  7543                           fsr0h	equ	0xFEA
  7544                           fsr0l	equ	0xFE9
  7545                           wreg	equ	0xFE8
  7546                           indf1	equ	0xFE7
  7547                           postinc1	equ	0xFE6
  7548                           postdec1	equ	0xFE5
  7549                           preinc1	equ	0xFE4
  7550                           plusw1	equ	0xFE3
  7551                           fsr1h	equ	0xFE2
  7552                           fsr1l	equ	0xFE1
  7553                           bsr	equ	0xFE0
  7554                           indf2	equ	0xFDF
  7555                           postinc2	equ	0xFDE
  7556                           postdec2	equ	0xFDD
  7557                           preinc2	equ	0xFDC
  7558                           plusw2	equ	0xFDB
  7559                           fsr2h	equ	0xFDA
  7560                           fsr2l	equ	0xFD9
  7561                           status	equ	0xFD8

Data Sizes:
    Strings     273
    Constant    96
    Data        8
    BSS         58
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     46     113
    BANK0           128      0       0
    BANK1           256      0       0

Pointer List with Targets:

    cgrom_char@symbol	PTR unsigned char  size(2) Largest target is 8
		 -> symbol_7(CODE[8]), symbol_6(CODE[8]), symbol_5(CODE[8]), symbol_4(CODE[8]), 

    lcdPrint@t	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_26(CODE[3]), STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[3]), 
		 -> STR_22(CODE[3]), STR_21(CODE[3]), STR_20(CODE[3]), STR_19(CODE[3]), 
		 -> STR_18(CODE[3]), STR_17(CODE[17]), STR_16(CODE[17]), STR_15(CODE[15]), 
		 -> STR_14(CODE[6]), STR_13(CODE[13]), STR_12(CODE[11]), STR_11(CODE[13]), 
		 -> STR_10(CODE[15]), STR_9(CODE[16]), STR_8(CODE[14]), STR_7(CODE[16]), 
		 -> STR_6(CODE[16]), STR_5(CODE[16]), STR_4(CODE[13]), STR_3(CODE[16]), 
		 -> STR_2(CODE[16]), STR_1(CODE[16]), 

    ds18b20_crc8@data_in	PTR unsigned char  size(1) Largest target is 9
		 -> ds18b20_readrom@temp_rom(COMRAM[8]), scratch(COMRAM[9]), 

    ds18b20_get_temp@minus	PTR unsigned char  size(1) Largest target is 1
		 -> minus_2(COMRAM[1]), minus_1(COMRAM[1]), 

    ds18b20_readTemp@time_flag	PTR unsigned char  size(1) Largest target is 1
		 -> time_flag(COMRAM[1]), 

    ds18b20_readTemp@timer_val	PTR unsigned char  size(1) Largest target is 1
		 -> timer_val(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->___llmod
    _main->_ds18b20_get_temp
    _write_eep_16->_write_eep
    _outValPreset->___lldiv
    _read_eep_16->_read_eep
    _lcd_putc->_lcdWrite
    _lcdPrint->_lcd_gotoxy
    _lcd_gotoxy->_lcdWrite
    _ds18b20_readrom->_ds18b20_crc8
    _ds18b20_readTemp->_ds18b20_crc8
    _ds18b20_get_temp->___lldiv
    ___lmul->_read_eep_16
    ___lldiv->___lmul
    ___lwmod->___lwdiv
    ___llmod->___lldiv
    ___lbmod->___lbdiv
    ___awmod->___awdiv
    _Main_init->_init_ds18b20
    _init_ds18b20->_write_byte
    _write_byte->_write_bit
    _initLCD->_clearLCD
    _clearLCD->_lcdWrite
    _cgrom_char->_lcdWrite
    _lcdWrite->_lcdNibble

Critical Paths under _myIntL in COMRAM

    None.

Critical Paths under _myIntH in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _myIntL in BANK0

    None.

Critical Paths under _myIntH in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myIntL in BANK1

    None.

Critical Paths under _myIntH in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   56444
                                             44 COMRAM     2     2      0
                           _Delay_ms
                          _Main_init
                            ___awdiv
                            ___awmod
                            ___lbdiv
                            ___lbmod
                            ___lldiv
                            ___llmod
                             ___lmul
                            ___lwdiv
                            ___lwmod
                             ___wmul
                           _clearLCD
                   _ds18b20_get_temp
                   _ds18b20_readTemp
                    _ds18b20_readrom
                         _key_GetKey
                          _key_press
                           _lcdPrint
                         _lcd_gotoxy
                           _lcd_putc
                       _outValPreset
                           _read_eep
                        _read_eep_16
                          _write_eep
                       _write_eep_16
 ---------------------------------------------------------------------------------
 (1) _write_eep_16                                         3     1      2    1614
                                              5 COMRAM     3     1      2
                          _write_eep
 ---------------------------------------------------------------------------------
 (1) _outValPreset                                         0     0      0    9549
                            ___lldiv
                             ___lmul
                           _clearLCD
                         _lcd_gotoxy
                        _read_eep_16
 ---------------------------------------------------------------------------------
 (1) _read_eep_16                                          5     3      2     660
                                              5 COMRAM     5     3      2
                           _read_eep
 ---------------------------------------------------------------------------------
 (1) _lcd_putc                                             1     1      0    1088
                                              7 COMRAM     1     1      0
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (1) _lcdPrint                                             6     4      2    6492
                                             10 COMRAM     6     4      2
                           _lcdWrite
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           3     2      1    3339
                                              7 COMRAM     3     2      1
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (1) _key_press                                            1     1      0      70
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _key_GetKey                                           1     1      0      23
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ds18b20_readrom                                     10    10      0    1945
                                             10 COMRAM    10    10      0
                           _Delay_ms
                       _ds18b20_crc8
                           _ow_reset
                          _read_byte
                         _write_byte
                          _write_eep
 ---------------------------------------------------------------------------------
 (2) _write_eep                                            2     1      1     613
                                              3 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _Delay_ms                                             5     3      2     274
                                              3 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ds18b20_readTemp                                     8     6      2    1320
                                             10 COMRAM     8     6      2
                       _ds18b20_crc8
                           _ow_reset
                          _read_byte
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _read_byte                                            4     4      0      92
                                              3 COMRAM     4     4      0
                           _read_bit
 ---------------------------------------------------------------------------------
 (3) _read_bit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ds18b20_crc8                                         7     5      2     557
                                              3 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _ds18b20_get_temp                                    10     8      2    4837
                                             35 COMRAM     9     7      2
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8    2042
                                             10 COMRAM    12     4      8
                        _read_eep_16 (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8    2442
                                             22 COMRAM    13     5      8
                             ___lmul (ARG)
                        _read_eep_16 (ARG)
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     463
                                              3 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4    5023
                                             10 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4    4874
                                              3 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___llmod                                              9     1      8     767
                                             35 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lbmod                                              4     3      1     463
                                              7 COMRAM     4     3      1
                            ___lbdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lbdiv                                              4     3      1     314
                                              3 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     904
                                             11 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     756
                                              3 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Main_init                                            0     0      0    4915
                         _cgrom_char
                            _initLCD
                       _init_ds18b20
                          _init_uart
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_ds18b20                                         4     4      0     930
                                              9 COMRAM     4     4      0
                           _ow_reset
                           _read_eep
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _write_byte                                           5     5      0     136
                                              4 COMRAM     5     5      0
                          _write_bit
 ---------------------------------------------------------------------------------
 (3) _write_bit                                            1     1      0      22
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _read_eep                                             2     0      2     591
                                              3 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ow_reset                                             1     1      0      23
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0    2220
                                              8 COMRAM     1     1      0
                           _clearLCD
                          _lcdNibble
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (2) _clearLCD                                             1     1      0    1066
                                              7 COMRAM     1     1      0
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (2) _cgrom_char                                           4     1      3    1765
                                              7 COMRAM     4     1      3
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (3) _lcdWrite                                             2     1      1    1066
                                              5 COMRAM     2     1      1
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0      88
                                              3 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _myIntL                                               3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _myIntH                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay_ms
   _Main_init
     _cgrom_char
       _lcdWrite
         _lcdNibble
     _initLCD
       _clearLCD
         _lcdWrite
       _lcdNibble
       _lcdWrite
     _init_ds18b20
       _ow_reset
       _read_eep
       _write_byte
         _write_bit
     _init_uart
   ___awdiv
   ___awmod
     ___awdiv (ARG)
   ___lbdiv
   ___lbmod
     ___lbdiv (ARG)
   ___lldiv
     ___lmul (ARG)
       _read_eep_16 (ARG)
         _read_eep
     _read_eep_16 (ARG)
   ___llmod
     ___lldiv (ARG)
   ___lmul
   ___lwdiv
   ___lwmod
     ___lwdiv (ARG)
   ___wmul
   _clearLCD
   _ds18b20_get_temp
     ___lldiv
     ___lmul
   _ds18b20_readTemp
     _ds18b20_crc8
     _ow_reset
     _read_byte
       _read_bit
     _write_byte
   _ds18b20_readrom
     _Delay_ms
     _ds18b20_crc8
     _ow_reset
     _read_byte
     _write_byte
     _write_eep
   _key_GetKey
   _key_press
   _lcdPrint
     _lcdWrite
     _lcd_gotoxy
       _lcdWrite
   _lcd_gotoxy
   _lcd_putc
     _lcdWrite
   _outValPreset
     ___lldiv
     ___lmul
     _clearLCD
     _lcd_gotoxy
     _read_eep_16
   _read_eep
   _read_eep_16
   _write_eep
   _write_eep_16
     _write_eep

 _myIntL (ROOT)

 _myIntH (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       1       0        0.8%
COMRAM              7E     2E      71       1       89.7%
BITBIGSFRhhhhhh     19      0       0       9        0.0%
BITBIGSFRhhhllh     11      0       0      13        0.0%
BITBIGSFRhhhhhh      D      0       0       8        0.0%
BITBIGSFRhhhlhl      B      0       0      12        0.0%
BITBIGSFRhhhlll      8      0       0      17        0.0%
BITBIGSFRhhhllh      6      0       0      16        0.0%
BITBIGSFRhhl         6      0       0      18        0.0%
BITBIGSFRhll         6      0       0      19        0.0%
BITBIGSFRhhhlhh      2      0       0      11        0.0%
BITBIGSFRhhhllh      1      0       0      14        0.0%
BITBIGSFRhhhllh      1      0       0      15        0.0%
BITBIGSFRhhhhl       1      0       0      10        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      71      20        0.0%
DATA                 0      0      71       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Tue Nov 01 15:05:16 2022

                       PL2 100C                         PL4 0E08                         PL6 1028  
                       PL8 0E18               ___awdiv@sign 0043               _dq1_temp_dwn 0027  
                       bsr 000FE0        ___wmul@multiplicand 0040               lcdWrite@byte 0041  
                      PL10 0E26                        PL20 0E74                        PL12 0E32  
                      PL30 0E96                        PL22 0E7C                        PL14 0E3E  
                      PL40 0ECE                        PL32 0EA0                        PL24 0E86  
                      PL16 1042                        PL50 0EF4                        PL42 1218  
                      PL34 0EB0                        PL26 12BA                        PL18 0E5A  
                      PL60 16A4                        PL52 0EFE                        PL44 0ED4  
                      PL36 0EB6                        PL28 0E8C                        PL62 104C  
                      PL54 0F06                        PL46 0EDE                        PL38 0EC2  
                      PL64 0F18                        PL56 1474                        PL48 0EE8  
                      PL66 0F1E                        PL58 0F0E                        PL68 12C8  
             lcdWrite@type 0040                        l200 0174                        l201 0176  
                      l212 03B0                        l222 0630                        l216 043E  
                      l402 1594                        l227 0724                        l228 0706  
                      l333 1A78                        l229 0704                        l414 1178  
                      l415 117A                        l435 13B4                        l443 17DC  
                      l267 08BE                        l259 0872                        l700 155A  
                      l472 1A8E                        l480 1AF4                        l591 172C  
                      l593 1764                        l682 1772                        l587 171A  
                      l589 1722               ___awmod@sign 004B                        wreg 000FE8  
          lcdNibble@nibble 003F              write_eep@data 003E                lcd_gotoxy@x 0043  
              lcd_gotoxy@y 0042                       l1152 1840                       l1081 16FE  
                     l1162 187E                       l3102 174E                       l3212 13D2  
                     l3116 114C                       l3302 1490                       l3070 1272  
                     l3062 1240                       l3230 0F82                       l3222 0F32  
                     l3144 1188                       l3064 124A                       l3232 0F96  
                     l3224 0F46                       l3314 14B0                       l3330 14E0  
                     l3170 11EA                       l3090 172E                       l3074 12A0  
                     l3066 1256                       l3058 1228                       l3234 0FAA  
                     l3226 0F5A                       l3242 0FE6                       l3316 14B8  
                     l3308 14A0                       l3412 1A34                       l3404 1A1E  
                     l3172 11F2                       l3076 12B0                       l3236 0FBE  
                     l3228 0F6E                       l3500 00D6                       l3334 14EC  
                     l3326 14D6                       l3350 15FE                       l3430 16F0  
                     l3422 16BE                       l3158 11AC                       l3254 165A  
                     l3078 12B4                       l3238 0FD2                       l3424 16CA  
                     l3440 1810                       l2800 1A66                       l3280 16A2  
                     l3370 163E                       l3362 1628                       l3354 160A  
                     l3346 15F2                       l3442 1818                       l3194 1206  
                     l2740 1ADC                       l3356 1612                       l3380 193E  
                     l3452 1836                       l3460 1856                       l3268 167C  
                     l3604 0736                       l3532 01BE                       l3366 1632  
                     l3462 185E                       l2814 1A3E                       l3702 0888  
                     l3630 0782                       l3614 074A                       l3606 073A  
                     l3550 0386                       l3526 0180                       l2728 1A90  
                     l2904 1974                       l2840 1592                       l3392 1958  
                     l3384 1944                       l3720 08C0                       l3704 088E  
                     l3640 07A4                       l3616 074E                       l3528 018A  
                     l2850 1596                       l2922 18E8                       l3802 0A0E  
                     l3570 0606                       l3546 0278                       l3396 1960  
                     l3468 1874                       l2932 17BC                       l3556 0438  
                     l3548 02F4                       l2774 18FE                       l2918 18C8  
                     l3830 0A86                       l3726 08DE                       l3566 04F8  
                     l2944 17EA                       l2936 17CC                       l2952 17F6  
                     l3920 0CDE                       l3912 0CC4                       l3744 092C  
                     l3672 080C                       l3656 07D8                       l3648 07B4  
                     l3576 06BA                       l3568 0574                       l2962 1786  
                     l2794 1AF6                       l3906 0CAA                       l3762 096E  
                     l3690 0856                       l3682 082A                       l3658 07DE  
                     l3578 06C0                       l2972 150E                       l3940 0D22  
                     l3924 0CF0                       l3908 0CAE                       l3596 0728  
                     l2974 151A                       l3950 0D72                       l3942 0D32  
                     l3918 0CD8                       l3854 0AEA                       l3838 0A96  
                     l3686 084C                       l2984 154C                       l3952 0D84  
                     l3944 0D42                       l3936 0D02                       l3880 0B86  
                     l3872 0B18                       l3864 0B0C                       l3696 086C  
                     l3946 0D52                       l3938 0D12                       l3890 0BCC  
                     l3882 0B94                       l3874 0B2E                       l3794 09E8  
                     l3786 09D8                       l3948 0D62                       l3956 0D8E  
                     l3892 0BDA                       l3884 0BA2                       l3876 0B6A  
                     l3972 0DCE                       l3958 0DB2                       l3886 0BB0  
                     l3878 0B78                       l3968 0DC4                       l3888 0BBE  
                     l3896 0BE8                       l3898 0C0C                       STR_1 1F2F  
                     STR_2 1F5F                       STR_3 1F3F                       STR_4 1FC5  
                     STR_5 1F6F                       STR_6 1F4F                       STR_7 1F0F  
                     STR_8 1F9D                       STR_9 1F1F           ow_reset@presence 003E  
                     u2100 166A            _ds18b20_readrom 1648                       u2220 1616  
                     u2300 16CE                       _LATA 000F89                       u2070 13AA  
                     _LATB 000F8A                       _LATC 000F8B                       u1600 1410  
                     u2160 14BC                       u2330 181C                       u2410 0168  
                     u1620 1426                       u2260 1948                       u2405 0154  
                     u2510 045E                       u3207 19A8                       u1640 143E  
                     u2360 1862                       u3217 19B8                       u3137 1234  
                     u2425 016A                       u1618 1412                       u1714 190E  
                     u3090 0CEA                       u3307 10F6                       u3227 105C  
                     u1715 190A                       u3147 1A6C                       u1660 1452  
                     u2620 071E                       u3317 110E                       u3237 106C  
                     u3157 18EA                       u1638 1428                       u1910 151E  
                     u2470 01DE                       u2390 0152                       u3327 1122  
                     u3247 107C                       u3167 1B5A                       u1824 18E0  
                     u3337 113A                       u3257 108C                       u3177 192A  
                     u1825 18DC                       u1658 1440                       u3347 1B2C  
                     u3267 10A2                       u3187 1ADE                       u2820 089A  
                     u2580 06F4                       u3357 1A92                       u3277 10B6  
                     u3197 199C                       u1678 1454                       u2590 06FE  
                     u3367 1462                       u3287 10CA                       u3377 146C  
                     u3297 10DE                       u2850 08AA                       u2770 083C  
                     u2835 089C                       u2865 08AC                       u2788 083E  
                     _main 0068                       fsr2h 000FDA                       indf2 000FDF  
                     fsr1l 000FE1                       fsr2l 000FD9                       btemp 0072  
            write_byte@val 0041                       prodh 000FF4                       prodl 000FF3  
                     start 0064               ___param_bank 000000           _ds18b20_get_temp 1370  
         _ds18b20_readTemp 114A                      ?_main 003B            __end_of___awdiv 14F6  
          __end_of___lbdiv 1964                      _EEADR 000FA9                      STR_10 1F7F  
                    STR_11 1FB8                      STR_20 1FE9                      STR_12 1FD2  
                    STR_21 1FEC                      STR_13 1FAB                      STR_22 1FEF  
                    STR_14 1FDD                      STR_23 1FF2                      STR_15 1F8E  
                    STR_24 1FF5                      STR_16 1EFE                      STR_25 1FF8  
                    STR_17 1EED                      STR_26 1FFB                      STR_18 1FE3  
                    STR_19 1FE6            __end_of___awmod 1648            __end_of___lbmod 1A3C  
          __end_of___lldiv 156C            ___awdiv@divisor 0040                      _T1CON 000FCD  
          __end_of___llmod 1710            __end_of___lwdiv 184A                      i1l351 0052  
                    i1l352 0046            __end_of___lwmod 1888                      i1l356 0054  
                    i2l343 1AC6            ___awdiv@counter 0042                      _TMR0H 000FD7  
                    _TMR1H 000FCF                      _TMR0L 000FD6                      _TMR1L 000FCE  
                    _SPBRG 000FAF                      _PORTA 000F80                      _PORTB 000F81  
                    _PORTC 000F82                      _TRISA 000F92                      _TRISB 000F93  
                    _TRISC 000F94               ?_read_eep_16 0040                      _TXREG 000FAD  
      ___lmul@multiplicand 0049            __end_of_initLCD 114A             write_byte@temp 0042  
           __pbitbssCOMRAM 0388                      tablat 000FF5                      ttemp5 0073  
                    ttemp6 0076                      ttemp7 007A                      status 000FD8  
                    wtemp8 0073            ___lbdiv@divisor 003E            ___lbdiv@counter 0040  
         __end_of_Delay_ms 1A84            write_bit@bitval 003E            __initialization 1888  
          ds18b20_crc8@crc 0044               __end_of_main 0E08        ds18b20_crc8@data_in 003E  
                   ??_main 0067              __activetblptr 000002              ?_init_ds18b20 003B  
  __end_of_ds18b20_readrom 16A4           ___llmod@dividend 005E                     _EEDATA 000FA8  
                   _EECON2 000FA7           ___awdiv@dividend 003E                     i1l2710 0048  
             _write_eep_16 1B38           __end_of_clearLCD 1B38           __end_of_lcdPrint 12BA  
         __end_of_lcdWrite 1AA8           __end_of_lcd_putc 1B82                     ___lmul 176A  
                   ___wmul 19F0                  ??___awdiv 0042                  ??___lbdiv 003F  
                ??___awmod 004A                  ??___lbmod 0043                  ??___lldiv 0059  
                ??___llmod 0066                  ??___lwdiv 0042                  ??___lwmod 0049  
                   _dq_num 006D              Delay_ms@delay 003E                     _myIntH 0008  
                   _myIntL 0018           __end_of_read_eep 1B76           __end_of_read_bit 1B64  
                   clear_0 18B0           ___awdiv@quotient 0044            ___awmod@divisor 0048  
                   _select 006E                     isa$std 000001                     _rom_dq 0001  
          ___awmod@counter 004A             ??_init_ds18b20 0044                  ??_initLCD 0043  
             __pdataCOMRAM 0069               __mediumconst 1E8C           __end_of_ow_reset 19C6  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
         write_eep_16@data 0040           ___lbdiv@dividend 003F           __end_of_symbol_4 1EED  
         __end_of_symbol_5 1EE5           __end_of_symbol_6 1EDD           __end_of_symbol_7 1ED5  
          ___lbmod@divisor 0042                 __accesstop 0080    __end_of__initialization 18B6  
          ___lbmod@counter 0044              ___rparam_used 000001           write_eep@address 003F  
         ds18b20_crc8@data 0041             __pcstackCOMRAM 003B          __end_of_Main_init 1370  
   ds18b20_crc8@loop_count 0043                 __end_ofPL2 1028                 __end_ofPL4 0E18  
               __end_ofPL6 1042                 __end_ofPL8 0E26           ___lbdiv@quotient 0041  
            ?_ds18b20_crc8 003E       ds18b20_readTemp@temp 0049           ?_ds18b20_readrom 003B  
                ?_Delay_ms 003E          lcd_gotoxy@address 0044   __end_of_ds18b20_get_temp 1404  
 __end_of_ds18b20_readTemp 1218    ds18b20_crc8@bit_counter 0040                    ?___lmul 0045  
         ds18b20_readrom@i 004E                    ?___wmul 003E        __end_of_HD44780_CYR 1ECD  
                  ?_myIntH 003B                    ?_myIntL 003B             ___lmul@product 004D  
           ??_ds18b20_crc8 0040                 _cgrom_char 1964              _eusartRxCount 0023  
                ?_clearLCD 003B                 ??_Delay_ms 0040                 _lcd_gotoxy 1AE8  
                ?_lcdPrint 0045                  ?_lcdWrite 0040                  ?_lcd_putc 003B  
                ?_read_eep 003E                  ?_read_bit 003B                 _key_GetKey 1B82  
     __end_of_init_ds18b20 15E0          __end_of_lcdNibble 1474                    __Hparam 0000  
                  __Lparam 0000                  ?_ow_reset 003B                    ___awdiv 147E  
                  ___lbdiv 1930                    ___awmod 15E0                    ___lbmod 1A16  
                  ___lldiv 14F6                    ___llmod 16AE                    ___lwdiv 1800  
                  ___lwmod 184A                    __pcinit 1888    ds18b20_readrom@temp_rom 0045  
                  __ramtop 0200                    __ptext0 0068                    __ptext1 1B38  
                  __ptext2 0F26                    __ptext3 19C6                    __ptext4 1B76  
                  __ptext5 1226                    __ptext6 1AE8                    __ptext7 1710  
                  __ptext8 1B82                    __ptext9 1648                  _T0CONbits 000FD5  
                  _initLCD 1052                  _T1CONbits 000FCD                    _keyLong 002F  
        __end_of_key_press 176A          __end_of_init_uart 1B1E           ___awmod@dividend 0046  
        __end_of_read_byte 18FA                 ??_clearLCD 0042                    _minus_1 0070  
                  _minus_2 006F                    _scratch 0030                    _sub_sel 002C  
               ??_lcdPrint 0047                 ??_lcdWrite 0041             __pintcode_body 1AA8  
               ??_lcd_putc 0042       end_of_initialization 18B6                  Delay_ms@i 0041  
             key_press@key 003E              __Lmediumconst 1E8C                    int_func 1AA8  
               ??_read_eep 0040                 ??_read_bit 003E            ___lldiv@divisor 0055  
          ___lldiv@counter 005D                _HD44780_CYR 1E8D              ?_outValPreset 003B  
                _RCSTAbits 000FAB                 ??_ow_reset 003E                    postdec1 000FE5  
                  postdec2 000FDD                    postinc0 000FEE                    postinc2 000FDE  
               _temp_ready 0011               read_byte@val 0040                ?_cgrom_char 0042  
                _PORTAbits 000F80              key_GetKey@key 003E          __end_of_write_bit 1AE8  
        __end_of_write_eep 1A60           ___lbmod@dividend 0043                  _TRISAbits 000F92  
                _TRISCbits 000F94                ?_lcd_gotoxy 0042                _dq1_up_temp 0021  
              ___lbmod@rem 0045       __end_of_ds18b20_crc8 1800                ?_key_GetKey 003B  
                _TXSTAbits 000FAC             ??_outValPreset 005E             __end_of___lmul 17B6  
           __end_of___wmul 1A16              __pidataCOMRAM 1B8C                 _write_byte 18FA  
           __end_of_myIntH 1ACA             __end_of_myIntL 0064                  _Main_init 12CE  
              __end_ofPL10 0E32                __end_ofPL20 0E7C                __end_ofPL12 0E3E  
              __end_ofPL30 0EA0                __end_ofPL22 0E86                __end_ofPL14 0E5A  
              __end_ofPL40 0ED4                __end_ofPL32 0EB0                __end_ofPL24 0E8C  
              __end_ofPL16 104C                __end_ofPL50 0EFE                __end_ofPL42 1226  
              __end_ofPL34 0EB6                __end_ofPL26 12C8                __end_ofPL18 0E74  
              __end_ofPL60 16AE                __end_ofPL52 0F06                __end_ofPL44 0EDE  
              __end_ofPL36 0EC2                __end_ofPL28 0E96                __end_ofPL62 1052  
              __end_ofPL54 0F0E                __end_ofPL46 0EE8                __end_ofPL38 0ECE  
              __end_ofPL64 0F1E                __end_ofPL56 147E                __end_ofPL48 0EF4  
              __end_ofPL66 0F26                __end_ofPL58 0F18                __end_ofPL68 12CE  
      start_initialization 1888          ?_ds18b20_get_temp 005E         ??_ds18b20_get_temp 0060  
          ___llmod@divisor 0062          ?_ds18b20_readTemp 0045            ___llmod@counter 0066  
          read_eep_16@data 0042         ??_ds18b20_readTemp 0047   ds18b20_crc8@feedback_bit 0042  
                 ??___lmul 004D                   ??___wmul 0042                   ??_myIntH 003B  
                 ??_myIntL 003B            read_eep@address 003E                 read_byte@i 0041  
               ?_Main_init 003B              ??_read_eep_16 0042               _init_ds18b20 156C  
              __pbssCOMRAM 0001      ds18b20_crc8@num_bytes 003F          ds18b20_readTemp@i 004C  
        ds18b20_readTemp@j 004B           ___lwdiv@dividend 003E                  __pintcode 0008  
            __pmediumconst 1E8C                  _lcdNibble 1404                   ?___awdiv 003E  
                 ?___lbdiv 003E                   ?___awmod 0046                   ?___lbmod 0042  
                 ?___lldiv 0051                   ?___llmod 005E                   ?___lwdiv 003E  
                 ?___lwmod 0045                __pintcodelo 0018                ?_write_byte 003B  
  _eusartTxBufferRemaining 0024                   ?_initLCD 003B       __end_of_outValPreset 100C  
         ___lwdiv@quotient 0042                  _key_press 1710                  _init_uart 1B04  
                _read_byte 18C4        __end_of_read_eep_16 19F0             ___wmul@product 0042  
                 _LATAbits 000F89                   _LATCbits 000F8B              ?_write_eep_16 0040  
                _temp1_fix 001B                   _IPR1bits 000F9F                   _PIE1bits 000F9D  
                 _PIR1bits 000F9E                  _set_t_dq2 001D              _set_t_dq1_dwn 0029  
                 _RCONbits 000FD0                 ?_lcdNibble 003B                  _time_flag 0039  
                _timer_val 003A         read_eep_16@address 0044                  lcdPrint@t 0045  
             ??_cgrom_char 0045                 _ADCON1bits 000FC1               _ds18b20_crc8 17B6  
        ___wmul@multiplier 003E                ??_Main_init 0048                  _sound_yes 038A  
                lcd_putc@c 0042                write_byte@i 0043                   _Delay_ms 1A60  
             ??_lcd_gotoxy 0043                 ?_key_press 003B                  _write_bit 1ACA  
                _write_eep 1A3C                 ?_init_uart 003B          ___lmul@multiplier 0045  
              _INTCON2bits 000FF1                 ?_read_byte 003B                  copy_data0 189C  
            init_ds18b20@i 0047              init_ds18b20@q 0046             ??_write_eep_16 0042  
             ??_key_GetKey 003E                 _EECON1bits 000FA6         __end_of_cgrom_char 1996  
                 __Hrparam 0000                   __Lrparam 0000          ??_ds18b20_readrom 0045  
       __end_of_lcd_gotoxy 1B04             key_press@count 0019                   _dq1_temp 0028  
                 _dq2_temp 0015              _temperature_1 006B              _temperature_2 0069  
              _read_eep_16 19C6                   _clearLCD 1B1E                _key_pressed 0025  
       __end_of_key_GetKey 1B8C            ___lwdiv@divisor 0040            myIntL@snd_delay 0026  
          ___lwdiv@counter 0044                   __ptext10 1A3C                   __ptext11 1A60  
                 __ptext20 184A                   __ptext12 114A                   __ptext21 1800  
                 __ptext13 18C4                   __ptext30 18FA                   __ptext22 16AE  
                 __ptext14 1B4E                   __ptext31 1ACA                   __ptext23 1A16  
                 __ptext15 17B6                   __ptext32 1B64                   __ptext24 1930  
                 __ptext16 1370                   __ptext33 1996                   __ptext25 15E0  
                 __ptext17 176A                   __ptext34 1052                   __ptext26 147E  
                 __ptext18 14F6                   __ptext35 1B1E                   __ptext27 12CE  
                 __ptext19 19F0                   __ptext36 1964                   __ptext28 1B04  
                 __ptext37 1A84                   __ptext29 156C                   __ptext38 1404  
                 _lcdPrint 1226                   _en_snd_b 0388                   _lcdWrite 1A84  
                 _en_snd_k 0389                 ?_write_eep 003E                 ?_write_bit 003B  
                 _en_sound 002E                   _lcd_putc 1B76     ds18b20_get_temp@num_dq 0062  
                 _read_bit 1B4E                   _read_eep 1B64      ds18b20_readrom@num_dq 004D  
                 _read_key 038B          cgrom_char@address 0044               _set_t_dq1_up 002A  
                 isa$xinst 000000                ??_lcdNibble 003E                   _ow_reset 1996  
                 int$flags 0072                   _symbol_4 1EE5                   _symbol_5 1EDD  
                 _symbol_6 1ED5                   _symbol_7 1ECD                 _INTCONbits 000FF2  
      write_eep_16@address 0042                ??_key_press 003E                ??_init_uart 003E  
              ??_read_byte 003E                   intlevel1 0000                   intlevel2 0000  
         ___lwmod@dividend 0045           ___lldiv@dividend 0051      ds18b20_get_temp@minus 005E  
               _OSCCONbits 000FD3               _outValPreset 0F26  ds18b20_readTemp@time_flag 0045  
ds18b20_readTemp@timer_val 0046           cgrom_char@symbol 0042               ??_write_byte 003F  
     __end_of_write_eep_16 1B4E           ___lldiv@quotient 0059            ___lwmod@divisor 0047  
     ds18b20_get_temp@temp 0063            ___lwmod@counter 0049                cgrom_char@i 0045  
              ??_write_eep 003F                ??_write_bit 003E                _pressed_key 002D  
       __end_of_write_byte 1930               _dq1_dwn_temp 001F                _sub_sel_kol 002B  
