

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Sun Nov 29 13:49:22 2020

Microchip MPLAB XC8 C Compiler v2.30 (Pro license) build 20200825195618 Og9s 
     1                           	processor	18F2320
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    36                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    37                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    38                           	psect	pa_nodes0,global,class=CODE,delta=1
    39  0000                     
    40                           ; Version 2.20
    41                           ; Generated 12/02/2020 GMT
    42                           ; 
    43                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F2320 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     
    75                           	psect	idataCOMRAM
    76  000A1A                     __pidataCOMRAM:
    77                           	callstack 0
    78                           
    79                           ;initializer for _dq_num
    80  000A1A  01                 	db	1
    81                           
    82                           ;initializer for _select
    83  000A1B  01                 	db	1
    84                           
    85                           	psect	smallconst
    86  000200                     __psmallconst:
    87                           	callstack 0
    88  000200  00                 	db	0
    89  000201                     _fract:
    90                           	callstack 0
    91  000201  00                 	db	0
    92  000202  01                 	db	1
    93  000203  01                 	db	1
    94  000204  02                 	db	2
    95  000205  02                 	db	2
    96  000206  03                 	db	3
    97  000207  04                 	db	4
    98  000208  04                 	db	4
    99  000209  05                 	db	5
   100  00020A  06                 	db	6
   101  00020B  06                 	db	6
   102  00020C  07                 	db	7
   103  00020D  07                 	db	7
   104  00020E  08                 	db	8
   105  00020F  09                 	db	9
   106  000210  09                 	db	9
   107  000211                     __end_of_fract:
   108                           	callstack 0
   109  0000                     _TRISAbits	set	3986
   110  0000                     _PORTCbits	set	3970
   111  0000                     _T1CONbits	set	4045
   112  0000                     _PIR1bits	set	3998
   113  0000                     _PIE1bits	set	3997
   114  0000                     _OSCCONbits	set	4051
   115  0000                     _INTCON2bits	set	4081
   116  0000                     _INTCONbits	set	4082
   117  0000                     _TMR0L	set	4054
   118  0000                     _TMR0H	set	4055
   119  0000                     _T0CONbits	set	4053
   120  0000                     _TMR1L	set	4046
   121  0000                     _TMR1H	set	4047
   122  0000                     _T1CON	set	4045
   123  0000                     _PORTAbits	set	3968
   124  0000                     _ADCON1bits	set	4033
   125  0000                     _TRISC	set	3988
   126  0000                     _LATC	set	3979
   127  0000                     _PORTC	set	3970
   128  0000                     _TRISB	set	3987
   129  0000                     _LATB	set	3978
   130  0000                     _TRISA	set	3986
   131  0000                     _LATA	set	3977
   132  0000                     _PORTA	set	3968
   133  0000                     _PORTB	set	3969
   134  000211                     STR_1:
   135  000211  2D                 	db	45
   136  000212  2D                 	db	45
   137  000213  2D                 	db	45
   138  000214  54                 	db	84	;'T'
   139  000215  45                 	db	69	;'E'
   140  000216  4D                 	db	77	;'M'
   141  000217  50                 	db	80	;'P'
   142  000218  20                 	db	32
   143  000219  53                 	db	83	;'S'
   144  00021A  45                 	db	69	;'E'
   145  00021B  4E                 	db	78	;'N'
   146  00021C  53                 	db	83	;'S'
   147  00021D  2D                 	db	45
   148  00021E  2D                 	db	45
   149  00021F  2D                 	db	45
   150  000220  2D                 	db	45
   151  000221  00                 	db	0
   152  000222                     STR_3:
   153  000222  20                 	db	32
   154  000223  20                 	db	32
   155  000224  20                 	db	32
   156  000225  44                 	db	68	;'D'
   157  000226  51                 	db	81	;'Q'
   158  000227  20                 	db	32
   159  000228  31                 	db	49	;'1'
   160  000229  20                 	db	32
   161  00022A  6F                 	db	111	;'o'
   162  00022B  72                 	db	114	;'r'
   163  00022C  20                 	db	32
   164  00022D  32                 	db	50	;'2'
   165  00022E  3F                 	db	63	;'?'
   166  00022F  20                 	db	32
   167  000230  20                 	db	32
   168  000231  00                 	db	0
   169  000232                     STR_2:
   170  000232  28                 	db	40
   171  000233  63                 	db	99	;'c'
   172  000234  29                 	db	41
   173  000235  49                 	db	73	;'I'
   174  000236  76                 	db	118	;'v'
   175  000237  61                 	db	97	;'a'
   176  000238  6E                 	db	110	;'n'
   177  000239  5F                 	db	95	;'_'
   178  00023A  66                 	db	102	;'f'
   179  00023B  64                 	db	100	;'d'
   180  00023C  20                 	db	32
   181  00023D  76                 	db	118	;'v'
   182  00023E  31                 	db	49	;'1'
   183  00023F  2E                 	db	46
   184  000240  30                 	db	48	;'0'
   185  000241  00                 	db	0
   186  000242  00                 	db	0	; dummy byte at the end
   187  0000                     
   188                           ; #config settings
   189                           
   190                           	psect	cinit
   191  0008D2                     __pcinit:
   192                           	callstack 0
   193  0008D2                     start_initialization:
   194                           	callstack 0
   195  0008D2                     __initialization:
   196                           	callstack 0
   197                           
   198                           ; Initialize objects allocated to COMRAM (2 bytes)
   199                           ; load TBLPTR registers with __pidataCOMRAM
   200  0008D2  0E1A               	movlw	low __pidataCOMRAM
   201  0008D4  6EF6               	movwf	tblptrl,c
   202  0008D6  0E0A               	movlw	high __pidataCOMRAM
   203  0008D8  6EF7               	movwf	tblptrh,c
   204  0008DA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   205  0008DC  6EF8               	movwf	tblptru,c
   206  0008DE  0009               	tblrd		*+	;fetch initializer
   207  0008E0  CFF5 F032          	movff	tablat,__pdataCOMRAM
   208  0008E4  0009               	tblrd		*+	;fetch initializer
   209  0008E6  CFF5 F033          	movff	tablat,__pdataCOMRAM+1
   210                           
   211                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   212  0008EA  6A34               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   213                           
   214                           ; Clear objects allocated to COMRAM (33 bytes)
   215  0008EC  EE00  F001         	lfsr	0,__pbssCOMRAM
   216  0008F0  0E21               	movlw	33
   217  0008F2                     clear_0:
   218  0008F2  6AEE               	clrf	postinc0,c
   219  0008F4  06E8               	decf	wreg,f,c
   220  0008F6  E1FD               	bnz	clear_0
   221  0008F8                     end_of_initialization:
   222                           	callstack 0
   223  0008F8                     __end_of__initialization:
   224                           	callstack 0
   225  0008F8  9035               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   226  0008FA  9235               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   227  0008FC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   228  0008FE  6EF8               	movwf	tblptru,c
   229  000900  0100               	movlb	0
   230  000902  EF22  F001         	goto	_main	;jump to C main() function
   231                           
   232                           	psect	bitbssCOMRAM
   233  0001A0                     __pbitbssCOMRAM:
   234                           	callstack 0
   235  0001A0                     _read_key:
   236                           	callstack 0
   237  0001A0                     	ds	1
   238                           
   239                           	psect	bssCOMRAM
   240  000001                     __pbssCOMRAM:
   241                           	callstack 0
   242  000001                     _scratch:
   243                           	callstack 0
   244  000001                     	ds	9
   245  00000A                     key_press@count:
   246                           	callstack 0
   247  00000A                     	ds	1
   248  00000B                     _key_pressed:
   249                           	callstack 0
   250  00000B                     	ds	1
   251  00000C                     _pressed_key:
   252                           	callstack 0
   253  00000C                     	ds	1
   254  00000D                     _TxtBuf:
   255                           	callstack 0
   256  00000D                     	ds	16
   257  00001D                     _temperature:
   258                           	callstack 0
   259  00001D                     	ds	2
   260  00001F                     _minus:
   261                           	callstack 0
   262  00001F                     	ds	1
   263  000020                     _time_flag:
   264                           	callstack 0
   265  000020                     	ds	1
   266  000021                     _timer_val:
   267                           	callstack 0
   268  000021                     	ds	1
   269                           
   270                           	psect	dataCOMRAM
   271  000032                     __pdataCOMRAM:
   272                           	callstack 0
   273  000032                     _dq_num:
   274                           	callstack 0
   275  000032                     	ds	1
   276  000033                     _select:
   277                           	callstack 0
   278  000033                     	ds	1
   279                           
   280                           	psect	cstackCOMRAM
   281  000022                     __pcstackCOMRAM:
   282                           	callstack 0
   283  000022                     ??_read_byte:
   284  000022                     ??_lcdNibble:
   285  000022                     ?___lwdiv:
   286                           	callstack 0
   287  000022                     ow_reset@presence:
   288                           	callstack 0
   289  000022                     write_bit@bitval:
   290                           	callstack 0
   291  000022                     key_press@key:
   292                           	callstack 0
   293  000022                     key_GetKey@key:
   294                           	callstack 0
   295  000022                     Delay_ms@delay:
   296                           	callstack 0
   297  000022                     ___lwdiv@dividend:
   298                           	callstack 0
   299                           
   300                           ; 2 bytes @ 0x0
   301  000022                     	ds	1
   302  000023                     ??_write_byte:
   303  000023                     lcdNibble@nibble:
   304                           	callstack 0
   305                           
   306                           ; 1 bytes @ 0x1
   307  000023                     	ds	1
   308  000024                     ??_Delay_ms:
   309  000024                     lcdWrite@type:
   310                           	callstack 0
   311  000024                     read_byte@val:
   312                           	callstack 0
   313  000024                     ___lwdiv@divisor:
   314                           	callstack 0
   315                           
   316                           ; 2 bytes @ 0x2
   317  000024                     	ds	1
   318  000025                     lcdWrite@byte:
   319                           	callstack 0
   320  000025                     read_byte@i:
   321                           	callstack 0
   322  000025                     write_byte@val:
   323                           	callstack 0
   324  000025                     Delay_ms@i:
   325                           	callstack 0
   326                           
   327                           ; 2 bytes @ 0x3
   328  000025                     	ds	1
   329  000026                     ??_clearLCD:
   330  000026                     lcd_gotoxy@y:
   331                           	callstack 0
   332  000026                     write_byte@temp:
   333                           	callstack 0
   334  000026                     ___lwdiv@quotient:
   335                           	callstack 0
   336                           
   337                           ; 2 bytes @ 0x4
   338  000026                     	ds	1
   339  000027                     ??_initLCD:
   340  000027                     lcd_gotoxy@x:
   341                           	callstack 0
   342  000027                     write_byte@i:
   343                           	callstack 0
   344                           
   345                           ; 1 bytes @ 0x5
   346  000027                     	ds	1
   347  000028                     readTemp_Single@buf:
   348                           	callstack 0
   349  000028                     lcd_gotoxy@address:
   350                           	callstack 0
   351  000028                     ___lwdiv@counter:
   352                           	callstack 0
   353                           
   354                           ; 1 bytes @ 0x6
   355  000028                     	ds	1
   356  000029                     ?___lwmod:
   357                           	callstack 0
   358  000029                     readTemp_Single@minus:
   359                           	callstack 0
   360  000029                     lcdPrint@t:
   361                           	callstack 0
   362  000029                     ___lwmod@dividend:
   363                           	callstack 0
   364                           
   365                           ; 2 bytes @ 0x7
   366  000029                     	ds	1
   367  00002A                     readTemp_Single@time_flag:
   368                           	callstack 0
   369                           
   370                           ; 1 bytes @ 0x8
   371  00002A                     	ds	1
   372  00002B                     ??_lcdPrint:
   373  00002B                     readTemp_Single@timer_val:
   374                           	callstack 0
   375  00002B                     ___lwmod@divisor:
   376                           	callstack 0
   377                           
   378                           ; 2 bytes @ 0x9
   379  00002B                     	ds	1
   380  00002C                     ??_readTemp_Single:
   381                           
   382                           ; 1 bytes @ 0xA
   383  00002C                     	ds	1
   384  00002D                     ___lwmod@counter:
   385                           	callstack 0
   386                           
   387                           ; 1 bytes @ 0xB
   388  00002D                     	ds	1
   389  00002E                     readTemp_Single@tmp:
   390                           	callstack 0
   391                           
   392                           ; 1 bytes @ 0xC
   393  00002E                     	ds	1
   394  00002F                     readTemp_Single@i:
   395                           	callstack 0
   396                           
   397                           ; 1 bytes @ 0xD
   398  00002F                     	ds	1
   399  000030                     readTemp_Single@temp:
   400                           	callstack 0
   401                           
   402                           ; 2 bytes @ 0xE
   403  000030                     	ds	2
   404  000032                     
   405                           ; 1 bytes @ 0x10
   406 ;;
   407 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   408 ;;
   409 ;; *************** function _main *****************
   410 ;; Defined at:
   411 ;;		line 24 in file "main.c"
   412 ;; Parameters:    Size  Location     Type
   413 ;;		None
   414 ;; Auto vars:     Size  Location     Type
   415 ;;		None
   416 ;; Return value:  Size  Location     Type
   417 ;;                  1    wreg      void 
   418 ;; Registers used:
   419 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   420 ;; Tracked objects:
   421 ;;		On entry : 0/0
   422 ;;		On exit  : 0/0
   423 ;;		Unchanged: 0/0
   424 ;; Data sizes:     COMRAM   BANK0   BANK1
   425 ;;      Params:         0       0       0
   426 ;;      Locals:         0       0       0
   427 ;;      Temps:          0       0       0
   428 ;;      Totals:         0       0       0
   429 ;;Total ram usage:        0 bytes
   430 ;; Hardware stack levels required when called:    5
   431 ;; This function calls:
   432 ;;		_Delay_ms
   433 ;;		_Main_init
   434 ;;		___lwdiv
   435 ;;		___lwmod
   436 ;;		_clearLCD
   437 ;;		_initLCD
   438 ;;		_key_GetKey
   439 ;;		_key_press
   440 ;;		_lcdPrint
   441 ;;		_lcd_gotoxy
   442 ;;		_readTemp_Single
   443 ;; This function is called by:
   444 ;;		Startup code after reset
   445 ;; This function uses a non-reentrant model
   446 ;;
   447                           
   448                           	psect	text0
   449  000244                     __ptext0:
   450                           	callstack 0
   451  000244                     _main:
   452                           	callstack 26
   453                           
   454                           ;main.c: 25: Main_init();
   455                           
   456                           ;incstack = 0
   457  000244  ECA6  F003         	call	_Main_init	;wreg free
   458                           
   459                           ;main.c: 26: initLCD();
   460  000248  EC29  F002         	call	_initLCD	;wreg free
   461                           
   462                           ;main.c: 27: lcd_gotoxy(1, 1);
   463  00024C  0E01               	movlw	1
   464  00024E  6E26               	movwf	lcd_gotoxy@y^0,c
   465  000250  ECE2  F004         	call	_lcd_gotoxy
   466                           
   467                           ;main.c: 28: lcdPrint("---TEMP SENS----");
   468  000254  0E11               	movlw	low STR_1
   469  000256  D8DD               	call	PL10	;call to abstracted procedure
   470  000258  EC1B  F003         	call	_lcdPrint	;wreg free
   471                           
   472                           ;main.c: 29: lcd_gotoxy(1, 2);
   473  00025C  D8EE               	call	PL16	;call to abstracted procedure
   474  00025E  ECE2  F004         	call	_lcd_gotoxy
   475                           
   476                           ;main.c: 30: lcdPrint("(c)Ivan_fd v1.0");
   477  000262  0E32               	movlw	low STR_2
   478  000264  D8D6               	call	PL10	;call to abstracted procedure
   479  000266  EC1B  F003         	call	_lcdPrint	;wreg free
   480                           
   481                           ;main.c: 31: Delay_ms(2000);
   482  00026A  D8EE               	call	PL22	;call to abstracted procedure
   483  00026C  ECC1  F004         	call	_Delay_ms	;wreg free
   484                           
   485                           ;main.c: 32: clearLCD();
   486  000270  ECF0  F004         	call	_clearLCD	;wreg free
   487                           
   488                           ;main.c: 33: if ((PORTB & (1 << 1)) == 0) {
   489  000274  B281               	btfsc	129,1,c	;volatile
   490  000276  D00F               	goto	l1780
   491                           
   492                           ;main.c: 34: clearLCD();
   493  000278  ECF0  F004         	call	_clearLCD	;wreg free
   494                           
   495                           ;main.c: 35: select = 2;
   496  00027C  0E02               	movlw	2
   497  00027E  6E33               	movwf	_select^0,c
   498                           
   499                           ;main.c: 36: lcd_gotoxy(1, 1);
   500  000280  0E01               	movlw	1
   501  000282  6E26               	movwf	lcd_gotoxy@y^0,c
   502  000284  ECE2  F004         	call	_lcd_gotoxy
   503                           
   504                           ;main.c: 37: lcdPrint("   DQ 1 or 2?  ");
   505  000288  0E22               	movlw	low STR_3
   506  00028A  D8C3               	call	PL10	;call to abstracted procedure
   507  00028C  EC1B  F003         	call	_lcdPrint	;wreg free
   508                           
   509                           ;main.c: 38: Delay_ms(2000);
   510  000290  D8DB               	call	PL22	;call to abstracted procedure
   511  000292  ECC1  F004         	call	_Delay_ms	;wreg free
   512  000296                     l1780:
   513                           
   514                           ;main.c: 42: readTemp_Single(1, &temperature, &minus, &time_flag, &timer_val);
   515  000296  0E1D               	movlw	low _temperature
   516  000298  6E28               	movwf	readTemp_Single@buf^0,c
   517  00029A  0E1F               	movlw	low _minus
   518  00029C  6E29               	movwf	readTemp_Single@minus^0,c
   519  00029E  0E20               	movlw	low _time_flag
   520  0002A0  6E2A               	movwf	readTemp_Single@time_flag^0,c
   521  0002A2  0E21               	movlw	low _timer_val
   522  0002A4  6E2B               	movwf	readTemp_Single@timer_val^0,c
   523  0002A6  ECA5  F002         	call	_readTemp_Single
   524                           
   525                           ;main.c: 44: if (read_key) {
   526  0002AA  A034               	btfss	(_read_key/(0+8))^0,_read_key& (0+7),c
   527  0002AC  D003               	goto	l1788
   528                           
   529                           ;main.c: 45: key_press();
   530  0002AE  ECF4  F003         	call	_key_press	;wreg free
   531                           
   532                           ;main.c: 46: read_key = 0;
   533  0002B2  9034               	bcf	(_read_key/(0+8))^0,_read_key& (0+7),c
   534  0002B4                     l1788:
   535                           
   536                           ;main.c: 47: };main.c: 48: pressed_key = key_GetKey();
   537  0002B4  EC08  F005         	call	_key_GetKey	;wreg free
   538  0002B8  6E0C               	movwf	_pressed_key^0,c
   539                           
   540                           ;main.c: 50: switch (select) {
   541  0002BA  D091               	goto	l1938
   542  0002BC                     l1790:
   543                           
   544                           ;main.c: 52: lcd_gotoxy(1, 1);
   545  0002BC  0E01               	movlw	1
   546  0002BE  6E26               	movwf	lcd_gotoxy@y^0,c
   547  0002C0  ECE2  F004         	call	_lcd_gotoxy
   548                           
   549                           ;main.c: 54: TxtBuf[0] = 'T';
   550  0002C4  0E54               	movlw	84
   551  0002C6  6E0D               	movwf	_TxtBuf^0,c
   552                           
   553                           ;main.c: 55: TxtBuf[1] = 'e';
   554  0002C8  0E65               	movlw	101
   555  0002CA  6E0E               	movwf	(_TxtBuf+1)^0,c
   556                           
   557                           ;main.c: 56: TxtBuf[2] = 'm';
   558  0002CC  0E6D               	movlw	109
   559  0002CE  6E0F               	movwf	(_TxtBuf+2)^0,c
   560                           
   561                           ;main.c: 57: TxtBuf[3] = 'p';
   562  0002D0  0E70               	movlw	112
   563  0002D2  6E10               	movwf	(_TxtBuf+3)^0,c
   564                           
   565                           ;main.c: 58: TxtBuf[4] = ':';
   566  0002D4  0E3A               	movlw	58
   567  0002D6  6E11               	movwf	(_TxtBuf+4)^0,c
   568                           
   569                           ;main.c: 59: TxtBuf[5] = minus;
   570  0002D8  C01F  F012         	movff	_minus,_TxtBuf+5
   571                           
   572                           ;main.c: 60: TxtBuf[6] = ((temperature / 100) % 10) + 48;
   573  0002DC  6A25               	clrf	(___lwdiv@divisor+1)^0,c
   574  0002DE  0E64               	movlw	100
   575  0002E0  D8A6               	call	PL14	;call to abstracted procedure
   576  0002E2  ECCF  F003         	call	___lwdiv	;wreg free
   577  0002E6  D89B               	call	PL12	;call to abstracted procedure
   578  0002E8  EC14  F004         	call	___lwmod	;wreg free
   579  0002EC  5029               	movf	?___lwmod^0,w,c
   580  0002EE  0F30               	addlw	48
   581  0002F0  6E13               	movwf	(_TxtBuf+6)^0,c
   582                           
   583                           ;main.c: 61: TxtBuf[7] = ((temperature / 10) % 10) + 48;
   584  0002F2  6A25               	clrf	(___lwdiv@divisor+1)^0,c
   585  0002F4  0E0A               	movlw	10
   586  0002F6  D89B               	call	PL14	;call to abstracted procedure
   587  0002F8  ECCF  F003         	call	___lwdiv	;wreg free
   588  0002FC  D890               	call	PL12	;call to abstracted procedure
   589  0002FE  EC14  F004         	call	___lwmod	;wreg free
   590  000302  5029               	movf	?___lwmod^0,w,c
   591  000304  0F30               	addlw	48
   592  000306  6E14               	movwf	(_TxtBuf+7)^0,c
   593                           
   594                           ;main.c: 62: TxtBuf[8] = '.';
   595  000308  0E2E               	movlw	46
   596  00030A  6E15               	movwf	(_TxtBuf+8)^0,c
   597                           
   598                           ;main.c: 63: TxtBuf[9] = ((temperature % 10) + 48);
   599  00030C  C01D  F029         	movff	_temperature,___lwmod@dividend
   600  000310  C01E  F02A         	movff	_temperature+1,___lwmod@dividend+1
   601  000314  6A2C               	clrf	(___lwmod@divisor+1)^0,c
   602  000316  0E0A               	movlw	10
   603  000318  6E2B               	movwf	___lwmod@divisor^0,c
   604  00031A  EC14  F004         	call	___lwmod	;wreg free
   605  00031E  5029               	movf	?___lwmod^0,w,c
   606  000320  0F30               	addlw	48
   607  000322  6E16               	movwf	(_TxtBuf+9)^0,c
   608                           
   609                           ;main.c: 64: TxtBuf[10] = ' ';
   610  000324  0E20               	movlw	32
   611  000326  6E17               	movwf	(_TxtBuf+10)^0,c
   612                           
   613                           ;main.c: 65: TxtBuf[11] = ' ';
   614  000328  6E18               	movwf	(_TxtBuf+11)^0,c
   615                           
   616                           ;main.c: 66: TxtBuf[12] = ' ';
   617  00032A  6E19               	movwf	(_TxtBuf+12)^0,c
   618                           
   619                           ;main.c: 67: TxtBuf[13] = ' ';
   620  00032C  6E1A               	movwf	(_TxtBuf+13)^0,c
   621                           
   622                           ;main.c: 68: TxtBuf[14] = ' ';
   623  00032E  6E1B               	movwf	(_TxtBuf+14)^0,c
   624                           
   625                           ;main.c: 69: TxtBuf[15] = 0;
   626  000330  6A1C               	clrf	(_TxtBuf+15)^0,c
   627                           
   628                           ;main.c: 70: lcdPrint(TxtBuf);
   629  000332  D886               	call	PL18	;call to abstracted procedure
   630  000334  EC1B  F003         	call	_lcdPrint	;wreg free
   631                           
   632                           ;main.c: 71: if (pressed_key == 1) {
   633  000338  040C               	decf	_pressed_key^0,w,c
   634  00033A  E10A               	bnz	l1848
   635                           
   636                           ;main.c: 72: lcd_gotoxy(1, 2);
   637  00033C  D87E               	call	PL16	;call to abstracted procedure
   638  00033E  ECE2  F004         	call	_lcd_gotoxy
   639                           
   640                           ;main.c: 74: TxtBuf[0] = 'P';
   641                           
   642                           ;main.c: 75: TxtBuf[1] = 'r';
   643                           
   644                           ;main.c: 76: TxtBuf[2] = 'e';
   645                           
   646                           ;main.c: 77: TxtBuf[3] = 's';
   647                           
   648                           ;main.c: 78: TxtBuf[4] = 's';
   649                           
   650                           ;main.c: 79: TxtBuf[5] = ':';
   651  000342  D855               	call	PL2	;call to abstracted procedure
   652                           
   653                           ;main.c: 80: TxtBuf[6] = 'O';
   654  000344  0E4F               	movlw	79
   655  000346  6E13               	movwf	(_TxtBuf+6)^0,c
   656                           
   657                           ;main.c: 81: TxtBuf[7] = 'K';
   658  000348  0E4B               	movlw	75
   659                           
   660                           ;main.c: 82: TxtBuf[8] = 0;
   661                           
   662                           ;main.c: 83: lcdPrint(TxtBuf);
   663  00034A  D85D               	call	PL8	;call to abstracted procedure
   664  00034C  EC1B  F003         	call	_lcdPrint	;wreg free
   665  000350                     l1848:
   666                           
   667                           ;main.c: 84: };main.c: 85: if (pressed_key == 2) {
   668  000350  0E02               	movlw	2
   669  000352  180C               	xorwf	_pressed_key^0,w,c
   670  000354  E10A               	bnz	l1872
   671                           
   672                           ;main.c: 86: lcd_gotoxy(1, 2);
   673  000356  D871               	call	PL16	;call to abstracted procedure
   674  000358  ECE2  F004         	call	_lcd_gotoxy
   675                           
   676                           ;main.c: 88: TxtBuf[0] = 'P';
   677                           
   678                           ;main.c: 89: TxtBuf[1] = 'r';
   679                           
   680                           ;main.c: 90: TxtBuf[2] = 'e';
   681                           
   682                           ;main.c: 91: TxtBuf[3] = 's';
   683                           
   684                           ;main.c: 92: TxtBuf[4] = 's';
   685                           
   686                           ;main.c: 93: TxtBuf[5] = ':';
   687  00035C  D848               	call	PL2	;call to abstracted procedure
   688                           
   689                           ;main.c: 94: TxtBuf[6] = 'U';
   690  00035E  0E55               	movlw	85
   691  000360  6E13               	movwf	(_TxtBuf+6)^0,c
   692                           
   693                           ;main.c: 95: TxtBuf[7] = 'P';
   694  000362  0E50               	movlw	80
   695                           
   696                           ;main.c: 96: TxtBuf[8] = 0;
   697                           
   698                           ;main.c: 97: lcdPrint(TxtBuf);
   699  000364  D850               	call	PL8	;call to abstracted procedure
   700  000366  EC1B  F003         	call	_lcdPrint	;wreg free
   701  00036A                     l1872:
   702                           
   703                           ;main.c: 98: };main.c: 99: if (pressed_key == 3) {
   704  00036A  0E03               	movlw	3
   705  00036C  180C               	xorwf	_pressed_key^0,w,c
   706  00036E  E193               	bnz	l1780
   707                           
   708                           ;main.c: 100: lcd_gotoxy(1, 2);
   709  000370  D864               	call	PL16	;call to abstracted procedure
   710  000372  ECE2  F004         	call	_lcd_gotoxy
   711                           
   712                           ;main.c: 102: TxtBuf[0] = 'P';
   713                           
   714                           ;main.c: 103: TxtBuf[1] = 'r';
   715                           
   716                           ;main.c: 104: TxtBuf[2] = 'e';
   717                           
   718                           ;main.c: 105: TxtBuf[3] = 's';
   719                           
   720                           ;main.c: 106: TxtBuf[4] = 's';
   721                           
   722                           ;main.c: 107: TxtBuf[5] = ':';
   723  000376  D83B               	call	PL2	;call to abstracted procedure
   724                           
   725                           ;main.c: 108: TxtBuf[6] = 'B';
   726  000378  0E42               	movlw	66
   727  00037A  6E13               	movwf	(_TxtBuf+6)^0,c
   728                           
   729                           ;main.c: 109: TxtBuf[7] = 'T';
   730  00037C  0E54               	movlw	84
   731                           
   732                           ;main.c: 110: TxtBuf[8] = 0;
   733                           
   734                           ;main.c: 111: lcdPrint(TxtBuf);
   735  00037E  D843               	call	PL8	;call to abstracted procedure
   736  000380  EC1B  F003         	call	_lcdPrint	;wreg free
   737  000384  D788               	goto	l1780
   738  000386                     l1896:
   739                           
   740                           ;main.c: 116: lcd_gotoxy(1, 2);
   741  000386  D859               	call	PL16	;call to abstracted procedure
   742  000388  ECE2  F004         	call	_lcd_gotoxy
   743                           
   744                           ;main.c: 117: TxtBuf[0] = 'D';
   745  00038C  0E44               	movlw	68
   746  00038E  6E0D               	movwf	_TxtBuf^0,c
   747                           
   748                           ;main.c: 118: TxtBuf[1] = 'Q';
   749  000390  0E51               	movlw	81
   750  000392  6E0E               	movwf	(_TxtBuf+1)^0,c
   751                           
   752                           ;main.c: 119: TxtBuf[2] = ':';
   753  000394  0E3A               	movlw	58
   754  000396  6E0F               	movwf	(_TxtBuf+2)^0,c
   755                           
   756                           ;main.c: 120: TxtBuf[3] = ' ';
   757  000398  0E20               	movlw	32
   758  00039A  6E10               	movwf	(_TxtBuf+3)^0,c
   759                           
   760                           ;main.c: 121: TxtBuf[4] = dq_num + 48;
   761  00039C  5032               	movf	_dq_num^0,w,c
   762  00039E  0F30               	addlw	48
   763  0003A0  6E11               	movwf	(_TxtBuf+4)^0,c
   764                           
   765                           ;main.c: 122: TxtBuf[5] = ' ';
   766  0003A2  0E20               	movlw	32
   767  0003A4  6E12               	movwf	(_TxtBuf+5)^0,c
   768                           
   769                           ;main.c: 123: TxtBuf[6] = ' ';
   770  0003A6  6E13               	movwf	(_TxtBuf+6)^0,c
   771                           
   772                           ;main.c: 124: TxtBuf[7] = 0;
   773  0003A8  6A14               	clrf	(_TxtBuf+7)^0,c
   774                           
   775                           ;main.c: 125: lcdPrint(TxtBuf);
   776  0003AA  D84A               	call	PL18	;call to abstracted procedure
   777  0003AC  EC1B  F003         	call	_lcdPrint	;wreg free
   778                           
   779                           ;main.c: 127: if (pressed_key == 1) {
   780  0003B0  040C               	decf	_pressed_key^0,w,c
   781  0003B2  E106               	bnz	l1924
   782                           
   783                           ;main.c: 128: dq_num++;
   784  0003B4  2A32               	incf	_dq_num^0,f,c
   785                           
   786                           ;main.c: 129: if (dq_num == 3)
   787  0003B6  0E03               	movlw	3
   788  0003B8  1832               	xorwf	_dq_num^0,w,c
   789  0003BA  E102               	bnz	l1924
   790                           
   791                           ;main.c: 130: dq_num = 1;
   792  0003BC  0E01               	movlw	1
   793  0003BE  6E32               	movwf	_dq_num^0,c
   794  0003C0                     l1924:
   795                           
   796                           ;main.c: 131: };main.c: 132: if (pressed_key == 2) {
   797  0003C0  0E02               	movlw	2
   798  0003C2  180C               	xorwf	_pressed_key^0,w,c
   799  0003C4  E105               	bnz	l1932
   800                           
   801                           ;main.c: 133: dq_num--;
   802  0003C6  0632               	decf	_dq_num^0,f,c
   803                           
   804                           ;main.c: 134: if (dq_num == 0)
   805  0003C8  5032               	movf	_dq_num^0,w,c
   806  0003CA  E102               	bnz	l1932
   807                           
   808                           ;main.c: 135: dq_num = 2;
   809  0003CC  0E02               	movlw	2
   810  0003CE  6E32               	movwf	_dq_num^0,c
   811  0003D0                     l1932:
   812                           
   813                           ;main.c: 136: };main.c: 137: if (pressed_key == 3) {
   814  0003D0  0E03               	movlw	3
   815  0003D2  180C               	xorwf	_pressed_key^0,w,c
   816  0003D4  E001 D75F          	bnz	l1780
   817                           
   818                           ;main.c: 138: select = 3;
   819  0003D8  0E03               	movlw	3
   820  0003DA  6E33               	movwf	_select^0,c
   821  0003DC  D75C               	goto	l1780
   822  0003DE                     l1938:
   823  0003DE  5033               	movf	_select^0,w,c
   824                           
   825                           ; Switch size 1, requested type "space"
   826                           ; Number of cases is 3, Range of values is 1 to 3
   827                           ; switch strategies available:
   828                           ; Name         Instructions Cycles
   829                           ; simple_byte           10     6 (average)
   830                           ;	Chosen strategy is simple_byte
   831  0003E0  0A01               	xorlw	1	; case 1
   832  0003E2  E101 D76B          	bz	l1790
   833  0003E6  0A03               	xorlw	3	; case 2
   834  0003E8  E0CE               	bz	l1896
   835  0003EA  0A01               	xorlw	1	; case 3
   836  0003EC  D754               	goto	l1780
   837  0003EE                     __end_of_main:
   838                           	callstack 0
   839  0003EE                     PL2:
   840                           	callstack 26
   841  0003EE  0E50               	movlw	80
   842  0003F0  6E0D               	movwf	_TxtBuf^0,c
   843  0003F2  0E72               	movlw	114
   844  0003F4  6E0E               	movwf	(_TxtBuf+1)^0,c
   845  0003F6  0E65               	movlw	101
   846  0003F8  6E0F               	movwf	(_TxtBuf+2)^0,c
   847  0003FA  0E73               	movlw	115
   848  0003FC  6E10               	movwf	(_TxtBuf+3)^0,c
   849  0003FE  6E11               	movwf	(_TxtBuf+4)^0,c
   850  000400  0E3A               	movlw	58
   851  000402  6E12               	movwf	(_TxtBuf+5)^0,c
   852  000404  0C3A               	retlw	58
   853  000406                     __end_ofPL2:
   854                           	callstack 0
   855  000406                     PL8:
   856                           	callstack 26
   857  000406  6E14               	movwf	(_TxtBuf+7)^0,c
   858  000408  6A15               	clrf	(_TxtBuf+8)^0,c
   859  00040A  0E0D               	movlw	low _TxtBuf
   860  00040C  6E29               	movwf	lcdPrint@t^0,c
   861  00040E  6A2A               	clrf	(lcdPrint@t+1)^0,c
   862  000410  0012               	return	
   863  000412                     __end_ofPL8:
   864                           	callstack 0
   865  000412                     PL10:
   866                           	callstack 26
   867  000412  6E29               	movwf	lcdPrint@t^0,c
   868  000414  5029               	movf	lcdPrint@t^0,w,c
   869  000416  A4D8               	btfss	status,2,c
   870  000418  0E02               	movlw	high __smallconst
   871  00041A  6E2A               	movwf	(lcdPrint@t+1)^0,c
   872  00041C  0012               	return	
   873  00041E                     __end_ofPL10:
   874                           	callstack 0
   875  00041E                     PL12:
   876                           	callstack 26
   877  00041E  C022  F029         	movff	?___lwdiv,___lwmod@dividend
   878  000422  C023  F02A         	movff	?___lwdiv+1,___lwmod@dividend+1
   879  000426  6A2C               	clrf	(___lwmod@divisor+1)^0,c
   880  000428  0E0A               	movlw	10
   881  00042A  6E2B               	movwf	___lwmod@divisor^0,c
   882  00042C  0C0A               	retlw	10
   883  00042E                     __end_ofPL12:
   884                           	callstack 0
   885  00042E                     PL14:
   886                           	callstack 26
   887  00042E  6E24               	movwf	___lwdiv@divisor^0,c
   888  000430  C01D  F022         	movff	_temperature,___lwdiv@dividend
   889  000434  C01E  F023         	movff	_temperature+1,___lwdiv@dividend+1
   890  000438  0012               	return	
   891  00043A                     __end_ofPL14:
   892                           	callstack 0
   893  00043A                     PL16:
   894                           	callstack 26
   895  00043A  0E02               	movlw	2
   896  00043C  6E26               	movwf	lcd_gotoxy@y^0,c
   897  00043E  0C01               	retlw	1
   898  000440                     __end_ofPL16:
   899                           	callstack 0
   900  000440                     PL18:
   901                           	callstack 26
   902  000440  0E0D               	movlw	low _TxtBuf
   903  000442  6E29               	movwf	lcdPrint@t^0,c
   904  000444  6A2A               	clrf	(lcdPrint@t+1)^0,c
   905  000446  0012               	return	
   906  000448                     __end_ofPL18:
   907                           	callstack 0
   908  000448                     PL22:
   909                           	callstack 26
   910  000448  0E07               	movlw	7
   911  00044A  6E23               	movwf	(Delay_ms@delay+1)^0,c
   912  00044C  0ED0               	movlw	208
   913  00044E  6E22               	movwf	Delay_ms@delay^0,c
   914  000450  0CD0               	retlw	208
   915  000452                     __end_ofPL22:
   916                           	callstack 0
   917                           
   918 ;; *************** function _readTemp_Single *****************
   919 ;; Defined at:
   920 ;;		line 105 in file "ds18b20.c"
   921 ;; Parameters:    Size  Location     Type
   922 ;;  num_d           1    wreg     unsigned char 
   923 ;;  buf             1    6[COMRAM] PTR unsigned int 
   924 ;;		 -> temperature(2), 
   925 ;;  minus           1    7[COMRAM] PTR unsigned char 
   926 ;;		 -> minus(1), 
   927 ;;  time_flag       1    8[COMRAM] PTR unsigned char 
   928 ;;		 -> time_flag(1), 
   929 ;;  timer_val       1    9[COMRAM] PTR unsigned char 
   930 ;;		 -> timer_val(1), 
   931 ;; Auto vars:     Size  Location     Type
   932 ;;  num_d           1    0[COMRAM] unsigned char 
   933 ;;  temp            2   14[COMRAM] unsigned int 
   934 ;;  i               1   13[COMRAM] unsigned char 
   935 ;;  tmp             1   12[COMRAM] unsigned char 
   936 ;;  fptmp           1    0        unsigned char 
   937 ;; Return value:  Size  Location     Type
   938 ;;                  1    wreg      unsigned char 
   939 ;; Registers used:
   940 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   941 ;; Tracked objects:
   942 ;;		On entry : 0/0
   943 ;;		On exit  : 0/0
   944 ;;		Unchanged: 0/0
   945 ;; Data sizes:     COMRAM   BANK0   BANK1
   946 ;;      Params:         4       0       0
   947 ;;      Locals:         4       0       0
   948 ;;      Temps:          2       0       0
   949 ;;      Totals:        10       0       0
   950 ;;Total ram usage:       10 bytes
   951 ;; Hardware stack levels used:    1
   952 ;; Hardware stack levels required when called:    3
   953 ;; This function calls:
   954 ;;		_ow_reset
   955 ;;		_read_byte
   956 ;;		_write_byte
   957 ;; This function is called by:
   958 ;;		_main
   959 ;; This function uses a non-reentrant model
   960 ;;
   961                           
   962                           	psect	text1
   963  00054A                     __ptext1:
   964                           	callstack 0
   965  00054A                     _readTemp_Single:
   966                           	callstack 27
   967                           
   968                           ;ds18b20.c: 108: uint8_t i, tmp, fptmp;;ds18b20.c: 109: *minus = '+';
   969                           
   970                           ;incstack = 0
   971  00054A  5029               	movf	readTemp_Single@minus^0,w,c
   972  00054C  6ED9               	movwf	fsr2l,c
   973  00054E  6ADA               	clrf	fsr2h,c
   974  000550  0E2B               	movlw	43
   975  000552  6EDF               	movwf	indf2,c
   976                           
   977                           ;ds18b20.c: 111: switch (*time_flag) {
   978  000554  D067               	goto	l1718
   979  000556                     l1662:
   980                           
   981                           ;ds18b20.c: 113: if (!ow_reset())
   982  000556  EC83  F004         	call	_ow_reset	;wreg free
   983  00055A  0900               	iorlw	0
   984  00055C  A4D8               	btfss	status,2,c
   985  00055E  0012               	return	
   986                           
   987                           ;ds18b20.c: 114: {;ds18b20.c: 115: write_byte(0xCC);
   988  000560  0ECC               	movlw	204
   989  000562  EC4E  F004         	call	_write_byte
   990                           
   991                           ;ds18b20.c: 116: write_byte(0x44);
   992  000566  0E44               	movlw	68
   993  000568  EC4E  F004         	call	_write_byte
   994                           
   995                           ;ds18b20.c: 117: *timer_val = 0;
   996  00056C  502B               	movf	readTemp_Single@timer_val^0,w,c
   997  00056E  6ED9               	movwf	fsr2l,c
   998  000570  6ADA               	clrf	fsr2h,c
   999  000572  6ADF               	clrf	indf2,c
  1000                           
  1001                           ;ds18b20.c: 118: *time_flag = 2;
  1002  000574  502A               	movf	readTemp_Single@time_flag^0,w,c
  1003  000576  6ED9               	movwf	fsr2l,c
  1004  000578  6ADA               	clrf	fsr2h,c
  1005  00057A  0E02               	movlw	2
  1006  00057C  6EDF               	movwf	indf2,c
  1007                           
  1008                           ;ds18b20.c: 119: T1CONbits.TMR1ON = 1;
  1009  00057E  80CD               	bsf	205,0,c	;volatile
  1010  000580  0C02               	retlw	2
  1011  000582                     l1674:
  1012                           
  1013                           ;ds18b20.c: 126: ow_reset();
  1014  000582  EC83  F004         	call	_ow_reset	;wreg free
  1015                           
  1016                           ;ds18b20.c: 127: write_byte(0xCC);
  1017  000586  0ECC               	movlw	204
  1018  000588  EC4E  F004         	call	_write_byte
  1019                           
  1020                           ;ds18b20.c: 128: write_byte(0xBE);
  1021  00058C  0EBE               	movlw	190
  1022  00058E  EC4E  F004         	call	_write_byte
  1023                           
  1024                           ;ds18b20.c: 129: for (i = 0; i < 2; i++)
  1025  000592  6A2F               	clrf	readTemp_Single@i^0,c
  1026  000594                     l1686:
  1027                           
  1028                           ;ds18b20.c: 130: {;ds18b20.c: 131: scratch[i] = read_byte();
  1029  000594  502F               	movf	readTemp_Single@i^0,w,c
  1030  000596  0F01               	addlw	low _scratch
  1031  000598  6ED9               	movwf	fsr2l,c
  1032  00059A  6ADA               	clrf	fsr2h,c
  1033  00059C  EC33  F004         	call	_read_byte	;wreg free
  1034  0005A0  6EDF               	movwf	indf2,c
  1035  0005A2  2A2F               	incf	readTemp_Single@i^0,f,c
  1036  0005A4  0E01               	movlw	1
  1037  0005A6  642F               	cpfsgt	readTemp_Single@i^0,c
  1038  0005A8  D7F5               	goto	l1686
  1039                           
  1040                           ;ds18b20.c: 132: };ds18b20.c: 134: temp = (((uint16_t) scratch[1]) << 8) | ((uint16_t) s
      +                          cratch[0]);
  1041  0005AA  5002               	movf	(_scratch+1)^0,w,c
  1042  0005AC  6E2C               	movwf	??_readTemp_Single^0,c
  1043  0005AE  5001               	movf	_scratch^0,w,c
  1044  0005B0  6E30               	movwf	readTemp_Single@temp^0,c
  1045  0005B2  C02C  F031         	movff	??_readTemp_Single,readTemp_Single@temp+1
  1046                           
  1047                           ;ds18b20.c: 137: if (temp & 0x8000) {
  1048  0005B6  AE31               	btfss	(readTemp_Single@temp+1)^0,7,c
  1049  0005B8  D009               	goto	l1700
  1050                           
  1051                           ;ds18b20.c: 138: temp = -temp;
  1052  0005BA  6C30               	negf	readTemp_Single@temp^0,c
  1053  0005BC  1E31               	comf	(readTemp_Single@temp+1)^0,f,c
  1054  0005BE  B0D8               	btfsc	status,0,c
  1055  0005C0  2A31               	incf	(readTemp_Single@temp+1)^0,f,c
  1056                           
  1057                           ;ds18b20.c: 139: *minus = '-';
  1058  0005C2  5029               	movf	readTemp_Single@minus^0,w,c
  1059  0005C4  6ED9               	movwf	fsr2l,c
  1060  0005C6  6ADA               	clrf	fsr2h,c
  1061  0005C8  0E2D               	movlw	45
  1062  0005CA  6EDF               	movwf	indf2,c
  1063  0005CC                     l1700:
  1064                           
  1065                           ;ds18b20.c: 140: };ds18b20.c: 142: tmp = temp & 0x0f;
  1066  0005CC  5030               	movf	readTemp_Single@temp^0,w,c
  1067  0005CE  0B0F               	andlw	15
  1068  0005D0  6E2E               	movwf	readTemp_Single@tmp^0,c
  1069                           
  1070                           ;ds18b20.c: 143: tmp = fract[tmp];
  1071  0005D2  502E               	movf	readTemp_Single@tmp^0,w,c
  1072  0005D4  0F01               	addlw	low _fract
  1073  0005D6  6E2C               	movwf	??_readTemp_Single^0,c
  1074  0005D8  C02C  FFF6         	movff	??_readTemp_Single,tblptrl
  1075  0005DC                     	if	1	;There is more than 1 active tblptr byte
  1076  0005DC  0E02               	movlw	high __smallconst
  1077  0005DE  6EF7               	movwf	tblptrh,c
  1078  0005E0                     	endif
  1079  0005E0                     	if	0	;tblptru may be non-zero
  1080  0005E0                     	endif
  1081  0005E0                     	if	0	;tblptru may be non-zero
  1082  0005E0                     	endif
  1083  0005E0  0008               	tblrd		*
  1084  0005E2  CFF5 F02E          	movff	tablat,readTemp_Single@tmp
  1085                           
  1086                           ;ds18b20.c: 144: temp = temp >> 4;
  1087  0005E6  3A30               	swapf	readTemp_Single@temp^0,f,c
  1088  0005E8  3A31               	swapf	(readTemp_Single@temp+1)^0,f,c
  1089  0005EA  0E0F               	movlw	15
  1090  0005EC  1630               	andwf	readTemp_Single@temp^0,f,c
  1091  0005EE  5031               	movf	(readTemp_Single@temp+1)^0,w,c
  1092  0005F0  0BF0               	andlw	240
  1093  0005F2  1230               	iorwf	readTemp_Single@temp^0,f,c
  1094  0005F4  0E0F               	movlw	15
  1095  0005F6  1631               	andwf	(readTemp_Single@temp+1)^0,f,c
  1096                           
  1097                           ;ds18b20.c: 145: temp = (temp & 0x00ff) * 10;
  1098  0005F8  5030               	movf	readTemp_Single@temp^0,w,c
  1099  0005FA  0D0A               	mullw	10
  1100  0005FC  CFF3 F030          	movff	prodl,readTemp_Single@temp
  1101  000600  CFF4 F031          	movff	prodh,readTemp_Single@temp+1
  1102                           
  1103                           ;ds18b20.c: 146: temp = temp + tmp;
  1104  000604  502E               	movf	readTemp_Single@tmp^0,w,c
  1105  000606  2630               	addwf	readTemp_Single@temp^0,f,c
  1106  000608  0E00               	movlw	0
  1107  00060A  2231               	addwfc	(readTemp_Single@temp+1)^0,f,c
  1108                           
  1109                           ;ds18b20.c: 149: *buf = temp;
  1110  00060C  5028               	movf	readTemp_Single@buf^0,w,c
  1111  00060E  6ED9               	movwf	fsr2l,c
  1112  000610  6ADA               	clrf	fsr2h,c
  1113  000612  C030  FFDE         	movff	readTemp_Single@temp,postinc2
  1114  000616  C031  FFDD         	movff	readTemp_Single@temp+1,postdec2
  1115                           
  1116                           ;ds18b20.c: 150: *time_flag = 0;
  1117  00061A  502A               	movf	readTemp_Single@time_flag^0,w,c
  1118  00061C  6ED9               	movwf	fsr2l,c
  1119  00061E  6ADA               	clrf	fsr2h,c
  1120  000620  6ADF               	clrf	indf2,c
  1121                           
  1122                           ;ds18b20.c: 153: break;
  1123  000622  0C00               	retlw	0
  1124  000624                     l1718:
  1125  000624  502A               	movf	readTemp_Single@time_flag^0,w,c
  1126  000626  6ED9               	movwf	fsr2l,c
  1127  000628  6ADA               	clrf	fsr2h,c
  1128  00062A  50DF               	movf	indf2,w,c
  1129                           
  1130                           ; Switch size 1, requested type "space"
  1131                           ; Number of cases is 3, Range of values is 0 to 2
  1132                           ; switch strategies available:
  1133                           ; Name         Instructions Cycles
  1134                           ; simple_byte           10     6 (average)
  1135                           ;	Chosen strategy is simple_byte
  1136  00062C  E094               	bz	l1662
  1137  00062E  0A01               	xorlw	1	; case 1
  1138  000630  E0A8               	bz	l1674
  1139  000632  0A03               	xorlw	3	; case 2
  1140  000634  0012               	return	
  1141  000636                     __end_of_readTemp_Single:
  1142                           	callstack 0
  1143                           
  1144 ;; *************** function _read_byte *****************
  1145 ;; Defined at:
  1146 ;;		line 50 in file "onewire.c"
  1147 ;; Parameters:    Size  Location     Type
  1148 ;;		None
  1149 ;; Auto vars:     Size  Location     Type
  1150 ;;  i               1    3[COMRAM] unsigned char 
  1151 ;;  val             1    2[COMRAM] unsigned char 
  1152 ;; Return value:  Size  Location     Type
  1153 ;;                  1    wreg      unsigned char 
  1154 ;; Registers used:
  1155 ;;		wreg, status,2, status,0, cstack
  1156 ;; Tracked objects:
  1157 ;;		On entry : 0/0
  1158 ;;		On exit  : 0/0
  1159 ;;		Unchanged: 0/0
  1160 ;; Data sizes:     COMRAM   BANK0   BANK1
  1161 ;;      Params:         0       0       0
  1162 ;;      Locals:         2       0       0
  1163 ;;      Temps:          2       0       0
  1164 ;;      Totals:         4       0       0
  1165 ;;Total ram usage:        4 bytes
  1166 ;; Hardware stack levels used:    1
  1167 ;; Hardware stack levels required when called:    2
  1168 ;; This function calls:
  1169 ;;		_read_bit
  1170 ;; This function is called by:
  1171 ;;		_readTemp_Single
  1172 ;; This function uses a non-reentrant model
  1173 ;;
  1174                           
  1175                           	psect	text2
  1176  000866                     __ptext2:
  1177                           	callstack 0
  1178  000866                     _read_byte:
  1179                           	callstack 27
  1180                           
  1181                           ;onewire.c: 52: uint8_t i;;onewire.c: 53: uint8_t val = 0;
  1182                           
  1183                           ;incstack = 0
  1184  000866  6A24               	clrf	read_byte@val^0,c
  1185                           
  1186                           ;onewire.c: 55: for(i=0;i<8;i++)
  1187  000868  6A25               	clrf	read_byte@i^0,c
  1188  00086A                     l1124:
  1189                           
  1190                           ;onewire.c: 56: {;onewire.c: 57: if(read_bit()) val |= (0x01 << i);
  1191  00086A  ECFD  F004         	call	_read_bit	;wreg free
  1192  00086E  0900               	iorlw	0
  1193  000870  E00C               	bz	l1128
  1194  000872  C025  F022         	movff	read_byte@i,??_read_byte
  1195  000876  0E01               	movlw	1
  1196  000878  6E23               	movwf	(??_read_byte+1)^0,c
  1197  00087A  2A22               	incf	??_read_byte^0,f,c
  1198  00087C  D002               	goto	u174
  1199  00087E                     u175:
  1200  00087E  90D8               	bcf	status,0,c
  1201  000880  3623               	rlcf	(??_read_byte+1)^0,f,c
  1202  000882                     u174:
  1203  000882  2E22               	decfsz	??_read_byte^0,f,c
  1204  000884  D7FC               	goto	u175
  1205  000886  5023               	movf	(??_read_byte+1)^0,w,c
  1206  000888  1224               	iorwf	read_byte@val^0,f,c
  1207  00088A                     l1128:
  1208                           
  1209                           ;onewire.c: 58: _delay((unsigned long)((120)*(8000000/4000000.0)));
  1210  00088A  0E50               	movlw	80
  1211  00088C                     u797:
  1212  00088C  2EE8               	decfsz	wreg,f,c
  1213  00088E  D7FE               	bra	u797
  1214  000890  2A25               	incf	read_byte@i^0,f,c
  1215  000892  0E07               	movlw	7
  1216  000894  6425               	cpfsgt	read_byte@i^0,c
  1217  000896  D7E9               	goto	l1124
  1218                           
  1219                           ;onewire.c: 59: };onewire.c: 61: return val;
  1220  000898  5024               	movf	read_byte@val^0,w,c
  1221  00089A  0012               	return		;funcret
  1222  00089C                     __end_of_read_byte:
  1223                           	callstack 0
  1224                           
  1225 ;; *************** function _read_bit *****************
  1226 ;; Defined at:
  1227 ;;		line 22 in file "onewire.c"
  1228 ;; Parameters:    Size  Location     Type
  1229 ;;		None
  1230 ;; Auto vars:     Size  Location     Type
  1231 ;;		None
  1232 ;; Return value:  Size  Location     Type
  1233 ;;                  1    wreg      unsigned char 
  1234 ;; Registers used:
  1235 ;;		wreg
  1236 ;; Tracked objects:
  1237 ;;		On entry : 0/0
  1238 ;;		On exit  : 0/0
  1239 ;;		Unchanged: 0/0
  1240 ;; Data sizes:     COMRAM   BANK0   BANK1
  1241 ;;      Params:         0       0       0
  1242 ;;      Locals:         0       0       0
  1243 ;;      Temps:          0       0       0
  1244 ;;      Totals:         0       0       0
  1245 ;;Total ram usage:        0 bytes
  1246 ;; Hardware stack levels used:    1
  1247 ;; Hardware stack levels required when called:    1
  1248 ;; This function calls:
  1249 ;;		Nothing
  1250 ;; This function is called by:
  1251 ;;		_read_byte
  1252 ;; This function uses a non-reentrant model
  1253 ;;
  1254                           
  1255                           	psect	text3
  1256  0009FA                     __ptext3:
  1257                           	callstack 0
  1258  0009FA                     _read_bit:
  1259                           	callstack 27
  1260                           
  1261                           ;onewire.c: 24: PORTAbits.RA6 = 0;
  1262                           
  1263                           ;incstack = 0
  1264  0009FA  9C80               	bcf	128,6,c	;volatile
  1265                           
  1266                           ;onewire.c: 25: TRISAbits.TRISA6 = 0;
  1267  0009FC  9C92               	bcf	146,6,c	;volatile
  1268                           
  1269                           ;onewire.c: 26: _delay((unsigned long)((1)*(8000000/4000000.0)));
  1270  0009FE  D000               	nop2		;2 cycle nop
  1271                           
  1272                           ;onewire.c: 27: PORTAbits.RA6 = 1;
  1273  000A00  8C80               	bsf	128,6,c	;volatile
  1274                           
  1275                           ;onewire.c: 28: TRISAbits.TRISA6 = 1;
  1276  000A02  8C92               	bsf	146,6,c	;volatile
  1277                           
  1278                           ;onewire.c: 29: _delay((unsigned long)((6)*(8000000/4000000.0)));
  1279  000A04  0E04               	movlw	4
  1280  000A06                     u807:
  1281  000A06  2EE8               	decfsz	wreg,f,c
  1282  000A08  D7FE               	bra	u807
  1283                           
  1284                           ;onewire.c: 30: return(PORTAbits.RA6);
  1285  000A0A  BC80               	btfsc	128,6,c	;volatile
  1286  000A0C  0C01               	retlw	1
  1287  000A0E  0C00               	retlw	0	;funcret
  1288  000A10                     __end_of_read_bit:
  1289                           	callstack 0
  1290                           
  1291 ;; *************** function _lcdPrint *****************
  1292 ;; Defined at:
  1293 ;;		line 96 in file "hd44780.c"
  1294 ;; Parameters:    Size  Location     Type
  1295 ;;  t               2    7[COMRAM] PTR const unsigned char 
  1296 ;;		 -> TxtBuf(16), STR_3(16), STR_2(16), STR_1(17), 
  1297 ;; Auto vars:     Size  Location     Type
  1298 ;;		None
  1299 ;; Return value:  Size  Location     Type
  1300 ;;                  1    wreg      void 
  1301 ;; Registers used:
  1302 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1303 ;; Tracked objects:
  1304 ;;		On entry : 0/0
  1305 ;;		On exit  : 0/0
  1306 ;;		Unchanged: 0/0
  1307 ;; Data sizes:     COMRAM   BANK0   BANK1
  1308 ;;      Params:         2       0       0
  1309 ;;      Locals:         0       0       0
  1310 ;;      Temps:          1       0       0
  1311 ;;      Totals:         3       0       0
  1312 ;;Total ram usage:        3 bytes
  1313 ;; Hardware stack levels used:    1
  1314 ;; Hardware stack levels required when called:    4
  1315 ;; This function calls:
  1316 ;;		_lcdWrite
  1317 ;;		_lcd_gotoxy
  1318 ;; This function is called by:
  1319 ;;		_main
  1320 ;; This function uses a non-reentrant model
  1321 ;;
  1322                           
  1323                           	psect	text4
  1324  000636                     __ptext4:
  1325                           	callstack 0
  1326  000636                     _lcdPrint:
  1327                           	callstack 26
  1328                           
  1329                           ;hd44780.c: 97: while(*t != '\0'){
  1330                           
  1331                           ;incstack = 0
  1332  000636  D033               	goto	l1650
  1333  000638                     l1634:
  1334                           
  1335                           ;hd44780.c: 100: lcdWrite(1, COMMAND);
  1336  000638  D849               	call	PL24	;call to abstracted procedure
  1337  00063A  ECAF  F004         	call	_lcdWrite
  1338                           
  1339                           ;hd44780.c: 101: _delay((unsigned long)((2)*(8000000/4000.0)));
  1340  00063E  0E06               	movlw	6
  1341  000640  6E2B               	movwf	??_lcdPrint^0,c
  1342  000642  0E30               	movlw	48
  1343  000644                     u817:
  1344  000644  2EE8               	decfsz	wreg,f,c
  1345  000646  D7FE               	bra	u817
  1346  000648  2E2B               	decfsz	??_lcdPrint^0,f,c
  1347  00064A  D7FC               	bra	u817
  1348  00064C  D000               	nop2	
  1349                           
  1350                           ;hd44780.c: 102: break;
  1351  00064E  D025               	goto	l1648
  1352  000650                     l1638:
  1353                           
  1354                           ;hd44780.c: 105: lcd_gotoxy(1, 2);
  1355  000650  EC1D  F002         	call	PL16	;call to abstracted procedure
  1356  000654  ECE2  F004         	call	_lcd_gotoxy
  1357                           
  1358                           ;hd44780.c: 106: break;
  1359  000658  D020               	goto	l1648
  1360  00065A                     l1640:
  1361                           
  1362                           ;hd44780.c: 109: lcdWrite(0x10, COMMAND);
  1363  00065A  0E00               	movlw	0
  1364  00065C  6E24               	movwf	lcdWrite@type^0,c
  1365  00065E  0E10               	movlw	16
  1366  000660  ECAF  F004         	call	_lcdWrite
  1367                           
  1368                           ;hd44780.c: 110: break;
  1369  000664  D01A               	goto	l1648
  1370  000666                     l1642:
  1371                           
  1372                           ;hd44780.c: 113: lcdWrite(*t, DATA);
  1373  000666  0E01               	movlw	1
  1374  000668  6E24               	movwf	lcdWrite@type^0,c
  1375  00066A  D823               	call	PL4	;call to abstracted procedure
  1376  00066C  64F7               	cpfsgt	tblptrh,c
  1377  00066E  D003               	bra	u557
  1378  000670  0008               	tblrd		*
  1379  000672  50F5               	movf	tablat,w,c
  1380  000674  D001               	bra	u550
  1381  000676                     u557:
  1382  000676  D824               	call	PL6	;call to abstracted procedure
  1383  000678                     u550:
  1384  000678  ECAF  F004         	call	_lcdWrite
  1385                           
  1386                           ;hd44780.c: 114: break;
  1387  00067C  D00E               	goto	l1648
  1388  00067E                     l1646:
  1389  00067E  D819               	call	PL4	;call to abstracted procedure
  1390  000680  64F7               	cpfsgt	tblptrh,c
  1391  000682  D003               	bra	u567
  1392  000684  0008               	tblrd		*
  1393  000686  50F5               	movf	tablat,w,c
  1394  000688  D001               	bra	u560
  1395  00068A                     u567:
  1396  00068A  D81A               	call	PL6	;call to abstracted procedure
  1397  00068C                     u560:
  1398                           
  1399                           ; Switch size 1, requested type "space"
  1400                           ; Number of cases is 3, Range of values is 8 to 12
  1401                           ; switch strategies available:
  1402                           ; Name         Instructions Cycles
  1403                           ; simple_byte           10     6 (average)
  1404                           ;	Chosen strategy is simple_byte
  1405  00068C  0A08               	xorlw	8	; case 8
  1406  00068E  E0E5               	bz	l1640
  1407  000690  0A02               	xorlw	2	; case 10
  1408  000692  E0DE               	bz	l1638
  1409  000694  0A06               	xorlw	6	; case 12
  1410  000696  E0D0               	bz	l1634
  1411  000698  D7E6               	goto	l1642
  1412  00069A                     l1648:
  1413                           
  1414                           ;hd44780.c: 116: *t++;
  1415  00069A  4A29               	infsnz	lcdPrint@t^0,f,c
  1416  00069C  2A2A               	incf	(lcdPrint@t+1)^0,f,c
  1417  00069E                     l1650:
  1418  00069E  D809               	call	PL4	;call to abstracted procedure
  1419  0006A0  64F7               	cpfsgt	tblptrh,c
  1420  0006A2  D003               	bra	u577
  1421  0006A4  0008               	tblrd		*
  1422  0006A6  50F5               	movf	tablat,w,c
  1423  0006A8  D001               	bra	u570
  1424  0006AA                     u577:
  1425  0006AA  D80A               	call	PL6	;call to abstracted procedure
  1426  0006AC                     u570:
  1427  0006AC  0900               	iorlw	0
  1428  0006AE  E1E7               	bnz	l1646
  1429  0006B0  0012               	return		;funcret
  1430  0006B2                     __end_of_lcdPrint:
  1431                           	callstack 0
  1432  0006B2                     PL4:
  1433                           	callstack 26
  1434  0006B2  C029  FFF6         	movff	lcdPrint@t,tblptrl
  1435  0006B6  C02A  FFF7         	movff	lcdPrint@t+1,tblptrh
  1436  0006BA  6AF8               	clrf	tblptru,c
  1437  0006BC  0E01               	movlw	(high __ramtop+-1)
  1438  0006BE  0012               	return	
  1439  0006C0                     __end_ofPL4:
  1440                           	callstack 0
  1441  0006C0                     PL6:
  1442                           	callstack 26
  1443  0006C0  CFF6 FFE9          	movff	tblptrl,fsr0l
  1444  0006C4  CFF7 FFEA          	movff	tblptrh,fsr0h
  1445  0006C8  50EF               	movf	indf0,w,c
  1446  0006CA  0012               	return	
  1447  0006CC                     __end_ofPL6:
  1448                           	callstack 0
  1449  0006CC                     PL24:
  1450                           	callstack 26
  1451  0006CC  0E00               	movlw	0
  1452  0006CE  6E24               	movwf	lcdWrite@type^0,c
  1453  0006D0  0C01               	retlw	1
  1454  0006D2                     __end_ofPL24:
  1455                           	callstack 0
  1456                           
  1457 ;; *************** function _lcd_gotoxy *****************
  1458 ;; Defined at:
  1459 ;;		line 76 in file "hd44780.c"
  1460 ;; Parameters:    Size  Location     Type
  1461 ;;  x               1    wreg     unsigned char 
  1462 ;;  y               1    4[COMRAM] unsigned char 
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;  x               1    5[COMRAM] unsigned char 
  1465 ;;  address         1    6[COMRAM] unsigned char 
  1466 ;; Return value:  Size  Location     Type
  1467 ;;                  1    wreg      void 
  1468 ;; Registers used:
  1469 ;;		wreg, status,2, status,0, cstack
  1470 ;; Tracked objects:
  1471 ;;		On entry : 0/0
  1472 ;;		On exit  : 0/0
  1473 ;;		Unchanged: 0/0
  1474 ;; Data sizes:     COMRAM   BANK0   BANK1
  1475 ;;      Params:         1       0       0
  1476 ;;      Locals:         2       0       0
  1477 ;;      Temps:          0       0       0
  1478 ;;      Totals:         3       0       0
  1479 ;;Total ram usage:        3 bytes
  1480 ;; Hardware stack levels used:    1
  1481 ;; Hardware stack levels required when called:    3
  1482 ;; This function calls:
  1483 ;;		_lcdWrite
  1484 ;; This function is called by:
  1485 ;;		_main
  1486 ;;		_lcdPrint
  1487 ;; This function uses a non-reentrant model
  1488 ;;
  1489                           
  1490                           	psect	text5
  1491  0009C4                     __ptext5:
  1492                           	callstack 0
  1493  0009C4                     _lcd_gotoxy:
  1494                           	callstack 27
  1495                           
  1496                           ;incstack = 0
  1497                           ;lcd_gotoxy@x stored from wreg
  1498  0009C4  6E27               	movwf	lcd_gotoxy@x^0,c
  1499                           
  1500                           ;hd44780.c: 77: uint8_t address;;hd44780.c: 79: if (y != 1)
  1501  0009C6  0426               	decf	lcd_gotoxy@y^0,w,c
  1502  0009C8  E003               	bz	l187
  1503                           
  1504                           ;hd44780.c: 80: address = 0x40;
  1505  0009CA  0E40               	movlw	64
  1506  0009CC  6E28               	movwf	lcd_gotoxy@address^0,c
  1507  0009CE  D001               	goto	l1594
  1508  0009D0                     l187:
  1509                           
  1510                           ;hd44780.c: 81: else;hd44780.c: 82: address = 0;
  1511  0009D0  6A28               	clrf	lcd_gotoxy@address^0,c
  1512  0009D2                     l1594:
  1513                           
  1514                           ;hd44780.c: 84: address += x - 1;
  1515  0009D2  0427               	decf	lcd_gotoxy@x^0,w,c
  1516  0009D4  2628               	addwf	lcd_gotoxy@address^0,f,c
  1517                           
  1518                           ;hd44780.c: 85: lcdWrite(0x80 | address, COMMAND);
  1519  0009D6  6A24               	clrf	lcdWrite@type^0,c
  1520  0009D8  5028               	movf	lcd_gotoxy@address^0,w,c
  1521  0009DA  0980               	iorlw	128
  1522  0009DC  EFAF  F004         	goto	_lcdWrite
  1523  0009E0                     __end_of_lcd_gotoxy:
  1524                           	callstack 0
  1525                           
  1526 ;; *************** function _key_press *****************
  1527 ;; Defined at:
  1528 ;;		line 5 in file "key.c"
  1529 ;; Parameters:    Size  Location     Type
  1530 ;;		None
  1531 ;; Auto vars:     Size  Location     Type
  1532 ;;  key             1    0[COMRAM] unsigned char 
  1533 ;; Return value:  Size  Location     Type
  1534 ;;                  1    wreg      void 
  1535 ;; Registers used:
  1536 ;;		wreg, status,2, status,0
  1537 ;; Tracked objects:
  1538 ;;		On entry : 0/0
  1539 ;;		On exit  : 0/0
  1540 ;;		Unchanged: 0/0
  1541 ;; Data sizes:     COMRAM   BANK0   BANK1
  1542 ;;      Params:         0       0       0
  1543 ;;      Locals:         1       0       0
  1544 ;;      Temps:          0       0       0
  1545 ;;      Totals:         1       0       0
  1546 ;;Total ram usage:        1 bytes
  1547 ;; Hardware stack levels used:    1
  1548 ;; Hardware stack levels required when called:    1
  1549 ;; This function calls:
  1550 ;;		Nothing
  1551 ;; This function is called by:
  1552 ;;		_main
  1553 ;; This function uses a non-reentrant model
  1554 ;;
  1555                           
  1556                           	psect	text6
  1557  0007E8                     __ptext6:
  1558                           	callstack 0
  1559  0007E8                     _key_press:
  1560                           	callstack 29
  1561                           
  1562                           ;key.c: 7: static uint8_t count = 0;;key.c: 8: uint8_t key;;key.c: 9: if (((PORTB & (1 <
      +                          < 1)) == 0) && ((PORTB & (1 << 2)) == 0))
  1563                           
  1564                           ;incstack = 0
  1565  0007E8  A281               	btfss	129,1,c	;volatile
  1566  0007EA  B481               	btfsc	129,2,c	;volatile
  1567  0007EC  D002               	goto	l274
  1568                           
  1569                           ;key.c: 10: key = 3;
  1570  0007EE  0E03               	movlw	3
  1571  0007F0  D007               	goto	L2
  1572  0007F2                     l274:
  1573                           
  1574                           ;key.c: 11: else if ((PORTB & (1 << 1)) == 0)
  1575  0007F2  B281               	btfsc	129,1,c	;volatile
  1576  0007F4  D002               	goto	l276
  1577                           
  1578                           ;key.c: 12: key = 1;
  1579  0007F6  0E01               	movlw	1
  1580  0007F8  D003               	goto	L2
  1581  0007FA                     l276:
  1582                           
  1583                           ;key.c: 13: else if ((PORTB & (1 << 2)) == 0)
  1584  0007FA  B481               	btfsc	129,2,c	;volatile
  1585  0007FC  D003               	goto	l278
  1586                           
  1587                           ;key.c: 14: key = 2;
  1588  0007FE  0E02               	movlw	2
  1589  000800                     L2:
  1590  000800  6E22               	movwf	key_press@key^0,c
  1591  000802  D001               	goto	l1314
  1592  000804                     l278:
  1593                           
  1594                           ;key.c: 15: else;key.c: 16: key = 0;
  1595  000804  6A22               	clrf	key_press@key^0,c
  1596  000806                     l1314:
  1597                           
  1598                           ;key.c: 19: if (key) {
  1599  000806  5022               	movf	key_press@key^0,w,c
  1600  000808  E00D               	bz	l280
  1601                           
  1602                           ;key.c: 22: if (count == 20) {
  1603  00080A  0E14               	movlw	20
  1604  00080C  180A               	xorwf	key_press@count^0,w,c
  1605  00080E  E105               	bnz	l1326
  1606                           
  1607                           ;key.c: 23: count = 20 + 10;
  1608  000810  0E1E               	movlw	30
  1609  000812  6E0A               	movwf	key_press@count^0,c
  1610                           
  1611                           ;key.c: 24: key_pressed = key;
  1612  000814  C022  F00B         	movff	key_press@key,_key_pressed	;volatile
  1613  000818  0C1E               	retlw	30
  1614  00081A                     l1326:
  1615                           
  1616                           ;key.c: 28: if (count < (20 + 5))
  1617  00081A  0E19               	movlw	25
  1618  00081C  600A               	cpfslt	key_press@count^0,c
  1619  00081E  0C19               	retlw	25
  1620                           
  1621                           ;key.c: 29: count++;
  1622  000820  2A0A               	incf	key_press@count^0,f,c
  1623  000822  0C19               	retlw	25
  1624  000824                     l280:
  1625                           
  1626                           ;key.c: 32: else count = 0;
  1627  000824  6A0A               	clrf	key_press@count^0,c
  1628  000826  0012               	return		;funcret
  1629  000828                     __end_of_key_press:
  1630                           	callstack 0
  1631                           
  1632 ;; *************** function _key_GetKey *****************
  1633 ;; Defined at:
  1634 ;;		line 37 in file "key.c"
  1635 ;; Parameters:    Size  Location     Type
  1636 ;;		None
  1637 ;; Auto vars:     Size  Location     Type
  1638 ;;  key             1    0[COMRAM] unsigned char 
  1639 ;; Return value:  Size  Location     Type
  1640 ;;                  1    wreg      unsigned char 
  1641 ;; Registers used:
  1642 ;;		wreg, status,2
  1643 ;; Tracked objects:
  1644 ;;		On entry : 0/0
  1645 ;;		On exit  : 0/0
  1646 ;;		Unchanged: 0/0
  1647 ;; Data sizes:     COMRAM   BANK0   BANK1
  1648 ;;      Params:         0       0       0
  1649 ;;      Locals:         1       0       0
  1650 ;;      Temps:          0       0       0
  1651 ;;      Totals:         1       0       0
  1652 ;;Total ram usage:        1 bytes
  1653 ;; Hardware stack levels used:    1
  1654 ;; Hardware stack levels required when called:    1
  1655 ;; This function calls:
  1656 ;;		Nothing
  1657 ;; This function is called by:
  1658 ;;		_main
  1659 ;; This function uses a non-reentrant model
  1660 ;;
  1661                           
  1662                           	psect	text7
  1663  000A10                     __ptext7:
  1664                           	callstack 0
  1665  000A10                     _key_GetKey:
  1666                           	callstack 29
  1667                           
  1668                           ;key.c: 39: uint8_t key = key_pressed;
  1669                           
  1670                           ;incstack = 0
  1671  000A10  C00B  F022         	movff	_key_pressed,key_GetKey@key	;volatile
  1672                           
  1673                           ;key.c: 41: key_pressed = 0;
  1674  000A14  6A0B               	clrf	_key_pressed^0,c	;volatile
  1675                           
  1676                           ;key.c: 42: return key;
  1677  000A16  5022               	movf	key_GetKey@key^0,w,c
  1678  000A18  0012               	return		;funcret
  1679  000A1A                     __end_of_key_GetKey:
  1680                           	callstack 0
  1681                           
  1682 ;; *************** function _initLCD *****************
  1683 ;; Defined at:
  1684 ;;		line 10 in file "hd44780.c"
  1685 ;; Parameters:    Size  Location     Type
  1686 ;;		None
  1687 ;; Auto vars:     Size  Location     Type
  1688 ;;		None
  1689 ;; Return value:  Size  Location     Type
  1690 ;;                  1    wreg      void 
  1691 ;; Registers used:
  1692 ;;		wreg, status,2, status,0, cstack
  1693 ;; Tracked objects:
  1694 ;;		On entry : 0/0
  1695 ;;		On exit  : 0/0
  1696 ;;		Unchanged: 0/0
  1697 ;; Data sizes:     COMRAM   BANK0   BANK1
  1698 ;;      Params:         0       0       0
  1699 ;;      Locals:         0       0       0
  1700 ;;      Temps:          1       0       0
  1701 ;;      Totals:         1       0       0
  1702 ;;Total ram usage:        1 bytes
  1703 ;; Hardware stack levels used:    1
  1704 ;; Hardware stack levels required when called:    4
  1705 ;; This function calls:
  1706 ;;		_clearLCD
  1707 ;;		_lcdNibble
  1708 ;;		_lcdWrite
  1709 ;; This function is called by:
  1710 ;;		_main
  1711 ;; This function uses a non-reentrant model
  1712 ;;
  1713                           
  1714                           	psect	text8
  1715  000452                     __ptext8:
  1716                           	callstack 0
  1717  000452                     _initLCD:
  1718                           	callstack 26
  1719                           
  1720                           ;hd44780.c: 11: PORTAbits.RA2 = 0;
  1721                           
  1722                           ;incstack = 0
  1723  000452  9480               	bcf	128,2,c	;volatile
  1724                           
  1725                           ;hd44780.c: 12: PORTAbits.RA1 = 0;
  1726  000454  9280               	bcf	128,1,c	;volatile
  1727                           
  1728                           ;hd44780.c: 14: _delay((unsigned long)((10)*(8000000/4000.0)));
  1729  000456  0E1A               	movlw	26
  1730  000458  6E27               	movwf	??_initLCD^0,c
  1731  00045A  0EF8               	movlw	248
  1732  00045C                     u827:
  1733  00045C  2EE8               	decfsz	wreg,f,c
  1734  00045E  D7FE               	bra	u827
  1735  000460  2E27               	decfsz	??_initLCD^0,f,c
  1736  000462  D7FC               	bra	u827
  1737  000464  D000               	nop2	
  1738                           
  1739                           ;hd44780.c: 15: _delay((unsigned long)((10)*(8000000/4000.0)));
  1740  000466  0E1A               	movlw	26
  1741  000468  6E27               	movwf	??_initLCD^0,c
  1742  00046A  0EF8               	movlw	248
  1743  00046C                     u837:
  1744  00046C  2EE8               	decfsz	wreg,f,c
  1745  00046E  D7FE               	bra	u837
  1746  000470  2E27               	decfsz	??_initLCD^0,f,c
  1747  000472  D7FC               	bra	u837
  1748  000474  D000               	nop2	
  1749                           
  1750                           ;hd44780.c: 16: _delay((unsigned long)((10)*(8000000/4000.0)));
  1751  000476  0E1A               	movlw	26
  1752  000478  6E27               	movwf	??_initLCD^0,c
  1753  00047A  0EF8               	movlw	248
  1754  00047C                     u847:
  1755  00047C  2EE8               	decfsz	wreg,f,c
  1756  00047E  D7FE               	bra	u847
  1757  000480  2E27               	decfsz	??_initLCD^0,f,c
  1758  000482  D7FC               	bra	u847
  1759  000484  D000               	nop2	
  1760                           
  1761                           ;hd44780.c: 17: _delay((unsigned long)((10)*(8000000/4000.0)));
  1762  000486  0E1A               	movlw	26
  1763  000488  6E27               	movwf	??_initLCD^0,c
  1764  00048A  0EF8               	movlw	248
  1765  00048C                     u857:
  1766  00048C  2EE8               	decfsz	wreg,f,c
  1767  00048E  D7FE               	bra	u857
  1768  000490  2E27               	decfsz	??_initLCD^0,f,c
  1769  000492  D7FC               	bra	u857
  1770  000494  D000               	nop2	
  1771                           
  1772                           ;hd44780.c: 21: lcdNibble(0b0011);
  1773  000496  0E03               	movlw	3
  1774  000498  EC69  F003         	call	_lcdNibble
  1775                           
  1776                           ;hd44780.c: 22: _delay((unsigned long)((5)*(8000000/4000.0)));
  1777  00049C  0E0D               	movlw	13
  1778  00049E  6E27               	movwf	??_initLCD^0,c
  1779  0004A0  0EFC               	movlw	252
  1780  0004A2                     u867:
  1781  0004A2  2EE8               	decfsz	wreg,f,c
  1782  0004A4  D7FE               	bra	u867
  1783  0004A6  2E27               	decfsz	??_initLCD^0,f,c
  1784  0004A8  D7FC               	bra	u867
  1785                           
  1786                           ;hd44780.c: 23: lcdNibble(0b0011);
  1787  0004AA  0E03               	movlw	3
  1788  0004AC  EC69  F003         	call	_lcdNibble
  1789                           
  1790                           ;hd44780.c: 24: _delay((unsigned long)((5)*(8000000/4000.0)));
  1791  0004B0  0E0D               	movlw	13
  1792  0004B2  6E27               	movwf	??_initLCD^0,c
  1793  0004B4  0EFC               	movlw	252
  1794  0004B6                     u877:
  1795  0004B6  2EE8               	decfsz	wreg,f,c
  1796  0004B8  D7FE               	bra	u877
  1797  0004BA  2E27               	decfsz	??_initLCD^0,f,c
  1798  0004BC  D7FC               	bra	u877
  1799                           
  1800                           ;hd44780.c: 25: lcdNibble(0b0011);
  1801  0004BE  0E03               	movlw	3
  1802  0004C0  EC69  F003         	call	_lcdNibble
  1803                           
  1804                           ;hd44780.c: 26: _delay((unsigned long)((5)*(8000000/4000.0)));
  1805  0004C4  0E0D               	movlw	13
  1806  0004C6  6E27               	movwf	??_initLCD^0,c
  1807  0004C8  0EFC               	movlw	252
  1808  0004CA                     u887:
  1809  0004CA  2EE8               	decfsz	wreg,f,c
  1810  0004CC  D7FE               	bra	u887
  1811  0004CE  2E27               	decfsz	??_initLCD^0,f,c
  1812  0004D0  D7FC               	bra	u887
  1813                           
  1814                           ;hd44780.c: 27: lcdNibble(0b0010);
  1815  0004D2  0E02               	movlw	2
  1816  0004D4  EC69  F003         	call	_lcdNibble
  1817                           
  1818                           ;hd44780.c: 28: _delay((unsigned long)((5)*(8000000/4000.0)));
  1819  0004D8  0E0D               	movlw	13
  1820  0004DA  6E27               	movwf	??_initLCD^0,c
  1821  0004DC  0EFC               	movlw	252
  1822  0004DE                     u897:
  1823  0004DE  2EE8               	decfsz	wreg,f,c
  1824  0004E0  D7FE               	bra	u897
  1825  0004E2  2E27               	decfsz	??_initLCD^0,f,c
  1826  0004E4  D7FC               	bra	u897
  1827                           
  1828                           ;hd44780.c: 31: lcdWrite(((0b0010 << 4) | (1 << 3)), COMMAND);
  1829  0004E6  0E00               	movlw	0
  1830  0004E8  6E24               	movwf	lcdWrite@type^0,c
  1831  0004EA  0E28               	movlw	40
  1832  0004EC  ECAF  F004         	call	_lcdWrite
  1833                           
  1834                           ;hd44780.c: 32: _delay((unsigned long)((5)*(8000000/4000.0)));
  1835  0004F0  0E0D               	movlw	13
  1836  0004F2  6E27               	movwf	??_initLCD^0,c
  1837  0004F4  0EFC               	movlw	252
  1838  0004F6                     u907:
  1839  0004F6  2EE8               	decfsz	wreg,f,c
  1840  0004F8  D7FE               	bra	u907
  1841  0004FA  2E27               	decfsz	??_initLCD^0,f,c
  1842  0004FC  D7FC               	bra	u907
  1843                           
  1844                           ;hd44780.c: 33: lcdWrite(((0b1100) | (0 << 1) | (0 << 0)), COMMAND);
  1845  0004FE  0E00               	movlw	0
  1846  000500  6E24               	movwf	lcdWrite@type^0,c
  1847  000502  0E0C               	movlw	12
  1848  000504  ECAF  F004         	call	_lcdWrite
  1849                           
  1850                           ;hd44780.c: 34: _delay((unsigned long)((8)*(8000000/4000.0)));
  1851  000508  0E15               	movlw	21
  1852  00050A  6E27               	movwf	??_initLCD^0,c
  1853  00050C  0EC6               	movlw	198
  1854  00050E                     u917:
  1855  00050E  2EE8               	decfsz	wreg,f,c
  1856  000510  D7FE               	bra	u917
  1857  000512  2E27               	decfsz	??_initLCD^0,f,c
  1858  000514  D7FC               	bra	u917
  1859  000516  D000               	nop2	
  1860                           
  1861                           ;hd44780.c: 35: clearLCD();
  1862  000518  ECF0  F004         	call	_clearLCD	;wreg free
  1863                           
  1864                           ;hd44780.c: 36: _delay((unsigned long)((5)*(8000000/4000.0)));
  1865  00051C  0E0D               	movlw	13
  1866  00051E  6E27               	movwf	??_initLCD^0,c
  1867  000520  0EFC               	movlw	252
  1868  000522                     u927:
  1869  000522  2EE8               	decfsz	wreg,f,c
  1870  000524  D7FE               	bra	u927
  1871  000526  2E27               	decfsz	??_initLCD^0,f,c
  1872  000528  D7FC               	bra	u927
  1873                           
  1874                           ;hd44780.c: 37: lcdWrite(0x06, COMMAND);
  1875  00052A  0E00               	movlw	0
  1876  00052C  6E24               	movwf	lcdWrite@type^0,c
  1877  00052E  0E06               	movlw	6
  1878  000530  ECAF  F004         	call	_lcdWrite
  1879                           
  1880                           ;hd44780.c: 38: _delay((unsigned long)((5)*(8000000/4000.0)));
  1881  000534  0E0D               	movlw	13
  1882  000536  6E27               	movwf	??_initLCD^0,c
  1883  000538  0EFC               	movlw	252
  1884  00053A                     u937:
  1885  00053A  2EE8               	decfsz	wreg,f,c
  1886  00053C  D7FE               	bra	u937
  1887  00053E  2E27               	decfsz	??_initLCD^0,f,c
  1888  000540  D7FC               	bra	u937
  1889                           
  1890                           ;hd44780.c: 39: clearLCD();
  1891  000542  ECF0  F004         	call	_clearLCD	;wreg free
  1892                           
  1893                           ;hd44780.c: 41: PORTAbits.RA2 = 1;
  1894  000546  8480               	bsf	128,2,c	;volatile
  1895  000548  0012               	return		;funcret
  1896  00054A                     __end_of_initLCD:
  1897                           	callstack 0
  1898                           
  1899 ;; *************** function _clearLCD *****************
  1900 ;; Defined at:
  1901 ;;		line 45 in file "hd44780.c"
  1902 ;; Parameters:    Size  Location     Type
  1903 ;;		None
  1904 ;; Auto vars:     Size  Location     Type
  1905 ;;		None
  1906 ;; Return value:  Size  Location     Type
  1907 ;;                  1    wreg      void 
  1908 ;; Registers used:
  1909 ;;		wreg, status,2, status,0, cstack
  1910 ;; Tracked objects:
  1911 ;;		On entry : 0/0
  1912 ;;		On exit  : 0/0
  1913 ;;		Unchanged: 0/0
  1914 ;; Data sizes:     COMRAM   BANK0   BANK1
  1915 ;;      Params:         0       0       0
  1916 ;;      Locals:         0       0       0
  1917 ;;      Temps:          1       0       0
  1918 ;;      Totals:         1       0       0
  1919 ;;Total ram usage:        1 bytes
  1920 ;; Hardware stack levels used:    1
  1921 ;; Hardware stack levels required when called:    3
  1922 ;; This function calls:
  1923 ;;		_lcdWrite
  1924 ;; This function is called by:
  1925 ;;		_main
  1926 ;;		_initLCD
  1927 ;; This function uses a non-reentrant model
  1928 ;;
  1929                           
  1930                           	psect	text9
  1931  0009E0                     __ptext9:
  1932                           	callstack 0
  1933  0009E0                     _clearLCD:
  1934                           	callstack 0
  1935                           
  1936                           ;hd44780.c: 46: lcdWrite(0x01, COMMAND);
  1937                           
  1938                           ;incstack = 0
  1939  0009E0  EC66  F003         	call	PL24	;call to abstracted procedure
  1940  0009E4  ECAF  F004         	call	_lcdWrite
  1941                           
  1942                           ;hd44780.c: 47: _delay((unsigned long)((2)*(8000000/4000.0)));
  1943  0009E8  0E06               	movlw	6
  1944  0009EA  6E26               	movwf	??_clearLCD^0,c
  1945  0009EC  0E30               	movlw	48
  1946  0009EE                     u947:
  1947  0009EE  2EE8               	decfsz	wreg,f,c
  1948  0009F0  D7FE               	bra	u947
  1949  0009F2  2E26               	decfsz	??_clearLCD^0,f,c
  1950  0009F4  D7FC               	bra	u947
  1951  0009F6  D000               	nop2	
  1952  0009F8  0012               	return		;funcret
  1953  0009FA                     __end_of_clearLCD:
  1954                           	callstack 0
  1955                           
  1956 ;; *************** function _lcdWrite *****************
  1957 ;; Defined at:
  1958 ;;		line 50 in file "hd44780.c"
  1959 ;; Parameters:    Size  Location     Type
  1960 ;;  byte            1    wreg     unsigned char 
  1961 ;;  type            1    2[COMRAM] enum E2001
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;  byte            1    3[COMRAM] unsigned char 
  1964 ;; Return value:  Size  Location     Type
  1965 ;;                  1    wreg      void 
  1966 ;; Registers used:
  1967 ;;		wreg, status,2, status,0, cstack
  1968 ;; Tracked objects:
  1969 ;;		On entry : 0/0
  1970 ;;		On exit  : 0/0
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMRAM   BANK0   BANK1
  1973 ;;      Params:         1       0       0
  1974 ;;      Locals:         1       0       0
  1975 ;;      Temps:          0       0       0
  1976 ;;      Totals:         2       0       0
  1977 ;;Total ram usage:        2 bytes
  1978 ;; Hardware stack levels used:    1
  1979 ;; Hardware stack levels required when called:    2
  1980 ;; This function calls:
  1981 ;;		_lcdNibble
  1982 ;; This function is called by:
  1983 ;;		_initLCD
  1984 ;;		_clearLCD
  1985 ;;		_lcd_gotoxy
  1986 ;;		_lcdPrint
  1987 ;; This function uses a non-reentrant model
  1988 ;;
  1989                           
  1990                           	psect	text10
  1991  00095E                     __ptext10:
  1992                           	callstack 0
  1993  00095E                     _lcdWrite:
  1994                           	callstack 27
  1995                           
  1996                           ;incstack = 0
  1997                           ;lcdWrite@byte stored from wreg
  1998  00095E  6E25               	movwf	lcdWrite@byte^0,c
  1999                           
  2000                           ;hd44780.c: 51: if (type == COMMAND)
  2001  000960  5024               	movf	lcdWrite@type^0,w,c
  2002  000962  E102               	bnz	l179
  2003                           
  2004                           ;hd44780.c: 52: PORTAbits.RA2 = 0;
  2005  000964  9480               	bcf	128,2,c	;volatile
  2006  000966  D001               	goto	l1584
  2007  000968                     l179:
  2008                           
  2009                           ;hd44780.c: 53: else;hd44780.c: 54: PORTAbits.RA2 = 1;
  2010  000968  8480               	bsf	128,2,c	;volatile
  2011  00096A                     l1584:
  2012                           
  2013                           ;hd44780.c: 56: _delay((unsigned long)((100)*(8000000/4000000.0)));
  2014  00096A  0E42               	movlw	66
  2015  00096C                     u957:
  2016  00096C  2EE8               	decfsz	wreg,f,c
  2017  00096E  D7FE               	bra	u957
  2018  000970  D000               	nop2	
  2019                           
  2020                           ;hd44780.c: 58: lcdNibble(byte >> 4);
  2021  000972  3825               	swapf	lcdWrite@byte^0,w,c
  2022  000974  0B0F               	andlw	15
  2023  000976  EC69  F003         	call	_lcdNibble
  2024                           
  2025                           ;hd44780.c: 59: lcdNibble(byte & 0x0F);
  2026  00097A  5025               	movf	lcdWrite@byte^0,w,c
  2027  00097C  0B0F               	andlw	15
  2028  00097E  EF69  F003         	goto	_lcdNibble
  2029  000982                     __end_of_lcdWrite:
  2030                           	callstack 0
  2031                           
  2032 ;; *************** function _lcdNibble *****************
  2033 ;; Defined at:
  2034 ;;		line 63 in file "hd44780.c"
  2035 ;; Parameters:    Size  Location     Type
  2036 ;;  nibble          1    wreg     unsigned char 
  2037 ;; Auto vars:     Size  Location     Type
  2038 ;;  nibble          1    1[COMRAM] unsigned char 
  2039 ;; Return value:  Size  Location     Type
  2040 ;;                  1    wreg      void 
  2041 ;; Registers used:
  2042 ;;		wreg, status,2, status,0
  2043 ;; Tracked objects:
  2044 ;;		On entry : 0/0
  2045 ;;		On exit  : 0/0
  2046 ;;		Unchanged: 0/0
  2047 ;; Data sizes:     COMRAM   BANK0   BANK1
  2048 ;;      Params:         0       0       0
  2049 ;;      Locals:         1       0       0
  2050 ;;      Temps:          1       0       0
  2051 ;;      Totals:         2       0       0
  2052 ;;Total ram usage:        2 bytes
  2053 ;; Hardware stack levels used:    1
  2054 ;; Hardware stack levels required when called:    1
  2055 ;; This function calls:
  2056 ;;		Nothing
  2057 ;; This function is called by:
  2058 ;;		_initLCD
  2059 ;;		_lcdWrite
  2060 ;; This function uses a non-reentrant model
  2061 ;;
  2062                           
  2063                           	psect	text11
  2064  0006D2                     __ptext11:
  2065                           	callstack 0
  2066  0006D2                     _lcdNibble:
  2067                           	callstack 27
  2068                           
  2069                           ;incstack = 0
  2070                           ;lcdNibble@nibble stored from wreg
  2071  0006D2  6E23               	movwf	lcdNibble@nibble^0,c
  2072                           
  2073                           ;hd44780.c: 64: PORTCbits.RC0 = (nibble & 0x01) ? 1 : 0;
  2074  0006D4  A023               	btfss	lcdNibble@nibble^0,0,c
  2075  0006D6  D003               	goto	u10
  2076  0006D8  6A22               	clrf	??_lcdNibble^0,c
  2077  0006DA  2A22               	incf	??_lcdNibble^0,f,c
  2078  0006DC  D001               	goto	u28
  2079  0006DE                     u10:
  2080  0006DE  6A22               	clrf	??_lcdNibble^0,c
  2081  0006E0                     u28:
  2082  0006E0  5082               	movf	130,w,c	;volatile
  2083  0006E2  1822               	xorwf	??_lcdNibble^0,w,c
  2084  0006E4  0BFE               	andlw	-2
  2085  0006E6  1822               	xorwf	??_lcdNibble^0,w,c
  2086  0006E8  6E82               	movwf	130,c	;volatile
  2087                           
  2088                           ;hd44780.c: 65: PORTCbits.RC1 = (nibble & 0x02) ? 1 : 0;
  2089  0006EA  A223               	btfss	lcdNibble@nibble^0,1,c
  2090  0006EC  D003               	goto	u30
  2091  0006EE  6A22               	clrf	??_lcdNibble^0,c
  2092  0006F0  2A22               	incf	??_lcdNibble^0,f,c
  2093  0006F2  D001               	goto	u48
  2094  0006F4                     u30:
  2095  0006F4  6A22               	clrf	??_lcdNibble^0,c
  2096  0006F6                     u48:
  2097  0006F6  4622               	rlncf	??_lcdNibble^0,f,c
  2098  0006F8  5082               	movf	130,w,c	;volatile
  2099  0006FA  1822               	xorwf	??_lcdNibble^0,w,c
  2100  0006FC  0BFD               	andlw	-3
  2101  0006FE  1822               	xorwf	??_lcdNibble^0,w,c
  2102  000700  6E82               	movwf	130,c	;volatile
  2103                           
  2104                           ;hd44780.c: 66: PORTCbits.RC2 = (nibble & 0x04) ? 1 : 0;
  2105  000702  A423               	btfss	lcdNibble@nibble^0,2,c
  2106  000704  D003               	goto	u50
  2107  000706  6A22               	clrf	??_lcdNibble^0,c
  2108  000708  2A22               	incf	??_lcdNibble^0,f,c
  2109  00070A  D001               	goto	u68
  2110  00070C                     u50:
  2111  00070C  6A22               	clrf	??_lcdNibble^0,c
  2112  00070E                     u68:
  2113  00070E  D819               	call	PL20	;call to abstracted procedure
  2114  000710  0BFB               	andlw	-5
  2115  000712  1822               	xorwf	??_lcdNibble^0,w,c
  2116  000714  6E82               	movwf	130,c	;volatile
  2117                           
  2118                           ;hd44780.c: 67: PORTCbits.RC3 = (nibble & 0x08) ? 1 : 0;
  2119  000716  A623               	btfss	lcdNibble@nibble^0,3,c
  2120  000718  D003               	goto	u70
  2121  00071A  6A22               	clrf	??_lcdNibble^0,c
  2122  00071C  2A22               	incf	??_lcdNibble^0,f,c
  2123  00071E  D001               	goto	u88
  2124  000720                     u70:
  2125  000720  6A22               	clrf	??_lcdNibble^0,c
  2126  000722                     u88:
  2127  000722  4622               	rlncf	??_lcdNibble^0,f,c
  2128  000724  D80E               	call	PL20	;call to abstracted procedure
  2129  000726  0BF7               	andlw	-9
  2130  000728  1822               	xorwf	??_lcdNibble^0,w,c
  2131  00072A  6E82               	movwf	130,c	;volatile
  2132                           
  2133                           ;hd44780.c: 70: PORTAbits.RA1 = 1;
  2134  00072C  8280               	bsf	128,1,c	;volatile
  2135                           
  2136                           ;hd44780.c: 71: _delay((unsigned long)((100)*(8000000/4000000.0)));
  2137  00072E  0E42               	movlw	66
  2138  000730                     u967:
  2139  000730  2EE8               	decfsz	wreg,f,c
  2140  000732  D7FE               	bra	u967
  2141  000734  D000               	nop2	
  2142                           
  2143                           ;hd44780.c: 72: PORTAbits.RA1 = 0;
  2144  000736  9280               	bcf	128,1,c	;volatile
  2145                           
  2146                           ;hd44780.c: 73: _delay((unsigned long)((100)*(8000000/4000000.0)));
  2147  000738  0E42               	movlw	66
  2148  00073A                     u977:
  2149  00073A  2EE8               	decfsz	wreg,f,c
  2150  00073C  D7FE               	bra	u977
  2151  00073E  D000               	nop2	
  2152  000740  0012               	return		;funcret
  2153  000742                     __end_of_lcdNibble:
  2154                           	callstack 0
  2155  000742                     PL20:
  2156                           	callstack 27
  2157  000742  4622               	rlncf	??_lcdNibble^0,f,c
  2158  000744  4622               	rlncf	??_lcdNibble^0,f,c
  2159  000746  5082               	movf	130,w,c	;volatile
  2160  000748  1822               	xorwf	??_lcdNibble^0,w,c
  2161  00074A  0012               	return	
  2162  00074C                     __end_ofPL20:
  2163                           	callstack 0
  2164                           
  2165 ;; *************** function ___lwmod *****************
  2166 ;; Defined at:
  2167 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.30\pic\sources\c90\common\lwmod.c"
  2168 ;; Parameters:    Size  Location     Type
  2169 ;;  dividend        2    7[COMRAM] unsigned int 
  2170 ;;  divisor         2    9[COMRAM] unsigned int 
  2171 ;; Auto vars:     Size  Location     Type
  2172 ;;  counter         1   11[COMRAM] unsigned char 
  2173 ;; Return value:  Size  Location     Type
  2174 ;;                  2    7[COMRAM] unsigned int 
  2175 ;; Registers used:
  2176 ;;		wreg, status,2, status,0
  2177 ;; Tracked objects:
  2178 ;;		On entry : 0/0
  2179 ;;		On exit  : 0/0
  2180 ;;		Unchanged: 0/0
  2181 ;; Data sizes:     COMRAM   BANK0   BANK1
  2182 ;;      Params:         4       0       0
  2183 ;;      Locals:         1       0       0
  2184 ;;      Temps:          0       0       0
  2185 ;;      Totals:         5       0       0
  2186 ;;Total ram usage:        5 bytes
  2187 ;; Hardware stack levels used:    1
  2188 ;; Hardware stack levels required when called:    1
  2189 ;; This function calls:
  2190 ;;		Nothing
  2191 ;; This function is called by:
  2192 ;;		_main
  2193 ;; This function uses a non-reentrant model
  2194 ;;
  2195                           
  2196                           	psect	text12
  2197  000828                     __ptext12:
  2198                           	callstack 0
  2199  000828                     ___lwmod:
  2200                           	callstack 29
  2201                           
  2202                           ;incstack = 0
  2203  000828  502B               	movf	___lwmod@divisor^0,w,c
  2204  00082A  102C               	iorwf	(___lwmod@divisor+1)^0,w,c
  2205  00082C  E017               	bz	l780
  2206  00082E  0E01               	movlw	1
  2207  000830  6E2D               	movwf	___lwmod@counter^0,c
  2208  000832  D004               	goto	l1748
  2209  000834                     l1746:
  2210  000834  90D8               	bcf	status,0,c
  2211  000836  362B               	rlcf	___lwmod@divisor^0,f,c
  2212  000838  362C               	rlcf	(___lwmod@divisor+1)^0,f,c
  2213  00083A  2A2D               	incf	___lwmod@counter^0,f,c
  2214  00083C                     l1748:
  2215  00083C  AE2C               	btfss	(___lwmod@divisor+1)^0,7,c
  2216  00083E  D7FA               	goto	l1746
  2217  000840                     u670:
  2218  000840  502B               	movf	___lwmod@divisor^0,w,c
  2219  000842  5C29               	subwf	___lwmod@dividend^0,w,c
  2220  000844  502C               	movf	(___lwmod@divisor+1)^0,w,c
  2221  000846  582A               	subwfb	(___lwmod@dividend+1)^0,w,c
  2222  000848  E304               	bnc	l1754
  2223  00084A  502B               	movf	___lwmod@divisor^0,w,c
  2224  00084C  5E29               	subwf	___lwmod@dividend^0,f,c
  2225  00084E  502C               	movf	(___lwmod@divisor+1)^0,w,c
  2226  000850  5A2A               	subwfb	(___lwmod@dividend+1)^0,f,c
  2227  000852                     l1754:
  2228  000852  90D8               	bcf	status,0,c
  2229  000854  322C               	rrcf	(___lwmod@divisor+1)^0,f,c
  2230  000856  322B               	rrcf	___lwmod@divisor^0,f,c
  2231  000858  2E2D               	decfsz	___lwmod@counter^0,f,c
  2232  00085A  D7F2               	goto	u670
  2233  00085C                     l780:
  2234  00085C  C029  F029         	movff	___lwmod@dividend,?___lwmod
  2235  000860  C02A  F02A         	movff	___lwmod@dividend+1,?___lwmod+1
  2236  000864  0012               	return		;funcret
  2237  000866                     __end_of___lwmod:
  2238                           	callstack 0
  2239                           
  2240 ;; *************** function ___lwdiv *****************
  2241 ;; Defined at:
  2242 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.30\pic\sources\c90\common\lwdiv.c"
  2243 ;; Parameters:    Size  Location     Type
  2244 ;;  dividend        2    0[COMRAM] unsigned int 
  2245 ;;  divisor         2    2[COMRAM] unsigned int 
  2246 ;; Auto vars:     Size  Location     Type
  2247 ;;  quotient        2    4[COMRAM] unsigned int 
  2248 ;;  counter         1    6[COMRAM] unsigned char 
  2249 ;; Return value:  Size  Location     Type
  2250 ;;                  2    0[COMRAM] unsigned int 
  2251 ;; Registers used:
  2252 ;;		wreg, status,2, status,0
  2253 ;; Tracked objects:
  2254 ;;		On entry : 0/0
  2255 ;;		On exit  : 0/0
  2256 ;;		Unchanged: 0/0
  2257 ;; Data sizes:     COMRAM   BANK0   BANK1
  2258 ;;      Params:         4       0       0
  2259 ;;      Locals:         3       0       0
  2260 ;;      Temps:          0       0       0
  2261 ;;      Totals:         7       0       0
  2262 ;;Total ram usage:        7 bytes
  2263 ;; Hardware stack levels used:    1
  2264 ;; Hardware stack levels required when called:    1
  2265 ;; This function calls:
  2266 ;;		Nothing
  2267 ;; This function is called by:
  2268 ;;		_main
  2269 ;; This function uses a non-reentrant model
  2270 ;;
  2271                           
  2272                           	psect	text13
  2273  00079E                     __ptext13:
  2274                           	callstack 0
  2275  00079E                     ___lwdiv:
  2276                           	callstack 29
  2277                           
  2278                           ;incstack = 0
  2279  00079E  6A26               	clrf	___lwdiv@quotient^0,c
  2280  0007A0  6A27               	clrf	(___lwdiv@quotient+1)^0,c
  2281  0007A2  5024               	movf	___lwdiv@divisor^0,w,c
  2282  0007A4  1025               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2283  0007A6  E01B               	bz	l770
  2284  0007A8  0E01               	movlw	1
  2285  0007AA  6E28               	movwf	___lwdiv@counter^0,c
  2286  0007AC  D004               	goto	l1728
  2287  0007AE                     l1726:
  2288  0007AE  90D8               	bcf	status,0,c
  2289  0007B0  3624               	rlcf	___lwdiv@divisor^0,f,c
  2290  0007B2  3625               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2291  0007B4  2A28               	incf	___lwdiv@counter^0,f,c
  2292  0007B6                     l1728:
  2293  0007B6  AE25               	btfss	(___lwdiv@divisor+1)^0,7,c
  2294  0007B8  D7FA               	goto	l1726
  2295  0007BA                     u640:
  2296  0007BA  90D8               	bcf	status,0,c
  2297  0007BC  3626               	rlcf	___lwdiv@quotient^0,f,c
  2298  0007BE  3627               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2299  0007C0  5024               	movf	___lwdiv@divisor^0,w,c
  2300  0007C2  5C22               	subwf	___lwdiv@dividend^0,w,c
  2301  0007C4  5025               	movf	(___lwdiv@divisor+1)^0,w,c
  2302  0007C6  5823               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2303  0007C8  E305               	bnc	l1738
  2304  0007CA  5024               	movf	___lwdiv@divisor^0,w,c
  2305  0007CC  5E22               	subwf	___lwdiv@dividend^0,f,c
  2306  0007CE  5025               	movf	(___lwdiv@divisor+1)^0,w,c
  2307  0007D0  5A23               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2308  0007D2  8026               	bsf	___lwdiv@quotient^0,0,c
  2309  0007D4                     l1738:
  2310  0007D4  90D8               	bcf	status,0,c
  2311  0007D6  3225               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2312  0007D8  3224               	rrcf	___lwdiv@divisor^0,f,c
  2313  0007DA  2E28               	decfsz	___lwdiv@counter^0,f,c
  2314  0007DC  D7EE               	goto	u640
  2315  0007DE                     l770:
  2316  0007DE  C026  F022         	movff	___lwdiv@quotient,?___lwdiv
  2317  0007E2  C027  F023         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2318  0007E6  0012               	return		;funcret
  2319  0007E8                     __end_of___lwdiv:
  2320                           	callstack 0
  2321                           
  2322 ;; *************** function _Main_init *****************
  2323 ;; Defined at:
  2324 ;;		line 151 in file "main.c"
  2325 ;; Parameters:    Size  Location     Type
  2326 ;;		None
  2327 ;; Auto vars:     Size  Location     Type
  2328 ;;		None
  2329 ;; Return value:  Size  Location     Type
  2330 ;;                  1    wreg      void 
  2331 ;; Registers used:
  2332 ;;		wreg, status,2, status,0, cstack
  2333 ;; Tracked objects:
  2334 ;;		On entry : 0/0
  2335 ;;		On exit  : 0/0
  2336 ;;		Unchanged: 0/0
  2337 ;; Data sizes:     COMRAM   BANK0   BANK1
  2338 ;;      Params:         0       0       0
  2339 ;;      Locals:         0       0       0
  2340 ;;      Temps:          0       0       0
  2341 ;;      Totals:         0       0       0
  2342 ;;Total ram usage:        0 bytes
  2343 ;; Hardware stack levels used:    1
  2344 ;; Hardware stack levels required when called:    4
  2345 ;; This function calls:
  2346 ;;		_init_ds18b20
  2347 ;; This function is called by:
  2348 ;;		_main
  2349 ;; This function uses a non-reentrant model
  2350 ;;
  2351                           
  2352                           	psect	text14
  2353  00074C                     __ptext14:
  2354                           	callstack 0
  2355  00074C                     _Main_init:
  2356                           	callstack 26
  2357                           
  2358                           ;main.c: 154: PORTA = 0;
  2359                           
  2360                           ;incstack = 0
  2361  00074C  6A80               	clrf	128,c	;volatile
  2362                           
  2363                           ;main.c: 155: LATA = 0;
  2364  00074E  6A89               	clrf	137,c	;volatile
  2365                           
  2366                           ;main.c: 156: TRISA = 0;
  2367  000750  6A92               	clrf	146,c	;volatile
  2368                           
  2369                           ;main.c: 157: PORTB = 0;
  2370  000752  6A81               	clrf	129,c	;volatile
  2371                           
  2372                           ;main.c: 158: LATB = 0;
  2373  000754  6A8A               	clrf	138,c	;volatile
  2374                           
  2375                           ;main.c: 159: TRISB = 0b00000110;
  2376  000756  0E06               	movlw	6
  2377  000758  6E93               	movwf	147,c	;volatile
  2378                           
  2379                           ;main.c: 160: PORTC = 0;
  2380  00075A  6A82               	clrf	130,c	;volatile
  2381                           
  2382                           ;main.c: 161: LATC = 0;
  2383  00075C  6A8B               	clrf	139,c	;volatile
  2384                           
  2385                           ;main.c: 162: TRISC = 0;
  2386  00075E  6A94               	clrf	148,c	;volatile
  2387                           
  2388                           ;main.c: 163: ADCON1bits.PCFG = 0b1111;
  2389  000760  0E0F               	movlw	15
  2390  000762  12C1               	iorwf	193,f,c	;volatile
  2391                           
  2392                           ;main.c: 165: PORTAbits.RA6 = 1;
  2393  000764  8C80               	bsf	128,6,c	;volatile
  2394                           
  2395                           ;main.c: 166: init_ds18b20();
  2396  000766  EC9B  F004         	call	_init_ds18b20	;wreg free
  2397                           
  2398                           ;main.c: 167: T1CON = 0b10000000;
  2399  00076A  0E80               	movlw	128
  2400  00076C  6ECD               	movwf	205,c	;volatile
  2401                           
  2402                           ;main.c: 169: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
  2403  00076E  0E3C               	movlw	60
  2404  000770  6ECF               	movwf	207,c	;volatile
  2405                           
  2406                           ;main.c: 170: TMR1L = ((unsigned char)((15536)&0xFF));
  2407  000772  0EB0               	movlw	176
  2408  000774  6ECE               	movwf	206,c	;volatile
  2409                           
  2410                           ;main.c: 172: T0CONbits.T0PS = 0b000;
  2411  000776  0EF8               	movlw	-8
  2412  000778  16D5               	andwf	213,f,c	;volatile
  2413                           
  2414                           ;main.c: 173: T0CONbits.PSA = 1;
  2415  00077A  86D5               	bsf	213,3,c	;volatile
  2416                           
  2417                           ;main.c: 174: T0CONbits.T08BIT = 0;
  2418  00077C  9CD5               	bcf	213,6,c	;volatile
  2419                           
  2420                           ;main.c: 175: T0CONbits.T0CS = 0;
  2421  00077E  9AD5               	bcf	213,5,c	;volatile
  2422                           
  2423                           ;main.c: 176: T0CONbits.TMR0ON = 1;
  2424  000780  8ED5               	bsf	213,7,c	;volatile
  2425                           
  2426                           ;main.c: 177: TMR0H = ((unsigned char)(((45536)>>8)&0xFF));
  2427  000782  0EB1               	movlw	177
  2428  000784  6ED7               	movwf	215,c	;volatile
  2429                           
  2430                           ;main.c: 178: TMR0L = ((unsigned char)((45536)&0xFF));
  2431  000786  0EE0               	movlw	224
  2432  000788  6ED6               	movwf	214,c	;volatile
  2433                           
  2434                           ;main.c: 179: INTCONbits.T0IE = 1;
  2435  00078A  8AF2               	bsf	242,5,c	;volatile
  2436                           
  2437                           ;main.c: 180: INTCON2bits.RBPU = 0;
  2438  00078C  9EF1               	bcf	241,7,c	;volatile
  2439                           
  2440                           ;main.c: 182: OSCCONbits.SCS0 = 0;
  2441  00078E  90D3               	bcf	211,0,c	;volatile
  2442                           
  2443                           ;main.c: 183: OSCCONbits.SCS1 = 1;
  2444  000790  82D3               	bsf	211,1,c	;volatile
  2445                           
  2446                           ;main.c: 184: OSCCONbits.IRCF = 0b111;
  2447  000792  0E70               	movlw	112
  2448  000794  12D3               	iorwf	211,f,c	;volatile
  2449                           
  2450                           ;main.c: 186: PIE1bits.TMR1IE = 1;
  2451  000796  809D               	bsf	157,0,c	;volatile
  2452                           
  2453                           ;main.c: 187: INTCONbits.PEIE = 1;
  2454  000798  8CF2               	bsf	242,6,c	;volatile
  2455                           
  2456                           ;main.c: 188: INTCONbits.GIE = 1;
  2457  00079A  8EF2               	bsf	242,7,c	;volatile
  2458  00079C  0C70               	retlw	112	;funcret
  2459  00079E                     __end_of_Main_init:
  2460                           	callstack 0
  2461                           
  2462 ;; *************** function _init_ds18b20 *****************
  2463 ;; Defined at:
  2464 ;;		line 13 in file "ds18b20.c"
  2465 ;; Parameters:    Size  Location     Type
  2466 ;;		None
  2467 ;; Auto vars:     Size  Location     Type
  2468 ;;		None
  2469 ;; Return value:  Size  Location     Type
  2470 ;;                  1    wreg      void 
  2471 ;; Registers used:
  2472 ;;		wreg, status,2, status,0, cstack
  2473 ;; Tracked objects:
  2474 ;;		On entry : 0/0
  2475 ;;		On exit  : 0/0
  2476 ;;		Unchanged: 0/0
  2477 ;; Data sizes:     COMRAM   BANK0   BANK1
  2478 ;;      Params:         0       0       0
  2479 ;;      Locals:         0       0       0
  2480 ;;      Temps:          0       0       0
  2481 ;;      Totals:         0       0       0
  2482 ;;Total ram usage:        0 bytes
  2483 ;; Hardware stack levels used:    1
  2484 ;; Hardware stack levels required when called:    3
  2485 ;; This function calls:
  2486 ;;		_ow_reset
  2487 ;;		_write_byte
  2488 ;; This function is called by:
  2489 ;;		_Main_init
  2490 ;; This function uses a non-reentrant model
  2491 ;;
  2492                           
  2493                           	psect	text15
  2494  000936                     __ptext15:
  2495                           	callstack 0
  2496  000936                     _init_ds18b20:
  2497                           	callstack 26
  2498                           
  2499                           ;ds18b20.c: 15: if (!ow_reset())
  2500                           
  2501                           ;incstack = 0
  2502  000936  EC83  F004         	call	_ow_reset	;wreg free
  2503  00093A  0900               	iorlw	0
  2504  00093C  A4D8               	btfss	status,2,c
  2505  00093E  0012               	return	
  2506                           
  2507                           ;ds18b20.c: 16: {;ds18b20.c: 18: write_byte(0xCC);
  2508  000940  0ECC               	movlw	204
  2509  000942  EC4E  F004         	call	_write_byte
  2510                           
  2511                           ;ds18b20.c: 19: write_byte(0x4E);
  2512  000946  0E4E               	movlw	78
  2513  000948  EC4E  F004         	call	_write_byte
  2514                           
  2515                           ;ds18b20.c: 20: write_byte(0x00);
  2516  00094C  0E00               	movlw	0
  2517  00094E  EC4E  F004         	call	_write_byte
  2518                           
  2519                           ;ds18b20.c: 21: write_byte(0x00);
  2520  000952  0E00               	movlw	0
  2521  000954  EC4E  F004         	call	_write_byte
  2522                           
  2523                           ;ds18b20.c: 22: write_byte(0x7F);
  2524  000958  0E7F               	movlw	127
  2525  00095A  EF4E  F004         	goto	_write_byte
  2526  00095E                     __end_of_init_ds18b20:
  2527                           	callstack 0
  2528                           
  2529 ;; *************** function _write_byte *****************
  2530 ;; Defined at:
  2531 ;;		line 66 in file "onewire.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;  val             1    wreg     unsigned char 
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;  val             1    3[COMRAM] unsigned char 
  2536 ;;  i               1    5[COMRAM] unsigned char 
  2537 ;;  temp            1    4[COMRAM] unsigned char 
  2538 ;; Return value:  Size  Location     Type
  2539 ;;                  1    wreg      void 
  2540 ;; Registers used:
  2541 ;;		wreg, status,2, status,0, cstack
  2542 ;; Tracked objects:
  2543 ;;		On entry : 0/0
  2544 ;;		On exit  : 0/0
  2545 ;;		Unchanged: 0/0
  2546 ;; Data sizes:     COMRAM   BANK0   BANK1
  2547 ;;      Params:         0       0       0
  2548 ;;      Locals:         3       0       0
  2549 ;;      Temps:          2       0       0
  2550 ;;      Totals:         5       0       0
  2551 ;;Total ram usage:        5 bytes
  2552 ;; Hardware stack levels used:    1
  2553 ;; Hardware stack levels required when called:    2
  2554 ;; This function calls:
  2555 ;;		_write_bit
  2556 ;; This function is called by:
  2557 ;;		_init_ds18b20
  2558 ;;		_readTemp_Single
  2559 ;; This function uses a non-reentrant model
  2560 ;;
  2561                           
  2562                           	psect	text16
  2563  00089C                     __ptext16:
  2564                           	callstack 0
  2565  00089C                     _write_byte:
  2566                           	callstack 27
  2567                           
  2568                           ;incstack = 0
  2569                           ;write_byte@val stored from wreg
  2570  00089C  6E25               	movwf	write_byte@val^0,c
  2571                           
  2572                           ;onewire.c: 68: uint8_t i;;onewire.c: 69: uint8_t temp;;onewire.c: 71: for (i=0;i<8;i++)
  2573  00089E  6A27               	clrf	write_byte@i^0,c
  2574  0008A0                     l1076:
  2575                           
  2576                           ;onewire.c: 72: {;onewire.c: 73: temp = val >> i;
  2577  0008A0  C027  F023         	movff	write_byte@i,??_write_byte
  2578  0008A4  C025  F024         	movff	write_byte@val,??_write_byte+1
  2579  0008A8  2A23               	incf	??_write_byte^0,f,c
  2580  0008AA  D002               	goto	u104
  2581  0008AC                     u105:
  2582  0008AC  90D8               	bcf	status,0,c
  2583  0008AE  3224               	rrcf	(??_write_byte+1)^0,f,c
  2584  0008B0                     u104:
  2585  0008B0  2E23               	decfsz	??_write_byte^0,f,c
  2586  0008B2  D7FC               	goto	u105
  2587  0008B4  5024               	movf	(??_write_byte+1)^0,w,c
  2588  0008B6  6E26               	movwf	write_byte@temp^0,c
  2589                           
  2590                           ;onewire.c: 74: temp &= 0x01;
  2591  0008B8  0E01               	movlw	1
  2592  0008BA  1626               	andwf	write_byte@temp^0,f,c
  2593                           
  2594                           ;onewire.c: 75: write_bit(temp);
  2595  0008BC  5026               	movf	write_byte@temp^0,w,c
  2596  0008BE  ECD3  F004         	call	_write_bit
  2597  0008C2  2A27               	incf	write_byte@i^0,f,c
  2598  0008C4  0E07               	movlw	7
  2599  0008C6  6427               	cpfsgt	write_byte@i^0,c
  2600  0008C8  D7EB               	goto	l1076
  2601                           
  2602                           ;onewire.c: 76: };onewire.c: 78: _delay((unsigned long)((105)*(8000000/4000000.0)));
  2603  0008CA  0E46               	movlw	70
  2604  0008CC                     u987:
  2605  0008CC  2EE8               	decfsz	wreg,f,c
  2606  0008CE  D7FE               	bra	u987
  2607  0008D0  0012               	return		;funcret
  2608  0008D2                     __end_of_write_byte:
  2609                           	callstack 0
  2610                           
  2611 ;; *************** function _write_bit *****************
  2612 ;; Defined at:
  2613 ;;		line 34 in file "onewire.c"
  2614 ;; Parameters:    Size  Location     Type
  2615 ;;  bitval          1    wreg     unsigned char 
  2616 ;; Auto vars:     Size  Location     Type
  2617 ;;  bitval          1    0[COMRAM] unsigned char 
  2618 ;; Return value:  Size  Location     Type
  2619 ;;                  1    wreg      void 
  2620 ;; Registers used:
  2621 ;;		wreg, status,2, status,0, cstack
  2622 ;; Tracked objects:
  2623 ;;		On entry : 0/0
  2624 ;;		On exit  : 0/0
  2625 ;;		Unchanged: 0/0
  2626 ;; Data sizes:     COMRAM   BANK0   BANK1
  2627 ;;      Params:         0       0       0
  2628 ;;      Locals:         1       0       0
  2629 ;;      Temps:          0       0       0
  2630 ;;      Totals:         1       0       0
  2631 ;;Total ram usage:        1 bytes
  2632 ;; Hardware stack levels used:    1
  2633 ;; Hardware stack levels required when called:    1
  2634 ;; This function calls:
  2635 ;;		Nothing
  2636 ;; This function is called by:
  2637 ;;		_write_byte
  2638 ;; This function uses a non-reentrant model
  2639 ;;
  2640                           
  2641                           	psect	text17
  2642  0009A6                     __ptext17:
  2643                           	callstack 0
  2644  0009A6                     _write_bit:
  2645                           	callstack 27
  2646                           
  2647                           ;incstack = 0
  2648                           ;write_bit@bitval stored from wreg
  2649  0009A6  6E22               	movwf	write_bit@bitval^0,c
  2650                           
  2651                           ;onewire.c: 36: PORTAbits.RA6 = 0;
  2652  0009A8  9C80               	bcf	128,6,c	;volatile
  2653                           
  2654                           ;onewire.c: 37: TRISAbits.TRISA6 = 0;
  2655  0009AA  9C92               	bcf	146,6,c	;volatile
  2656                           
  2657                           ;onewire.c: 38: if(bitval == 1) {
  2658  0009AC  0422               	decf	write_bit@bitval^0,w,c
  2659  0009AE  E104               	bnz	l1052
  2660                           
  2661                           ;onewire.c: 39: _delay((unsigned long)((2)*(8000000/4000000.0)));
  2662  0009B0  D000               	nop2		;2 cycle nop
  2663  0009B2  D000               	nop2		;2 cycle nop
  2664                           
  2665                           ;onewire.c: 40: PORTAbits.RA6 = 1;
  2666  0009B4  8C80               	bsf	128,6,c	;volatile
  2667                           
  2668                           ;onewire.c: 41: TRISAbits.TRISA6 = 1;
  2669  0009B6  8C92               	bsf	146,6,c	;volatile
  2670  0009B8                     l1052:
  2671                           
  2672                           ;onewire.c: 42: };onewire.c: 43: _delay((unsigned long)((105)*(8000000/4000000.0)));
  2673  0009B8  0E46               	movlw	70
  2674  0009BA                     u997:
  2675  0009BA  2EE8               	decfsz	wreg,f,c
  2676  0009BC  D7FE               	bra	u997
  2677                           
  2678                           ;onewire.c: 44: PORTAbits.RA6 = 1;
  2679  0009BE  8C80               	bsf	128,6,c	;volatile
  2680                           
  2681                           ;onewire.c: 45: TRISAbits.TRISA6 = 1;
  2682  0009C0  8C92               	bsf	146,6,c	;volatile
  2683  0009C2  0012               	return		;funcret
  2684  0009C4                     __end_of_write_bit:
  2685                           	callstack 0
  2686                           
  2687 ;; *************** function _ow_reset *****************
  2688 ;; Defined at:
  2689 ;;		line 5 in file "onewire.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;		None
  2692 ;; Auto vars:     Size  Location     Type
  2693 ;;  presence        1    0[COMRAM] unsigned char 
  2694 ;; Return value:  Size  Location     Type
  2695 ;;                  1    wreg      unsigned char 
  2696 ;; Registers used:
  2697 ;;		wreg, status,2
  2698 ;; Tracked objects:
  2699 ;;		On entry : 0/0
  2700 ;;		On exit  : 0/0
  2701 ;;		Unchanged: 0/0
  2702 ;; Data sizes:     COMRAM   BANK0   BANK1
  2703 ;;      Params:         0       0       0
  2704 ;;      Locals:         1       0       0
  2705 ;;      Temps:          0       0       0
  2706 ;;      Totals:         1       0       0
  2707 ;;Total ram usage:        1 bytes
  2708 ;; Hardware stack levels used:    1
  2709 ;; Hardware stack levels required when called:    1
  2710 ;; This function calls:
  2711 ;;		Nothing
  2712 ;; This function is called by:
  2713 ;;		_init_ds18b20
  2714 ;;		_readTemp_Single
  2715 ;; This function uses a non-reentrant model
  2716 ;;
  2717                           
  2718                           	psect	text18
  2719  000906                     __ptext18:
  2720                           	callstack 0
  2721  000906                     _ow_reset:
  2722                           	callstack 28
  2723                           
  2724                           ;onewire.c: 7: uint8_t presence;;onewire.c: 8: PORTAbits.RA6 = 0;
  2725                           
  2726                           ;incstack = 0
  2727  000906  9C80               	bcf	128,6,c	;volatile
  2728                           
  2729                           ;onewire.c: 9: TRISAbits.TRISA6 = 0;
  2730  000908  9C92               	bcf	146,6,c	;volatile
  2731                           
  2732                           ;onewire.c: 10: _delay((unsigned long)((500)*(8000000/4000000.0)));
  2733  00090A  0EC8               	movlw	200
  2734  00090C                     u1007:
  2735  00090C  D000               	nop2	
  2736  00090E  2EE8               	decfsz	wreg,f,c
  2737  000910  D7FD               	bra	u1007
  2738                           
  2739                           ;onewire.c: 11: PORTAbits.RA6 = 1;
  2740  000912  8C80               	bsf	128,6,c	;volatile
  2741                           
  2742                           ;onewire.c: 12: TRISAbits.TRISA6 = 1;
  2743  000914  8C92               	bsf	146,6,c	;volatile
  2744                           
  2745                           ;onewire.c: 13: _delay((unsigned long)((100)*(8000000/4000000.0)));
  2746  000916  0E42               	movlw	66
  2747  000918                     u1017:
  2748  000918  2EE8               	decfsz	wreg,f,c
  2749  00091A  D7FE               	bra	u1017
  2750  00091C  D000               	nop2	
  2751                           
  2752                           ;onewire.c: 14: presence = PORTAbits.RA6;
  2753  00091E  0E00               	movlw	0
  2754  000920  BC80               	btfsc	128,6,c	;volatile
  2755  000922  0E01               	movlw	1
  2756  000924  6E22               	movwf	ow_reset@presence^0,c
  2757                           
  2758                           ;onewire.c: 15: _delay((unsigned long)((424)*(8000000/4000000.0)));
  2759  000926  0EA9               	movlw	169
  2760  000928                     u1027:
  2761  000928  D000               	nop2	
  2762  00092A  2EE8               	decfsz	wreg,f,c
  2763  00092C  D7FD               	bra	u1027
  2764  00092E  D000               	nop2	
  2765  000930  F000               	nop	
  2766                           
  2767                           ;onewire.c: 16: return(presence);
  2768  000932  5022               	movf	ow_reset@presence^0,w,c
  2769  000934  0012               	return		;funcret
  2770  000936                     __end_of_ow_reset:
  2771                           	callstack 0
  2772                           
  2773 ;; *************** function _Delay_ms *****************
  2774 ;; Defined at:
  2775 ;;		line 193 in file "main.c"
  2776 ;; Parameters:    Size  Location     Type
  2777 ;;  delay           2    0[COMRAM] unsigned int 
  2778 ;; Auto vars:     Size  Location     Type
  2779 ;;  i               2    3[COMRAM] unsigned int 
  2780 ;; Return value:  Size  Location     Type
  2781 ;;                  1    wreg      void 
  2782 ;; Registers used:
  2783 ;;		wreg, status,2, status,0
  2784 ;; Tracked objects:
  2785 ;;		On entry : 0/0
  2786 ;;		On exit  : 0/0
  2787 ;;		Unchanged: 0/0
  2788 ;; Data sizes:     COMRAM   BANK0   BANK1
  2789 ;;      Params:         2       0       0
  2790 ;;      Locals:         2       0       0
  2791 ;;      Temps:          1       0       0
  2792 ;;      Totals:         5       0       0
  2793 ;;Total ram usage:        5 bytes
  2794 ;; Hardware stack levels used:    1
  2795 ;; Hardware stack levels required when called:    1
  2796 ;; This function calls:
  2797 ;;		Nothing
  2798 ;; This function is called by:
  2799 ;;		_main
  2800 ;; This function uses a non-reentrant model
  2801 ;;
  2802                           
  2803                           	psect	text19
  2804  000982                     __ptext19:
  2805                           	callstack 0
  2806  000982                     _Delay_ms:
  2807                           	callstack 29
  2808                           
  2809                           ;main.c: 194: for (uint16_t i = 0; i <= delay; i++)
  2810                           
  2811                           ;incstack = 0
  2812  000982  6A25               	clrf	Delay_ms@i^0,c
  2813  000984  6A26               	clrf	(Delay_ms@i+1)^0,c
  2814  000986  D009               	goto	l117
  2815  000988                     l1654:
  2816                           
  2817                           ;main.c: 195: _delay((unsigned long)((1)*(8000000/4000.0)));
  2818  000988  0E03               	movlw	3
  2819  00098A  6E24               	movwf	??_Delay_ms^0,c
  2820  00098C  0E98               	movlw	152
  2821  00098E                     u1037:
  2822  00098E  2EE8               	decfsz	wreg,f,c
  2823  000990  D7FE               	bra	u1037
  2824  000992  2E24               	decfsz	??_Delay_ms^0,f,c
  2825  000994  D7FC               	bra	u1037
  2826  000996  4A25               	infsnz	Delay_ms@i^0,f,c
  2827  000998  2A26               	incf	(Delay_ms@i+1)^0,f,c
  2828  00099A                     l117:
  2829  00099A  5025               	movf	Delay_ms@i^0,w,c
  2830  00099C  5C22               	subwf	Delay_ms@delay^0,w,c
  2831  00099E  5026               	movf	(Delay_ms@i+1)^0,w,c
  2832  0009A0  5823               	subwfb	(Delay_ms@delay+1)^0,w,c
  2833  0009A2  E2F2               	bc	l1654
  2834  0009A4  0012               	return		;funcret
  2835  0009A6                     __end_of_Delay_ms:
  2836                           	callstack 0
  2837                           
  2838 ;; *************** function _myInt *****************
  2839 ;; Defined at:
  2840 ;;		line 197 in file "main.c"
  2841 ;; Parameters:    Size  Location     Type
  2842 ;;		None
  2843 ;; Auto vars:     Size  Location     Type
  2844 ;;		None
  2845 ;; Return value:  Size  Location     Type
  2846 ;;                  1    wreg      void 
  2847 ;; Registers used:
  2848 ;;		wreg, status,2, status,0
  2849 ;; Tracked objects:
  2850 ;;		On entry : 0/0
  2851 ;;		On exit  : 0/0
  2852 ;;		Unchanged: 0/0
  2853 ;; Data sizes:     COMRAM   BANK0   BANK1
  2854 ;;      Params:         0       0       0
  2855 ;;      Locals:         0       0       0
  2856 ;;      Temps:          0       0       0
  2857 ;;      Totals:         0       0       0
  2858 ;;Total ram usage:        0 bytes
  2859 ;; Hardware stack levels used:    1
  2860 ;; This function calls:
  2861 ;;		Nothing
  2862 ;; This function is called by:
  2863 ;;		Interrupt level 2
  2864 ;; This function uses a non-reentrant model
  2865 ;;
  2866                           
  2867                           	psect	intcode
  2868  000008                     __pintcode:
  2869                           	callstack 0
  2870  000008                     _myInt:
  2871                           	callstack 26
  2872                           
  2873                           ;incstack = 0
  2874  000008  8235               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2875                           
  2876                           ;main.c: 198: if (PIR1bits.TMR1IF == 1) {
  2877  00000A  A09E               	btfss	158,0,c	;volatile
  2878  00000C  D00D               	goto	i2l1570
  2879                           
  2880                           ;main.c: 199: PIR1bits.TMR1IF = 0;
  2881  00000E  909E               	bcf	158,0,c	;volatile
  2882                           
  2883                           ;main.c: 200: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
  2884  000010  0E3C               	movlw	60
  2885  000012  6ECF               	movwf	207,c	;volatile
  2886                           
  2887                           ;main.c: 201: TMR1L = ((unsigned char)((15536)&0xFF));
  2888  000014  0EB0               	movlw	176
  2889  000016  6ECE               	movwf	206,c	;volatile
  2890                           
  2891                           ;main.c: 202: if (++timer_val >= 30)
  2892  000018  2A21               	incf	_timer_val^0,f,c
  2893  00001A  0E1D               	movlw	29
  2894  00001C  6421               	cpfsgt	_timer_val^0,c
  2895  00001E  D004               	goto	i2l1570
  2896                           
  2897                           ;main.c: 203: {;main.c: 204: timer_val = 0;
  2898  000020  6A21               	clrf	_timer_val^0,c
  2899                           
  2900                           ;main.c: 205: time_flag = 1;
  2901  000022  0E01               	movlw	1
  2902  000024  6E20               	movwf	_time_flag^0,c
  2903                           
  2904                           ;main.c: 206: T1CONbits.TMR1ON = 0;
  2905  000026  90CD               	bcf	205,0,c	;volatile
  2906  000028                     i2l1570:
  2907                           
  2908                           ;main.c: 208: };main.c: 209: };main.c: 210: if (INTCONbits.T0IF == 1) {
  2909  000028  A4F2               	btfss	242,2,c	;volatile
  2910  00002A  D006               	goto	i2l128
  2911                           
  2912                           ;main.c: 211: INTCONbits.T0IF = 0;
  2913  00002C  94F2               	bcf	242,2,c	;volatile
  2914                           
  2915                           ;main.c: 212: TMR0H = ((unsigned char)(((45536)>>8)&0xFF));
  2916  00002E  0EB1               	movlw	177
  2917  000030  6ED7               	movwf	215,c	;volatile
  2918                           
  2919                           ;main.c: 213: TMR0L = ((unsigned char)((45536)&0xFF));
  2920  000032  0EE0               	movlw	224
  2921  000034  6ED6               	movwf	214,c	;volatile
  2922                           
  2923                           ;main.c: 214: read_key = 1;
  2924  000036  8034               	bsf	(_read_key/(0+8))^0,_read_key& (0+7),c
  2925  000038                     i2l128:
  2926  000038  9235               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2927  00003A  0011               	retfie		f
  2928  00003C                     __end_of_myInt:
  2929                           	callstack 0
  2930                           
  2931                           	psect	rparam
  2932  0000                     
  2933                           	psect	temp
  2934  000035                     btemp:
  2935                           	callstack 0
  2936  000035                     	ds	1
  2937  0000                     int$flags	set	btemp
  2938  0000                     wtemp8	set	btemp+1
  2939  0000                     ttemp5	set	btemp+1
  2940  0000                     ttemp6	set	btemp+4
  2941  0000                     ttemp7	set	btemp+8
  2942                           
  2943                           	psect	idloc
  2944                           
  2945                           ;Config register IDLOC0 @ 0x200000
  2946                           ;	unspecified, using default values
  2947  200000                     	org	2097152
  2948  200000  FF                 	db	255
  2949                           
  2950                           ;Config register IDLOC1 @ 0x200001
  2951                           ;	unspecified, using default values
  2952  200001                     	org	2097153
  2953  200001  FF                 	db	255
  2954                           
  2955                           ;Config register IDLOC2 @ 0x200002
  2956                           ;	unspecified, using default values
  2957  200002                     	org	2097154
  2958  200002  FF                 	db	255
  2959                           
  2960                           ;Config register IDLOC3 @ 0x200003
  2961                           ;	unspecified, using default values
  2962  200003                     	org	2097155
  2963  200003  FF                 	db	255
  2964                           
  2965                           ;Config register IDLOC4 @ 0x200004
  2966                           ;	unspecified, using default values
  2967  200004                     	org	2097156
  2968  200004  FF                 	db	255
  2969                           
  2970                           ;Config register IDLOC5 @ 0x200005
  2971                           ;	unspecified, using default values
  2972  200005                     	org	2097157
  2973  200005  FF                 	db	255
  2974                           
  2975                           ;Config register IDLOC6 @ 0x200006
  2976                           ;	unspecified, using default values
  2977  200006                     	org	2097158
  2978  200006  FF                 	db	255
  2979                           
  2980                           ;Config register IDLOC7 @ 0x200007
  2981                           ;	unspecified, using default values
  2982  200007                     	org	2097159
  2983  200007  FF                 	db	255
  2984                           
  2985                           	psect	config
  2986                           
  2987                           ; Padding undefined space
  2988  300000                     	org	3145728
  2989  300000  FF                 	db	255
  2990                           
  2991                           ;Config register CONFIG1H @ 0x300001
  2992                           ;	Oscillator Selection bits
  2993                           ;	OSC = INTIO2, Internal RC oscillator, port function on RA6 and port function on RA7
  2994                           ;	Fail-Safe Clock Monitor Enable bit
  2995                           ;	FSCM = OFF, Fail-Safe Clock Monitor disabled
  2996                           ;	Internal/External Switchover bit
  2997                           ;	IESO = OFF, Internal/External Switchover mode disabled
  2998  300001                     	org	3145729
  2999  300001  08                 	db	8
  3000                           
  3001                           ;Config register CONFIG2L @ 0x300002
  3002                           ;	Power-up Timer enable bit
  3003                           ;	PWRT = ON, PWRT enabled
  3004                           ;	Brown-out Reset enable bit
  3005                           ;	BOR = ON, Brown-out Reset enabled
  3006                           ;	Brown-out Reset Voltage bits
  3007                           ;	BORV = 27, VBOR set to 2.7V
  3008  300002                     	org	3145730
  3009  300002  0A                 	db	10
  3010                           
  3011                           ;Config register CONFIG2H @ 0x300003
  3012                           ;	Watchdog Timer Enable bit
  3013                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3014                           ;	Watchdog Timer Postscale Select bits
  3015                           ;	WDTPS = 32768, 1:32768
  3016  300003                     	org	3145731
  3017  300003  1E                 	db	30
  3018                           
  3019                           ; Padding undefined space
  3020  300004                     	org	3145732
  3021  300004  FF                 	db	255
  3022                           
  3023                           ;Config register CONFIG3H @ 0x300005
  3024                           ;	CCP2 MUX bit
  3025                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  3026                           ;	PORTB A/D Enable bit
  3027                           ;	PBAD = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  3028                           ;	MCLR Pin Enable bit
  3029                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3030  300005                     	org	3145733
  3031  300005  81                 	db	129
  3032                           
  3033                           ;Config register CONFIG4L @ 0x300006
  3034                           ;	Stack Full/Underflow Reset Enable bit
  3035                           ;	STVR = ON, Stack full/underflow will cause Reset
  3036                           ;	Single-Supply ICSP Enable bit
  3037                           ;	LVP = OFF, Single-Supply ICSP disabled
  3038                           ;	Background Debugger Enable bit
  3039                           ;	DEBUG = 0x1, unprogrammed default
  3040  300006                     	org	3145734
  3041  300006  81                 	db	129
  3042                           
  3043                           ; Padding undefined space
  3044  300007                     	org	3145735
  3045  300007  FF                 	db	255
  3046                           
  3047                           ;Config register CONFIG5L @ 0x300008
  3048                           ;	Code Protection bit
  3049                           ;	CP0 = OFF, Block 0 (000200-0007FFh) not code-protected
  3050                           ;	Code Protection bit
  3051                           ;	CP1 = OFF, Block 1 (000800-000FFFh) not code-protected
  3052                           ;	Code Protection bit
  3053                           ;	CP2 = OFF, Block 2 (001000-0017FFh) not code-protected
  3054                           ;	Code Protection bit
  3055                           ;	CP3 = OFF, Block 3 (001800-001FFFh) not code-protected
  3056  300008                     	org	3145736
  3057  300008  0F                 	db	15
  3058                           
  3059                           ;Config register CONFIG5H @ 0x300009
  3060                           ;	Boot Block Code Protection bit
  3061                           ;	CPB = OFF, Boot block (000000-0001FFh) is not code-protected
  3062                           ;	Data EEPROM Code Protection bit
  3063                           ;	CPD = OFF, Data EEPROM is not code-protected
  3064  300009                     	org	3145737
  3065  300009  C0                 	db	192
  3066                           
  3067                           ;Config register CONFIG6L @ 0x30000A
  3068                           ;	Write Protection bit
  3069                           ;	WRT0 = OFF, Block 0 (000200-0007FFh) not write-protected
  3070                           ;	Write Protection bit
  3071                           ;	WRT1 = OFF, Block 1 (000800-000FFFh) not write-protected
  3072                           ;	Write Protection bit
  3073                           ;	WRT2 = OFF, Block 2 (001000-0017FFh) not write-protected
  3074                           ;	Write Protection bit
  3075                           ;	WRT3 = OFF, Block 3 (001800-001FFFh) not write-protected
  3076  30000A                     	org	3145738
  3077  30000A  0F                 	db	15
  3078                           
  3079                           ;Config register CONFIG6H @ 0x30000B
  3080                           ;	Configuration Register Write Protection bit
  3081                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  3082                           ;	Boot Block Write Protection bit
  3083                           ;	WRTB = OFF, Boot block (000000-0001FFh) is not write-protected
  3084                           ;	Data EEPROM Write Protection bit
  3085                           ;	WRTD = OFF, Data EEPROM is not write-protected
  3086  30000B                     	org	3145739
  3087  30000B  E0                 	db	224
  3088                           
  3089                           ;Config register CONFIG7L @ 0x30000C
  3090                           ;	Table Read Protection bit
  3091                           ;	EBTR0 = OFF, Block 0 (000200-0007FFh) not protected from table reads executed in other
      +                           blocks
  3092                           ;	Table Read Protection bit
  3093                           ;	EBTR1 = OFF, Block 1 (000800-000FFFh) not protected from table reads executed in other
      +                           blocks
  3094                           ;	Table Read Protection bit
  3095                           ;	EBTR2 = OFF, Block 2 (001000-0017FFh) not protected from table reads executed in other
      +                           blocks
  3096                           ;	Table Read Protection bit
  3097                           ;	EBTR3 = OFF, Block 3 (001800-001FFFh) not protected from table reads executed in other
      +                           blocks
  3098  30000C                     	org	3145740
  3099  30000C  0F                 	db	15
  3100                           
  3101                           ;Config register CONFIG7H @ 0x30000D
  3102                           ;	Boot Block Table Read Protection bit
  3103                           ;	EBTRB = OFF, Boot block (000000-0001FFh) is not protected from table reads executed in
      +                           other blocks
  3104  30000D                     	org	3145741
  3105  30000D  40                 	db	64
  3106                           tosu	equ	0xFFF
  3107                           tosh	equ	0xFFE
  3108                           tosl	equ	0xFFD
  3109                           stkptr	equ	0xFFC
  3110                           pclatu	equ	0xFFB
  3111                           pclath	equ	0xFFA
  3112                           pcl	equ	0xFF9
  3113                           tblptru	equ	0xFF8
  3114                           tblptrh	equ	0xFF7
  3115                           tblptrl	equ	0xFF6
  3116                           tablat	equ	0xFF5
  3117                           prodh	equ	0xFF4
  3118                           prodl	equ	0xFF3
  3119                           indf0	equ	0xFEF
  3120                           postinc0	equ	0xFEE
  3121                           postdec0	equ	0xFED
  3122                           preinc0	equ	0xFEC
  3123                           plusw0	equ	0xFEB
  3124                           fsr0h	equ	0xFEA
  3125                           fsr0l	equ	0xFE9
  3126                           wreg	equ	0xFE8
  3127                           indf1	equ	0xFE7
  3128                           postinc1	equ	0xFE6
  3129                           postdec1	equ	0xFE5
  3130                           preinc1	equ	0xFE4
  3131                           plusw1	equ	0xFE3
  3132                           fsr1h	equ	0xFE2
  3133                           fsr1l	equ	0xFE1
  3134                           bsr	equ	0xFE0
  3135                           indf2	equ	0xFDF
  3136                           postinc2	equ	0xFDE
  3137                           postdec2	equ	0xFDD
  3138                           preinc2	equ	0xFDC
  3139                           plusw2	equ	0xFDB
  3140                           fsr2h	equ	0xFDA
  3141                           fsr2l	equ	0xFD9
  3142                           status	equ	0xFD8

Data Sizes:
    Strings     49
    Constant    16
    Data        2
    BSS         33
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     16      52
    BANK0           128      0       0
    BANK1           256      0       0

Pointer List with Targets:

    lcdPrint@t	PTR const unsigned char  size(2) Largest target is 17
		 -> TxtBuf(COMRAM[16]), STR_3(CODE[16]), STR_2(CODE[16]), STR_1(CODE[17]), 

    readTemp_Single@buf	PTR unsigned int  size(1) Largest target is 2
		 -> temperature(COMRAM[2]), 

    readTemp_Single@time_flag	PTR unsigned char  size(1) Largest target is 1
		 -> time_flag(COMRAM[1]), 

    readTemp_Single@timer_val	PTR unsigned char  size(1) Largest target is 1
		 -> timer_val(COMRAM[1]), 

    readTemp_Single@minus	PTR unsigned char  size(1) Largest target is 1
		 -> minus(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_readTemp_Single
    _readTemp_Single->_write_byte
    _lcdPrint->_lcd_gotoxy
    _lcd_gotoxy->_lcdWrite
    _initLCD->_clearLCD
    _clearLCD->_lcdWrite
    _lcdWrite->_lcdNibble
    ___lwmod->___lwdiv
    _init_ds18b20->_write_byte
    _write_byte->_write_bit

Critical Paths under _myInt in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _myInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myInt in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   10061
                           _Delay_ms
                          _Main_init
                            ___lwdiv
                            ___lwmod
                           _clearLCD
                            _initLCD
                         _key_GetKey
                          _key_press
                           _lcdPrint
                         _lcd_gotoxy
                    _readTemp_Single
 ---------------------------------------------------------------------------------
 (1) _readTemp_Single                                     12     8      4     853
                                              6 COMRAM    10     6      4
                           _ow_reset
                          _read_byte
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _read_byte                                            4     4      0      60
                                              0 COMRAM     4     4      0
                           _read_bit
 ---------------------------------------------------------------------------------
 (3) _read_bit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdPrint                                             3     1      2    3274
                                              7 COMRAM     3     1      2
                           _lcdWrite
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (1) _lcd_gotoxy                                           3     2      1    1676
                                              4 COMRAM     3     2      1
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (1) _key_press                                            1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _key_GetKey                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1906
                                              5 COMRAM     1     1      0
                           _clearLCD
                          _lcdNibble
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (2) _clearLCD                                             1     1      0     923
                                              4 COMRAM     1     1      0
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (2) _lcdWrite                                             2     1      1     923
                                              2 COMRAM     2     1      1
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      60
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4     615
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     466
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _Main_init                                            0     0      0     105
                       _init_ds18b20
 ---------------------------------------------------------------------------------
 (2) _init_ds18b20                                         0     0      0     105
                           _ow_reset
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _write_byte                                           5     5      0      90
                                              1 COMRAM     5     5      0
                          _write_bit
 ---------------------------------------------------------------------------------
 (3) _write_bit                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ow_reset                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Delay_ms                                             5     3      2     198
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _myInt                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay_ms
   _Main_init
     _init_ds18b20
       _ow_reset
       _write_byte
         _write_bit
   ___lwdiv
   ___lwmod
     ___lwdiv (ARG)
   _clearLCD
     _lcdWrite
       _lcdNibble
   _initLCD
     _clearLCD
       _lcdWrite
         _lcdNibble
     _lcdNibble
     _lcdWrite
       _lcdNibble
   _key_GetKey
   _key_press
   _lcdPrint
     _lcdWrite
       _lcdNibble
     _lcd_gotoxy
       _lcdWrite
         _lcdNibble
   _lcd_gotoxy
     _lcdWrite
       _lcdNibble
   _readTemp_Single
     _ow_reset
     _read_byte
       _read_bit
     _write_byte
       _write_bit

 _myInt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80      0       0       4        0.0%
BITCOMRAM           7E      0       1       0        0.8%
COMRAM              7E     10      34       1       41.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      34       7        0.0%
DATA                 0      0      34       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Sun Nov 29 13:49:22 2020

                      PL2 03EE                        PL4 06B2                        PL6 06C0  
                      PL8 0406                        u10 06DE                        u30 06F4  
                      u50 070C                        u28 06E0                        u70 0720  
                      u48 06F6                        u68 070E                        u88 0722  
            lcdWrite@byte 0025                       PL10 0412                       PL20 0742  
                     PL12 041E                       PL22 0448                       PL14 042E  
                     PL24 06CC                       PL16 043A                       PL18 0440  
            lcdWrite@type 0024                       l117 099A                       l280 0824  
                     l274 07F2                       l179 0968                       l187 09D0  
                     l276 07FA                       l278 0804                       l770 07DE  
                     l780 085C                       u104 08B0                       u105 08AC  
                     u174 0882                       u175 087E                       u550 0678  
                     u640 07BA                       u560 068C                       u570 06AC  
                     u557 0676                       u670 0840                       u567 068A  
                     u807 0A06                       u577 06AA                       u817 0644  
                     u907 04F6                       u827 045C                       u917 050E  
                     u837 046C                       u927 0522                       u847 047C  
                     u937 053A                       u857 048C                       u947 09EE  
                     u867 04A2                       u957 096C                       u877 04B6  
                     u797 088C                       u967 0730                       u887 04CA  
                     u977 073A                       u897 04DE                       u987 08CC  
                     u997 09BA                       wreg 000FE8           lcdNibble@nibble 0023  
             lcd_gotoxy@x 0027               lcd_gotoxy@y 0026                      l1052 09B8  
                    l1124 086A                      l1128 088A                      l1314 0806  
                    l1076 08A0                      l1326 081A                      l1700 05CC  
                    l1640 065A                      l1642 0666                      l1634 0638  
                    l1650 069E                      l1654 0988                      l1726 07AE  
                    l1646 067E                      l1638 0650                      l1662 0556  
                    l1718 0624                      l1728 07B6                      l1584 096A  
                    l1648 069A                      l1738 07D4                      l1754 0852  
                    l1746 0834                      l1594 09D2                      l1674 0582  
                    l1748 083C                      l1932 03D0                      l1924 03C0  
                    l1780 0296                      l1686 0594                      l1790 02BC  
                    l1872 036A                      l1848 0350                      l1938 03DE  
                    l1788 02B4                      l1896 0386                      STR_1 0211  
                    STR_2 0232                      STR_3 0222          ow_reset@presence 0022  
                    u1007 090C                      u1017 0918                      u1027 0928  
                    u1037 098E                      _LATA 000F89                      _LATB 000F8A  
                    _LATC 000F8B                      _main 0244                      fsr0h 000FEA  
                    indf0 000FEF                      fsr2h 000FDA                      fsr0l 000FE9  
                    indf2 000FDF                      fsr2l 000FD9                      btemp 0035  
           write_byte@val 0025                      prodh 000FF4                      prodl 000FF3  
                    start 003C              ___param_bank 000000                     ?_main 0022  
                   _T1CON 000FCD           __end_of___lwdiv 07E8           __end_of___lwmod 0866  
                   i2l128 0038                     _TMR0H 000FD7                     _TMR1H 000FCF  
                   _TMR0L 000FD6                     _TMR1L 000FCE                     _PORTA 000F80  
                   _PORTB 000F81                     _PORTC 000F82                     _TRISA 000F92  
                   _TRISB 000F93                     _TRISC 000F94           __end_of_initLCD 054A  
                   _fract 0201                     _myInt 0008                     _minus 001F  
          write_byte@temp 0026            __pbitbssCOMRAM 01A0                     tablat 000FF5  
                   ttemp5 0036                     ttemp6 0039                     ttemp7 003D  
                   status 000FD8                     wtemp8 0036          __end_of_Delay_ms 09A6  
         write_bit@bitval 0022           __initialization 08D2              __end_of_main 03EE  
         _readTemp_Single 054A                    ??_main 0032             __activetblptr 000002  
           ?_init_ds18b20 0022                    ?_myInt 0022        __size_of_Main_init 0052  
                  i2l1570 0028          __end_of_clearLCD 09FA          __end_of_lcdPrint 06B2  
        __end_of_lcdWrite 0982                    _TxtBuf 000D                 ??___lwdiv 0026  
               ??___lwmod 002D                    _dq_num 0032             Delay_ms@delay 0022  
        __end_of_read_bit 0A10                    clear_0 08F2                    _select 0033  
          ??_init_ds18b20 0028                 ??_initLCD 0027              __pdataCOMRAM 0032  
            __mediumconst 0000          __end_of_ow_reset 0936                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8                __accesstop 0080  
 __end_of__initialization 08F8             ___rparam_used 000001   __end_of_readTemp_Single 0636  
          __pcstackCOMRAM 0022             __end_of_fract 0211             __end_of_myInt 003C  
       __end_of_Main_init 079E                __end_ofPL2 0406                __end_ofPL4 06C0  
              __end_ofPL6 06CC                __end_ofPL8 0412        __size_of_lcdNibble 0070  
               ?_Delay_ms 0022         lcd_gotoxy@address 0028                   ??_myInt 0022  
      __size_of_key_press 0040        __size_of_read_byte 0036                 ?_clearLCD 0022  
              ??_Delay_ms 0024                _lcd_gotoxy 09C4                 ?_lcdPrint 0029  
               ?_lcdWrite 0024                 ?_read_bit 0022                _key_GetKey 0A10  
    __end_of_init_ds18b20 095E         __end_of_lcdNibble 0742        __size_of_write_bit 001E  
        ?_readTemp_Single 0028                   __Hparam 0000                   __Lparam 0000  
               ?_ow_reset 0022                   ___lwdiv 079E                   ___lwmod 0828  
            __psmallconst 0200                   __pcinit 08D2                   __ramtop 0200  
readTemp_Single@time_flag 002A                   __ptext0 0244                   __ptext1 054A  
                 __ptext2 0866                   __ptext3 09FA                   __ptext4 0636  
                 __ptext5 09C4                   __ptext6 07E8                   __ptext7 0A10  
                 __ptext8 0452                   __ptext9 09E0                 _T0CONbits 000FD5  
readTemp_Single@timer_val 002B                   _initLCD 0452                 _T1CONbits 000FCD  
       __end_of_key_press 0828         __end_of_read_byte 089C                ??_clearLCD 0026  
                 _scratch 0001                ??_lcdPrint 002B                ??_lcdWrite 0025  
    end_of_initialization 08F8                 Delay_ms@i 0025              key_press@key 0022  
           __Lmediumconst 0000                ??_read_bit 0022                ??_ow_reset 0022  
                 postdec2 000FDD                   postinc0 000FEE                   postinc2 000FDE  
            read_byte@val 0024                 _PORTAbits 000F80                 _PORTCbits 000F82  
           key_GetKey@key 0022         __end_of_write_bit 09C4                 _TRISAbits 000F92  
             ?_lcd_gotoxy 0026               ?_key_GetKey 0022             __pidataCOMRAM 0A1A  
              _write_byte 089C                 _Main_init 074C               __end_ofPL10 041E  
             __end_ofPL20 074C               __end_ofPL12 042E               __end_ofPL22 0452  
             __end_ofPL14 043A               __end_ofPL24 06D2               __end_ofPL16 0440  
             __end_ofPL18 0448       start_initialization 08D2         __size_of_Delay_ms 0024  
   __size_of_init_ds18b20 0028       __size_of_lcd_gotoxy 001C                read_byte@i 0025  
              ?_Main_init 0022       __size_of_key_GetKey 000A              _init_ds18b20 0936  
             __pbssCOMRAM 0001         __size_of_clearLCD 001A         __size_of_lcdPrint 007C  
       __size_of_lcdWrite 0024      readTemp_Single@minus 0029      readTemp_Single@num_d 0022  
       __size_of_read_bit 0016          ___lwdiv@dividend 0022                 __pintcode 0008  
               _lcdNibble 06D2                  ?___lwdiv 0022                  ?___lwmod 0029  
       __size_of_ow_reset 0030               ?_write_byte 0022                  ?_initLCD 0022  
             __smallconst 0200          ___lwdiv@quotient 0026                 _key_press 07E8  
          __size_of_myInt 0034                 _read_byte 0866                  _PIE1bits 000F9D  
        readTemp_Single@i 002F                  _PIR1bits 000F9E                ?_lcdNibble 0022  
               _time_flag 0020                 _timer_val 0021                 lcdPrint@t 0029  
__size_of_readTemp_Single 00EC                _ADCON1bits 000FC1               ??_Main_init 0028  
             write_byte@i 0027                  _Delay_ms 0982              ??_lcd_gotoxy 0027  
              ?_key_press 0022                 _write_bit 09A6               _INTCON2bits 000FF1  
              ?_read_byte 0022       __size_of_write_byte 0036              ??_key_GetKey 0022  
                __Hrparam 0000                  __Lrparam 0000        __end_of_lcd_gotoxy 09E0  
          key_press@count 000A          __size_of___lwdiv 004A          __size_of___lwmod 003E  
     readTemp_Single@temp 0030          __size_of_initLCD 00F8                  _clearLCD 09E0  
             _key_pressed 000B        __end_of_key_GetKey 0A1A           ___lwdiv@divisor 0024  
         ___lwdiv@counter 0028                  __ptext10 095E                  __ptext11 06D2  
                __ptext12 0828                  __ptext13 079E                  __ptext14 074C  
                __ptext15 0936                  __ptext16 089C                  __ptext17 09A6  
                __ptext18 0906                  __ptext19 0982                  _lcdPrint 0636  
                _lcdWrite 095E                ?_write_bit 0022             __size_of_main 01AA  
                _read_bit 09FA                  _read_key 01A0               ??_lcdNibble 0022  
                _ow_reset 0906                  int$flags 0035                _INTCONbits 000FF2  
       ??_readTemp_Single 002C               ??_key_press 0022               ??_read_byte 0022  
      readTemp_Single@buf 0028                  intlevel2 0000        readTemp_Single@tmp 002E  
        ___lwmod@dividend 0029                _OSCCONbits 000FD3              ??_write_byte 0023  
             _temperature 001D           ___lwmod@divisor 002B           ___lwmod@counter 002D  
             ??_write_bit 0022               _pressed_key 000C        __end_of_write_byte 08D2  
