

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Sun May 08 10:28:44 2022

Microchip MPLAB XC8 C Compiler v2.36 (Pro license) build 20220127204148 Og9s 
     1                           	processor	18F2320
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    52                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    53                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    54                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    55                           	psect	pa_nodes0,global,class=CODE,delta=1
    56  0000                     
    57                           ; Version 2.40
    58                           ; Generated 17/11/2021 GMT
    59                           ; 
    60                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution. Publication is not required when
    74                           ;        this file is used in an embedded application.
    75                           ; 
    76                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    77                           ;        software without specific prior written permission.
    78                           ; 
    79                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    80                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    81                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    82                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    83                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    84                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    85                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    86                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    87                           ; 
    88                           ; 
    89                           ; Code-generator required, PIC18F2320 Definitions
    90                           ; 
    91                           ; SFR Addresses
    92  0000                     
    93                           	psect	idataCOMRAM
    94  001B2A                     __pidataCOMRAM:
    95                           	callstack 0
    96                           
    97                           ;initializer for _temperature_2_old
    98  001B2A  7FFF               	dw	32767
    99                           
   100                           ;initializer for _temperature_1_old
   101  001B2C  7FFF               	dw	32767
   102                           
   103                           ;initializer for _temperature_2
   104  001B2E  7FFF               	dw	32767
   105                           
   106                           ;initializer for _temperature_1
   107  001B30  7FFF               	dw	32767
   108                           
   109                           ;initializer for _dq_num
   110  001B32  01                 	db	1
   111                           
   112                           ;initializer for _sub_main
   113  001B33  01                 	db	1
   114                           
   115                           ;initializer for _select
   116  001B34  01                 	db	1
   117                           
   118                           ;initializer for _minus_2
   119  001B35  2B                 	db	43
   120                           
   121                           ;initializer for _minus_1
   122  001B36  2B                 	db	43
   123                           
   124                           	psect	mediumconst
   125  001E8E                     __pmediumconst:
   126                           	callstack 0
   127  001E8E  00                 	db	0
   128  001E8F                     _HD44780_CYR:
   129                           	callstack 0
   130  001E8F  41                 	db	65
   131  001E90  A0                 	db	160
   132  001E91  42                 	db	66
   133  001E92  A1                 	db	161
   134  001E93  E0                 	db	224
   135  001E94  45                 	db	69
   136  001E95  A3                 	db	163
   137  001E96  A4                 	db	164
   138  001E97  A5                 	db	165
   139  001E98  A6                 	db	166
   140  001E99  4B                 	db	75
   141  001E9A  A7                 	db	167
   142  001E9B  4D                 	db	77
   143  001E9C  48                 	db	72
   144  001E9D  4F                 	db	79
   145  001E9E  A8                 	db	168
   146  001E9F  50                 	db	80
   147  001EA0  43                 	db	67
   148  001EA1  54                 	db	84
   149  001EA2  A9                 	db	169
   150  001EA3  AA                 	db	170
   151  001EA4  58                 	db	88
   152  001EA5  E1                 	db	225
   153  001EA6  AB                 	db	171
   154  001EA7  AC                 	db	172
   155  001EA8  E2                 	db	226
   156  001EA9  AD                 	db	173
   157  001EAA  AE                 	db	174
   158  001EAB  62                 	db	98
   159  001EAC  AF                 	db	175
   160  001EAD  B0                 	db	176
   161  001EAE  B1                 	db	177
   162  001EAF  61                 	db	97
   163  001EB0  B2                 	db	178
   164  001EB1  B3                 	db	179
   165  001EB2  B4                 	db	180
   166  001EB3  E3                 	db	227
   167  001EB4  65                 	db	101
   168  001EB5  B6                 	db	182
   169  001EB6  B7                 	db	183
   170  001EB7  B8                 	db	184
   171  001EB8  B9                 	db	185
   172  001EB9  BA                 	db	186
   173  001EBA  BB                 	db	187
   174  001EBB  BC                 	db	188
   175  001EBC  BD                 	db	189
   176  001EBD  6F                 	db	111
   177  001EBE  BE                 	db	190
   178  001EBF  70                 	db	112
   179  001EC0  63                 	db	99
   180  001EC1  BF                 	db	191
   181  001EC2  79                 	db	121
   182  001EC3  E4                 	db	228
   183  001EC4  78                 	db	120
   184  001EC5  E5                 	db	229
   185  001EC6  C0                 	db	192
   186  001EC7  C1                 	db	193
   187  001EC8  E6                 	db	230
   188  001EC9  C2                 	db	194
   189  001ECA  C3                 	db	195
   190  001ECB  C4                 	db	196
   191  001ECC  C5                 	db	197
   192  001ECD  C6                 	db	198
   193  001ECE  C7                 	db	199
   194  001ECF                     __end_of_HD44780_CYR:
   195                           	callstack 0
   196  001ECF                     _fract:
   197                           	callstack 0
   198  001ECF  00                 	db	0
   199  001ED0  01                 	db	1
   200  001ED1  01                 	db	1
   201  001ED2  02                 	db	2
   202  001ED3  02                 	db	2
   203  001ED4  03                 	db	3
   204  001ED5  04                 	db	4
   205  001ED6  04                 	db	4
   206  001ED7  05                 	db	5
   207  001ED8  06                 	db	6
   208  001ED9  06                 	db	6
   209  001EDA  07                 	db	7
   210  001EDB  07                 	db	7
   211  001EDC  08                 	db	8
   212  001EDD  09                 	db	9
   213  001EDE  09                 	db	9
   214  001EDF                     __end_of_fract:
   215                           	callstack 0
   216  001EDF                     _symbol_5:
   217                           	callstack 0
   218  001EDF  06                 	db	6
   219  001EE0  09                 	db	9
   220  001EE1  09                 	db	9
   221  001EE2  06                 	db	6
   222  001EE3  00                 	db	0
   223  001EE4  00                 	db	0
   224  001EE5  0F                 	db	15
   225  001EE6  00                 	db	0
   226  001EE7                     __end_of_symbol_5:
   227                           	callstack 0
   228  001EE7                     _symbol_4:
   229                           	callstack 0
   230  001EE7  06                 	db	6
   231  001EE8  09                 	db	9
   232  001EE9  09                 	db	9
   233  001EEA  06                 	db	6
   234  001EEB  00                 	db	0
   235  001EEC  00                 	db	0
   236  001EED  00                 	db	0
   237  001EEE  00                 	db	0
   238  001EEF                     __end_of_symbol_4:
   239                           	callstack 0
   240  0000                     _EECON2	set	4007
   241  0000                     _EEDATA	set	4008
   242  0000                     _EEADR	set	4009
   243  0000                     _PIR1bits	set	3998
   244  0000                     _TMR0L	set	4054
   245  0000                     _TMR0H	set	4055
   246  0000                     _TMR1L	set	4046
   247  0000                     _TMR1H	set	4047
   248  0000                     _LATB	set	3978
   249  0000                     _PORTA	set	3968
   250  0000                     _PORTB	set	3969
   251  0000                     _TRISCbits	set	3988
   252  0000                     _TRISAbits	set	3986
   253  0000                     _LATAbits	set	3977
   254  0000                     _T1CONbits	set	4045
   255  0000                     _PORTAbits	set	3968
   256  0000                     _LATC	set	3979
   257  0000                     _TXIF	set	31988
   258  0000                     _PORTC	set	3970
   259  0000                     _LATA	set	3977
   260  0000                     _LATCbits	set	3979
   261  0000                     _TRISA	set	3986
   262  0000                     _PIE1bits	set	3997
   263  0000                     _IPR1bits	set	3999
   264  0000                     _ADCON1bits	set	4033
   265  0000                     _OSCCONbits	set	4051
   266  0000                     _TRISC	set	3988
   267  0000                     _TRISB	set	3987
   268  0000                     _T0CONbits	set	4053
   269  0000                     _T1CON	set	4045
   270  0000                     _RCONbits	set	4048
   271  0000                     _EECON1bits	set	4006
   272  0000                     _INTCON2bits	set	4081
   273  0000                     _INTCONbits	set	4082
   274  0000                     _RCSTAbits	set	4011
   275  0000                     _TXSTAbits	set	4012
   276  0000                     _TXREG	set	4013
   277  0000                     _SPBRG	set	4015
   278  001EEF                     STR_17:
   279  001EEF  20                 	db	32
   280  001EF0  CA                 	db	-54
   281  001EF1  EE                 	db	-18
   282  001EF2  E4                 	db	-28
   283  001EF3  20                 	db	32
   284  001EF4  EF                 	db	-17
   285  001EF5  F0                 	db	-16
   286  001EF6  EE                 	db	-18
   287  001EF7  F7                 	db	-9
   288  001EF8  E8                 	db	-24
   289  001EF9  F2                 	db	-14
   290  001EFA  E0                 	db	-32
   291  001EFB  ED                 	db	-19
   292  001EFC  EE                 	db	-18
   293  001EFD  20                 	db	32
   294  001EFE  00                 	db	0
   295  001EFF                     STR_1:
   296  001EFF  2D                 	db	45
   297  001F00  2D                 	db	45
   298  001F01  2D                 	db	45
   299  001F02  D2                 	db	-46
   300  001F03  C5                 	db	-59
   301  001F04  D0                 	db	-48
   302  001F05  CC                 	db	-52
   303  001F06  CE                 	db	-50
   304  001F07  CC                 	db	-52
   305  001F08  C5                 	db	-59
   306  001F09  D2                 	db	-46
   307  001F0A  D0                 	db	-48
   308  001F0B  2D                 	db	45
   309  001F0C  2D                 	db	45
   310  001F0D  2D                 	db	45
   311  001F0E  00                 	db	0
   312  001F0F                     STR_3:
   313  001F0F  C4                 	db	-60
   314  001F10  E0                 	db	-32
   315  001F11  F2                 	db	-14
   316  001F12  F7                 	db	-9
   317  001F13  E8                 	db	-24
   318  001F14  EA                 	db	-22
   319  001F15  20                 	db	32
   320  001F16  31                 	db	49	;'1'
   321  001F17  2C                 	db	44
   322  001F18  20                 	db	32
   323  001F19  E0                 	db	-32
   324  001F1A  E1                 	db	-31
   325  001F1B  EE                 	db	-18
   326  001F1C  20                 	db	32
   327  001F1D  32                 	db	50	;'2'
   328  001F1E  00                 	db	0
   329  001F1F                     STR_16:
   330  001F1F  20                 	db	32
   331  001F20  20                 	db	32
   332  001F21  31                 	db	49	;'1'
   333  001F22  20                 	db	32
   334  001F23  20                 	db	32
   335  001F24  20                 	db	32
   336  001F25  20                 	db	32
   337  001F26  20                 	db	32
   338  001F27  32                 	db	50	;'2'
   339  001F28  20                 	db	32
   340  001F29  20                 	db	32
   341  001F2A  20                 	db	32
   342  001F2B  31                 	db	49	;'1'
   343  001F2C  2D                 	db	45
   344  001F2D  32                 	db	50	;'2'
   345  001F2E  00                 	db	0
   346  001F2F                     STR_2:
   347  001F2F  28                 	db	40
   348  001F30  63                 	db	99	;'c'
   349  001F31  29                 	db	41
   350  001F32  49                 	db	73	;'I'
   351  001F33  76                 	db	118	;'v'
   352  001F34  61                 	db	97	;'a'
   353  001F35  6E                 	db	110	;'n'
   354  001F36  5F                 	db	95	;'_'
   355  001F37  66                 	db	102	;'f'
   356  001F38  64                 	db	100	;'d'
   357  001F39  20                 	db	32
   358  001F3A  76                 	db	118	;'v'
   359  001F3B  31                 	db	49	;'1'
   360  001F3C  2E                 	db	46
   361  001F3D  35                 	db	53	;'5'
   362  001F3E  00                 	db	0
   363  001F3F                     STR_15:
   364  001F3F  CF                 	db	-49
   365  001F40  EE                 	db	-18
   366  001F41  F0                 	db	-16
   367  001F42  69                 	db	105	;'i'
   368  001F43  E3                 	db	-29
   369  001F44  20                 	db	32
   370  001F45  D1                 	db	-47
   371  001F46  E8                 	db	-24
   372  001F47  E3                 	db	-29
   373  001F48  ED                 	db	-19
   374  001F49  2E                 	db	46
   375  001F4A  20                 	db	32
   376  001F4B  4C                 	db	76	;'L'
   377  001F4C  65                 	db	101	;'e'
   378  001F4D  64                 	db	100	;'d'
   379  001F4E  00                 	db	0
   380  001F4F                     STR_20:
   381  001F4F  20                 	db	32
   382  001F50  CA                 	db	-54
   383  001F51  EE                 	db	-18
   384  001F52  EB                 	db	-21
   385  001F53  EE                 	db	-18
   386  001F54  ED                 	db	-19
   387  001F55  E0                 	db	-32
   388  001F56  20                 	db	32
   389  001F57  20                 	db	32
   390  001F58  20                 	db	32
   391  001F59  20                 	db	32
   392  001F5A  CA                 	db	-54
   393  001F5B  F3                 	db	-13
   394  001F5C  E1                 	db	-31
   395  001F5D  00                 	db	0
   396  001F5E                     STR_25:
   397  001F5E  D2                 	db	-46
   398  001F5F  E5                 	db	-27
   399  001F60  EC                 	db	-20
   400  001F61  EF                 	db	-17
   401  001F62  20                 	db	32
   402  001F63  CD                 	db	-51
   403  001F64  E8                 	db	-24
   404  001F65  E7                 	db	-25
   405  001F66  3A                 	db	58	;':'
   406  001F67  20                 	db	32
   407  001F68  20                 	db	32
   408  001F69  20                 	db	32
   409  001F6A  20                 	db	32
   410  001F6B  20                 	db	32
   411  001F6C  00                 	db	0
   412  001F6D                     STR_19:
   413  001F6D  CA                 	db	-54
   414  001F6E  EE                 	db	-18
   415  001F6F  EB                 	db	-21
   416  001F70  28                 	db	40
   417  001F71  31                 	db	49	;'1'
   418  001F72  29                 	db	41
   419  001F73  2F                 	db	47
   420  001F74  CA                 	db	-54
   421  001F75  F3                 	db	-13
   422  001F76  E1                 	db	-31
   423  001F77  28                 	db	40
   424  001F78  32                 	db	50	;'2'
   425  001F79  29                 	db	41
   426  001F7A  3A                 	db	58	;':'
   427  001F7B  00                 	db	0
   428  001F7C                     STR_18:
   429  001F7C  20                 	db	32
   430  001F7D  20                 	db	32
   431  001F7E  20                 	db	32
   432  001F7F  C3                 	db	-61
   433  001F80  F0                 	db	-16
   434  001F81  E0                 	db	-32
   435  001F82  ED                 	db	-19
   436  001F83  E8                 	db	-24
   437  001F84  F6                 	db	-10
   438  001F85  69                 	db	105	;'i'
   439  001F86  20                 	db	32
   440  001F87  20                 	db	32
   441  001F88  20                 	db	32
   442  001F89  00                 	db	0
   443  001F8A                     STR_23:
   444  001F8A  20                 	db	32
   445  001F8B  20                 	db	32
   446  001F8C  20                 	db	32
   447  001F8D  20                 	db	32
   448  001F8E  CA                 	db	-54
   449  001F8F  F3                 	db	-13
   450  001F90  E1                 	db	-31
   451  001F91  EE                 	db	-18
   452  001F92  E2                 	db	-30
   453  001F93  E0                 	db	-32
   454  001F94  20                 	db	32
   455  001F95  20                 	db	32
   456  001F96  00                 	db	0
   457  001F97                     STR_21:
   458  001F97  20                 	db	32
   459  001F98  20                 	db	32
   460  001F99  20                 	db	32
   461  001F9A  20                 	db	32
   462  001F9B  CA                 	db	-54
   463  001F9C  EE                 	db	-18
   464  001F9D  EB                 	db	-21
   465  001F9E  EE                 	db	-18
   466  001F9F  ED                 	db	-19
   467  001FA0  E0                 	db	-32
   468  001FA1  20                 	db	32
   469  001FA2  20                 	db	32
   470  001FA3  00                 	db	0
   471  001FA4                     STR_4:
   472  001FA4  C2                 	db	-62
   473  001FA5  E8                 	db	-24
   474  001FA6  E1                 	db	-31
   475  001FA7  69                 	db	105	;'i'
   476  001FA8  F0                 	db	-16
   477  001FA9  20                 	db	32
   478  001FAA  31                 	db	49	;'1'
   479  001FAB  38                 	db	56	;'8'
   480  001FAC  42                 	db	66	;'B'
   481  001FAD  32                 	db	50	;'2'
   482  001FAE  30                 	db	48	;'0'
   483  001FAF  3A                 	db	58	;':'
   484  001FB0  00                 	db	0
   485  001FB1                     STR_22:
   486  001FB1  D2                 	db	-46
   487  001FB2  E5                 	db	-27
   488  001FB3  EC                 	db	-20
   489  001FB4  EF                 	db	-17
   490  001FB5  20                 	db	32
   491  001FB6  C2                 	db	-62
   492  001FB7  E5                 	db	-27
   493  001FB8  F0                 	db	-16
   494  001FB9  F5                 	db	-11
   495  001FBA  3A                 	db	58	;':'
   496  001FBB  00                 	db	0
   497  001FBC                     STR_24:
   498  001FBC  C7                 	db	-57
   499  001FBD  E0                 	db	-32
   500  001FBE  E2                 	db	-30
   501  001FBF  E4                 	db	-28
   502  001FC0  E0                 	db	-32
   503  001FC1  ED                 	db	-19
   504  001FC2  ED                 	db	-19
   505  001FC3  FF                 	db	-1
   506  001FC4  00                 	db	0
   507  001FC5                     STR_12:
   508  001FC5  30                 	db	48	;'0'
   509  001FC6  30                 	db	48	;'0'
   510  001FC7  30                 	db	48	;'0'
   511  001FC8  30                 	db	48	;'0'
   512  001FC9  0D                 	db	13
   513  001FCA  0A                 	db	10
   514  001FCB  00                 	db	0
   515  001FCC                     STR_8:
   516  001FCC  30                 	db	48	;'0'
   517  001FCD  30                 	db	48	;'0'
   518  001FCE  30                 	db	48	;'0'
   519  001FCF  30                 	db	48	;'0'
   520  001FD0  00                 	db	0
   521  001FD1                     STR_14:
   522  001FD1  CA                 	db	-54
   523  001FD2  E1                 	db	-31
   524  001FD3  3A                 	db	58	;':'
   525  001FD4  00                 	db	0
   526  001FD5                     STR_13:
   527  001FD5  CA                 	db	-54
   528  001FD6  EB                 	db	-21
   529  001FD7  3A                 	db	58	;':'
   530  001FD8  00                 	db	0
   531  001FD9                     STR_9:
   532  001FD9  74                 	db	116	;'t'
   533  001FDA  62                 	db	98	;'b'
   534  001FDB  3A                 	db	58	;':'
   535  001FDC  00                 	db	0
   536  001FDD                     STR_6:
   537  001FDD  74                 	db	116	;'t'
   538  001FDE  6B                 	db	107	;'k'
   539  001FDF  3A                 	db	58	;':'
   540  001FE0  00                 	db	0
   541  001FE1                     STR_26:
   542  001FE1  31                 	db	49	;'1'
   543  001FE2  3A                 	db	58	;':'
   544  001FE3  00                 	db	0
   545  001FE4                     STR_27:
   546  001FE4  32                 	db	50	;'2'
   547  001FE5  3A                 	db	58	;':'
   548  001FE6  00                 	db	0
   549  001FE7                     STR_28:
   550  001FE7  33                 	db	51	;'3'
   551  001FE8  3A                 	db	58	;':'
   552  001FE9  00                 	db	0
   553  001FEA                     STR_29:
   554  001FEA  34                 	db	52	;'4'
   555  001FEB  3A                 	db	58	;':'
   556  001FEC  00                 	db	0
   557  001FED                     STR_30:
   558  001FED  35                 	db	53	;'5'
   559  001FEE  3A                 	db	58	;':'
   560  001FEF  00                 	db	0
   561  001FF0                     STR_31:
   562  001FF0  36                 	db	54	;'6'
   563  001FF1  3A                 	db	58	;':'
   564  001FF2  00                 	db	0
   565  001FF3                     STR_32:
   566  001FF3  37                 	db	55	;'7'
   567  001FF4  3A                 	db	58	;':'
   568  001FF5  00                 	db	0
   569  001FF6                     STR_33:
   570  001FF6  38                 	db	56	;'8'
   571  001FF7  3A                 	db	58	;':'
   572  001FF8  00                 	db	0
   573  001FF9                     STR_34:
   574  001FF9  39                 	db	57	;'9'
   575  001FFA  3A                 	db	58	;':'
   576  001FFB  00                 	db	0
   577  001FFC                     STR_5:
   578  001FFC  31                 	db	49	;'1'
   579  001FFD  00                 	db	0
   580  001FFE  00                 	db	0	; dummy byte at the end
   581  0000                     
   582                           ; #config settings
   583                           
   584                           	psect	cinit
   585  001810                     __pcinit:
   586                           	callstack 0
   587  001810                     start_initialization:
   588                           	callstack 0
   589  001810                     __initialization:
   590                           	callstack 0
   591                           
   592                           ; Initialize objects allocated to COMRAM (13 bytes)
   593                           ; load TBLPTR registers with __pidataCOMRAM
   594  001810  0E2A               	movlw	low __pidataCOMRAM
   595  001812  6EF6               	movwf	tblptrl,c
   596  001814  0E1B               	movlw	high __pidataCOMRAM
   597  001816  6EF7               	movwf	tblptrh,c
   598  001818  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   599  00181A  6EF8               	movwf	tblptru,c
   600  00181C  EE00  F059         	lfsr	0,__pdataCOMRAM
   601  001820  EE10 F00D          	lfsr	1,13
   602  001824                     copy_data0:
   603  001824  0009               	tblrd		*+
   604  001826  CFF5 FFEE          	movff	tablat,postinc0
   605  00182A  50E5               	movf	postdec1,w,c
   606  00182C  50E1               	movf	fsr1l,w,c
   607  00182E  E1FA               	bnz	copy_data0
   608                           
   609                           ; Clear objects allocated to BITCOMRAM (2 bytes)
   610  001830  6A67               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
   611  001832  6A66               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   612                           
   613                           ; Clear objects allocated to COMRAM (65 bytes)
   614  001834  EE00  F001         	lfsr	0,__pbssCOMRAM
   615  001838  0E41               	movlw	65
   616  00183A                     clear_0:
   617  00183A  6AEE               	clrf	postinc0,c
   618  00183C  06E8               	decf	wreg,f,c
   619  00183E  E1FD               	bnz	clear_0
   620  001840                     end_of_initialization:
   621                           	callstack 0
   622  001840                     __end_of__initialization:
   623                           	callstack 0
   624  001840  9068               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   625  001842  9268               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   626  001844  0E00               	movlw	low (__Lmediumconst shr (0+16))
   627  001846  6EF8               	movwf	tblptru,c
   628  001848  0100               	movlb	0
   629  00184A  EF4F  F000         	goto	_main	;jump to C main() function
   630                           
   631                           	psect	bitbssCOMRAM
   632  000330                     __pbitbssCOMRAM:
   633                           	callstack 0
   634  000330                     _en_snd_b:
   635                           	callstack 0
   636  000330                     	ds	1
   637  000331                     _en_snd_k:
   638                           	callstack 0
   639  000331                     	ds	1
   640  000332                     _snd_b_b:
   641                           	callstack 0
   642  000332                     	ds	1
   643  000333                     _snd_k_b:
   644                           	callstack 0
   645  000333                     	ds	1
   646  000334                     _snd_all:
   647                           	callstack 0
   648  000334                     	ds	1
   649  000335                     _snd_b:
   650                           	callstack 0
   651  000335                     	ds	1
   652  000336                     _snd_k:
   653                           	callstack 0
   654  000336                     	ds	1
   655  000337                     _sound_yes:
   656                           	callstack 0
   657  000337                     	ds	1
   658  000338                     _en_sound:
   659                           	callstack 0
   660  000338                     	ds	1
   661  000339                     _read_key:
   662                           	callstack 0
   663  000339                     	ds	1
   664  00033A                     _en_send_usart:
   665                           	callstack 0
   666  00033A                     	ds	1
   667                           
   668                           	psect	bssCOMRAM
   669  000001                     __pbssCOMRAM:
   670                           	callstack 0
   671  000001                     _eusartTxBuffer:
   672                           	callstack 0
   673  000001                     	ds	16
   674  000011                     _rom_dq:
   675                           	callstack 0
   676  000011                     	ds	16
   677  000021                     _temp_ready:
   678                           	callstack 0
   679  000021                     	ds	4
   680  000025                     key_press@count:
   681                           	callstack 0
   682  000025                     	ds	2
   683  000027                     _temp1_fix:
   684                           	callstack 0
   685  000027                     	ds	2
   686  000029                     _set_t_dq2:
   687                           	callstack 0
   688  000029                     	ds	2
   689  00002B                     _eusartRxCount:
   690                           	callstack 0
   691  00002B                     	ds	1
   692  00002C                     _eusartTxBufferRemaining:
   693                           	callstack 0
   694  00002C                     	ds	1
   695  00002D                     _eusartTxHead:
   696                           	callstack 0
   697  00002D                     	ds	1
   698  00002E                     _key_pressed:
   699                           	callstack 0
   700  00002E                     	ds	1
   701  00002F                     myIntL@snd_delay:
   702                           	callstack 0
   703  00002F                     	ds	1
   704  000030                     _set_t_dq1_dwn:
   705                           	callstack 0
   706  000030                     	ds	1
   707  000031                     _set_t_dq1_up:
   708                           	callstack 0
   709  000031                     	ds	1
   710  000032                     _sub_sel_kol:
   711                           	callstack 0
   712  000032                     	ds	1
   713  000033                     _sub_sel:
   714                           	callstack 0
   715  000033                     	ds	1
   716  000034                     _pressed_key:
   717                           	callstack 0
   718  000034                     	ds	1
   719  000035                     _tik_time:
   720                           	callstack 0
   721  000035                     	ds	1
   722  000036                     _keyLong:
   723                           	callstack 0
   724  000036                     	ds	1
   725  000037                     _scratch:
   726                           	callstack 0
   727  000037                     	ds	9
   728  000040                     _time_flag:
   729                           	callstack 0
   730  000040                     	ds	1
   731  000041                     _timer_val:
   732                           	callstack 0
   733  000041                     	ds	1
   734                           
   735                           	psect	dataCOMRAM
   736  000059                     __pdataCOMRAM:
   737                           	callstack 0
   738  000059                     _temperature_2_old:
   739                           	callstack 0
   740  000059                     	ds	2
   741  00005B                     _temperature_1_old:
   742                           	callstack 0
   743  00005B                     	ds	2
   744  00005D                     _temperature_2:
   745                           	callstack 0
   746  00005D                     	ds	2
   747  00005F                     _temperature_1:
   748                           	callstack 0
   749  00005F                     	ds	2
   750  000061                     _dq_num:
   751                           	callstack 0
   752  000061                     	ds	1
   753  000062                     _sub_main:
   754                           	callstack 0
   755  000062                     	ds	1
   756  000063                     _select:
   757                           	callstack 0
   758  000063                     	ds	1
   759  000064                     _minus_2:
   760                           	callstack 0
   761  000064                     	ds	1
   762  000065                     _minus_1:
   763                           	callstack 0
   764  000065                     	ds	1
   765                           
   766                           	psect	cstackCOMRAM
   767  000042                     __pcstackCOMRAM:
   768                           	callstack 0
   769  000042                     ??_myIntL:
   770  000042                     
   771                           ; 1 bytes @ 0x0
   772  000042                     	ds	3
   773  000045                     ??_read_byte:
   774  000045                     ??_lcdNibble:
   775  000045                     ?_ds18b20_get_temp:
   776                           	callstack 0
   777  000045                     ?___awdiv:
   778                           	callstack 0
   779  000045                     ?___lwdiv:
   780                           	callstack 0
   781  000045                     ds18b20_get_temp@minus:
   782                           	callstack 0
   783  000045                     ds18b20_crc8@data_in:
   784                           	callstack 0
   785  000045                     ow_reset@presence:
   786                           	callstack 0
   787  000045                     write_bit@bitval:
   788                           	callstack 0
   789  000045                     write_eep@data:
   790                           	callstack 0
   791  000045                     key_press@key:
   792                           	callstack 0
   793  000045                     key_GetKey@key:
   794                           	callstack 0
   795  000045                     EUSART_Write@txData:
   796                           	callstack 0
   797  000045                     ___lbdiv@divisor:
   798                           	callstack 0
   799  000045                     Delay_ms@delay:
   800                           	callstack 0
   801  000045                     read_eep@address:
   802                           	callstack 0
   803  000045                     ___awdiv@dividend:
   804                           	callstack 0
   805  000045                     ___lwdiv@dividend:
   806                           	callstack 0
   807                           
   808                           ; 2 bytes @ 0x3
   809  000045                     	ds	1
   810  000046                     ??_write_byte:
   811  000046                     ds18b20_crc8@num_bytes:
   812                           	callstack 0
   813  000046                     lcdNibble@nibble:
   814                           	callstack 0
   815  000046                     write_eep@address:
   816                           	callstack 0
   817  000046                     ___lbdiv@dividend:
   818                           	callstack 0
   819  000046                     EUSART_Write_Str@t:
   820                           	callstack 0
   821                           
   822                           ; 2 bytes @ 0x4
   823  000046                     	ds	1
   824  000047                     ??_Delay_ms:
   825  000047                     ds18b20_get_temp@num_dq:
   826                           	callstack 0
   827  000047                     ds18b20_crc8@bit_counter:
   828                           	callstack 0
   829  000047                     lcdWrite@type:
   830                           	callstack 0
   831  000047                     read_byte@val:
   832                           	callstack 0
   833  000047                     ___lbdiv@counter:
   834                           	callstack 0
   835  000047                     ___awdiv@divisor:
   836                           	callstack 0
   837  000047                     ___lwdiv@divisor:
   838                           	callstack 0
   839                           
   840                           ; 2 bytes @ 0x5
   841  000047                     	ds	1
   842  000048                     ds18b20_get_temp@tmp:
   843                           	callstack 0
   844  000048                     ds18b20_crc8@data:
   845                           	callstack 0
   846  000048                     lcdWrite@byte:
   847                           	callstack 0
   848  000048                     read_byte@i:
   849                           	callstack 0
   850  000048                     write_byte@val:
   851                           	callstack 0
   852  000048                     ___lbdiv@quotient:
   853                           	callstack 0
   854  000048                     Delay_ms@i:
   855                           	callstack 0
   856                           
   857                           ; 2 bytes @ 0x6
   858  000048                     	ds	1
   859  000049                     ??_clearLCD:
   860  000049                     ds18b20_crc8@feedback_bit:
   861                           	callstack 0
   862  000049                     lcd_gotoxy@y:
   863                           	callstack 0
   864  000049                     lcd_putc@c:
   865                           	callstack 0
   866  000049                     write_byte@temp:
   867                           	callstack 0
   868  000049                     ___awdiv@counter:
   869                           	callstack 0
   870  000049                     ___lbmod@divisor:
   871                           	callstack 0
   872  000049                     ds18b20_get_temp@temp:
   873                           	callstack 0
   874  000049                     cgrom_char@symbol:
   875                           	callstack 0
   876  000049                     ___lwdiv@quotient:
   877                           	callstack 0
   878                           
   879                           ; 2 bytes @ 0x7
   880  000049                     	ds	1
   881  00004A                     ??_initLCD:
   882  00004A                     ds18b20_crc8@loop_count:
   883                           	callstack 0
   884  00004A                     lcd_gotoxy@x:
   885                           	callstack 0
   886  00004A                     write_byte@i:
   887                           	callstack 0
   888  00004A                     ___awdiv@sign:
   889                           	callstack 0
   890  00004A                     ___lbmod@dividend:
   891                           	callstack 0
   892                           
   893                           ; 1 bytes @ 0x8
   894  00004A                     	ds	1
   895  00004B                     ??_init_ds18b20:
   896  00004B                     ds18b20_crc8@crc:
   897                           	callstack 0
   898  00004B                     lcd_gotoxy@address:
   899                           	callstack 0
   900  00004B                     cgrom_char@address:
   901                           	callstack 0
   902  00004B                     ___lbmod@counter:
   903                           	callstack 0
   904  00004B                     ___lwdiv@counter:
   905                           	callstack 0
   906  00004B                     ___awdiv@quotient:
   907                           	callstack 0
   908                           
   909                           ; 2 bytes @ 0x9
   910  00004B                     	ds	1
   911  00004C                     ??_outValPreset:
   912  00004C                     ?___lwmod:
   913                           	callstack 0
   914  00004C                     ds18b20_readTemp@time_flag:
   915                           	callstack 0
   916  00004C                     cgrom_char@i:
   917                           	callstack 0
   918  00004C                     ___lbmod@rem:
   919                           	callstack 0
   920  00004C                     lcdPrint@t:
   921                           	callstack 0
   922  00004C                     ___lwmod@dividend:
   923                           	callstack 0
   924  00004C                     ds18b20_readrom@temp_rom:
   925                           	callstack 0
   926                           
   927                           ; 8 bytes @ 0xA
   928  00004C                     	ds	1
   929  00004D                     ?___awmod:
   930                           	callstack 0
   931  00004D                     init_ds18b20@q:
   932                           	callstack 0
   933  00004D                     ds18b20_readTemp@timer_val:
   934                           	callstack 0
   935  00004D                     ___awmod@dividend:
   936                           	callstack 0
   937                           
   938                           ; 2 bytes @ 0xB
   939  00004D                     	ds	1
   940  00004E                     ??_lcdPrint:
   941  00004E                     ??_ds18b20_readTemp:
   942  00004E                     init_ds18b20@i:
   943                           	callstack 0
   944  00004E                     ___lwmod@divisor:
   945                           	callstack 0
   946                           
   947                           ; 2 bytes @ 0xC
   948  00004E                     	ds	1
   949  00004F                     ___awmod@divisor:
   950                           	callstack 0
   951                           
   952                           ; 2 bytes @ 0xD
   953  00004F                     	ds	1
   954  000050                     ___lwmod@counter:
   955                           	callstack 0
   956  000050                     ds18b20_readTemp@temp:
   957                           	callstack 0
   958                           
   959                           ; 2 bytes @ 0xE
   960  000050                     	ds	1
   961  000051                     ___awmod@counter:
   962                           	callstack 0
   963                           
   964                           ; 1 bytes @ 0xF
   965  000051                     	ds	1
   966  000052                     ds18b20_readTemp@j:
   967                           	callstack 0
   968  000052                     ___awmod@sign:
   969                           	callstack 0
   970                           
   971                           ; 1 bytes @ 0x10
   972  000052                     	ds	1
   973  000053                     ds18b20_readTemp@i:
   974                           	callstack 0
   975                           
   976                           ; 1 bytes @ 0x11
   977  000053                     	ds	1
   978  000054                     ds18b20_readrom@num_dq:
   979                           	callstack 0
   980                           
   981                           ; 1 bytes @ 0x12
   982  000054                     	ds	1
   983  000055                     ds18b20_readrom@i:
   984                           	callstack 0
   985                           
   986                           ; 1 bytes @ 0x13
   987  000055                     	ds	1
   988  000056                     ??_main:
   989                           
   990                           ; 1 bytes @ 0x14
   991  000056                     	ds	3
   992                           
   993 ;;
   994 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   995 ;;
   996 ;; *************** function _main *****************
   997 ;; Defined at:
   998 ;;		line 41 in file "main.c"
   999 ;; Parameters:    Size  Location     Type
  1000 ;;		None
  1001 ;; Auto vars:     Size  Location     Type
  1002 ;;		None
  1003 ;; Return value:  Size  Location     Type
  1004 ;;                  1    wreg      void 
  1005 ;; Registers used:
  1006 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1007 ;; Tracked objects:
  1008 ;;		On entry : 0/0
  1009 ;;		On exit  : 0/0
  1010 ;;		Unchanged: 0/0
  1011 ;; Data sizes:     COMRAM   BANK0   BANK1
  1012 ;;      Params:         0       0       0
  1013 ;;      Locals:         0       0       0
  1014 ;;      Temps:          3       0       0
  1015 ;;      Totals:         3       0       0
  1016 ;;Total ram usage:        3 bytes
  1017 ;; Hardware stack levels required when called: 7
  1018 ;; This function calls:
  1019 ;;		_Delay_ms
  1020 ;;		_EUSART_Write
  1021 ;;		_EUSART_Write_Str
  1022 ;;		_Main_init
  1023 ;;		___awdiv
  1024 ;;		___awmod
  1025 ;;		___lbdiv
  1026 ;;		___lbmod
  1027 ;;		___lwdiv
  1028 ;;		___lwmod
  1029 ;;		_clearLCD
  1030 ;;		_ds18b20_get_temp
  1031 ;;		_ds18b20_readTemp
  1032 ;;		_ds18b20_readrom
  1033 ;;		_key_GetKey
  1034 ;;		_key_press
  1035 ;;		_lcdPrint
  1036 ;;		_lcd_gotoxy
  1037 ;;		_lcd_putc
  1038 ;;		_outValPreset
  1039 ;;		_read_eep
  1040 ;;		_write_eep
  1041 ;; This function is called by:
  1042 ;;		Startup code after reset
  1043 ;; This function uses a non-reentrant model
  1044 ;;
  1045                           
  1046                           	psect	text0
  1047  00009E                     __ptext0:
  1048                           	callstack 0
  1049  00009E                     _main:
  1050                           	callstack 24
  1051                           
  1052                           ;main.c: 42: Main_init();
  1053                           
  1054                           ;incstack = 0
  1055  00009E  EC33  F00A         	call	_Main_init	;wreg free
  1056                           
  1057                           ;main.c: 44: lcd_gotoxy(1, 1);
  1058  0000A2  0E01               	movlw	1
  1059  0000A4  6E49               	movwf	lcd_gotoxy@y^0,c
  1060  0000A6  EC58  F00D         	call	_lcd_gotoxy
  1061                           
  1062                           ;main.c: 45: lcdPrint("---ÒÅÐÌÎÌÅÒÐ---");
  1063  0000AA  0EFF               	movlw	low STR_1
  1064  0000AC  6E4C               	movwf	lcdPrint@t^0,c
  1065  0000AE  0E1E               	movlw	high STR_1
  1066  0000B0  6E4D               	movwf	(lcdPrint@t+1)^0,c
  1067  0000B2  EC9A  F009         	call	_lcdPrint	;wreg free
  1068                           
  1069                           ;main.c: 46: lcd_gotoxy(1, 2);
  1070  0000B6  ECC2  F007         	call	PL28	;call to abstracted procedure
  1071  0000BA  EC58  F00D         	call	_lcd_gotoxy
  1072                           
  1073                           ;main.c: 47: lcdPrint("(c)Ivan_fd v1.5");
  1074  0000BE  0E2F               	movlw	low STR_2
  1075  0000C0  6E4C               	movwf	lcdPrint@t^0,c
  1076  0000C2  0E1F               	movlw	high STR_2
  1077  0000C4  6E4D               	movwf	(lcdPrint@t+1)^0,c
  1078  0000C6  EC9A  F009         	call	_lcdPrint	;wreg free
  1079                           
  1080                           ;main.c: 48: Delay_ms(2000);
  1081  0000CA  0E07               	movlw	7
  1082  0000CC  6E46               	movwf	(Delay_ms@delay+1)^0,c
  1083  0000CE  0ED0               	movlw	208
  1084  0000D0  6E45               	movwf	Delay_ms@delay^0,c
  1085  0000D2  EC04  F00D         	call	_Delay_ms	;wreg free
  1086                           
  1087                           ;main.c: 49: clearLCD();
  1088  0000D6  EC74  F00D         	call	_clearLCD	;wreg free
  1089                           
  1090                           ;main.c: 50: if ((PORTB & (1 << 1)) == 0) {
  1091  0000DA  B281               	btfsc	129,1,c	;volatile
  1092  0000DC  D017               	goto	l3483
  1093                           
  1094                           ;main.c: 51: clearLCD();
  1095  0000DE  EC74  F00D         	call	_clearLCD	;wreg free
  1096                           
  1097                           ;main.c: 52: select = 2;
  1098  0000E2  0E02               	movlw	2
  1099                           
  1100                           ;main.c: 53: lcd_gotoxy(1, 1);
  1101  0000E4  ECCB  F007         	call	PL36	;call to abstracted procedure
  1102  0000E8  EC58  F00D         	call	_lcd_gotoxy
  1103                           
  1104                           ;main.c: 54: lcdPrint("Äàò÷èê 1, àáî 2");
  1105  0000EC  0E0F               	movlw	low STR_3
  1106  0000EE  6E4C               	movwf	lcdPrint@t^0,c
  1107  0000F0  0E1F               	movlw	high STR_3
  1108  0000F2  6E4D               	movwf	(lcdPrint@t+1)^0,c
  1109  0000F4  EC9A  F009         	call	_lcdPrint	;wreg free
  1110                           
  1111                           ;main.c: 55: lcd_gotoxy(1, 2);
  1112  0000F8  ECC2  F007         	call	PL28	;call to abstracted procedure
  1113  0000FC  EC58  F00D         	call	_lcd_gotoxy
  1114                           
  1115                           ;main.c: 56: lcdPrint("Âèáið 18B20:");
  1116  000100  0EA4               	movlw	low STR_4
  1117  000102  6E4C               	movwf	lcdPrint@t^0,c
  1118  000104  0E1F               	movlw	high STR_4
  1119  000106  6E4D               	movwf	(lcdPrint@t+1)^0,c
  1120  000108  EC9A  F009         	call	_lcdPrint	;wreg free
  1121  00010C                     l3483:
  1122                           
  1123                           ;main.c: 58: };main.c: 60: set_t_dq1_up = read_eep(16);
  1124  00010C  6A46               	clrf	(read_eep@address+1)^0,c
  1125  00010E  0E10               	movlw	16
  1126  000110  6E45               	movwf	read_eep@address^0,c
  1127  000112  EC8C  F00D         	call	_read_eep	;wreg free
  1128  000116  6E31               	movwf	_set_t_dq1_up^0,c
  1129                           
  1130                           ;main.c: 61: set_t_dq1_dwn = read_eep(17);
  1131  000118  6A46               	clrf	(read_eep@address+1)^0,c
  1132  00011A  0E11               	movlw	17
  1133  00011C  6E45               	movwf	read_eep@address^0,c
  1134  00011E  EC8C  F00D         	call	_read_eep	;wreg free
  1135  000122  6E30               	movwf	_set_t_dq1_dwn^0,c
  1136                           
  1137                           ;main.c: 63: set_t_dq2 = (uint16_t) read_eep(23) << 8 | read_eep(24);
  1138  000124  ECE1  F007         	call	PL50	;call to abstracted procedure
  1139  000128  EC8C  F00D         	call	_read_eep	;wreg free
  1140  00012C  ECD2  F007         	call	PL40	;call to abstracted procedure
  1141  000130  EC8C  F00D         	call	_read_eep	;wreg free
  1142  000134  ECB4  F007         	call	PL24	;call to abstracted procedure
  1143                           
  1144                           ;main.c: 64: temp1_fix = (uint16_t) read_eep(20) << 8 | read_eep(20 + 1);
  1145  000138  6A46               	clrf	(read_eep@address+1)^0,c
  1146  00013A  0E15               	movlw	21
  1147  00013C  6E45               	movwf	read_eep@address^0,c
  1148  00013E  EC8C  F00D         	call	_read_eep	;wreg free
  1149  000142  6E56               	movwf	??_main^0,c
  1150  000144  6A46               	clrf	(read_eep@address+1)^0,c
  1151  000146  0E14               	movlw	20
  1152  000148  6E45               	movwf	read_eep@address^0,c
  1153  00014A  EC8C  F00D         	call	_read_eep	;wreg free
  1154  00014E  6E57               	movwf	(??_main+1)^0,c
  1155  000150  5056               	movf	??_main^0,w,c
  1156  000152  6E27               	movwf	_temp1_fix^0,c
  1157  000154  C057  F028         	movff	??_main+1,_temp1_fix+1
  1158                           
  1159                           ;main.c: 67: lcd_gotoxy(10, 2);
  1160  000158  ECCF  F007         	call	PL38	;call to abstracted procedure
  1161  00015C  EC58  F00D         	call	_lcd_gotoxy
  1162                           
  1163                           ;main.c: 68: lcdPrint("1");
  1164  000160  0EFC               	movlw	low STR_5
  1165  000162  6E4C               	movwf	lcdPrint@t^0,c
  1166  000164  0E1F               	movlw	high STR_5
  1167  000166  6E4D               	movwf	(lcdPrint@t+1)^0,c
  1168  000168  EC9A  F009         	call	_lcdPrint	;wreg free
  1169  00016C                     l3495:
  1170                           
  1171                           ;main.c: 72: if (read_key) {
  1172  00016C  A267               	btfss	(_read_key/(0+8))^0,_read_key& (0+7),c
  1173  00016E  D003               	goto	l3501
  1174                           
  1175                           ;main.c: 73: key_press();
  1176  000170  EC91  F00B         	call	_key_press	;wreg free
  1177                           
  1178                           ;main.c: 74: read_key = 0;
  1179  000174  9267               	bcf	(_read_key/(0+8))^0,_read_key& (0+7),c
  1180  000176                     l3501:
  1181                           
  1182                           ;main.c: 75: };main.c: 76: pressed_key = key_GetKey();
  1183  000176  ECA2  F00D         	call	_key_GetKey	;wreg free
  1184  00017A  6E34               	movwf	_pressed_key^0,c
  1185                           
  1186                           ;main.c: 78: switch (select) {
  1187  00017C  EF64  F007         	goto	l3977
  1188  000180                     l3503:
  1189                           
  1190                           ;main.c: 80: if (ds18b20_readTemp(&time_flag, &timer_val)) {
  1191  000180  0E40               	movlw	low _time_flag
  1192  000182  6E4C               	movwf	ds18b20_readTemp@time_flag^0,c
  1193  000184  0E41               	movlw	low _timer_val
  1194  000186  6E4D               	movwf	ds18b20_readTemp@timer_val^0,c
  1195  000188  EC2C  F009         	call	_ds18b20_readTemp	;wreg free
  1196  00018C  0900               	iorlw	0
  1197  00018E  E027               	bz	l186
  1198                           
  1199                           ;main.c: 81: temperature_1_old = temperature_1;
  1200  000190  C05F  F05B         	movff	_temperature_1,_temperature_1_old
  1201  000194  C060  F05C         	movff	_temperature_1+1,_temperature_1_old+1
  1202                           
  1203                           ;main.c: 82: temperature_2_old = temperature_2;
  1204  000198  C05D  F059         	movff	_temperature_2,_temperature_2_old
  1205  00019C  C05E  F05A         	movff	_temperature_2+1,_temperature_2_old+1
  1206                           
  1207                           ;main.c: 83: temperature_1 = ds18b20_get_temp(1, &minus_1);
  1208  0001A0  0E65               	movlw	low _minus_1
  1209  0001A2  6E45               	movwf	ds18b20_get_temp@minus^0,c
  1210  0001A4  0E01               	movlw	1
  1211  0001A6  ECEE  F009         	call	_ds18b20_get_temp
  1212  0001AA  C045  F05F         	movff	?_ds18b20_get_temp,_temperature_1
  1213  0001AE  C046  F060         	movff	?_ds18b20_get_temp+1,_temperature_1+1
  1214                           
  1215                           ;main.c: 84: temperature_2 = ds18b20_get_temp(2, &minus_2);
  1216  0001B2  0E64               	movlw	low _minus_2
  1217  0001B4  6E45               	movwf	ds18b20_get_temp@minus^0,c
  1218  0001B6  0E02               	movlw	2
  1219  0001B8  ECEE  F009         	call	_ds18b20_get_temp
  1220  0001BC  C045  F05D         	movff	?_ds18b20_get_temp,_temperature_2
  1221  0001C0  C046  F05E         	movff	?_ds18b20_get_temp+1,_temperature_2+1
  1222                           
  1223                           ;main.c: 85: if((temperature_1 != temperature_1_old) || (temperature_2 != temperature_2_
      +                          old))
  1224  0001C4  505B               	movf	_temperature_1_old^0,w,c
  1225  0001C6  185F               	xorwf	_temperature_1^0,w,c
  1226  0001C8  E109               	bnz	l189
  1227  0001CA  505C               	movf	(_temperature_1_old+1)^0,w,c
  1228  0001CC  1860               	xorwf	(_temperature_1+1)^0,w,c
  1229  0001CE  E106               	bnz	u2490
  1230  0001D0  5059               	movf	_temperature_2_old^0,w,c
  1231  0001D2  185D               	xorwf	_temperature_2^0,w,c
  1232  0001D4  E103               	bnz	u2490
  1233  0001D6  505A               	movf	(_temperature_2_old+1)^0,w,c
  1234  0001D8  185E               	xorwf	(_temperature_2+1)^0,w,c
  1235  0001DA  E001               	bz	l186
  1236  0001DC                     u2490:
  1237  0001DC                     l189:
  1238                           
  1239                           ;main.c: 86: en_send_usart = 1;
  1240  0001DC  8467               	bsf	(_en_send_usart/(0+8))^0,_en_send_usart& (0+7),c
  1241  0001DE                     l186:
  1242                           
  1243                           ;main.c: 87: };main.c: 89: if (en_send_usart) {
  1244  0001DE  A467               	btfss	(_en_send_usart/(0+8))^0,_en_send_usart& (0+7),c
  1245  0001E0  D097               	goto	l3543
  1246                           
  1247                           ;main.c: 90: en_send_usart = 0;
  1248  0001E2  9467               	bcf	(_en_send_usart/(0+8))^0,_en_send_usart& (0+7),c
  1249                           
  1250                           ;main.c: 91: if (temperature_1 != 32767) {
  1251  0001E4  285F               	incf	_temperature_1^0,w,c
  1252  0001E6  E103               	bnz	u2510
  1253  0001E8  0E7F               	movlw	127
  1254  0001EA  1860               	xorwf	(_temperature_1+1)^0,w,c
  1255  0001EC  E039               	bz	l3527
  1256  0001EE                     u2510:
  1257                           
  1258                           ;main.c: 92: EUSART_Write_Str("tk:");
  1259  0001EE  ECD7  F007         	call	PL46	;call to abstracted procedure
  1260  0001F2  EC39  F00D         	call	_EUSART_Write_Str	;wreg free
  1261                           
  1262                           ;main.c: 93: EUSART_Write(((temperature_1 / 1000) % 10) + 48);
  1263  0001F6  ECAB  F007         	call	PL18	;call to abstracted procedure
  1264  0001FA  EC8F  F007         	call	PL6	;call to abstracted procedure
  1265  0001FE  ECE3  F00B         	call	___lwdiv	;wreg free
  1266  000202  EC81  F007         	call	PL2	;call to abstracted procedure
  1267  000206  EC27  F00C         	call	___lwmod	;wreg free
  1268  00020A  504C               	movf	?___lwmod^0,w,c
  1269  00020C  0F30               	addlw	48
  1270  00020E  ECC7  F00C         	call	_EUSART_Write
  1271                           
  1272                           ;main.c: 94: EUSART_Write(((temperature_1 / 100) % 10) + 48);
  1273  000212  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1274  000214  0E64               	movlw	100
  1275  000216  EC8F  F007         	call	PL6	;call to abstracted procedure
  1276  00021A  ECE3  F00B         	call	___lwdiv	;wreg free
  1277  00021E  EC81  F007         	call	PL2	;call to abstracted procedure
  1278  000222  EC27  F00C         	call	___lwmod	;wreg free
  1279  000226  504C               	movf	?___lwmod^0,w,c
  1280  000228  0F30               	addlw	48
  1281  00022A  ECC7  F00C         	call	_EUSART_Write
  1282                           
  1283                           ;main.c: 95: EUSART_Write(((temperature_1 / 10) % 10) + 48);
  1284  00022E  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1285  000230  0E0A               	movlw	10
  1286  000232  EC8F  F007         	call	PL6	;call to abstracted procedure
  1287  000236  ECE3  F00B         	call	___lwdiv	;wreg free
  1288  00023A  EC81  F007         	call	PL2	;call to abstracted procedure
  1289  00023E  EC27  F00C         	call	___lwmod	;wreg free
  1290  000242  504C               	movf	?___lwmod^0,w,c
  1291  000244  0F30               	addlw	48
  1292  000246  ECC7  F00C         	call	_EUSART_Write
  1293                           
  1294                           ;main.c: 96: EUSART_Write((temperature_1 % 10) + 48);
  1295  00024A  EC99  F007         	call	PL12	;call to abstracted procedure
  1296  00024E  EC95  F007         	call	PL10	;call to abstracted procedure
  1297  000252  EC27  F00C         	call	___lwmod	;wreg free
  1298  000256  504C               	movf	?___lwmod^0,w,c
  1299  000258  0F30               	addlw	48
  1300  00025A  ECC7  F00C         	call	_EUSART_Write
  1301                           
  1302                           ;main.c: 98: } else {
  1303  00025E  D00A               	goto	l3529
  1304  000260                     l3527:
  1305                           
  1306                           ;main.c: 99: EUSART_Write_Str("tk:");
  1307  000260  ECD7  F007         	call	PL46	;call to abstracted procedure
  1308  000264  EC39  F00D         	call	_EUSART_Write_Str	;wreg free
  1309                           
  1310                           ;main.c: 100: EUSART_Write_Str("0000");
  1311  000268  0ECC               	movlw	low STR_8
  1312  00026A  6E46               	movwf	EUSART_Write_Str@t^0,c
  1313  00026C  0E1F               	movlw	high STR_8
  1314  00026E  6E47               	movwf	(EUSART_Write_Str@t+1)^0,c
  1315  000270  EC39  F00D         	call	_EUSART_Write_Str	;wreg free
  1316  000274                     l3529:
  1317                           
  1318                           ;main.c: 101: };main.c: 102: if (temperature_2 != 32767) {
  1319  000274  285D               	incf	_temperature_2^0,w,c
  1320  000276  E103               	bnz	u2520
  1321  000278  0E7F               	movlw	127
  1322  00027A  185E               	xorwf	(_temperature_2+1)^0,w,c
  1323  00027C  E03F               	bz	l3541
  1324  00027E                     u2520:
  1325                           
  1326                           ;main.c: 103: EUSART_Write_Str("tb:");
  1327  00027E  ECDC  F007         	call	PL48	;call to abstracted procedure
  1328  000282  EC39  F00D         	call	_EUSART_Write_Str	;wreg free
  1329                           
  1330                           ;main.c: 104: EUSART_Write(((temperature_2 / 1000) % 10) + 48);
  1331  000286  ECAB  F007         	call	PL18	;call to abstracted procedure
  1332  00028A  EC89  F007         	call	PL4	;call to abstracted procedure
  1333  00028E  ECE3  F00B         	call	___lwdiv	;wreg free
  1334  000292  EC81  F007         	call	PL2	;call to abstracted procedure
  1335  000296  EC27  F00C         	call	___lwmod	;wreg free
  1336  00029A  504C               	movf	?___lwmod^0,w,c
  1337  00029C  0F30               	addlw	48
  1338  00029E  ECC7  F00C         	call	_EUSART_Write
  1339                           
  1340                           ;main.c: 105: EUSART_Write(((temperature_2 / 100) % 10) + 48);
  1341  0002A2  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1342  0002A4  0E64               	movlw	100
  1343  0002A6  EC89  F007         	call	PL4	;call to abstracted procedure
  1344  0002AA  ECE3  F00B         	call	___lwdiv	;wreg free
  1345  0002AE  EC81  F007         	call	PL2	;call to abstracted procedure
  1346  0002B2  EC27  F00C         	call	___lwmod	;wreg free
  1347  0002B6  504C               	movf	?___lwmod^0,w,c
  1348  0002B8  0F30               	addlw	48
  1349  0002BA  ECC7  F00C         	call	_EUSART_Write
  1350                           
  1351                           ;main.c: 106: EUSART_Write(((temperature_2 / 10) % 10) + 48);
  1352  0002BE  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1353  0002C0  0E0A               	movlw	10
  1354  0002C2  EC89  F007         	call	PL4	;call to abstracted procedure
  1355  0002C6  ECE3  F00B         	call	___lwdiv	;wreg free
  1356  0002CA  EC81  F007         	call	PL2	;call to abstracted procedure
  1357  0002CE  EC27  F00C         	call	___lwmod	;wreg free
  1358  0002D2  504C               	movf	?___lwmod^0,w,c
  1359  0002D4  0F30               	addlw	48
  1360  0002D6  ECC7  F00C         	call	_EUSART_Write
  1361                           
  1362                           ;main.c: 107: EUSART_Write((temperature_2 % 10) + 48);
  1363  0002DA  EC9E  F007         	call	PL14	;call to abstracted procedure
  1364  0002DE  EC95  F007         	call	PL10	;call to abstracted procedure
  1365  0002E2  EC27  F00C         	call	___lwmod	;wreg free
  1366  0002E6  504C               	movf	?___lwmod^0,w,c
  1367  0002E8  0F30               	addlw	48
  1368  0002EA  ECC7  F00C         	call	_EUSART_Write
  1369                           
  1370                           ;main.c: 108: EUSART_Write_Str("\r\n");
  1371  0002EE  0EC9               	movlw	low (STR_12+4)
  1372  0002F0  6E46               	movwf	EUSART_Write_Str@t^0,c
  1373  0002F2  0E1F               	movlw	high (STR_12+4)
  1374  0002F4  6E47               	movwf	(EUSART_Write_Str@t+1)^0,c
  1375  0002F6  EC39  F00D         	call	_EUSART_Write_Str	;wreg free
  1376                           
  1377                           ;main.c: 109: } else {
  1378  0002FA  D00A               	goto	l3543
  1379  0002FC                     l3541:
  1380                           
  1381                           ;main.c: 110: EUSART_Write_Str("tb:");
  1382  0002FC  ECDC  F007         	call	PL48	;call to abstracted procedure
  1383  000300  EC39  F00D         	call	_EUSART_Write_Str	;wreg free
  1384                           
  1385                           ;main.c: 111: EUSART_Write_Str("0000\r\n");
  1386  000304  0EC5               	movlw	low STR_12
  1387  000306  6E46               	movwf	EUSART_Write_Str@t^0,c
  1388  000308  0E1F               	movlw	high STR_12
  1389  00030A  6E47               	movwf	(EUSART_Write_Str@t+1)^0,c
  1390  00030C  EC39  F00D         	call	_EUSART_Write_Str	;wreg free
  1391  000310                     l3543:
  1392                           
  1393                           ;main.c: 113: };main.c: 114: };main.c: 120: lcd_gotoxy(1, 1);
  1394  000310  0E01               	movlw	1
  1395  000312  6E49               	movwf	lcd_gotoxy@y^0,c
  1396  000314  EC58  F00D         	call	_lcd_gotoxy
  1397                           
  1398                           ;main.c: 121: lcdPrint("Êë:");
  1399  000318  0ED5               	movlw	low STR_13
  1400  00031A  6E4C               	movwf	lcdPrint@t^0,c
  1401  00031C  0E1F               	movlw	high STR_13
  1402  00031E  6E4D               	movwf	(lcdPrint@t+1)^0,c
  1403  000320  EC9A  F009         	call	_lcdPrint	;wreg free
  1404                           
  1405                           ;main.c: 123: if (!(temperature_1 == 32767)) {
  1406  000324  285F               	incf	_temperature_1^0,w,c
  1407  000326  E104               	bnz	u2530
  1408  000328  0E7F               	movlw	127
  1409  00032A  1860               	xorwf	(_temperature_1+1)^0,w,c
  1410  00032C  E101 D0B3          	bz	l3559
  1411  000330                     u2530:
  1412                           
  1413                           ;main.c: 124: if (((temperature_1 / 1000) % 10) == 0) {
  1414  000330  ECAB  F007         	call	PL18	;call to abstracted procedure
  1415  000334  EC8F  F007         	call	PL6	;call to abstracted procedure
  1416  000338  ECE3  F00B         	call	___lwdiv	;wreg free
  1417  00033C  EC81  F007         	call	PL2	;call to abstracted procedure
  1418  000340  EC27  F00C         	call	___lwmod	;wreg free
  1419  000344  504C               	movf	?___lwmod^0,w,c
  1420  000346  104D               	iorwf	(?___lwmod+1)^0,w,c
  1421  000348  E168               	bnz	l3557
  1422                           
  1423                           ;main.c: 125: if (((temperature_1 / 100) % 10) == 0) {
  1424  00034A  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1425  00034C  0E64               	movlw	100
  1426  00034E  EC8F  F007         	call	PL6	;call to abstracted procedure
  1427  000352  ECE3  F00B         	call	___lwdiv	;wreg free
  1428  000356  EC81  F007         	call	PL2	;call to abstracted procedure
  1429  00035A  EC27  F00C         	call	___lwmod	;wreg free
  1430  00035E  504C               	movf	?___lwmod^0,w,c
  1431  000360  104D               	iorwf	(?___lwmod+1)^0,w,c
  1432  000362  E128               	bnz	l3555
  1433                           
  1434                           ;main.c: 128: lcd_putc(((temperature_1 / 10) % 10) + 48);
  1435  000364  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1436  000366  0E0A               	movlw	10
  1437  000368  EC8F  F007         	call	PL6	;call to abstracted procedure
  1438  00036C  ECE3  F00B         	call	___lwdiv	;wreg free
  1439  000370  EC81  F007         	call	PL2	;call to abstracted procedure
  1440  000374  EC27  F00C         	call	___lwmod	;wreg free
  1441  000378  504C               	movf	?___lwmod^0,w,c
  1442  00037A  0F30               	addlw	48
  1443  00037C  EC9C  F00D         	call	_lcd_putc
  1444                           
  1445                           ;main.c: 129: lcd_putc('.');
  1446  000380  0E2E               	movlw	46
  1447  000382  EC9C  F00D         	call	_lcd_putc
  1448                           
  1449                           ;main.c: 130: lcd_putc(((temperature_1 % 10) + 48));
  1450  000386  EC99  F007         	call	PL12	;call to abstracted procedure
  1451  00038A  EC95  F007         	call	PL10	;call to abstracted procedure
  1452  00038E  EC27  F00C         	call	___lwmod	;wreg free
  1453  000392  504C               	movf	?___lwmod^0,w,c
  1454  000394  0F30               	addlw	48
  1455  000396  EC9C  F00D         	call	_lcd_putc
  1456                           
  1457                           ;main.c: 131: lcd_putc(0x01);
  1458  00039A  0E01               	movlw	1
  1459  00039C  EC9C  F00D         	call	_lcd_putc
  1460                           
  1461                           ;main.c: 133: lcd_putc(' ');
  1462  0003A0  0E20               	movlw	32
  1463  0003A2  EC9C  F00D         	call	_lcd_putc
  1464                           
  1465                           ;main.c: 134: lcd_putc(' ');
  1466  0003A6  0E20               	movlw	32
  1467  0003A8  EC9C  F00D         	call	_lcd_putc
  1468                           
  1469                           ;main.c: 135: lcd_putc(' ');
  1470  0003AC  0E20               	movlw	32
  1471  0003AE  EC9C  F00D         	call	_lcd_putc
  1472                           
  1473                           ;main.c: 136: } else {
  1474  0003B2  D083               	goto	l200
  1475  0003B4                     l3555:
  1476                           
  1477                           ;main.c: 138: lcd_putc(((temperature_1 / 100) % 10) + 48);
  1478  0003B4  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1479  0003B6  0E64               	movlw	100
  1480  0003B8  EC8F  F007         	call	PL6	;call to abstracted procedure
  1481  0003BC  ECE3  F00B         	call	___lwdiv	;wreg free
  1482  0003C0  EC81  F007         	call	PL2	;call to abstracted procedure
  1483  0003C4  EC27  F00C         	call	___lwmod	;wreg free
  1484  0003C8  504C               	movf	?___lwmod^0,w,c
  1485  0003CA  0F30               	addlw	48
  1486  0003CC  EC9C  F00D         	call	_lcd_putc
  1487                           
  1488                           ;main.c: 139: lcd_putc(((temperature_1 / 10) % 10) + 48);
  1489  0003D0  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1490  0003D2  0E0A               	movlw	10
  1491  0003D4  EC8F  F007         	call	PL6	;call to abstracted procedure
  1492  0003D8  ECE3  F00B         	call	___lwdiv	;wreg free
  1493  0003DC  EC81  F007         	call	PL2	;call to abstracted procedure
  1494  0003E0  EC27  F00C         	call	___lwmod	;wreg free
  1495  0003E4  504C               	movf	?___lwmod^0,w,c
  1496  0003E6  0F30               	addlw	48
  1497  0003E8  EC9C  F00D         	call	_lcd_putc
  1498                           
  1499                           ;main.c: 140: lcd_putc('.');
  1500  0003EC  0E2E               	movlw	46
  1501  0003EE  EC9C  F00D         	call	_lcd_putc
  1502                           
  1503                           ;main.c: 141: lcd_putc(((temperature_1 % 10) + 48));
  1504  0003F2  EC99  F007         	call	PL12	;call to abstracted procedure
  1505  0003F6  EC95  F007         	call	PL10	;call to abstracted procedure
  1506  0003FA  EC27  F00C         	call	___lwmod	;wreg free
  1507  0003FE  504C               	movf	?___lwmod^0,w,c
  1508  000400  0F30               	addlw	48
  1509  000402  EC9C  F00D         	call	_lcd_putc
  1510                           
  1511                           ;main.c: 142: lcd_putc(0x01);
  1512  000406  0E01               	movlw	1
  1513  000408  EC9C  F00D         	call	_lcd_putc
  1514                           
  1515                           ;main.c: 144: lcd_putc(' ');
  1516  00040C  0E20               	movlw	32
  1517  00040E  EC9C  F00D         	call	_lcd_putc
  1518                           
  1519                           ;main.c: 145: lcd_putc(' ');
  1520  000412  0E20               	movlw	32
  1521  000414  EC9C  F00D         	call	_lcd_putc
  1522  000418  D050               	goto	l200
  1523  00041A                     l3557:
  1524                           
  1525                           ;main.c: 150: lcd_putc(((temperature_1 / 1000) % 10) + 48);
  1526  00041A  ECAB  F007         	call	PL18	;call to abstracted procedure
  1527  00041E  EC8F  F007         	call	PL6	;call to abstracted procedure
  1528  000422  ECE3  F00B         	call	___lwdiv	;wreg free
  1529  000426  EC81  F007         	call	PL2	;call to abstracted procedure
  1530  00042A  EC27  F00C         	call	___lwmod	;wreg free
  1531  00042E  504C               	movf	?___lwmod^0,w,c
  1532  000430  0F30               	addlw	48
  1533  000432  EC9C  F00D         	call	_lcd_putc
  1534                           
  1535                           ;main.c: 151: lcd_putc(((temperature_1 / 100) % 10) + 48);
  1536  000436  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1537  000438  0E64               	movlw	100
  1538  00043A  EC8F  F007         	call	PL6	;call to abstracted procedure
  1539  00043E  ECE3  F00B         	call	___lwdiv	;wreg free
  1540  000442  EC81  F007         	call	PL2	;call to abstracted procedure
  1541  000446  EC27  F00C         	call	___lwmod	;wreg free
  1542  00044A  504C               	movf	?___lwmod^0,w,c
  1543  00044C  0F30               	addlw	48
  1544  00044E  EC9C  F00D         	call	_lcd_putc
  1545                           
  1546                           ;main.c: 152: lcd_putc(((temperature_1 / 10) % 10) + 48);
  1547  000452  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1548  000454  0E0A               	movlw	10
  1549  000456  EC8F  F007         	call	PL6	;call to abstracted procedure
  1550  00045A  ECE3  F00B         	call	___lwdiv	;wreg free
  1551  00045E  EC81  F007         	call	PL2	;call to abstracted procedure
  1552  000462  EC27  F00C         	call	___lwmod	;wreg free
  1553  000466  504C               	movf	?___lwmod^0,w,c
  1554  000468  0F30               	addlw	48
  1555  00046A  EC9C  F00D         	call	_lcd_putc
  1556                           
  1557                           ;main.c: 153: lcd_putc('.');
  1558  00046E  0E2E               	movlw	46
  1559  000470  EC9C  F00D         	call	_lcd_putc
  1560                           
  1561                           ;main.c: 154: lcd_putc(((temperature_1 % 10) + 48));
  1562  000474  EC99  F007         	call	PL12	;call to abstracted procedure
  1563  000478  EC95  F007         	call	PL10	;call to abstracted procedure
  1564  00047C  EC27  F00C         	call	___lwmod	;wreg free
  1565  000480  504C               	movf	?___lwmod^0,w,c
  1566  000482  0F30               	addlw	48
  1567  000484  EC9C  F00D         	call	_lcd_putc
  1568                           
  1569                           ;main.c: 155: lcd_putc(0x01);
  1570  000488  0E01               	movlw	1
  1571  00048A  EC9C  F00D         	call	_lcd_putc
  1572                           
  1573                           ;main.c: 157: lcd_putc(' ');
  1574  00048E  0E20               	movlw	32
  1575  000490  EC9C  F00D         	call	_lcd_putc
  1576  000494  D012               	goto	l200
  1577  000496                     l3559:
  1578                           
  1579                           ;main.c: 161: lcd_putc('-');
  1580  000496  0E2D               	movlw	45
  1581  000498  EC9C  F00D         	call	_lcd_putc
  1582                           
  1583                           ;main.c: 162: lcd_putc('-');
  1584  00049C  0E2D               	movlw	45
  1585  00049E  EC9C  F00D         	call	_lcd_putc
  1586                           
  1587                           ;main.c: 163: lcd_putc('-');
  1588  0004A2  0E2D               	movlw	45
  1589  0004A4  EC9C  F00D         	call	_lcd_putc
  1590                           
  1591                           ;main.c: 164: lcd_putc(' ');
  1592  0004A8  0E20               	movlw	32
  1593  0004AA  EC9C  F00D         	call	_lcd_putc
  1594                           
  1595                           ;main.c: 165: lcd_putc(' ');
  1596  0004AE  0E20               	movlw	32
  1597  0004B0  EC9C  F00D         	call	_lcd_putc
  1598                           
  1599                           ;main.c: 166: lcd_putc(' ');
  1600  0004B4  0E20               	movlw	32
  1601  0004B6  EC9C  F00D         	call	_lcd_putc
  1602  0004BA                     l200:
  1603                           
  1604                           ;main.c: 168: };main.c: 172: lcd_gotoxy(11, 1);
  1605  0004BA  0E01               	movlw	1
  1606  0004BC  6E49               	movwf	lcd_gotoxy@y^0,c
  1607  0004BE  0E0B               	movlw	11
  1608  0004C0  EC58  F00D         	call	_lcd_gotoxy
  1609                           
  1610                           ;main.c: 174: lcd_putc(0xAA);
  1611  0004C4  0EAA               	movlw	170
  1612  0004C6  EC9C  F00D         	call	_lcd_putc
  1613                           
  1614                           ;main.c: 175: lcd_putc(((temp1_fix / 100) % 10) + 48);
  1615  0004CA  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1616  0004CC  0E64               	movlw	100
  1617  0004CE  ECC5  F007         	call	PL34	;call to abstracted procedure
  1618  0004D2  ECE3  F00B         	call	___lwdiv	;wreg free
  1619  0004D6  EC81  F007         	call	PL2	;call to abstracted procedure
  1620  0004DA  EC27  F00C         	call	___lwmod	;wreg free
  1621  0004DE  504C               	movf	?___lwmod^0,w,c
  1622  0004E0  0F30               	addlw	48
  1623  0004E2  EC9C  F00D         	call	_lcd_putc
  1624                           
  1625                           ;main.c: 176: lcd_putc(((temp1_fix / 10) % 10) + 48);
  1626  0004E6  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1627  0004E8  0E0A               	movlw	10
  1628  0004EA  ECC5  F007         	call	PL34	;call to abstracted procedure
  1629  0004EE  ECE3  F00B         	call	___lwdiv	;wreg free
  1630  0004F2  EC81  F007         	call	PL2	;call to abstracted procedure
  1631  0004F6  EC27  F00C         	call	___lwmod	;wreg free
  1632  0004FA  504C               	movf	?___lwmod^0,w,c
  1633  0004FC  0F30               	addlw	48
  1634  0004FE  EC9C  F00D         	call	_lcd_putc
  1635                           
  1636                           ;main.c: 177: lcd_putc('.');
  1637  000502  0E2E               	movlw	46
  1638  000504  EC9C  F00D         	call	_lcd_putc
  1639                           
  1640                           ;main.c: 178: lcd_putc(((temp1_fix % 10) + 48));
  1641  000508  C027  F04C         	movff	_temp1_fix,___lwmod@dividend
  1642  00050C  C028  F04D         	movff	_temp1_fix+1,___lwmod@dividend+1
  1643  000510  EC95  F007         	call	PL10	;call to abstracted procedure
  1644  000514  EC27  F00C         	call	___lwmod	;wreg free
  1645  000518  504C               	movf	?___lwmod^0,w,c
  1646  00051A  0F30               	addlw	48
  1647  00051C  EC9C  F00D         	call	_lcd_putc
  1648                           
  1649                           ;main.c: 179: (en_snd_k) ? lcd_putc(2) : lcd_putc(1);
  1650  000520  A266               	btfss	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  1651  000522  D004               	goto	l3565
  1652  000524  0E02               	movlw	2
  1653  000526  EC9C  F00D         	call	_lcd_putc
  1654  00052A  D003               	goto	l204
  1655  00052C                     l3565:
  1656  00052C  0E01               	movlw	1
  1657  00052E  EC9C  F00D         	call	_lcd_putc
  1658  000532                     l204:
  1659                           
  1660                           ;main.c: 181: lcd_gotoxy(1, 2);
  1661  000532  ECC2  F007         	call	PL28	;call to abstracted procedure
  1662  000536  EC58  F00D         	call	_lcd_gotoxy
  1663                           
  1664                           ;main.c: 182: lcdPrint("Êá:");
  1665  00053A  0ED1               	movlw	low STR_14
  1666  00053C  6E4C               	movwf	lcdPrint@t^0,c
  1667  00053E  0E1F               	movlw	high STR_14
  1668  000540  6E4D               	movwf	(lcdPrint@t+1)^0,c
  1669  000542  EC9A  F009         	call	_lcdPrint	;wreg free
  1670                           
  1671                           ;main.c: 184: if (!(temperature_2 == 32767)) {
  1672  000546  285D               	incf	_temperature_2^0,w,c
  1673  000548  E104               	bnz	u2570
  1674  00054A  0E7F               	movlw	127
  1675  00054C  185E               	xorwf	(_temperature_2+1)^0,w,c
  1676  00054E  E101 D0AA          	bz	l3581
  1677  000552                     u2570:
  1678                           
  1679                           ;main.c: 185: if (((temperature_2 / 1000) % 10) == 0) {
  1680  000552  ECAB  F007         	call	PL18	;call to abstracted procedure
  1681  000556  EC89  F007         	call	PL4	;call to abstracted procedure
  1682  00055A  ECE3  F00B         	call	___lwdiv	;wreg free
  1683  00055E  EC81  F007         	call	PL2	;call to abstracted procedure
  1684  000562  EC27  F00C         	call	___lwmod	;wreg free
  1685  000566  504C               	movf	?___lwmod^0,w,c
  1686  000568  104D               	iorwf	(?___lwmod+1)^0,w,c
  1687  00056A  E162               	bnz	l3579
  1688                           
  1689                           ;main.c: 186: if (((temperature_2 / 100) % 10) == 0) {
  1690  00056C  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1691  00056E  0E64               	movlw	100
  1692  000570  EC89  F007         	call	PL4	;call to abstracted procedure
  1693  000574  ECE3  F00B         	call	___lwdiv	;wreg free
  1694  000578  EC81  F007         	call	PL2	;call to abstracted procedure
  1695  00057C  EC27  F00C         	call	___lwmod	;wreg free
  1696  000580  504C               	movf	?___lwmod^0,w,c
  1697  000582  104D               	iorwf	(?___lwmod+1)^0,w,c
  1698  000584  E125               	bnz	l3577
  1699                           
  1700                           ;main.c: 189: lcd_putc(((temperature_2 / 10) % 10) + 48);
  1701  000586  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1702  000588  0E0A               	movlw	10
  1703  00058A  EC89  F007         	call	PL4	;call to abstracted procedure
  1704  00058E  ECE3  F00B         	call	___lwdiv	;wreg free
  1705  000592  EC81  F007         	call	PL2	;call to abstracted procedure
  1706  000596  EC27  F00C         	call	___lwmod	;wreg free
  1707  00059A  504C               	movf	?___lwmod^0,w,c
  1708  00059C  0F30               	addlw	48
  1709  00059E  EC9C  F00D         	call	_lcd_putc
  1710                           
  1711                           ;main.c: 190: lcd_putc('.');
  1712  0005A2  0E2E               	movlw	46
  1713  0005A4  EC9C  F00D         	call	_lcd_putc
  1714                           
  1715                           ;main.c: 191: lcd_putc(((temperature_2 % 10) + 48));
  1716  0005A8  EC9E  F007         	call	PL14	;call to abstracted procedure
  1717  0005AC  EC95  F007         	call	PL10	;call to abstracted procedure
  1718  0005B0  EC27  F00C         	call	___lwmod	;wreg free
  1719  0005B4  504C               	movf	?___lwmod^0,w,c
  1720  0005B6  0F30               	addlw	48
  1721  0005B8  EC9C  F00D         	call	_lcd_putc
  1722                           
  1723                           ;main.c: 192: lcd_putc(0x01);
  1724  0005BC  0E01               	movlw	1
  1725  0005BE  EC9C  F00D         	call	_lcd_putc
  1726                           
  1727                           ;main.c: 194: lcd_putc(' ');
  1728  0005C2  0E20               	movlw	32
  1729  0005C4  EC9C  F00D         	call	_lcd_putc
  1730                           
  1731                           ;main.c: 195: lcd_putc(' ');
  1732  0005C8  0E20               	movlw	32
  1733  0005CA  EC9C  F00D         	call	_lcd_putc
  1734                           
  1735                           ;main.c: 197: } else {
  1736  0005CE  D07D               	goto	l210
  1737  0005D0                     l3577:
  1738                           
  1739                           ;main.c: 199: lcd_putc(((temperature_2 / 100) % 10) + 48);
  1740  0005D0  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1741  0005D2  0E64               	movlw	100
  1742  0005D4  EC89  F007         	call	PL4	;call to abstracted procedure
  1743  0005D8  ECE3  F00B         	call	___lwdiv	;wreg free
  1744  0005DC  EC81  F007         	call	PL2	;call to abstracted procedure
  1745  0005E0  EC27  F00C         	call	___lwmod	;wreg free
  1746  0005E4  504C               	movf	?___lwmod^0,w,c
  1747  0005E6  0F30               	addlw	48
  1748  0005E8  EC9C  F00D         	call	_lcd_putc
  1749                           
  1750                           ;main.c: 200: lcd_putc(((temperature_2 / 10) % 10) + 48);
  1751  0005EC  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1752  0005EE  0E0A               	movlw	10
  1753  0005F0  EC89  F007         	call	PL4	;call to abstracted procedure
  1754  0005F4  ECE3  F00B         	call	___lwdiv	;wreg free
  1755  0005F8  EC81  F007         	call	PL2	;call to abstracted procedure
  1756  0005FC  EC27  F00C         	call	___lwmod	;wreg free
  1757  000600  504C               	movf	?___lwmod^0,w,c
  1758  000602  0F30               	addlw	48
  1759  000604  EC9C  F00D         	call	_lcd_putc
  1760                           
  1761                           ;main.c: 201: lcd_putc('.');
  1762  000608  0E2E               	movlw	46
  1763  00060A  EC9C  F00D         	call	_lcd_putc
  1764                           
  1765                           ;main.c: 202: lcd_putc(((temperature_2 % 10) + 48));
  1766  00060E  EC9E  F007         	call	PL14	;call to abstracted procedure
  1767  000612  EC95  F007         	call	PL10	;call to abstracted procedure
  1768  000616  EC27  F00C         	call	___lwmod	;wreg free
  1769  00061A  504C               	movf	?___lwmod^0,w,c
  1770  00061C  0F30               	addlw	48
  1771  00061E  EC9C  F00D         	call	_lcd_putc
  1772                           
  1773                           ;main.c: 203: lcd_putc(0x01);
  1774  000622  0E01               	movlw	1
  1775  000624  EC9C  F00D         	call	_lcd_putc
  1776                           
  1777                           ;main.c: 204: lcd_putc(' ');
  1778  000628  0E20               	movlw	32
  1779  00062A  EC9C  F00D         	call	_lcd_putc
  1780  00062E  D04D               	goto	l210
  1781  000630                     l3579:
  1782                           
  1783                           ;main.c: 209: lcd_putc(((temperature_2 / 1000) % 10) + 48);
  1784  000630  ECAB  F007         	call	PL18	;call to abstracted procedure
  1785  000634  EC89  F007         	call	PL4	;call to abstracted procedure
  1786  000638  ECE3  F00B         	call	___lwdiv	;wreg free
  1787  00063C  EC81  F007         	call	PL2	;call to abstracted procedure
  1788  000640  EC27  F00C         	call	___lwmod	;wreg free
  1789  000644  504C               	movf	?___lwmod^0,w,c
  1790  000646  0F30               	addlw	48
  1791  000648  EC9C  F00D         	call	_lcd_putc
  1792                           
  1793                           ;main.c: 210: lcd_putc(((temperature_2 / 100) % 10) + 48);
  1794  00064C  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1795  00064E  0E64               	movlw	100
  1796  000650  EC89  F007         	call	PL4	;call to abstracted procedure
  1797  000654  ECE3  F00B         	call	___lwdiv	;wreg free
  1798  000658  EC81  F007         	call	PL2	;call to abstracted procedure
  1799  00065C  EC27  F00C         	call	___lwmod	;wreg free
  1800  000660  504C               	movf	?___lwmod^0,w,c
  1801  000662  0F30               	addlw	48
  1802  000664  EC9C  F00D         	call	_lcd_putc
  1803                           
  1804                           ;main.c: 211: lcd_putc(((temperature_2 / 10) % 10) + 48);
  1805  000668  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1806  00066A  0E0A               	movlw	10
  1807  00066C  EC89  F007         	call	PL4	;call to abstracted procedure
  1808  000670  ECE3  F00B         	call	___lwdiv	;wreg free
  1809  000674  EC81  F007         	call	PL2	;call to abstracted procedure
  1810  000678  EC27  F00C         	call	___lwmod	;wreg free
  1811  00067C  504C               	movf	?___lwmod^0,w,c
  1812  00067E  0F30               	addlw	48
  1813  000680  EC9C  F00D         	call	_lcd_putc
  1814                           
  1815                           ;main.c: 212: lcd_putc('.');
  1816  000684  0E2E               	movlw	46
  1817  000686  EC9C  F00D         	call	_lcd_putc
  1818                           
  1819                           ;main.c: 213: lcd_putc(((temperature_2 % 10) + 48));
  1820  00068A  EC9E  F007         	call	PL14	;call to abstracted procedure
  1821  00068E  EC95  F007         	call	PL10	;call to abstracted procedure
  1822  000692  EC27  F00C         	call	___lwmod	;wreg free
  1823  000696  504C               	movf	?___lwmod^0,w,c
  1824  000698  0F30               	addlw	48
  1825  00069A  EC9C  F00D         	call	_lcd_putc
  1826                           
  1827                           ;main.c: 214: lcd_putc(0x01);
  1828  00069E  0E01               	movlw	1
  1829  0006A0  EC9C  F00D         	call	_lcd_putc
  1830  0006A4  D012               	goto	l210
  1831  0006A6                     l3581:
  1832                           
  1833                           ;main.c: 218: lcd_putc('-');
  1834  0006A6  0E2D               	movlw	45
  1835  0006A8  EC9C  F00D         	call	_lcd_putc
  1836                           
  1837                           ;main.c: 219: lcd_putc('-');
  1838  0006AC  0E2D               	movlw	45
  1839  0006AE  EC9C  F00D         	call	_lcd_putc
  1840                           
  1841                           ;main.c: 220: lcd_putc('-');
  1842  0006B2  0E2D               	movlw	45
  1843  0006B4  EC9C  F00D         	call	_lcd_putc
  1844                           
  1845                           ;main.c: 221: lcd_putc(' ');
  1846  0006B8  0E20               	movlw	32
  1847  0006BA  EC9C  F00D         	call	_lcd_putc
  1848                           
  1849                           ;main.c: 222: lcd_putc(' ');
  1850  0006BE  0E20               	movlw	32
  1851  0006C0  EC9C  F00D         	call	_lcd_putc
  1852                           
  1853                           ;main.c: 223: lcd_putc(' ');
  1854  0006C4  0E20               	movlw	32
  1855  0006C6  EC9C  F00D         	call	_lcd_putc
  1856  0006CA                     l210:
  1857                           
  1858                           ;main.c: 225: };main.c: 228: lcd_gotoxy(11, 2);
  1859  0006CA  ECE9  F007         	call	PL86	;call to abstracted procedure
  1860  0006CE  EC58  F00D         	call	_lcd_gotoxy
  1861                           
  1862                           ;main.c: 230: lcd_putc(0xbe);
  1863  0006D2  0EBE               	movlw	190
  1864  0006D4  EC9C  F00D         	call	_lcd_putc
  1865                           
  1866                           ;main.c: 232: lcd_putc(((set_t_dq2 / 100) % 10) + 48);
  1867  0006D8  6A48               	clrf	(___awdiv@divisor+1)^0,c
  1868  0006DA  0E64               	movlw	100
  1869  0006DC  ECAE  F007         	call	PL22	;call to abstracted procedure
  1870  0006E0  ECB4  F00A         	call	___awdiv	;wreg free
  1871  0006E4  ECA3  F007         	call	PL16	;call to abstracted procedure
  1872  0006E8  EC2A  F00B         	call	___awmod	;wreg free
  1873  0006EC  504D               	movf	?___awmod^0,w,c
  1874  0006EE  0F30               	addlw	48
  1875  0006F0  EC9C  F00D         	call	_lcd_putc
  1876                           
  1877                           ;main.c: 233: lcd_putc(((set_t_dq2 / 10) % 10) + 48);
  1878  0006F4  6A48               	clrf	(___awdiv@divisor+1)^0,c
  1879  0006F6  0E0A               	movlw	10
  1880  0006F8  ECAE  F007         	call	PL22	;call to abstracted procedure
  1881  0006FC  ECB4  F00A         	call	___awdiv	;wreg free
  1882  000700  ECA3  F007         	call	PL16	;call to abstracted procedure
  1883  000704  EC2A  F00B         	call	___awmod	;wreg free
  1884  000708  504D               	movf	?___awmod^0,w,c
  1885  00070A  0F30               	addlw	48
  1886  00070C  EC9C  F00D         	call	_lcd_putc
  1887                           
  1888                           ;main.c: 234: lcd_putc('.');
  1889  000710  0E2E               	movlw	46
  1890  000712  EC9C  F00D         	call	_lcd_putc
  1891                           
  1892                           ;main.c: 235: lcd_putc(((set_t_dq2 % 10) + 48));
  1893  000716  ECBA  F007         	call	PL26	;call to abstracted procedure
  1894  00071A  EC2A  F00B         	call	___awmod	;wreg free
  1895  00071E  504D               	movf	?___awmod^0,w,c
  1896  000720  0F30               	addlw	48
  1897  000722  EC9C  F00D         	call	_lcd_putc
  1898                           
  1899                           ;main.c: 236: (en_snd_b) ? lcd_putc(2) : lcd_putc(1);
  1900  000726  A066               	btfss	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  1901  000728  D004               	goto	l3587
  1902  00072A  0E02               	movlw	2
  1903  00072C  EC9C  F00D         	call	_lcd_putc
  1904  000730  D003               	goto	l3589
  1905  000732                     l3587:
  1906  000732  0E01               	movlw	1
  1907  000734  EC9C  F00D         	call	_lcd_putc
  1908  000738                     l3589:
  1909                           
  1910                           ;main.c: 245: if (sound_yes) {
  1911  000738  AE66               	btfss	(_sound_yes/(0+8))^0,_sound_yes& (0+7),c
  1912  00073A  D090               	goto	l215
  1913                           
  1914                           ;main.c: 249: if (en_snd_k) {
  1915  00073C  A266               	btfss	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  1916  00073E  D01D               	goto	l217
  1917                           
  1918                           ;main.c: 250: if (((temperature_1 >= (temp1_fix + set_t_dq1_up)) ||;main.c: 251: (temper
      +                          ature_1 <= (temp1_fix - set_t_dq1_dwn))) &&;main.c: 252: !(temperature_1 == 32767)) {
  1919  000740  5031               	movf	_set_t_dq1_up^0,w,c
  1920  000742  2427               	addwf	_temp1_fix^0,w,c
  1921  000744  6E56               	movwf	??_main^0,c
  1922  000746  0E00               	movlw	0
  1923  000748  2028               	addwfc	(_temp1_fix+1)^0,w,c
  1924  00074A  6E57               	movwf	(??_main+1)^0,c
  1925  00074C  5056               	movf	??_main^0,w,c
  1926  00074E  5C5F               	subwf	_temperature_1^0,w,c
  1927  000750  5057               	movf	(??_main+1)^0,w,c
  1928  000752  5860               	subwfb	(_temperature_1+1)^0,w,c
  1929  000754  E20B               	bc	u2640
  1930  000756  5030               	movf	_set_t_dq1_dwn^0,w,c
  1931  000758  5C27               	subwf	_temp1_fix^0,w,c
  1932  00075A  6E56               	movwf	??_main^0,c
  1933  00075C  0E00               	movlw	0
  1934  00075E  5828               	subwfb	(_temp1_fix+1)^0,w,c
  1935  000760  6E57               	movwf	(??_main+1)^0,c
  1936  000762  505F               	movf	_temperature_1^0,w,c
  1937  000764  5C56               	subwf	??_main^0,w,c
  1938  000766  5060               	movf	(_temperature_1+1)^0,w,c
  1939  000768  5857               	subwfb	(??_main+1)^0,w,c
  1940  00076A  E307               	bnc	l217
  1941  00076C                     u2640:
  1942  00076C  285F               	incf	_temperature_1^0,w,c
  1943  00076E  E103               	bnz	u2650
  1944  000770  0E7F               	movlw	127
  1945  000772  1860               	xorwf	(_temperature_1+1)^0,w,c
  1946  000774  E002               	bz	l217
  1947  000776                     u2650:
  1948                           
  1949                           ;main.c: 254: snd_k_b = 1;
  1950  000776  8666               	bsf	(_snd_k_b/(0+8))^0,_snd_k_b& (0+7),c
  1951                           
  1952                           ;main.c: 255: } else
  1953  000778  D001               	goto	l221
  1954  00077A                     l217:
  1955                           
  1956                           ;main.c: 256: snd_k_b = 0;
  1957  00077A  9666               	bcf	(_snd_k_b/(0+8))^0,_snd_k_b& (0+7),c
  1958  00077C                     l221:
  1959                           
  1960                           ;main.c: 260: if (en_snd_b) {
  1961  00077C  A066               	btfss	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  1962  00077E  D00C               	goto	l223
  1963                           
  1964                           ;main.c: 261: if ((temperature_2 >= set_t_dq2) && !(temperature_2 == 32767))
  1965  000780  5029               	movf	_set_t_dq2^0,w,c
  1966  000782  5C5D               	subwf	_temperature_2^0,w,c
  1967  000784  502A               	movf	(_set_t_dq2+1)^0,w,c
  1968  000786  585E               	subwfb	(_temperature_2+1)^0,w,c
  1969  000788  E307               	bnc	l223
  1970  00078A  285D               	incf	_temperature_2^0,w,c
  1971  00078C  E103               	bnz	u2680
  1972  00078E  0E7F               	movlw	127
  1973  000790  185E               	xorwf	(_temperature_2+1)^0,w,c
  1974  000792  E002               	bz	l223
  1975  000794                     u2680:
  1976                           
  1977                           ;main.c: 262: snd_b_b = 1;
  1978  000794  8466               	bsf	(_snd_b_b/(0+8))^0,_snd_b_b& (0+7),c
  1979  000796  D001               	goto	l225
  1980  000798                     l223:
  1981                           
  1982                           ;main.c: 263: else;main.c: 264: snd_b_b = 0;
  1983  000798  9466               	bcf	(_snd_b_b/(0+8))^0,_snd_b_b& (0+7),c
  1984  00079A                     l225:
  1985                           
  1986                           ;main.c: 268: if (snd_k_b && snd_b_b) {
  1987  00079A  B666               	btfsc	(_snd_k_b/(0+8))^0,_snd_k_b& (0+7),c
  1988  00079C  A466               	btfss	(_snd_b_b/(0+8))^0,_snd_b_b& (0+7),c
  1989  00079E  D01E               	goto	l226
  1990                           
  1991                           ;main.c: 269: en_sound = 1;
  1992  0007A0  8067               	bsf	(_en_sound/(0+8))^0,_en_sound& (0+7),c
  1993                           
  1994                           ;main.c: 270: snd_k = 0;
  1995  0007A2  9C66               	bcf	(_snd_k/(0+8))^0,_snd_k& (0+7),c
  1996                           
  1997                           ;main.c: 271: snd_b = 0;
  1998  0007A4  9A66               	bcf	(_snd_b/(0+8))^0,_snd_b& (0+7),c
  1999                           
  2000                           ;main.c: 272: snd_all = 1;
  2001  0007A6  8866               	bsf	(_snd_all/(0+8))^0,_snd_all& (0+7),c
  2002                           
  2003                           ;main.c: 273: if (tik_time >= 100) {
  2004  0007A8  0E63               	movlw	99
  2005  0007AA  6435               	cpfsgt	_tik_time^0,c
  2006  0007AC  D059               	goto	l3633
  2007                           
  2008                           ;main.c: 274: tik_time = 0;
  2009  0007AE  6A35               	clrf	_tik_time^0,c
  2010                           
  2011                           ;main.c: 275: EUSART_Write('A');
  2012  0007B0  0E41               	movlw	65
  2013  0007B2  ECC7  F00C         	call	_EUSART_Write
  2014                           
  2015                           ;main.c: 276: EUSART_Write('l');
  2016  0007B6  0E6C               	movlw	108
  2017  0007B8  ECC7  F00C         	call	_EUSART_Write
  2018                           
  2019                           ;main.c: 277: EUSART_Write('r');
  2020  0007BC  0E72               	movlw	114
  2021  0007BE  ECC7  F00C         	call	_EUSART_Write
  2022                           
  2023                           ;main.c: 278: EUSART_Write('_');
  2024  0007C2  0E5F               	movlw	95
  2025  0007C4  ECC7  F00C         	call	_EUSART_Write
  2026                           
  2027                           ;main.c: 279: EUSART_Write('A');
  2028  0007C8  0E41               	movlw	65
  2029  0007CA  ECC7  F00C         	call	_EUSART_Write
  2030                           
  2031                           ;main.c: 280: EUSART_Write('\r');
  2032  0007CE  0E0D               	movlw	13
  2033  0007D0  ECC7  F00C         	call	_EUSART_Write
  2034                           
  2035                           ;main.c: 281: EUSART_Write('\n');
  2036  0007D4  0E0A               	movlw	10
  2037  0007D6  ECC7  F00C         	call	_EUSART_Write
  2038  0007DA  D042               	goto	l3633
  2039  0007DC                     l226:
  2040  0007DC  A466               	btfss	(_snd_b_b/(0+8))^0,_snd_b_b& (0+7),c
  2041  0007DE  D01E               	goto	l229
  2042                           
  2043                           ;main.c: 284: en_sound = 1;
  2044  0007E0  8067               	bsf	(_en_sound/(0+8))^0,_en_sound& (0+7),c
  2045                           
  2046                           ;main.c: 285: snd_k = 0;
  2047  0007E2  9C66               	bcf	(_snd_k/(0+8))^0,_snd_k& (0+7),c
  2048                           
  2049                           ;main.c: 286: snd_all = 0;
  2050  0007E4  9866               	bcf	(_snd_all/(0+8))^0,_snd_all& (0+7),c
  2051                           
  2052                           ;main.c: 287: snd_b = 1;
  2053  0007E6  8A66               	bsf	(_snd_b/(0+8))^0,_snd_b& (0+7),c
  2054                           
  2055                           ;main.c: 288: if (tik_time >= 100) {
  2056  0007E8  0E63               	movlw	99
  2057  0007EA  6435               	cpfsgt	_tik_time^0,c
  2058  0007EC  D039               	goto	l3633
  2059                           
  2060                           ;main.c: 289: tik_time = 0;
  2061  0007EE  6A35               	clrf	_tik_time^0,c
  2062                           
  2063                           ;main.c: 290: EUSART_Write('A');
  2064  0007F0  0E41               	movlw	65
  2065  0007F2  ECC7  F00C         	call	_EUSART_Write
  2066                           
  2067                           ;main.c: 291: EUSART_Write('l');
  2068  0007F6  0E6C               	movlw	108
  2069  0007F8  ECC7  F00C         	call	_EUSART_Write
  2070                           
  2071                           ;main.c: 292: EUSART_Write('r');
  2072  0007FC  0E72               	movlw	114
  2073  0007FE  ECC7  F00C         	call	_EUSART_Write
  2074                           
  2075                           ;main.c: 293: EUSART_Write('_');
  2076  000802  0E5F               	movlw	95
  2077  000804  ECC7  F00C         	call	_EUSART_Write
  2078                           
  2079                           ;main.c: 294: EUSART_Write('B');
  2080  000808  0E42               	movlw	66
  2081  00080A  ECC7  F00C         	call	_EUSART_Write
  2082                           
  2083                           ;main.c: 295: EUSART_Write('\r');
  2084  00080E  0E0D               	movlw	13
  2085  000810  ECC7  F00C         	call	_EUSART_Write
  2086                           
  2087                           ;main.c: 296: EUSART_Write('\n');
  2088  000814  0E0A               	movlw	10
  2089  000816  ECC7  F00C         	call	_EUSART_Write
  2090  00081A  D022               	goto	l3633
  2091  00081C                     l229:
  2092  00081C  A666               	btfss	(_snd_k_b/(0+8))^0,_snd_k_b& (0+7),c
  2093  00081E  D01F               	goto	L1
  2094                           
  2095                           ;main.c: 299: en_sound = 1;
  2096  000820  8067               	bsf	(_en_sound/(0+8))^0,_en_sound& (0+7),c
  2097                           
  2098                           ;main.c: 300: snd_k = 1;
  2099  000822  8C66               	bsf	(_snd_k/(0+8))^0,_snd_k& (0+7),c
  2100                           
  2101                           ;main.c: 301: snd_all = 0;
  2102  000824  9866               	bcf	(_snd_all/(0+8))^0,_snd_all& (0+7),c
  2103                           
  2104                           ;main.c: 302: snd_b = 0;
  2105  000826  9A66               	bcf	(_snd_b/(0+8))^0,_snd_b& (0+7),c
  2106                           
  2107                           ;main.c: 303: if (tik_time >= 100) {
  2108  000828  0E63               	movlw	99
  2109  00082A  6435               	cpfsgt	_tik_time^0,c
  2110  00082C  D019               	goto	l3633
  2111                           
  2112                           ;main.c: 304: tik_time = 0;
  2113  00082E  6A35               	clrf	_tik_time^0,c
  2114                           
  2115                           ;main.c: 305: EUSART_Write('A');
  2116  000830  0E41               	movlw	65
  2117  000832  ECC7  F00C         	call	_EUSART_Write
  2118                           
  2119                           ;main.c: 306: EUSART_Write('l');
  2120  000836  0E6C               	movlw	108
  2121  000838  ECC7  F00C         	call	_EUSART_Write
  2122                           
  2123                           ;main.c: 307: EUSART_Write('r');
  2124  00083C  0E72               	movlw	114
  2125  00083E  ECC7  F00C         	call	_EUSART_Write
  2126                           
  2127                           ;main.c: 308: EUSART_Write('_');
  2128  000842  0E5F               	movlw	95
  2129  000844  ECC7  F00C         	call	_EUSART_Write
  2130                           
  2131                           ;main.c: 309: EUSART_Write('K');
  2132  000848  0E4B               	movlw	75
  2133  00084A  ECC7  F00C         	call	_EUSART_Write
  2134                           
  2135                           ;main.c: 310: EUSART_Write('\r');
  2136  00084E  0E0D               	movlw	13
  2137  000850  ECC7  F00C         	call	_EUSART_Write
  2138                           
  2139                           ;main.c: 311: EUSART_Write('\n');
  2140  000854  0E0A               	movlw	10
  2141  000856  ECC7  F00C         	call	_EUSART_Write
  2142  00085A  D002               	goto	l3633
  2143  00085C                     l215:
  2144                           
  2145                           ;main.c: 320: LATCbits.LATC4 = 0;
  2146  00085C  988B               	bcf	139,4,c	;volatile
  2147  00085E                     L1:
  2148                           
  2149                           ;main.c: 321: en_sound = 0;
  2150  00085E  9067               	bcf	(_en_sound/(0+8))^0,_en_sound& (0+7),c
  2151  000860                     l3633:
  2152                           
  2153                           ;main.c: 322: };main.c: 325: if (pressed_key == 1) {
  2154  000860  0434               	decf	_pressed_key^0,w,c
  2155  000862  E115               	bnz	l3647
  2156                           
  2157                           ;main.c: 326: clearLCD();
  2158  000864  EC74  F00D         	call	_clearLCD	;wreg free
  2159                           
  2160                           ;main.c: 327: select = 7;
  2161  000868  0E07               	movlw	7
  2162                           
  2163                           ;main.c: 328: lcd_gotoxy(1, 1);
  2164  00086A  DB95               	call	PL36	;call to abstracted procedure
  2165  00086C  EC58  F00D         	call	_lcd_gotoxy
  2166                           
  2167                           ;main.c: 329: lcdPrint("Ïîðiã Ñèãí. Led");
  2168  000870  0E3F               	movlw	low STR_15
  2169  000872  6E4C               	movwf	lcdPrint@t^0,c
  2170  000874  0E1F               	movlw	high STR_15
  2171  000876  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2172  000878  EC9A  F009         	call	_lcdPrint	;wreg free
  2173                           
  2174                           ;main.c: 330: lcd_gotoxy(1, 2);
  2175  00087C  DB83               	call	PL28	;call to abstracted procedure
  2176  00087E  EC58  F00D         	call	_lcd_gotoxy
  2177                           
  2178                           ;main.c: 331: lcdPrint("  1     2   1-2");
  2179  000882  0E1F               	movlw	low STR_16
  2180  000884  6E4C               	movwf	lcdPrint@t^0,c
  2181  000886  0E1F               	movlw	high STR_16
  2182  000888  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2183  00088A  EC9A  F009         	call	_lcdPrint	;wreg free
  2184  00088E                     l3647:
  2185                           
  2186                           ;main.c: 333: };main.c: 335: if (pressed_key == 2) {
  2187  00088E  0E02               	movlw	2
  2188  000890  1834               	xorwf	_pressed_key^0,w,c
  2189  000892  E107               	bnz	l3657
  2190                           
  2191                           ;main.c: 337: sub_sel++;
  2192  000894  2A33               	incf	_sub_sel^0,f,c
  2193                           
  2194                           ;main.c: 338: if (sub_sel > VAL_9)
  2195  000896  0E08               	movlw	8
  2196  000898  6433               	cpfsgt	_sub_sel^0,c
  2197  00089A  D001               	goto	l3655
  2198                           
  2199                           ;main.c: 339: sub_sel = VAL_1;
  2200  00089C  6A33               	clrf	_sub_sel^0,c
  2201  00089E                     l3655:
  2202                           
  2203                           ;main.c: 340: outValPreset();
  2204  00089E  ECEC  F007         	call	_outValPreset	;wreg free
  2205  0008A2                     l3657:
  2206                           
  2207                           ;main.c: 341: };main.c: 343: if (pressed_key == 3) {
  2208  0008A2  0E03               	movlw	3
  2209  0008A4  1834               	xorwf	_pressed_key^0,w,c
  2210  0008A6  E010               	bz	l3665
  2211  0008A8  D461               	goto	l3495
  2212  0008AA                     l241:
  2213                           
  2214                           ;main.c: 347: temp1_fix = temperature_1;
  2215  0008AA  C05F  F027         	movff	_temperature_1,_temp1_fix
  2216  0008AE  C060  F028         	movff	_temperature_1+1,_temp1_fix+1
  2217                           
  2218                           ;main.c: 348: write_eep(20, (temp1_fix >> 8));
  2219  0008B2  C028  F045         	movff	_temp1_fix+1,write_eep@data
  2220  0008B6  0E14               	movlw	20
  2221  0008B8  ECF2  F00C         	call	_write_eep
  2222                           
  2223                           ;main.c: 349: write_eep(20 + 1, (uint8_t) temp1_fix);
  2224  0008BC  C027  F045         	movff	_temp1_fix,write_eep@data
  2225  0008C0  0E15               	movlw	21
  2226  0008C2  ECF2  F00C         	call	_write_eep
  2227                           
  2228                           ;main.c: 350: break;
  2229  0008C6  D004               	goto	l3667
  2230  0008C8                     l3665:
  2231  0008C8  5062               	movf	_sub_main^0,w,c
  2232                           
  2233                           ; Switch size 1, requested type "space"
  2234                           ; Number of cases is 2, Range of values is 1 to 2
  2235                           ; switch strategies available:
  2236                           ; Name         Instructions Cycles
  2237                           ; simple_byte            7     4 (average)
  2238                           ;	Chosen strategy is simple_byte
  2239  0008CA  0A01               	xorlw	1	; case 1
  2240  0008CC  E0EE               	bz	l241
  2241  0008CE  0A03               	xorlw	3	; case 2
  2242  0008D0                     l3667:
  2243                           
  2244                           ;main.c: 357: Delay_ms(10);
  2245  0008D0  DB7C               	call	PL64	;call to abstracted procedure
  2246  0008D2  EC04  F00D         	call	_Delay_ms	;wreg free
  2247  0008D6  D44A               	goto	l3495
  2248  0008D8                     l3669:
  2249                           
  2250                           ;main.c: 364: lcd_gotoxy(14, 2);
  2251  0008D8  0E02               	movlw	2
  2252  0008DA  6E49               	movwf	lcd_gotoxy@y^0,c
  2253  0008DC  0E0E               	movlw	14
  2254  0008DE  EC58  F00D         	call	_lcd_gotoxy
  2255                           
  2256                           ;main.c: 365: lcd_putc(dq_num + 48);
  2257  0008E2  5061               	movf	_dq_num^0,w,c
  2258  0008E4  0F30               	addlw	48
  2259  0008E6  EC9C  F00D         	call	_lcd_putc
  2260                           
  2261                           ;main.c: 366: if (pressed_key == 1) {
  2262  0008EA  0434               	decf	_pressed_key^0,w,c
  2263  0008EC  E106               	bnz	l3679
  2264                           
  2265                           ;main.c: 367: dq_num++;
  2266  0008EE  2A61               	incf	_dq_num^0,f,c
  2267                           
  2268                           ;main.c: 368: if (dq_num == 3)
  2269  0008F0  0E03               	movlw	3
  2270  0008F2  1861               	xorwf	_dq_num^0,w,c
  2271  0008F4  E102               	bnz	l3679
  2272                           
  2273                           ;main.c: 369: dq_num = 1;
  2274  0008F6  0E01               	movlw	1
  2275  0008F8  6E61               	movwf	_dq_num^0,c
  2276  0008FA                     l3679:
  2277                           
  2278                           ;main.c: 370: };main.c: 371: if (pressed_key == 2) {
  2279  0008FA  0E02               	movlw	2
  2280  0008FC  1834               	xorwf	_pressed_key^0,w,c
  2281  0008FE  E105               	bnz	l3687
  2282                           
  2283                           ;main.c: 372: dq_num--;
  2284  000900  0661               	decf	_dq_num^0,f,c
  2285                           
  2286                           ;main.c: 373: if (dq_num == 0)
  2287  000902  5061               	movf	_dq_num^0,w,c
  2288  000904  E102               	bnz	l3687
  2289                           
  2290                           ;main.c: 374: dq_num = 2;
  2291  000906  0E02               	movlw	2
  2292  000908  6E61               	movwf	_dq_num^0,c
  2293  00090A                     l3687:
  2294                           
  2295                           ;main.c: 375: };main.c: 376: if (pressed_key == 3) {
  2296  00090A  0E03               	movlw	3
  2297  00090C  1834               	xorwf	_pressed_key^0,w,c
  2298  00090E  E001 D42D          	bnz	l3495
  2299                           
  2300                           ;main.c: 377: if (ds18b20_readrom(dq_num)) {
  2301  000912  5061               	movf	_dq_num^0,w,c
  2302  000914  EC5E  F00B         	call	_ds18b20_readrom
  2303  000918  0900               	iorlw	0
  2304  00091A  E009               	bz	l3695
  2305                           
  2306                           ;main.c: 378: lcd_gotoxy(1, 2);
  2307  00091C  DB33               	call	PL28	;call to abstracted procedure
  2308  00091E  EC58  F00D         	call	_lcd_gotoxy
  2309                           
  2310                           ;main.c: 379: lcdPrint(" Êîä ïðî÷èòàíî ");
  2311  000922  0EEF               	movlw	low STR_17
  2312  000924  6E4C               	movwf	lcdPrint@t^0,c
  2313  000926  0E1E               	movlw	high STR_17
  2314  000928  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2315  00092A  EC9A  F009         	call	_lcdPrint	;wreg free
  2316  00092E                     l3695:
  2317                           
  2318                           ;main.c: 380: };main.c: 382: select = 3;
  2319  00092E  0E03               	movlw	3
  2320  000930  6E63               	movwf	_select^0,c
  2321  000932  D41C               	goto	l3495
  2322  000934                     l3697:
  2323                           
  2324                           ;main.c: 388: if (pressed_key == 1) {
  2325  000934  0434               	decf	_pressed_key^0,w,c
  2326  000936  E115               	bnz	l3711
  2327                           
  2328                           ;main.c: 389: clearLCD();
  2329  000938  EC74  F00D         	call	_clearLCD	;wreg free
  2330                           
  2331                           ;main.c: 390: select = 4;
  2332  00093C  0E04               	movlw	4
  2333                           
  2334                           ;main.c: 391: lcd_gotoxy(1, 1);
  2335  00093E  DB2B               	call	PL36	;call to abstracted procedure
  2336  000940  EC58  F00D         	call	_lcd_gotoxy
  2337                           
  2338                           ;main.c: 392: lcdPrint("   Ãðàíèöi   ");
  2339  000944  0E7C               	movlw	low STR_18
  2340  000946  6E4C               	movwf	lcdPrint@t^0,c
  2341  000948  0E1F               	movlw	high STR_18
  2342  00094A  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2343  00094C  EC9A  F009         	call	_lcdPrint	;wreg free
  2344                           
  2345                           ;main.c: 393: lcd_gotoxy(1, 2);
  2346  000950  DB19               	call	PL28	;call to abstracted procedure
  2347  000952  EC58  F00D         	call	_lcd_gotoxy
  2348                           
  2349                           ;main.c: 394: lcdPrint("Êîë(1)/Êóá(2):");
  2350  000956  0E6D               	movlw	low STR_19
  2351  000958  6E4C               	movwf	lcdPrint@t^0,c
  2352  00095A  0E1F               	movlw	high STR_19
  2353  00095C  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2354  00095E  EC9A  F009         	call	_lcdPrint	;wreg free
  2355  000962                     l3711:
  2356                           
  2357                           ;main.c: 395: };main.c: 397: if (pressed_key == 2) {
  2358  000962  0E02               	movlw	2
  2359  000964  1834               	xorwf	_pressed_key^0,w,c
  2360  000966  E10C               	bnz	l3721
  2361                           
  2362                           ;main.c: 400: clearLCD();
  2363  000968  EC74  F00D         	call	_clearLCD	;wreg free
  2364                           
  2365                           ;main.c: 401: select = 8;
  2366  00096C  0E08               	movlw	8
  2367                           
  2368                           ;main.c: 402: lcd_gotoxy(1, 1);
  2369  00096E  DB13               	call	PL36	;call to abstracted procedure
  2370  000970  EC58  F00D         	call	_lcd_gotoxy
  2371                           
  2372                           ;main.c: 403: lcdPrint(" Êîëîíà    Êóá");
  2373  000974  0E4F               	movlw	low STR_20
  2374  000976  6E4C               	movwf	lcdPrint@t^0,c
  2375  000978  0E1F               	movlw	high STR_20
  2376  00097A  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2377  00097C  EC9A  F009         	call	_lcdPrint	;wreg free
  2378  000980                     l3721:
  2379                           
  2380                           ;main.c: 404: };main.c: 405: if (pressed_key == 3) {
  2381  000980  0E03               	movlw	3
  2382  000982  1834               	xorwf	_pressed_key^0,w,c
  2383  000984  E002 EFB6  F000    	bnz	l3495
  2384                           
  2385                           ;main.c: 406: LATCbits.LATC5 = !(LATCbits.LATC5);
  2386  00098A  BA8B               	btfsc	139,5,c	;volatile
  2387  00098C  D003               	goto	u2890
  2388  00098E  6A56               	clrf	??_main^0,c
  2389  000990  2A56               	incf	??_main^0,f,c
  2390  000992  D001               	goto	u2908
  2391  000994                     u2890:
  2392  000994  6A56               	clrf	??_main^0,c
  2393  000996                     u2908:
  2394  000996  3A56               	swapf	??_main^0,f,c
  2395  000998  4656               	rlncf	??_main^0,f,c
  2396  00099A  508B               	movf	139,w,c	;volatile
  2397  00099C  1856               	xorwf	??_main^0,w,c
  2398  00099E  0BDF               	andlw	-33
  2399  0009A0  1856               	xorwf	??_main^0,w,c
  2400  0009A2  6E8B               	movwf	139,c	;volatile
  2401  0009A4                     l3725:
  2402                           
  2403                           ;main.c: 407: select = 1;
  2404  0009A4  0E01               	movlw	1
  2405  0009A6  6E63               	movwf	_select^0,c
  2406  0009A8                     l3727:
  2407                           
  2408                           ;main.c: 408: outValPreset();
  2409  0009A8  ECEC  F007         	call	_outValPreset	;wreg free
  2410  0009AC  EFB6  F000         	goto	l3495
  2411  0009B0                     l3729:
  2412                           
  2413                           ;main.c: 412: lcd_gotoxy(4, 2);
  2414  0009B0  0E02               	movlw	2
  2415  0009B2  6E49               	movwf	lcd_gotoxy@y^0,c
  2416  0009B4  0E04               	movlw	4
  2417  0009B6  EC58  F00D         	call	_lcd_gotoxy
  2418                           
  2419                           ;main.c: 413: (en_snd_k) ? lcd_putc(0xED) : lcd_putc(0xD5);
  2420  0009BA  A266               	btfss	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2421  0009BC  D004               	goto	l3735
  2422  0009BE  0EED               	movlw	237
  2423  0009C0  EC9C  F00D         	call	_lcd_putc
  2424  0009C4  D003               	goto	l261
  2425  0009C6                     l3735:
  2426  0009C6  0ED5               	movlw	213
  2427  0009C8  EC9C  F00D         	call	_lcd_putc
  2428  0009CC                     l261:
  2429                           
  2430                           ;main.c: 414: lcd_gotoxy(13, 2);
  2431  0009CC  0E02               	movlw	2
  2432  0009CE  6E49               	movwf	lcd_gotoxy@y^0,c
  2433  0009D0  0E0D               	movlw	13
  2434  0009D2  EC58  F00D         	call	_lcd_gotoxy
  2435                           
  2436                           ;main.c: 415: (en_snd_b) ? lcd_putc(0xED) : lcd_putc(0xD5);
  2437  0009D6  A066               	btfss	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2438  0009D8  D004               	goto	l3741
  2439  0009DA  0EED               	movlw	237
  2440  0009DC  EC9C  F00D         	call	_lcd_putc
  2441  0009E0  D003               	goto	l3743
  2442  0009E2                     l3741:
  2443  0009E2  0ED5               	movlw	213
  2444  0009E4  EC9C  F00D         	call	_lcd_putc
  2445  0009E8                     l3743:
  2446                           
  2447                           ;main.c: 417: if (pressed_key == 1) {
  2448  0009E8  0434               	decf	_pressed_key^0,w,c
  2449  0009EA  E105               	bnz	u2955
  2450                           
  2451                           ;main.c: 418: en_snd_k = !(en_snd_k);
  2452  0009EC  B266               	btfsc	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2453  0009EE  D002               	goto	u2940
  2454  0009F0  8266               	bsf	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2455  0009F2  D001               	goto	u2955
  2456  0009F4                     u2940:
  2457  0009F4  9266               	bcf	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2458  0009F6                     u2955:
  2459                           
  2460                           ;main.c: 419: };main.c: 421: if (pressed_key == 2) {
  2461  0009F6  0E02               	movlw	2
  2462  0009F8  1834               	xorwf	_pressed_key^0,w,c
  2463  0009FA  E105               	bnz	u2985
  2464                           
  2465                           ;main.c: 422: en_snd_b = !(en_snd_b);
  2466  0009FC  B066               	btfsc	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2467  0009FE  D002               	goto	u2970
  2468  000A00  8066               	bsf	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2469  000A02  D001               	goto	u2985
  2470  000A04                     u2970:
  2471  000A04  9066               	bcf	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2472  000A06                     u2985:
  2473                           
  2474                           ;main.c: 423: };main.c: 424: if (pressed_key == 3) {
  2475  000A06  0E03               	movlw	3
  2476  000A08  1834               	xorwf	_pressed_key^0,w,c
  2477  000A0A  E002 EFB6  F000    	bnz	l3495
  2478                           
  2479                           ;main.c: 425: if (!(en_snd_k) && !(en_snd_b)) {
  2480  000A10  A266               	btfss	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2481  000A12  B066               	btfsc	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2482  000A14  D002               	goto	l269
  2483                           
  2484                           ;main.c: 426: sound_yes = 0;
  2485  000A16  9E66               	bcf	(_sound_yes/(0+8))^0,_sound_yes& (0+7),c
  2486                           
  2487                           ;main.c: 427: } else
  2488  000A18  D7C5               	goto	l3725
  2489  000A1A                     l269:
  2490                           
  2491                           ;main.c: 428: sound_yes = 1;
  2492  000A1A  8E66               	bsf	(_sound_yes/(0+8))^0,_sound_yes& (0+7),c
  2493  000A1C  D7C3               	goto	l3725
  2494  000A1E                     l3763:
  2495                           
  2496                           ;main.c: 435: lcd_gotoxy(16, 2);
  2497  000A1E  0E02               	movlw	2
  2498  000A20  6E49               	movwf	lcd_gotoxy@y^0,c
  2499  000A22  0E10               	movlw	16
  2500  000A24  EC58  F00D         	call	_lcd_gotoxy
  2501                           
  2502                           ;main.c: 436: lcd_putc(dq_num + 48);
  2503  000A28  5061               	movf	_dq_num^0,w,c
  2504  000A2A  0F30               	addlw	48
  2505  000A2C  EC9C  F00D         	call	_lcd_putc
  2506                           
  2507                           ;main.c: 437: if (pressed_key == 1) {
  2508  000A30  0434               	decf	_pressed_key^0,w,c
  2509  000A32  E106               	bnz	l3773
  2510                           
  2511                           ;main.c: 438: dq_num++;
  2512  000A34  2A61               	incf	_dq_num^0,f,c
  2513                           
  2514                           ;main.c: 439: if (dq_num == 3)
  2515  000A36  0E03               	movlw	3
  2516  000A38  1861               	xorwf	_dq_num^0,w,c
  2517  000A3A  E102               	bnz	l3773
  2518                           
  2519                           ;main.c: 440: dq_num = 1;
  2520  000A3C  0E01               	movlw	1
  2521  000A3E  6E61               	movwf	_dq_num^0,c
  2522  000A40                     l3773:
  2523                           
  2524                           ;main.c: 441: };main.c: 442: if (pressed_key == 2) {
  2525  000A40  0E02               	movlw	2
  2526  000A42  1834               	xorwf	_pressed_key^0,w,c
  2527  000A44  E105               	bnz	l3781
  2528                           
  2529                           ;main.c: 443: dq_num--;
  2530  000A46  0661               	decf	_dq_num^0,f,c
  2531                           
  2532                           ;main.c: 444: if (dq_num == 0)
  2533  000A48  5061               	movf	_dq_num^0,w,c
  2534  000A4A  E102               	bnz	l3781
  2535                           
  2536                           ;main.c: 445: dq_num = 2;
  2537  000A4C  0E02               	movlw	2
  2538  000A4E  6E61               	movwf	_dq_num^0,c
  2539  000A50                     l3781:
  2540                           
  2541                           ;main.c: 446: };main.c: 447: if (pressed_key == 3) {
  2542  000A50  0E03               	movlw	3
  2543  000A52  1834               	xorwf	_pressed_key^0,w,c
  2544  000A54  E002 EFB6  F000    	bnz	l3495
  2545                           
  2546                           ;main.c: 448: if (dq_num == 1) {
  2547  000A5A  0461               	decf	_dq_num^0,w,c
  2548  000A5C  E11B               	bnz	l3797
  2549                           
  2550                           ;main.c: 449: select = 5;
  2551  000A5E  0E05               	movlw	5
  2552  000A60  6E63               	movwf	_select^0,c
  2553                           
  2554                           ;main.c: 450: sub_sel_kol = 1;
  2555  000A62  0E01               	movlw	1
  2556  000A64  6E32               	movwf	_sub_sel_kol^0,c
  2557                           
  2558                           ;main.c: 451: clearLCD();
  2559  000A66  EC74  F00D         	call	_clearLCD	;wreg free
  2560                           
  2561                           ;main.c: 452: lcd_gotoxy(1, 1);
  2562  000A6A  0E01               	movlw	1
  2563  000A6C  6E49               	movwf	lcd_gotoxy@y^0,c
  2564  000A6E  EC58  F00D         	call	_lcd_gotoxy
  2565                           
  2566                           ;main.c: 453: lcdPrint("    Êîëîíà  ");
  2567  000A72  0E97               	movlw	low STR_21
  2568  000A74  6E4C               	movwf	lcdPrint@t^0,c
  2569  000A76  0E1F               	movlw	high STR_21
  2570  000A78  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2571  000A7A  EC9A  F009         	call	_lcdPrint	;wreg free
  2572                           
  2573                           ;main.c: 454: lcd_gotoxy(1, 2);
  2574  000A7E  DA82               	call	PL28	;call to abstracted procedure
  2575  000A80  EC58  F00D         	call	_lcd_gotoxy
  2576                           
  2577                           ;main.c: 455: lcdPrint("Òåìï Âåðõ:");
  2578  000A84  0EB1               	movlw	low STR_22
  2579  000A86  6E4C               	movwf	lcdPrint@t^0,c
  2580  000A88  0E1F               	movlw	high STR_22
  2581  000A8A  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2582  000A8C  EC9A  F009         	call	_lcdPrint	;wreg free
  2583                           
  2584                           ;main.c: 456: } else {
  2585  000A90  EFB6  F000         	goto	l3495
  2586  000A94                     l3797:
  2587                           
  2588                           ;main.c: 457: select = 6;
  2589  000A94  0E06               	movlw	6
  2590  000A96  6E63               	movwf	_select^0,c
  2591                           
  2592                           ;main.c: 459: clearLCD();
  2593  000A98  EC74  F00D         	call	_clearLCD	;wreg free
  2594                           
  2595                           ;main.c: 460: lcd_gotoxy(1, 1);
  2596  000A9C  0E01               	movlw	1
  2597  000A9E  6E49               	movwf	lcd_gotoxy@y^0,c
  2598  000AA0  EC58  F00D         	call	_lcd_gotoxy
  2599                           
  2600                           ;main.c: 461: lcdPrint("    Êóáîâà  ");
  2601  000AA4  0E8A               	movlw	low STR_23
  2602  000AA6  6E4C               	movwf	lcdPrint@t^0,c
  2603  000AA8  0E1F               	movlw	high STR_23
  2604  000AAA  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2605  000AAC  EC9A  F009         	call	_lcdPrint	;wreg free
  2606                           
  2607                           ;main.c: 462: lcd_gotoxy(1, 2);
  2608  000AB0  DA69               	call	PL28	;call to abstracted procedure
  2609  000AB2  EC58  F00D         	call	_lcd_gotoxy
  2610                           
  2611                           ;main.c: 463: lcdPrint("Çàâäàííÿ");
  2612  000AB6  0EBC               	movlw	low STR_24
  2613  000AB8  6E4C               	movwf	lcdPrint@t^0,c
  2614  000ABA  0E1F               	movlw	high STR_24
  2615  000ABC  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2616  000ABE  EC9A  F009         	call	_lcdPrint	;wreg free
  2617                           
  2618                           ;main.c: 465: pre_sub_sel = sub_sel;
  2619  000AC2  DA7F               	call	PL50	;call to abstracted procedure
  2620  000AC4  EC8C  F00D         	call	_read_eep	;wreg free
  2621  000AC8  DA6D               	call	PL40	;call to abstracted procedure
  2622  000ACA  EC8C  F00D         	call	_read_eep	;wreg free
  2623  000ACE  DA4C               	call	PL24	;call to abstracted procedure
  2624                           
  2625                           ;main.c: 466: sub_sel = VAL_1;
  2626  000AD0  6A33               	clrf	_sub_sel^0,c
  2627  000AD2  EFB6  F000         	goto	l3495
  2628  000AD6                     l3813:
  2629                           
  2630                           ;main.c: 476: lcd_gotoxy(11, 2);
  2631  000AD6  DA7D               	call	PL86	;call to abstracted procedure
  2632  000AD8  EC58  F00D         	call	_lcd_gotoxy
  2633                           
  2634                           ;main.c: 477: lcd_putc('+');
  2635  000ADC  0E2B               	movlw	43
  2636  000ADE  EC9C  F00D         	call	_lcd_putc
  2637                           
  2638                           ;main.c: 478: lcd_putc(((set_t_dq1_up / 10) % 10) + 48);
  2639  000AE2  0E0A               	movlw	10
  2640  000AE4  6E49               	movwf	___lbmod@divisor^0,c
  2641  000AE6  6E45               	movwf	___lbdiv@divisor^0,c
  2642  000AE8  5031               	movf	_set_t_dq1_up^0,w,c
  2643  000AEA  EC7C  F00C         	call	___lbdiv
  2644  000AEE  ECDF  F00C         	call	___lbmod
  2645  000AF2  0F30               	addlw	48
  2646  000AF4  EC9C  F00D         	call	_lcd_putc
  2647                           
  2648                           ;main.c: 479: lcd_putc('.');
  2649  000AF8  0E2E               	movlw	46
  2650  000AFA  EC9C  F00D         	call	_lcd_putc
  2651                           
  2652                           ;main.c: 480: lcd_putc(((set_t_dq1_up % 10) + 48));
  2653  000AFE  0E0A               	movlw	10
  2654  000B00  6E49               	movwf	___lbmod@divisor^0,c
  2655  000B02  5031               	movf	_set_t_dq1_up^0,w,c
  2656  000B04  ECDF  F00C         	call	___lbmod
  2657  000B08  0F30               	addlw	48
  2658  000B0A  EC9C  F00D         	call	_lcd_putc
  2659                           
  2660                           ;main.c: 482: if (pressed_key == 1) {
  2661  000B0E  0434               	decf	_pressed_key^0,w,c
  2662  000B10  E105               	bnz	l3823
  2663                           
  2664                           ;main.c: 483: set_t_dq1_up++;
  2665  000B12  2A31               	incf	_set_t_dq1_up^0,f,c
  2666                           
  2667                           ;main.c: 484: if (set_t_dq1_up == 11)
  2668  000B14  0E0B               	movlw	11
  2669  000B16  1831               	xorwf	_set_t_dq1_up^0,w,c
  2670  000B18  E101               	bnz	l3823
  2671                           
  2672                           ;main.c: 485: set_t_dq1_up = 0;
  2673  000B1A  6A31               	clrf	_set_t_dq1_up^0,c
  2674  000B1C                     l3823:
  2675                           
  2676                           ;main.c: 486: };main.c: 487: if (pressed_key == 2) {
  2677  000B1C  0E02               	movlw	2
  2678  000B1E  1834               	xorwf	_pressed_key^0,w,c
  2679  000B20  E105               	bnz	l3831
  2680                           
  2681                           ;main.c: 488: set_t_dq1_up--;
  2682  000B22  0631               	decf	_set_t_dq1_up^0,f,c
  2683                           
  2684                           ;main.c: 489: if (set_t_dq1_up == 255)
  2685  000B24  2831               	incf	_set_t_dq1_up^0,w,c
  2686  000B26  E102               	bnz	l3831
  2687                           
  2688                           ;main.c: 490: set_t_dq1_up = 10;
  2689  000B28  0E0A               	movlw	10
  2690  000B2A  6E31               	movwf	_set_t_dq1_up^0,c
  2691  000B2C                     l3831:
  2692                           
  2693                           ;main.c: 491: };main.c: 492: if (pressed_key == 3) {
  2694  000B2C  0E03               	movlw	3
  2695  000B2E  1834               	xorwf	_pressed_key^0,w,c
  2696  000B30  E002 EFB6  F000    	bnz	l3495
  2697                           
  2698                           ;main.c: 493: sub_sel_kol = 2;
  2699  000B36  0E02               	movlw	2
  2700  000B38  6E32               	movwf	_sub_sel_kol^0,c
  2701                           
  2702                           ;main.c: 494: lcd_gotoxy(1, 2);
  2703  000B3A  6E49               	movwf	lcd_gotoxy@y^0,c
  2704  000B3C  0E01               	movlw	1
  2705  000B3E  EC58  F00D         	call	_lcd_gotoxy
  2706                           
  2707                           ;main.c: 495: lcdPrint("Òåìï Íèç:     ");
  2708  000B42  0E5E               	movlw	low STR_25
  2709  000B44  6E4C               	movwf	lcdPrint@t^0,c
  2710  000B46  0E1F               	movlw	high STR_25
  2711  000B48  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2712  000B4A  EC9A  F009         	call	_lcdPrint	;wreg free
  2713  000B4E  EFB6  F000         	goto	l3495
  2714  000B52                     l3839:
  2715                           
  2716                           ;main.c: 499: lcd_gotoxy(10, 2);
  2717  000B52  DA25               	call	PL38	;call to abstracted procedure
  2718  000B54  EC58  F00D         	call	_lcd_gotoxy
  2719                           
  2720                           ;main.c: 500: lcd_putc('-');
  2721  000B58  0E2D               	movlw	45
  2722  000B5A  EC9C  F00D         	call	_lcd_putc
  2723                           
  2724                           ;main.c: 501: lcd_putc(((set_t_dq1_dwn / 10) % 10) + 48);
  2725  000B5E  0E0A               	movlw	10
  2726  000B60  6E49               	movwf	___lbmod@divisor^0,c
  2727  000B62  6E45               	movwf	___lbdiv@divisor^0,c
  2728  000B64  5030               	movf	_set_t_dq1_dwn^0,w,c
  2729  000B66  EC7C  F00C         	call	___lbdiv
  2730  000B6A  ECDF  F00C         	call	___lbmod
  2731  000B6E  0F30               	addlw	48
  2732  000B70  EC9C  F00D         	call	_lcd_putc
  2733                           
  2734                           ;main.c: 502: lcd_putc('.');
  2735  000B74  0E2E               	movlw	46
  2736  000B76  EC9C  F00D         	call	_lcd_putc
  2737                           
  2738                           ;main.c: 503: lcd_putc(((set_t_dq1_dwn % 10) + 48));
  2739  000B7A  0E0A               	movlw	10
  2740  000B7C  6E49               	movwf	___lbmod@divisor^0,c
  2741  000B7E  5030               	movf	_set_t_dq1_dwn^0,w,c
  2742  000B80  ECDF  F00C         	call	___lbmod
  2743  000B84  0F30               	addlw	48
  2744  000B86  EC9C  F00D         	call	_lcd_putc
  2745                           
  2746                           ;main.c: 505: if (pressed_key == 1) {
  2747  000B8A  0434               	decf	_pressed_key^0,w,c
  2748  000B8C  E105               	bnz	l3849
  2749                           
  2750                           ;main.c: 506: set_t_dq1_dwn++;
  2751  000B8E  2A30               	incf	_set_t_dq1_dwn^0,f,c
  2752                           
  2753                           ;main.c: 507: if (set_t_dq1_dwn == 11)
  2754  000B90  0E0B               	movlw	11
  2755  000B92  1830               	xorwf	_set_t_dq1_dwn^0,w,c
  2756  000B94  E101               	bnz	l3849
  2757                           
  2758                           ;main.c: 508: set_t_dq1_dwn = 0;
  2759  000B96  6A30               	clrf	_set_t_dq1_dwn^0,c
  2760  000B98                     l3849:
  2761                           
  2762                           ;main.c: 509: };main.c: 510: if (pressed_key == 2) {
  2763  000B98  0E02               	movlw	2
  2764  000B9A  1834               	xorwf	_pressed_key^0,w,c
  2765  000B9C  E105               	bnz	l3857
  2766                           
  2767                           ;main.c: 511: set_t_dq1_dwn--;
  2768  000B9E  0630               	decf	_set_t_dq1_dwn^0,f,c
  2769                           
  2770                           ;main.c: 512: if (set_t_dq1_dwn == 255)
  2771  000BA0  2830               	incf	_set_t_dq1_dwn^0,w,c
  2772  000BA2  E102               	bnz	l3857
  2773                           
  2774                           ;main.c: 513: set_t_dq1_dwn = 10;
  2775  000BA4  0E0A               	movlw	10
  2776  000BA6  6E30               	movwf	_set_t_dq1_dwn^0,c
  2777  000BA8                     l3857:
  2778                           
  2779                           ;main.c: 514: };main.c: 515: if (pressed_key == 3) {
  2780  000BA8  0E03               	movlw	3
  2781  000BAA  1834               	xorwf	_pressed_key^0,w,c
  2782  000BAC  E002 EFB6  F000    	bnz	l3495
  2783                           
  2784                           ;main.c: 516: select = 1;
  2785  000BB2  0E01               	movlw	1
  2786  000BB4  6E63               	movwf	_select^0,c
  2787                           
  2788                           ;main.c: 517: write_eep(16, set_t_dq1_up);
  2789  000BB6  C031  F045         	movff	_set_t_dq1_up,write_eep@data
  2790  000BBA  0E10               	movlw	16
  2791  000BBC  ECF2  F00C         	call	_write_eep
  2792                           
  2793                           ;main.c: 518: write_eep(17, set_t_dq1_dwn);
  2794  000BC0  C030  F045         	movff	_set_t_dq1_dwn,write_eep@data
  2795  000BC4  0E11               	movlw	17
  2796  000BC6  ECF2  F00C         	call	_write_eep
  2797  000BCA  D6EE               	goto	l3727
  2798  000BCC                     l3869:
  2799  000BCC  5032               	movf	_sub_sel_kol^0,w,c
  2800                           
  2801                           ; Switch size 1, requested type "space"
  2802                           ; Number of cases is 2, Range of values is 1 to 2
  2803                           ; switch strategies available:
  2804                           ; Name         Instructions Cycles
  2805                           ; simple_byte            7     4 (average)
  2806                           ;	Chosen strategy is simple_byte
  2807  000BCE  0A01               	xorlw	1	; case 1
  2808  000BD0  E082               	bz	l3813
  2809  000BD2  0A03               	xorlw	3	; case 2
  2810  000BD4  E0BE               	bz	l3839
  2811  000BD6  EFB6  F000         	goto	l3495
  2812  000BDA                     l3871:
  2813                           
  2814                           ;main.c: 527: lcd_gotoxy(10, 2);
  2815  000BDA  D9E1               	call	PL38	;call to abstracted procedure
  2816  000BDC  EC58  F00D         	call	_lcd_gotoxy
  2817                           
  2818                           ;main.c: 529: switch (sub_sel) {
  2819  000BE0  D03F               	goto	l3893
  2820  000BE2                     l3873:
  2821                           
  2822                           ;main.c: 531: lcdPrint("1:");
  2823  000BE2  0EE1               	movlw	low STR_26
  2824  000BE4  6E4C               	movwf	lcdPrint@t^0,c
  2825  000BE6  0E1F               	movlw	high STR_26
  2826  000BE8  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2827  000BEA  EC9A  F009         	call	_lcdPrint	;wreg free
  2828                           
  2829                           ;main.c: 532: break;
  2830  000BEE  D04A               	goto	l3895
  2831  000BF0                     l3875:
  2832                           
  2833                           ;main.c: 534: lcdPrint("2:");
  2834  000BF0  0EE4               	movlw	low STR_27
  2835  000BF2  6E4C               	movwf	lcdPrint@t^0,c
  2836  000BF4  0E1F               	movlw	high STR_27
  2837  000BF6  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2838  000BF8  EC9A  F009         	call	_lcdPrint	;wreg free
  2839                           
  2840                           ;main.c: 535: break;
  2841  000BFC  D043               	goto	l3895
  2842  000BFE                     l3877:
  2843                           
  2844                           ;main.c: 537: lcdPrint("3:");
  2845  000BFE  0EE7               	movlw	low STR_28
  2846  000C00  6E4C               	movwf	lcdPrint@t^0,c
  2847  000C02  0E1F               	movlw	high STR_28
  2848  000C04  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2849  000C06  EC9A  F009         	call	_lcdPrint	;wreg free
  2850                           
  2851                           ;main.c: 538: break;
  2852  000C0A  D03C               	goto	l3895
  2853  000C0C                     l3879:
  2854                           
  2855                           ;main.c: 540: lcdPrint("4:");
  2856  000C0C  0EEA               	movlw	low STR_29
  2857  000C0E  6E4C               	movwf	lcdPrint@t^0,c
  2858  000C10  0E1F               	movlw	high STR_29
  2859  000C12  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2860  000C14  EC9A  F009         	call	_lcdPrint	;wreg free
  2861                           
  2862                           ;main.c: 541: break;
  2863  000C18  D035               	goto	l3895
  2864  000C1A                     l3881:
  2865                           
  2866                           ;main.c: 543: lcdPrint("5:");
  2867  000C1A  0EED               	movlw	low STR_30
  2868  000C1C  6E4C               	movwf	lcdPrint@t^0,c
  2869  000C1E  0E1F               	movlw	high STR_30
  2870  000C20  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2871  000C22  EC9A  F009         	call	_lcdPrint	;wreg free
  2872                           
  2873                           ;main.c: 544: break;
  2874  000C26  D02E               	goto	l3895
  2875  000C28                     l3883:
  2876                           
  2877                           ;main.c: 546: lcdPrint("6:");
  2878  000C28  0EF0               	movlw	low STR_31
  2879  000C2A  6E4C               	movwf	lcdPrint@t^0,c
  2880  000C2C  0E1F               	movlw	high STR_31
  2881  000C2E  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2882  000C30  EC9A  F009         	call	_lcdPrint	;wreg free
  2883                           
  2884                           ;main.c: 547: break;
  2885  000C34  D027               	goto	l3895
  2886  000C36                     l3885:
  2887                           
  2888                           ;main.c: 549: lcdPrint("7:");
  2889  000C36  0EF3               	movlw	low STR_32
  2890  000C38  6E4C               	movwf	lcdPrint@t^0,c
  2891  000C3A  0E1F               	movlw	high STR_32
  2892  000C3C  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2893  000C3E  EC9A  F009         	call	_lcdPrint	;wreg free
  2894                           
  2895                           ;main.c: 550: break;
  2896  000C42  D020               	goto	l3895
  2897  000C44                     l3887:
  2898                           
  2899                           ;main.c: 552: lcdPrint("8:");
  2900  000C44  0EF6               	movlw	low STR_33
  2901  000C46  6E4C               	movwf	lcdPrint@t^0,c
  2902  000C48  0E1F               	movlw	high STR_33
  2903  000C4A  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2904  000C4C  EC9A  F009         	call	_lcdPrint	;wreg free
  2905                           
  2906                           ;main.c: 553: break;
  2907  000C50  D019               	goto	l3895
  2908  000C52                     l3889:
  2909                           
  2910                           ;main.c: 555: lcdPrint("9:");
  2911  000C52  0EF9               	movlw	low STR_34
  2912  000C54  6E4C               	movwf	lcdPrint@t^0,c
  2913  000C56  0E1F               	movlw	high STR_34
  2914  000C58  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2915  000C5A  EC9A  F009         	call	_lcdPrint	;wreg free
  2916                           
  2917                           ;main.c: 556: break;
  2918  000C5E  D012               	goto	l3895
  2919  000C60                     l3893:
  2920  000C60  5033               	movf	_sub_sel^0,w,c
  2921                           
  2922                           ; Switch size 1, requested type "space"
  2923                           ; Number of cases is 9, Range of values is 0 to 8
  2924                           ; switch strategies available:
  2925                           ; Name         Instructions Cycles
  2926                           ; simple_byte           28    15 (average)
  2927                           ;	Chosen strategy is simple_byte
  2928  000C62  E0BF               	bz	l3873
  2929  000C64  0A01               	xorlw	1	; case 1
  2930  000C66  E0C4               	bz	l3875
  2931  000C68  0A03               	xorlw	3	; case 2
  2932  000C6A  E0C9               	bz	l3877
  2933  000C6C  0A01               	xorlw	1	; case 3
  2934  000C6E  E0CE               	bz	l3879
  2935  000C70  0A07               	xorlw	7	; case 4
  2936  000C72  E0D3               	bz	l3881
  2937  000C74  0A01               	xorlw	1	; case 5
  2938  000C76  E0D8               	bz	l3883
  2939  000C78  0A03               	xorlw	3	; case 6
  2940  000C7A  E0DD               	bz	l3885
  2941  000C7C  0A01               	xorlw	1	; case 7
  2942  000C7E  E0E2               	bz	l3887
  2943  000C80  0A0F               	xorlw	15	; case 8
  2944  000C82  E0E7               	bz	l3889
  2945  000C84                     l3895:
  2946                           
  2947                           ;main.c: 558: lcd_putc(((set_t_dq2 / 100) % 10) + 48);
  2948  000C84  6A48               	clrf	(___awdiv@divisor+1)^0,c
  2949  000C86  0E64               	movlw	100
  2950  000C88  D969               	call	PL22	;call to abstracted procedure
  2951  000C8A  ECB4  F00A         	call	___awdiv	;wreg free
  2952  000C8E  D95B               	call	PL16	;call to abstracted procedure
  2953  000C90  EC2A  F00B         	call	___awmod	;wreg free
  2954  000C94  504D               	movf	?___awmod^0,w,c
  2955  000C96  0F30               	addlw	48
  2956  000C98  EC9C  F00D         	call	_lcd_putc
  2957                           
  2958                           ;main.c: 559: lcd_putc(((set_t_dq2 / 10) % 10) + 48);
  2959  000C9C  6A48               	clrf	(___awdiv@divisor+1)^0,c
  2960  000C9E  0E0A               	movlw	10
  2961  000CA0  D95D               	call	PL22	;call to abstracted procedure
  2962  000CA2  ECB4  F00A         	call	___awdiv	;wreg free
  2963  000CA6  D94F               	call	PL16	;call to abstracted procedure
  2964  000CA8  EC2A  F00B         	call	___awmod	;wreg free
  2965  000CAC  504D               	movf	?___awmod^0,w,c
  2966  000CAE  0F30               	addlw	48
  2967  000CB0  EC9C  F00D         	call	_lcd_putc
  2968                           
  2969                           ;main.c: 560: lcd_putc('.');
  2970  000CB4  0E2E               	movlw	46
  2971  000CB6  EC9C  F00D         	call	_lcd_putc
  2972                           
  2973                           ;main.c: 561: lcd_putc((set_t_dq2 % 10) + 48);
  2974  000CBA  D95C               	call	PL26	;call to abstracted procedure
  2975  000CBC  EC2A  F00B         	call	___awmod	;wreg free
  2976  000CC0  504D               	movf	?___awmod^0,w,c
  2977  000CC2  0F30               	addlw	48
  2978  000CC4  EC9C  F00D         	call	_lcd_putc
  2979                           
  2980                           ;main.c: 562: lcd_putc(0x01);
  2981  000CC8  0E01               	movlw	1
  2982  000CCA  EC9C  F00D         	call	_lcd_putc
  2983                           
  2984                           ;main.c: 564: if (pressed_key == 1) {
  2985  000CCE  0434               	decf	_pressed_key^0,w,c
  2986  000CD0  E114               	bnz	l3909
  2987                           
  2988                           ;main.c: 565: if (keyLong)
  2989  000CD2  5036               	movf	_keyLong^0,w,c
  2990  000CD4  E005               	bz	l3903
  2991                           
  2992                           ;main.c: 566: set_t_dq2 += 10;
  2993  000CD6  0E0A               	movlw	10
  2994  000CD8  2629               	addwf	_set_t_dq2^0,f,c
  2995  000CDA  0E00               	movlw	0
  2996  000CDC  222A               	addwfc	(_set_t_dq2+1)^0,f,c
  2997  000CDE  D002               	goto	l3905
  2998  000CE0                     l3903:
  2999                           
  3000                           ;main.c: 567: else;main.c: 568: set_t_dq2++;
  3001  000CE0  4A29               	infsnz	_set_t_dq2^0,f,c
  3002  000CE2  2A2A               	incf	(_set_t_dq2+1)^0,f,c
  3003  000CE4                     l3905:
  3004                           
  3005                           ;main.c: 570: if (set_t_dq2 > 999)
  3006  000CE4  BE2A               	btfsc	(_set_t_dq2+1)^0,7,c
  3007  000CE6  D009               	goto	l3909
  3008  000CE8  0EE8               	movlw	232
  3009  000CEA  5C29               	subwf	_set_t_dq2^0,w,c
  3010  000CEC  0E03               	movlw	3
  3011  000CEE  582A               	subwfb	(_set_t_dq2+1)^0,w,c
  3012  000CF0  E304               	bnc	l3909
  3013                           
  3014                           ;main.c: 571: set_t_dq2 = 999;
  3015  000CF2  0E03               	movlw	3
  3016  000CF4  6E2A               	movwf	(_set_t_dq2+1)^0,c
  3017  000CF6  0EE7               	movlw	231
  3018  000CF8  6E29               	movwf	_set_t_dq2^0,c
  3019  000CFA                     l3909:
  3020                           
  3021                           ;main.c: 572: };main.c: 573: if (pressed_key == 2) {
  3022  000CFA  0E02               	movlw	2
  3023  000CFC  1834               	xorwf	_pressed_key^0,w,c
  3024  000CFE  E113               	bnz	l3921
  3025                           
  3026                           ;main.c: 574: if (keyLong)
  3027  000D00  5036               	movf	_keyLong^0,w,c
  3028  000D02  E005               	bz	l3915
  3029                           
  3030                           ;main.c: 575: set_t_dq2 -= 10;
  3031  000D04  0EF6               	movlw	246
  3032  000D06  2629               	addwf	_set_t_dq2^0,f,c
  3033  000D08  0EFF               	movlw	255
  3034  000D0A  222A               	addwfc	(_set_t_dq2+1)^0,f,c
  3035  000D0C  D003               	goto	l3917
  3036  000D0E                     l3915:
  3037                           
  3038                           ;main.c: 576: else;main.c: 577: set_t_dq2--;
  3039  000D0E  0629               	decf	_set_t_dq2^0,f,c
  3040  000D10  A0D8               	btfss	status,0,c
  3041  000D12  062A               	decf	(_set_t_dq2+1)^0,f,c
  3042  000D14                     l3917:
  3043                           
  3044                           ;main.c: 579: if (set_t_dq2 < 1)
  3045  000D14  BE2A               	btfsc	(_set_t_dq2+1)^0,7,c
  3046  000D16  D004               	goto	u3230
  3047  000D18  502A               	movf	(_set_t_dq2+1)^0,w,c
  3048  000D1A  E105               	bnz	l3921
  3049  000D1C  0429               	decf	_set_t_dq2^0,w,c
  3050  000D1E  E203               	bc	l3921
  3051  000D20                     u3230:
  3052                           
  3053                           ;main.c: 580: set_t_dq2 = 1;
  3054  000D20  6A2A               	clrf	(_set_t_dq2+1)^0,c
  3055  000D22  0E01               	movlw	1
  3056  000D24  6E29               	movwf	_set_t_dq2^0,c
  3057  000D26                     l3921:
  3058                           
  3059                           ;main.c: 581: };main.c: 583: if (pressed_key == 3) {
  3060  000D26  0E03               	movlw	3
  3061  000D28  1834               	xorwf	_pressed_key^0,w,c
  3062  000D2A  E101 D0AE          	bz	l3961
  3063  000D2E  EFB6  F000         	goto	l3495
  3064  000D32                     l3925:
  3065                           
  3066                           ;main.c: 587: write_eep(23, ((unsigned char)(((set_t_dq2)>>8)&0xFF)));
  3067  000D32  502A               	movf	(_set_t_dq2+1)^0,w,c
  3068  000D34  6E45               	movwf	write_eep@data^0,c
  3069  000D36  0E17               	movlw	23
  3070  000D38  ECF2  F00C         	call	_write_eep
  3071                           
  3072                           ;main.c: 588: write_eep(24, ((unsigned char)((set_t_dq2)&0xFF)));
  3073  000D3C  C029  F045         	movff	_set_t_dq2,write_eep@data
  3074  000D40  0E18               	movlw	24
  3075  000D42  ECF2  F00C         	call	_write_eep
  3076                           
  3077                           ;main.c: 589: set_t_dq2 = (uint16_t) read_eep(25) << 8 | read_eep(26);
  3078  000D46  EC84  F008         	call	PL62	;call to abstracted procedure
  3079  000D4A  EC8C  F00D         	call	_read_eep	;wreg free
  3080  000D4E  6E56               	movwf	??_main^0,c
  3081  000D50  EC70  F008         	call	PL52	;call to abstracted procedure
  3082  000D54  EC8C  F00D         	call	_read_eep	;wreg free
  3083  000D58  D08B               	goto	L8
  3084  000D5A                     l3929:
  3085                           
  3086                           ;main.c: 592: write_eep(25, ((unsigned char)(((set_t_dq2)>>8)&0xFF)));
  3087  000D5A  502A               	movf	(_set_t_dq2+1)^0,w,c
  3088  000D5C  6E45               	movwf	write_eep@data^0,c
  3089  000D5E  0E19               	movlw	25
  3090  000D60  ECF2  F00C         	call	_write_eep
  3091                           
  3092                           ;main.c: 593: write_eep(26, ((unsigned char)((set_t_dq2)&0xFF)));
  3093  000D64  C029  F045         	movff	_set_t_dq2,write_eep@data
  3094  000D68  0E1A               	movlw	26
  3095  000D6A  ECF2  F00C         	call	_write_eep
  3096                           
  3097                           ;main.c: 594: set_t_dq2 = (uint16_t) read_eep(27) << 8 | read_eep(28);
  3098  000D6E  ECA0  F008         	call	PL80	;call to abstracted procedure
  3099  000D72  EC8C  F00D         	call	_read_eep	;wreg free
  3100  000D76  6E56               	movwf	??_main^0,c
  3101  000D78  EC78  F008         	call	PL56	;call to abstracted procedure
  3102  000D7C  EC8C  F00D         	call	_read_eep	;wreg free
  3103  000D80  D077               	goto	L8
  3104  000D82                     l3933:
  3105                           
  3106                           ;main.c: 597: write_eep(27, ((unsigned char)(((set_t_dq2)>>8)&0xFF)));
  3107  000D82  502A               	movf	(_set_t_dq2+1)^0,w,c
  3108  000D84  6E45               	movwf	write_eep@data^0,c
  3109  000D86  0E1B               	movlw	27
  3110  000D88  ECF2  F00C         	call	_write_eep
  3111                           
  3112                           ;main.c: 598: write_eep(28, ((unsigned char)((set_t_dq2)&0xFF)));
  3113  000D8C  C029  F045         	movff	_set_t_dq2,write_eep@data
  3114  000D90  0E1C               	movlw	28
  3115  000D92  ECF2  F00C         	call	_write_eep
  3116                           
  3117                           ;main.c: 599: set_t_dq2 = (uint16_t) read_eep(29) << 8 | read_eep(30);
  3118  000D96  EC94  F008         	call	PL74	;call to abstracted procedure
  3119  000D9A  EC8C  F00D         	call	_read_eep	;wreg free
  3120  000D9E  6E56               	movwf	??_main^0,c
  3121  000DA0  ECA4  F008         	call	PL82	;call to abstracted procedure
  3122  000DA4  EC8C  F00D         	call	_read_eep	;wreg free
  3123  000DA8  D063               	goto	L8
  3124  000DAA                     l3937:
  3125                           
  3126                           ;main.c: 602: write_eep(29, ((unsigned char)(((set_t_dq2)>>8)&0xFF)));
  3127  000DAA  502A               	movf	(_set_t_dq2+1)^0,w,c
  3128  000DAC  6E45               	movwf	write_eep@data^0,c
  3129  000DAE  0E1D               	movlw	29
  3130  000DB0  ECF2  F00C         	call	_write_eep
  3131                           
  3132                           ;main.c: 603: write_eep(30, ((unsigned char)((set_t_dq2)&0xFF)));
  3133  000DB4  C029  F045         	movff	_set_t_dq2,write_eep@data
  3134  000DB8  0E1E               	movlw	30
  3135  000DBA  ECF2  F00C         	call	_write_eep
  3136                           
  3137                           ;main.c: 604: set_t_dq2 = (uint16_t) read_eep(31) << 8 | read_eep(32);
  3138  000DBE  EC8C  F008         	call	PL70	;call to abstracted procedure
  3139  000DC2  EC8C  F00D         	call	_read_eep	;wreg free
  3140  000DC6  6E56               	movwf	??_main^0,c
  3141  000DC8  EC98  F008         	call	PL76	;call to abstracted procedure
  3142  000DCC  EC8C  F00D         	call	_read_eep	;wreg free
  3143  000DD0  D04F               	goto	L8
  3144  000DD2                     l3941:
  3145                           
  3146                           ;main.c: 607: write_eep(31, ((unsigned char)(((set_t_dq2)>>8)&0xFF)));
  3147  000DD2  502A               	movf	(_set_t_dq2+1)^0,w,c
  3148  000DD4  6E45               	movwf	write_eep@data^0,c
  3149  000DD6  0E1F               	movlw	31
  3150  000DD8  ECF2  F00C         	call	_write_eep
  3151                           
  3152                           ;main.c: 608: write_eep(32, ((unsigned char)((set_t_dq2)&0xFF)));
  3153  000DDC  C029  F045         	movff	_set_t_dq2,write_eep@data
  3154  000DE0  0E20               	movlw	32
  3155  000DE2  ECF2  F00C         	call	_write_eep
  3156                           
  3157                           ;main.c: 609: set_t_dq2 = (uint16_t) read_eep(33) << 8 | read_eep(34);
  3158  000DE6  ECAC  F008         	call	PL88	;call to abstracted procedure
  3159  000DEA  EC8C  F00D         	call	_read_eep	;wreg free
  3160  000DEE  6E56               	movwf	??_main^0,c
  3161  000DF0  EC88  F008         	call	PL66	;call to abstracted procedure
  3162  000DF4  EC8C  F00D         	call	_read_eep	;wreg free
  3163  000DF8  D03B               	goto	L8
  3164  000DFA                     l3945:
  3165                           
  3166                           ;main.c: 612: write_eep(33, ((unsigned char)(((set_t_dq2)>>8)&0xFF)));
  3167  000DFA  502A               	movf	(_set_t_dq2+1)^0,w,c
  3168  000DFC  6E45               	movwf	write_eep@data^0,c
  3169  000DFE  0E21               	movlw	33
  3170  000E00  ECF2  F00C         	call	_write_eep
  3171                           
  3172                           ;main.c: 613: write_eep(34, ((unsigned char)((set_t_dq2)&0xFF)));
  3173  000E04  C029  F045         	movff	_set_t_dq2,write_eep@data
  3174  000E08  0E22               	movlw	34
  3175  000E0A  ECF2  F00C         	call	_write_eep
  3176                           
  3177                           ;main.c: 614: set_t_dq2 = (uint16_t) read_eep(35) << 8 | read_eep(36);
  3178  000E0E  EC80  F008         	call	PL60	;call to abstracted procedure
  3179  000E12  EC8C  F00D         	call	_read_eep	;wreg free
  3180  000E16  6E56               	movwf	??_main^0,c
  3181  000E18  EC74  F008         	call	PL54	;call to abstracted procedure
  3182  000E1C  EC8C  F00D         	call	_read_eep	;wreg free
  3183  000E20  D027               	goto	L8
  3184  000E22                     l3949:
  3185                           
  3186                           ;main.c: 617: write_eep(35, ((unsigned char)(((set_t_dq2)>>8)&0xFF)));
  3187  000E22  502A               	movf	(_set_t_dq2+1)^0,w,c
  3188  000E24  6E45               	movwf	write_eep@data^0,c
  3189  000E26  0E23               	movlw	35
  3190  000E28  ECF2  F00C         	call	_write_eep
  3191                           
  3192                           ;main.c: 618: write_eep(36, ((unsigned char)((set_t_dq2)&0xFF)));
  3193  000E2C  C029  F045         	movff	_set_t_dq2,write_eep@data
  3194  000E30  0E24               	movlw	36
  3195  000E32  ECF2  F00C         	call	_write_eep
  3196                           
  3197                           ;main.c: 619: set_t_dq2 = (uint16_t) read_eep(37) << 8 | read_eep(38);
  3198  000E36  EC9C  F008         	call	PL78	;call to abstracted procedure
  3199  000E3A  EC8C  F00D         	call	_read_eep	;wreg free
  3200  000E3E  6E56               	movwf	??_main^0,c
  3201  000E40  EC7C  F008         	call	PL58	;call to abstracted procedure
  3202  000E44  EC8C  F00D         	call	_read_eep	;wreg free
  3203  000E48  D013               	goto	L8
  3204  000E4A                     l3953:
  3205                           
  3206                           ;main.c: 622: write_eep(37, ((unsigned char)(((set_t_dq2)>>8)&0xFF)));
  3207  000E4A  502A               	movf	(_set_t_dq2+1)^0,w,c
  3208  000E4C  6E45               	movwf	write_eep@data^0,c
  3209  000E4E  0E25               	movlw	37
  3210  000E50  ECF2  F00C         	call	_write_eep
  3211                           
  3212                           ;main.c: 623: write_eep(38, ((unsigned char)((set_t_dq2)&0xFF)));
  3213  000E54  C029  F045         	movff	_set_t_dq2,write_eep@data
  3214  000E58  0E26               	movlw	38
  3215  000E5A  ECF2  F00C         	call	_write_eep
  3216                           
  3217                           ;main.c: 624: set_t_dq2 = (uint16_t) read_eep(39) << 8 | read_eep(40);
  3218  000E5E  EC90  F008         	call	PL72	;call to abstracted procedure
  3219  000E62  EC8C  F00D         	call	_read_eep	;wreg free
  3220  000E66  6E56               	movwf	??_main^0,c
  3221  000E68  ECA8  F008         	call	PL84	;call to abstracted procedure
  3222  000E6C  EC8C  F00D         	call	_read_eep	;wreg free
  3223  000E70                     L8:
  3224  000E70  D87B               	call	PL24	;call to abstracted procedure
  3225                           
  3226                           ;main.c: 625: break;
  3227  000E72  D020               	goto	l3963
  3228  000E74                     l3957:
  3229                           
  3230                           ;main.c: 627: write_eep(39, ((unsigned char)(((set_t_dq2)>>8)&0xFF)));
  3231  000E74  502A               	movf	(_set_t_dq2+1)^0,w,c
  3232  000E76  6E45               	movwf	write_eep@data^0,c
  3233  000E78  0E27               	movlw	39
  3234  000E7A  ECF2  F00C         	call	_write_eep
  3235                           
  3236                           ;main.c: 628: write_eep(40, ((unsigned char)((set_t_dq2)&0xFF)));
  3237  000E7E  C029  F045         	movff	_set_t_dq2,write_eep@data
  3238  000E82  0E28               	movlw	40
  3239  000E84  ECF2  F00C         	call	_write_eep
  3240                           
  3241                           ;main.c: 629: break;
  3242  000E88  D015               	goto	l3963
  3243  000E8A                     l3961:
  3244  000E8A  5033               	movf	_sub_sel^0,w,c
  3245                           
  3246                           ; Switch size 1, requested type "space"
  3247                           ; Number of cases is 9, Range of values is 0 to 8
  3248                           ; switch strategies available:
  3249                           ; Name         Instructions Cycles
  3250                           ; simple_byte           28    15 (average)
  3251                           ;	Chosen strategy is simple_byte
  3252  000E8C  E101 D751          	bz	l3925
  3253  000E90  0A01               	xorlw	1	; case 1
  3254  000E92  E101 D762          	bz	l3929
  3255  000E96  0A03               	xorlw	3	; case 2
  3256  000E98  E101 D773          	bz	l3933
  3257  000E9C  0A01               	xorlw	1	; case 3
  3258  000E9E  E085               	bz	l3937
  3259  000EA0  0A07               	xorlw	7	; case 4
  3260  000EA2  E097               	bz	l3941
  3261  000EA4  0A01               	xorlw	1	; case 5
  3262  000EA6  E0A9               	bz	l3945
  3263  000EA8  0A03               	xorlw	3	; case 6
  3264  000EAA  E0BB               	bz	l3949
  3265  000EAC  0A01               	xorlw	1	; case 7
  3266  000EAE  E0CD               	bz	l3953
  3267  000EB0  0A0F               	xorlw	15	; case 8
  3268  000EB2  E0E0               	bz	l3957
  3269  000EB4                     l3963:
  3270                           
  3271                           ;main.c: 633: sub_sel++;
  3272  000EB4  2A33               	incf	_sub_sel^0,f,c
  3273                           
  3274                           ;main.c: 635: if (sub_sel > VAL_9) {
  3275  000EB6  0E08               	movlw	8
  3276  000EB8  6433               	cpfsgt	_sub_sel^0,c
  3277  000EBA  D50A               	goto	l3667
  3278                           
  3279                           ;main.c: 636: sub_sel = VAL_1;
  3280  000EBC  6A33               	clrf	_sub_sel^0,c
  3281                           
  3282                           ;main.c: 637: select = 1;
  3283  000EBE  0E01               	movlw	1
  3284  000EC0  6E63               	movwf	_select^0,c
  3285                           
  3286                           ;main.c: 638: outValPreset();
  3287  000EC2  ECEC  F007         	call	_outValPreset	;wreg free
  3288  000EC6  D504               	goto	l3667
  3289  000EC8                     l3977:
  3290  000EC8  5063               	movf	_select^0,w,c
  3291                           
  3292                           ; Switch size 1, requested type "space"
  3293                           ; Number of cases is 8, Range of values is 1 to 8
  3294                           ; switch strategies available:
  3295                           ; Name         Instructions Cycles
  3296                           ; simple_byte           25    13 (average)
  3297                           ;	Chosen strategy is simple_byte
  3298  000ECA  0A01               	xorlw	1	; case 1
  3299  000ECC  E102 EFC0  F000    	bz	l3503
  3300  000ED2  0A03               	xorlw	3	; case 2
  3301  000ED4  E101 D500          	bz	l3669
  3302  000ED8  0A01               	xorlw	1	; case 3
  3303  000EDA  E102 EFB6  F000    	bz	l3495
  3304  000EE0  0A07               	xorlw	7	; case 4
  3305  000EE2  E101 D59C          	bz	l3763
  3306  000EE6  0A01               	xorlw	1	; case 5
  3307  000EE8  E101 D670          	bz	l3869
  3308  000EEC  0A03               	xorlw	3	; case 6
  3309  000EEE  E101 D674          	bz	l3871
  3310  000EF2  0A01               	xorlw	1	; case 7
  3311  000EF4  E101 D51E          	bz	l3697
  3312  000EF8  0A0F               	xorlw	15	; case 8
  3313  000EFA  E101 D559          	bz	l3729
  3314  000EFE  EFB6  F000         	goto	l3495
  3315  000F02                     __end_of_main:
  3316                           	callstack 0
  3317  000F02                     PL2:
  3318                           	callstack 24
  3319  000F02  C045  F04C         	movff	?___lwdiv,___lwmod@dividend
  3320  000F06  C046  F04D         	movff	?___lwdiv+1,___lwmod@dividend+1
  3321  000F0A  6A4F               	clrf	(___lwmod@divisor+1)^0,c
  3322  000F0C  0E0A               	movlw	10
  3323  000F0E  6E4E               	movwf	___lwmod@divisor^0,c
  3324  000F10  0C0A               	retlw	10
  3325  000F12                     __end_ofPL2:
  3326                           	callstack 0
  3327  000F12                     PL4:
  3328                           	callstack 24
  3329  000F12  6E47               	movwf	___lwdiv@divisor^0,c
  3330  000F14  C05D  F045         	movff	_temperature_2,___lwdiv@dividend
  3331  000F18  C05E  F046         	movff	_temperature_2+1,___lwdiv@dividend+1
  3332  000F1C  0012               	return	
  3333  000F1E                     __end_ofPL4:
  3334                           	callstack 0
  3335  000F1E                     PL6:
  3336                           	callstack 24
  3337  000F1E  6E47               	movwf	___lwdiv@divisor^0,c
  3338  000F20  C05F  F045         	movff	_temperature_1,___lwdiv@dividend
  3339  000F24  C060  F046         	movff	_temperature_1+1,___lwdiv@dividend+1
  3340  000F28  0012               	return	
  3341  000F2A                     __end_ofPL6:
  3342                           	callstack 0
  3343  000F2A                     PL10:
  3344                           	callstack 24
  3345  000F2A  6A4F               	clrf	(___lwmod@divisor+1)^0,c
  3346  000F2C  0E0A               	movlw	10
  3347  000F2E  6E4E               	movwf	___lwmod@divisor^0,c
  3348  000F30  0C0A               	retlw	10
  3349  000F32                     __end_ofPL10:
  3350                           	callstack 0
  3351  000F32                     PL12:
  3352                           	callstack 24
  3353  000F32  C05F  F04C         	movff	_temperature_1,___lwmod@dividend
  3354  000F36  C060  F04D         	movff	_temperature_1+1,___lwmod@dividend+1
  3355  000F3A  0012               	return	
  3356  000F3C                     __end_ofPL12:
  3357                           	callstack 0
  3358  000F3C                     PL14:
  3359                           	callstack 24
  3360  000F3C  C05D  F04C         	movff	_temperature_2,___lwmod@dividend
  3361  000F40  C05E  F04D         	movff	_temperature_2+1,___lwmod@dividend+1
  3362  000F44  0012               	return	
  3363  000F46                     __end_ofPL14:
  3364                           	callstack 0
  3365  000F46                     PL16:
  3366                           	callstack 24
  3367  000F46  C045  F04D         	movff	?___awdiv,___awmod@dividend
  3368  000F4A  C046  F04E         	movff	?___awdiv+1,___awmod@dividend+1
  3369  000F4E  6A50               	clrf	(___awmod@divisor+1)^0,c
  3370  000F50  0E0A               	movlw	10
  3371  000F52  6E4F               	movwf	___awmod@divisor^0,c
  3372  000F54  0C0A               	retlw	10
  3373  000F56                     __end_ofPL16:
  3374                           	callstack 0
  3375  000F56                     PL18:
  3376                           	callstack 24
  3377  000F56  0E03               	movlw	3
  3378  000F58  6E48               	movwf	(___lwdiv@divisor+1)^0,c
  3379  000F5A  0CE8               	retlw	232
  3380  000F5C                     __end_ofPL18:
  3381                           	callstack 0
  3382  000F5C                     PL22:
  3383                           	callstack 24
  3384  000F5C  6E47               	movwf	___awdiv@divisor^0,c
  3385  000F5E  C029  F045         	movff	_set_t_dq2,___awdiv@dividend
  3386  000F62  C02A  F046         	movff	_set_t_dq2+1,___awdiv@dividend+1
  3387  000F66  0012               	return	
  3388  000F68                     __end_ofPL22:
  3389                           	callstack 0
  3390  000F68                     PL24:
  3391                           	callstack 24
  3392  000F68  6E57               	movwf	(??_main+1)^0,c
  3393  000F6A  5056               	movf	??_main^0,w,c
  3394  000F6C  6E29               	movwf	_set_t_dq2^0,c
  3395  000F6E  C057  F02A         	movff	??_main+1,_set_t_dq2+1
  3396  000F72  0012               	return	
  3397  000F74                     __end_ofPL24:
  3398                           	callstack 0
  3399  000F74                     PL26:
  3400                           	callstack 24
  3401  000F74  C029  F04D         	movff	_set_t_dq2,___awmod@dividend
  3402  000F78  C02A  F04E         	movff	_set_t_dq2+1,___awmod@dividend+1
  3403  000F7C  6A50               	clrf	(___awmod@divisor+1)^0,c
  3404  000F7E  0E0A               	movlw	10
  3405  000F80  6E4F               	movwf	___awmod@divisor^0,c
  3406  000F82  0C0A               	retlw	10
  3407  000F84                     __end_ofPL26:
  3408                           	callstack 0
  3409  000F84                     PL28:
  3410                           	callstack 24
  3411  000F84  0E02               	movlw	2
  3412  000F86  6E49               	movwf	lcd_gotoxy@y^0,c
  3413  000F88  0C01               	retlw	1
  3414  000F8A                     __end_ofPL28:
  3415                           	callstack 0
  3416  000F8A                     PL34:
  3417                           	callstack 24
  3418  000F8A  6E47               	movwf	___lwdiv@divisor^0,c
  3419  000F8C  C027  F045         	movff	_temp1_fix,___lwdiv@dividend
  3420  000F90  C028  F046         	movff	_temp1_fix+1,___lwdiv@dividend+1
  3421  000F94  0012               	return	
  3422  000F96                     __end_ofPL34:
  3423                           	callstack 0
  3424  000F96                     PL36:
  3425                           	callstack 24
  3426  000F96  6E63               	movwf	_select^0,c
  3427  000F98  0E01               	movlw	1
  3428  000F9A  6E49               	movwf	lcd_gotoxy@y^0,c
  3429  000F9C  0C01               	retlw	1
  3430  000F9E                     __end_ofPL36:
  3431                           	callstack 0
  3432  000F9E                     PL38:
  3433                           	callstack 24
  3434  000F9E  0E02               	movlw	2
  3435  000FA0  6E49               	movwf	lcd_gotoxy@y^0,c
  3436  000FA2  0C0A               	retlw	10
  3437  000FA4                     __end_ofPL38:
  3438                           	callstack 0
  3439  000FA4                     PL40:
  3440                           	callstack 24
  3441  000FA4  6E56               	movwf	??_main^0,c
  3442  000FA6  6A46               	clrf	(read_eep@address+1)^0,c
  3443  000FA8  0E17               	movlw	23
  3444  000FAA  6E45               	movwf	read_eep@address^0,c
  3445  000FAC  0C17               	retlw	23
  3446  000FAE                     __end_ofPL40:
  3447                           	callstack 0
  3448  000FAE                     PL46:
  3449                           	callstack 24
  3450  000FAE  0EDD               	movlw	low STR_6
  3451  000FB0  6E46               	movwf	EUSART_Write_Str@t^0,c
  3452  000FB2  0E1F               	movlw	high STR_6
  3453  000FB4  6E47               	movwf	(EUSART_Write_Str@t+1)^0,c
  3454  000FB6  0012               	return	
  3455  000FB8                     __end_ofPL46:
  3456                           	callstack 0
  3457  000FB8                     PL48:
  3458                           	callstack 24
  3459  000FB8  0ED9               	movlw	low STR_9
  3460  000FBA  6E46               	movwf	EUSART_Write_Str@t^0,c
  3461  000FBC  0E1F               	movlw	high STR_9
  3462  000FBE  6E47               	movwf	(EUSART_Write_Str@t+1)^0,c
  3463  000FC0  0012               	return	
  3464  000FC2                     __end_ofPL48:
  3465                           	callstack 0
  3466  000FC2                     PL50:
  3467                           	callstack 24
  3468  000FC2  6A46               	clrf	(read_eep@address+1)^0,c
  3469  000FC4  0E18               	movlw	24
  3470  000FC6  6E45               	movwf	read_eep@address^0,c
  3471  000FC8  0C18               	retlw	24
  3472  000FCA                     __end_ofPL50:
  3473                           	callstack 0
  3474  000FCA                     PL64:
  3475                           	callstack 26
  3476  000FCA  6A46               	clrf	(Delay_ms@delay+1)^0,c
  3477  000FCC  0E0A               	movlw	10
  3478  000FCE  6E45               	movwf	Delay_ms@delay^0,c
  3479  000FD0  0C0A               	retlw	10
  3480  000FD2                     __end_ofPL64:
  3481                           	callstack 0
  3482  000FD2                     PL86:
  3483                           	callstack 24
  3484  000FD2  0E02               	movlw	2
  3485  000FD4  6E49               	movwf	lcd_gotoxy@y^0,c
  3486  000FD6  0C0B               	retlw	11
  3487  000FD8                     __end_ofPL86:
  3488                           	callstack 0
  3489                           
  3490 ;; *************** function _outValPreset *****************
  3491 ;; Defined at:
  3492 ;;		line 781 in file "main.c"
  3493 ;; Parameters:    Size  Location     Type
  3494 ;;		None
  3495 ;; Auto vars:     Size  Location     Type
  3496 ;;		None
  3497 ;; Return value:  Size  Location     Type
  3498 ;;                  1    wreg      void 
  3499 ;; Registers used:
  3500 ;;		wreg, status,2, status,0, cstack
  3501 ;; Tracked objects:
  3502 ;;		On entry : 0/0
  3503 ;;		On exit  : 0/0
  3504 ;;		Unchanged: 0/0
  3505 ;; Data sizes:     COMRAM   BANK0   BANK1
  3506 ;;      Params:         0       0       0
  3507 ;;      Locals:         0       0       0
  3508 ;;      Temps:          3       0       0
  3509 ;;      Totals:         3       0       0
  3510 ;;Total ram usage:        3 bytes
  3511 ;; Hardware stack levels used: 1
  3512 ;; Hardware stack levels required when called: 5
  3513 ;; This function calls:
  3514 ;;		_lcd_gotoxy
  3515 ;;		_lcd_putc
  3516 ;;		_read_eep
  3517 ;; This function is called by:
  3518 ;;		_main
  3519 ;; This function uses a non-reentrant model
  3520 ;;
  3521                           
  3522                           	psect	text1
  3523  000FD8                     __ptext1:
  3524                           	callstack 0
  3525  000FD8                     _outValPreset:
  3526                           	callstack 0
  3527                           
  3528                           ;main.c: 782: lcd_gotoxy(10, 2);
  3529                           
  3530                           ;incstack = 0
  3531  000FD8  ECCF  F007         	call	PL38	;call to abstracted procedure
  3532  000FDC  EC58  F00D         	call	_lcd_gotoxy
  3533                           
  3534                           ;main.c: 783: switch (sub_sel) {
  3535  000FE0  D066               	goto	l3251
  3536  000FE2                     l3231:
  3537                           
  3538                           ;main.c: 786: set_t_dq2 = (uint16_t) read_eep(23) << 8 | read_eep(24);
  3539  000FE2  ECE1  F007         	call	PL50	;call to abstracted procedure
  3540  000FE6  EC8C  F00D         	call	_read_eep	;wreg free
  3541  000FEA  6E4C               	movwf	??_outValPreset^0,c
  3542  000FEC  6A46               	clrf	(read_eep@address+1)^0,c
  3543  000FEE  0E17               	movlw	23
  3544  000FF0  6E45               	movwf	read_eep@address^0,c
  3545  000FF2  EC8C  F00D         	call	_read_eep	;wreg free
  3546  000FF6  D86E               	call	PL8	;call to abstracted procedure
  3547                           
  3548                           ;main.c: 787: lcd_putc('1');
  3549  000FF8  0E31               	movlw	49
  3550  000FFA  EF9C  F00D         	goto	_lcd_putc
  3551  000FFE                     l3233:
  3552                           
  3553                           ;main.c: 790: set_t_dq2 = (uint16_t) read_eep(25) << 8 | read_eep(26);
  3554  000FFE  D884               	call	PL62	;call to abstracted procedure
  3555  001000  EC8C  F00D         	call	_read_eep	;wreg free
  3556  001004  6E4C               	movwf	??_outValPreset^0,c
  3557  001006  D86C               	call	PL52	;call to abstracted procedure
  3558  001008  EC8C  F00D         	call	_read_eep	;wreg free
  3559  00100C  D863               	call	PL8	;call to abstracted procedure
  3560                           
  3561                           ;main.c: 791: lcd_putc('2');
  3562  00100E  0E32               	movlw	50
  3563  001010  EF9C  F00D         	goto	_lcd_putc
  3564  001014                     l3235:
  3565                           
  3566                           ;main.c: 794: set_t_dq2 = (uint16_t) read_eep(27) << 8 | read_eep(28);
  3567  001014  D895               	call	PL80	;call to abstracted procedure
  3568  001016  EC8C  F00D         	call	_read_eep	;wreg free
  3569  00101A  6E4C               	movwf	??_outValPreset^0,c
  3570  00101C  D869               	call	PL56	;call to abstracted procedure
  3571  00101E  EC8C  F00D         	call	_read_eep	;wreg free
  3572  001022  D858               	call	PL8	;call to abstracted procedure
  3573                           
  3574                           ;main.c: 795: lcd_putc('3');
  3575  001024  0E33               	movlw	51
  3576  001026  EF9C  F00D         	goto	_lcd_putc
  3577  00102A                     l3237:
  3578                           
  3579                           ;main.c: 798: set_t_dq2 = (uint16_t) read_eep(29) << 8 | read_eep(30);
  3580  00102A  D87E               	call	PL74	;call to abstracted procedure
  3581  00102C  EC8C  F00D         	call	_read_eep	;wreg free
  3582  001030  6E4C               	movwf	??_outValPreset^0,c
  3583  001032  D88A               	call	PL82	;call to abstracted procedure
  3584  001034  EC8C  F00D         	call	_read_eep	;wreg free
  3585  001038  D84D               	call	PL8	;call to abstracted procedure
  3586                           
  3587                           ;main.c: 799: lcd_putc('4');
  3588  00103A  0E34               	movlw	52
  3589  00103C  EF9C  F00D         	goto	_lcd_putc
  3590  001040                     l3239:
  3591                           
  3592                           ;main.c: 802: set_t_dq2 = (uint16_t) read_eep(31) << 8 | read_eep(32);
  3593  001040  D86B               	call	PL70	;call to abstracted procedure
  3594  001042  EC8C  F00D         	call	_read_eep	;wreg free
  3595  001046  6E4C               	movwf	??_outValPreset^0,c
  3596  001048  D873               	call	PL76	;call to abstracted procedure
  3597  00104A  EC8C  F00D         	call	_read_eep	;wreg free
  3598  00104E  D842               	call	PL8	;call to abstracted procedure
  3599                           
  3600                           ;main.c: 803: lcd_putc('5');
  3601  001050  0E35               	movlw	53
  3602  001052  EF9C  F00D         	goto	_lcd_putc
  3603  001056                     l3241:
  3604                           
  3605                           ;main.c: 806: set_t_dq2 = (uint16_t) read_eep(33) << 8 | read_eep(34);
  3606  001056  D880               	call	PL88	;call to abstracted procedure
  3607  001058  EC8C  F00D         	call	_read_eep	;wreg free
  3608  00105C  6E4C               	movwf	??_outValPreset^0,c
  3609  00105E  D858               	call	PL66	;call to abstracted procedure
  3610  001060  EC8C  F00D         	call	_read_eep	;wreg free
  3611  001064  D837               	call	PL8	;call to abstracted procedure
  3612                           
  3613                           ;main.c: 807: lcd_putc('6');
  3614  001066  0E36               	movlw	54
  3615  001068  EF9C  F00D         	goto	_lcd_putc
  3616  00106C                     l3243:
  3617                           
  3618                           ;main.c: 810: set_t_dq2 = (uint16_t) read_eep(35) << 8 | read_eep(36);
  3619  00106C  D849               	call	PL60	;call to abstracted procedure
  3620  00106E  EC8C  F00D         	call	_read_eep	;wreg free
  3621  001072  6E4C               	movwf	??_outValPreset^0,c
  3622  001074  D839               	call	PL54	;call to abstracted procedure
  3623  001076  EC8C  F00D         	call	_read_eep	;wreg free
  3624  00107A  D82C               	call	PL8	;call to abstracted procedure
  3625                           
  3626                           ;main.c: 811: lcd_putc('7');
  3627  00107C  0E37               	movlw	55
  3628  00107E  EF9C  F00D         	goto	_lcd_putc
  3629  001082                     l3245:
  3630                           
  3631                           ;main.c: 814: set_t_dq2 = (uint16_t) read_eep(37) << 8 | read_eep(38);
  3632  001082  D85A               	call	PL78	;call to abstracted procedure
  3633  001084  EC8C  F00D         	call	_read_eep	;wreg free
  3634  001088  6E4C               	movwf	??_outValPreset^0,c
  3635  00108A  D836               	call	PL58	;call to abstracted procedure
  3636  00108C  EC8C  F00D         	call	_read_eep	;wreg free
  3637  001090  D821               	call	PL8	;call to abstracted procedure
  3638                           
  3639                           ;main.c: 815: lcd_putc('8');
  3640  001092  0E38               	movlw	56
  3641  001094  EF9C  F00D         	goto	_lcd_putc
  3642  001098                     l3247:
  3643                           
  3644                           ;main.c: 818: set_t_dq2 = (uint16_t) read_eep(39) << 8 | read_eep(40);
  3645  001098  D843               	call	PL72	;call to abstracted procedure
  3646  00109A  EC8C  F00D         	call	_read_eep	;wreg free
  3647  00109E  6E4C               	movwf	??_outValPreset^0,c
  3648  0010A0  D857               	call	PL84	;call to abstracted procedure
  3649  0010A2  EC8C  F00D         	call	_read_eep	;wreg free
  3650  0010A6  D816               	call	PL8	;call to abstracted procedure
  3651                           
  3652                           ;main.c: 819: lcd_putc('9');
  3653  0010A8  0E39               	movlw	57
  3654  0010AA  EF9C  F00D         	goto	_lcd_putc
  3655  0010AE                     l3251:
  3656  0010AE  5033               	movf	_sub_sel^0,w,c
  3657                           
  3658                           ; Switch size 1, requested type "space"
  3659                           ; Number of cases is 9, Range of values is 0 to 8
  3660                           ; switch strategies available:
  3661                           ; Name         Instructions Cycles
  3662                           ; simple_byte           28    15 (average)
  3663                           ;	Chosen strategy is simple_byte
  3664  0010B0  E098               	bz	l3231
  3665  0010B2  0A01               	xorlw	1	; case 1
  3666  0010B4  E0A4               	bz	l3233
  3667  0010B6  0A03               	xorlw	3	; case 2
  3668  0010B8  E0AD               	bz	l3235
  3669  0010BA  0A01               	xorlw	1	; case 3
  3670  0010BC  E0B6               	bz	l3237
  3671  0010BE  0A07               	xorlw	7	; case 4
  3672  0010C0  E0BF               	bz	l3239
  3673  0010C2  0A01               	xorlw	1	; case 5
  3674  0010C4  E0C8               	bz	l3241
  3675  0010C6  0A03               	xorlw	3	; case 6
  3676  0010C8  E0D1               	bz	l3243
  3677  0010CA  0A01               	xorlw	1	; case 7
  3678  0010CC  E0DA               	bz	l3245
  3679  0010CE  0A0F               	xorlw	15	; case 8
  3680  0010D0  E0E3               	bz	l3247
  3681  0010D2  0012               	return		;funcret
  3682  0010D4                     __end_of_outValPreset:
  3683                           	callstack 0
  3684  0010D4                     PL8:
  3685                           	callstack 25
  3686  0010D4  6E4D               	movwf	(??_outValPreset+1)^0,c
  3687  0010D6  504C               	movf	??_outValPreset^0,w,c
  3688  0010D8  6E29               	movwf	_set_t_dq2^0,c
  3689  0010DA  C04D  F02A         	movff	??_outValPreset+1,_set_t_dq2+1
  3690  0010DE  0012               	return	
  3691  0010E0                     __end_ofPL8:
  3692                           	callstack 0
  3693  0010E0                     PL52:
  3694                           	callstack 24
  3695  0010E0  6A46               	clrf	(read_eep@address+1)^0,c
  3696  0010E2  0E19               	movlw	25
  3697  0010E4  6E45               	movwf	read_eep@address^0,c
  3698  0010E6  0C19               	retlw	25
  3699  0010E8                     __end_ofPL52:
  3700                           	callstack 0
  3701  0010E8                     PL54:
  3702                           	callstack 24
  3703  0010E8  6A46               	clrf	(read_eep@address+1)^0,c
  3704  0010EA  0E23               	movlw	35
  3705  0010EC  6E45               	movwf	read_eep@address^0,c
  3706  0010EE  0C23               	retlw	35
  3707  0010F0                     __end_ofPL54:
  3708                           	callstack 0
  3709  0010F0                     PL56:
  3710                           	callstack 24
  3711  0010F0  6A46               	clrf	(read_eep@address+1)^0,c
  3712  0010F2  0E1B               	movlw	27
  3713  0010F4  6E45               	movwf	read_eep@address^0,c
  3714  0010F6  0C1B               	retlw	27
  3715  0010F8                     __end_ofPL56:
  3716                           	callstack 0
  3717  0010F8                     PL58:
  3718                           	callstack 24
  3719  0010F8  6A46               	clrf	(read_eep@address+1)^0,c
  3720  0010FA  0E25               	movlw	37
  3721  0010FC  6E45               	movwf	read_eep@address^0,c
  3722  0010FE  0C25               	retlw	37
  3723  001100                     __end_ofPL58:
  3724                           	callstack 0
  3725  001100                     PL60:
  3726                           	callstack 24
  3727  001100  6A46               	clrf	(read_eep@address+1)^0,c
  3728  001102  0E24               	movlw	36
  3729  001104  6E45               	movwf	read_eep@address^0,c
  3730  001106  0C24               	retlw	36
  3731  001108                     __end_ofPL60:
  3732                           	callstack 0
  3733  001108                     PL62:
  3734                           	callstack 24
  3735  001108  6A46               	clrf	(read_eep@address+1)^0,c
  3736  00110A  0E1A               	movlw	26
  3737  00110C  6E45               	movwf	read_eep@address^0,c
  3738  00110E  0C1A               	retlw	26
  3739  001110                     __end_ofPL62:
  3740                           	callstack 0
  3741  001110                     PL66:
  3742                           	callstack 24
  3743  001110  6A46               	clrf	(read_eep@address+1)^0,c
  3744  001112  0E21               	movlw	33
  3745  001114  6E45               	movwf	read_eep@address^0,c
  3746  001116  0C21               	retlw	33
  3747  001118                     __end_ofPL66:
  3748                           	callstack 0
  3749  001118                     PL70:
  3750                           	callstack 24
  3751  001118  6A46               	clrf	(read_eep@address+1)^0,c
  3752  00111A  0E20               	movlw	32
  3753  00111C  6E45               	movwf	read_eep@address^0,c
  3754  00111E  0C20               	retlw	32
  3755  001120                     __end_ofPL70:
  3756                           	callstack 0
  3757  001120                     PL72:
  3758                           	callstack 24
  3759  001120  6A46               	clrf	(read_eep@address+1)^0,c
  3760  001122  0E28               	movlw	40
  3761  001124  6E45               	movwf	read_eep@address^0,c
  3762  001126  0C28               	retlw	40
  3763  001128                     __end_ofPL72:
  3764                           	callstack 0
  3765  001128                     PL74:
  3766                           	callstack 24
  3767  001128  6A46               	clrf	(read_eep@address+1)^0,c
  3768  00112A  0E1E               	movlw	30
  3769  00112C  6E45               	movwf	read_eep@address^0,c
  3770  00112E  0C1E               	retlw	30
  3771  001130                     __end_ofPL74:
  3772                           	callstack 0
  3773  001130                     PL76:
  3774                           	callstack 24
  3775  001130  6A46               	clrf	(read_eep@address+1)^0,c
  3776  001132  0E1F               	movlw	31
  3777  001134  6E45               	movwf	read_eep@address^0,c
  3778  001136  0C1F               	retlw	31
  3779  001138                     __end_ofPL76:
  3780                           	callstack 0
  3781  001138                     PL78:
  3782                           	callstack 24
  3783  001138  6A46               	clrf	(read_eep@address+1)^0,c
  3784  00113A  0E26               	movlw	38
  3785  00113C  6E45               	movwf	read_eep@address^0,c
  3786  00113E  0C26               	retlw	38
  3787  001140                     __end_ofPL78:
  3788                           	callstack 0
  3789  001140                     PL80:
  3790                           	callstack 24
  3791  001140  6A46               	clrf	(read_eep@address+1)^0,c
  3792  001142  0E1C               	movlw	28
  3793  001144  6E45               	movwf	read_eep@address^0,c
  3794  001146  0C1C               	retlw	28
  3795  001148                     __end_ofPL80:
  3796                           	callstack 0
  3797  001148                     PL82:
  3798                           	callstack 24
  3799  001148  6A46               	clrf	(read_eep@address+1)^0,c
  3800  00114A  0E1D               	movlw	29
  3801  00114C  6E45               	movwf	read_eep@address^0,c
  3802  00114E  0C1D               	retlw	29
  3803  001150                     __end_ofPL82:
  3804                           	callstack 0
  3805  001150                     PL84:
  3806                           	callstack 24
  3807  001150  6A46               	clrf	(read_eep@address+1)^0,c
  3808  001152  0E27               	movlw	39
  3809  001154  6E45               	movwf	read_eep@address^0,c
  3810  001156  0C27               	retlw	39
  3811  001158                     __end_ofPL84:
  3812                           	callstack 0
  3813  001158                     PL88:
  3814                           	callstack 24
  3815  001158  6A46               	clrf	(read_eep@address+1)^0,c
  3816  00115A  0E22               	movlw	34
  3817  00115C  6E45               	movwf	read_eep@address^0,c
  3818  00115E  0C22               	retlw	34
  3819  001160                     __end_ofPL88:
  3820                           	callstack 0
  3821                           
  3822 ;; *************** function _lcd_putc *****************
  3823 ;; Defined at:
  3824 ;;		line 90 in file "hd44780.c"
  3825 ;; Parameters:    Size  Location     Type
  3826 ;;  c               1    wreg     unsigned char 
  3827 ;; Auto vars:     Size  Location     Type
  3828 ;;  c               1    7[COMRAM] unsigned char 
  3829 ;; Return value:  Size  Location     Type
  3830 ;;                  1    wreg      void 
  3831 ;; Registers used:
  3832 ;;		wreg, status,2, status,0, cstack
  3833 ;; Tracked objects:
  3834 ;;		On entry : 0/0
  3835 ;;		On exit  : 0/0
  3836 ;;		Unchanged: 0/0
  3837 ;; Data sizes:     COMRAM   BANK0   BANK1
  3838 ;;      Params:         0       0       0
  3839 ;;      Locals:         1       0       0
  3840 ;;      Temps:          0       0       0
  3841 ;;      Totals:         1       0       0
  3842 ;;Total ram usage:        1 bytes
  3843 ;; Hardware stack levels used: 1
  3844 ;; Hardware stack levels required when called: 4
  3845 ;; This function calls:
  3846 ;;		_lcdWrite
  3847 ;; This function is called by:
  3848 ;;		_main
  3849 ;;		_outValPreset
  3850 ;; This function uses a non-reentrant model
  3851 ;;
  3852                           
  3853                           	psect	text2
  3854  001B38                     __ptext2:
  3855                           	callstack 0
  3856  001B38                     _lcd_putc:
  3857                           	callstack 25
  3858                           
  3859                           ;incstack = 0
  3860                           ;lcd_putc@c stored from wreg
  3861  001B38  6E49               	movwf	lcd_putc@c^0,c
  3862                           
  3863                           ;hd44780.c: 92: lcdWrite(c, DATA);
  3864  001B3A  0E01               	movlw	1
  3865  001B3C  6E47               	movwf	lcdWrite@type^0,c
  3866  001B3E  5049               	movf	lcd_putc@c^0,w,c
  3867  001B40  EF16  F00D         	goto	_lcdWrite
  3868  001B44                     __end_of_lcd_putc:
  3869                           	callstack 0
  3870                           
  3871 ;; *************** function _lcdPrint *****************
  3872 ;; Defined at:
  3873 ;;		line 96 in file "hd44780.c"
  3874 ;; Parameters:    Size  Location     Type
  3875 ;;  t               2   10[COMRAM] PTR const unsigned char 
  3876 ;;		 -> STR_34(3), STR_33(3), STR_32(3), STR_31(3), 
  3877 ;;		 -> STR_30(3), STR_29(3), STR_28(3), STR_27(3), 
  3878 ;;		 -> STR_26(3), STR_25(15), STR_24(9), STR_23(13), 
  3879 ;;		 -> STR_22(11), STR_21(13), STR_20(15), STR_19(15), 
  3880 ;;		 -> STR_18(14), STR_17(16), STR_16(16), STR_15(16), 
  3881 ;;		 -> STR_14(4), STR_13(4), STR_5(2), STR_4(13), 
  3882 ;;		 -> STR_3(16), STR_2(16), STR_1(16), 
  3883 ;; Auto vars:     Size  Location     Type
  3884 ;;		None
  3885 ;; Return value:  Size  Location     Type
  3886 ;;                  1    wreg      void 
  3887 ;; Registers used:
  3888 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3889 ;; Tracked objects:
  3890 ;;		On entry : 0/0
  3891 ;;		On exit  : 0/0
  3892 ;;		Unchanged: 0/0
  3893 ;; Data sizes:     COMRAM   BANK0   BANK1
  3894 ;;      Params:         2       0       0
  3895 ;;      Locals:         0       0       0
  3896 ;;      Temps:          4       0       0
  3897 ;;      Totals:         6       0       0
  3898 ;;Total ram usage:        6 bytes
  3899 ;; Hardware stack levels used: 1
  3900 ;; Hardware stack levels required when called: 5
  3901 ;; This function calls:
  3902 ;;		_lcdWrite
  3903 ;;		_lcd_gotoxy
  3904 ;; This function is called by:
  3905 ;;		_main
  3906 ;; This function uses a non-reentrant model
  3907 ;;
  3908                           
  3909                           	psect	text3
  3910  001334                     __ptext3:
  3911                           	callstack 0
  3912  001334                     _lcdPrint:
  3913                           	callstack 25
  3914                           
  3915                           ;hd44780.c: 97: while(*t != '\0'){
  3916                           
  3917                           ;incstack = 0
  3918  001334  D046               	goto	l3073
  3919  001336                     l3053:
  3920                           
  3921                           ;hd44780.c: 100: lcdWrite(1, COMMAND);
  3922  001336  D84F               	call	PL68	;call to abstracted procedure
  3923  001338  EC16  F00D         	call	_lcdWrite
  3924                           
  3925                           ;hd44780.c: 101: _delay((unsigned long)((2)*(8000000/4000.0)));
  3926  00133C  0E06               	movlw	6
  3927  00133E  6E4E               	movwf	??_lcdPrint^0,c
  3928  001340  0E30               	movlw	48
  3929  001342                     u3267:
  3930  001342  2EE8               	decfsz	wreg,f,c
  3931  001344  D7FE               	bra	u3267
  3932  001346  2E4E               	decfsz	??_lcdPrint^0,f,c
  3933  001348  D7FC               	bra	u3267
  3934  00134A  D000               	nop2	
  3935                           
  3936                           ;hd44780.c: 102: break;
  3937  00134C  D038               	goto	l3071
  3938  00134E                     l3057:
  3939                           
  3940                           ;hd44780.c: 105: lcd_gotoxy(1, 2);
  3941  00134E  ECC2  F007         	call	PL28	;call to abstracted procedure
  3942  001352  EC58  F00D         	call	_lcd_gotoxy
  3943                           
  3944                           ;hd44780.c: 106: break;
  3945  001356  D033               	goto	l3071
  3946  001358                     l3059:
  3947                           
  3948                           ;hd44780.c: 109: lcdWrite(0x10, COMMAND);
  3949  001358  0E00               	movlw	0
  3950  00135A  6E47               	movwf	lcdWrite@type^0,c
  3951  00135C  0E10               	movlw	16
  3952  00135E  EC16  F00D         	call	_lcdWrite
  3953                           
  3954                           ;hd44780.c: 110: break;
  3955  001362  D02D               	goto	l3071
  3956  001364                     l3061:
  3957                           
  3958                           ;hd44780.c: 113: if (*t < 0xC0) {
  3959  001364  C04C  FFF6         	movff	lcdPrint@t,tblptrl
  3960  001368  C04D  FFF7         	movff	lcdPrint@t+1,tblptrh
  3961  00136C                     	if	0	;tblptru may be non-zero
  3962  00136C                     	endif
  3963  00136C                     	if	0	;tblptru may be non-zero
  3964  00136C                     	endif
  3965  00136C  0EC0               	movlw	192
  3966  00136E  0008               	tblrd		*
  3967  001370  60F5               	cpfslt	tablat,c
  3968  001372  D006               	goto	l3065
  3969                           
  3970                           ;hd44780.c: 114: lcdWrite(*t, DATA);
  3971  001374  0E01               	movlw	1
  3972  001376  6E47               	movwf	lcdWrite@type^0,c
  3973  001378  D827               	call	PL20	;call to abstracted procedure
  3974  00137A  EC16  F00D         	call	_lcdWrite
  3975                           
  3976                           ;hd44780.c: 115: } else {
  3977  00137E  D01F               	goto	l3071
  3978  001380                     l3065:
  3979                           
  3980                           ;hd44780.c: 116: lcdWrite(HD44780_CYR[(unsigned char) (*t) - 0xC0], DATA);
  3981  001380  0E01               	movlw	1
  3982  001382  6E47               	movwf	lcdWrite@type^0,c
  3983  001384  0E40               	movlw	64
  3984  001386  6E4E               	movwf	??_lcdPrint^0,c
  3985  001388  684F               	setf	(??_lcdPrint+1)^0,c
  3986  00138A  D81E               	call	PL20	;call to abstracted procedure
  3987  00138C  6E50               	movwf	(??_lcdPrint+2)^0,c
  3988  00138E  6A51               	clrf	(??_lcdPrint+3)^0,c
  3989  001390  504E               	movf	??_lcdPrint^0,w,c
  3990  001392  2650               	addwf	(??_lcdPrint+2)^0,f,c
  3991  001394  504F               	movf	(??_lcdPrint+1)^0,w,c
  3992  001396  2251               	addwfc	(??_lcdPrint+3)^0,f,c
  3993  001398  0E8F               	movlw	low _HD44780_CYR
  3994  00139A  2450               	addwf	(??_lcdPrint+2)^0,w,c
  3995  00139C  6EF6               	movwf	tblptrl,c
  3996  00139E  0E1E               	movlw	high _HD44780_CYR
  3997  0013A0  2051               	addwfc	(??_lcdPrint+3)^0,w,c
  3998  0013A2  6EF7               	movwf	tblptrh,c
  3999  0013A4                     	if	0	;There are less than 3 active tblptr bytes
  4000  0013A4                     	endif
  4001  0013A4  0008               	tblrd		*
  4002  0013A6  50F5               	movf	tablat,w,c
  4003  0013A8  EC16  F00D         	call	_lcdWrite
  4004  0013AC  D008               	goto	l3071
  4005  0013AE                     l3069:
  4006  0013AE  D80C               	call	PL20	;call to abstracted procedure
  4007                           
  4008                           ; Switch size 1, requested type "space"
  4009                           ; Number of cases is 3, Range of values is 8 to 12
  4010                           ; switch strategies available:
  4011                           ; Name         Instructions Cycles
  4012                           ; simple_byte           10     6 (average)
  4013                           ;	Chosen strategy is simple_byte
  4014  0013B0  0A08               	xorlw	8	; case 8
  4015  0013B2  E0D2               	bz	l3059
  4016  0013B4  0A02               	xorlw	2	; case 10
  4017  0013B6  E0CB               	bz	l3057
  4018  0013B8  0A06               	xorlw	6	; case 12
  4019  0013BA  E0BD               	bz	l3053
  4020  0013BC  D7D3               	goto	l3061
  4021  0013BE                     l3071:
  4022                           
  4023                           ;hd44780.c: 121: *t++;
  4024  0013BE  4A4C               	infsnz	lcdPrint@t^0,f,c
  4025  0013C0  2A4D               	incf	(lcdPrint@t+1)^0,f,c
  4026  0013C2                     l3073:
  4027  0013C2  D802               	call	PL20	;call to abstracted procedure
  4028  0013C4  E1F4               	bnz	l3069
  4029  0013C6  0012               	return		;funcret
  4030  0013C8                     __end_of_lcdPrint:
  4031                           	callstack 0
  4032  0013C8                     PL20:
  4033                           	callstack 25
  4034  0013C8  C04C  FFF6         	movff	lcdPrint@t,tblptrl
  4035  0013CC  C04D  FFF7         	movff	lcdPrint@t+1,tblptrh
  4036  0013D0                     	if	0	;tblptru may be non-zero
  4037  0013D0                     	endif
  4038  0013D0                     	if	0	;tblptru may be non-zero
  4039  0013D0                     	endif
  4040  0013D0  0008               	tblrd		*
  4041  0013D2  50F5               	movf	tablat,w,c
  4042  0013D4  0012               	return	
  4043  0013D6                     __end_ofPL20:
  4044                           	callstack 0
  4045  0013D6                     PL68:
  4046                           	callstack 26
  4047  0013D6  0E00               	movlw	0
  4048  0013D8  6E47               	movwf	lcdWrite@type^0,c
  4049  0013DA  0C01               	retlw	1
  4050  0013DC                     __end_ofPL68:
  4051                           	callstack 0
  4052                           
  4053 ;; *************** function _lcd_gotoxy *****************
  4054 ;; Defined at:
  4055 ;;		line 76 in file "hd44780.c"
  4056 ;; Parameters:    Size  Location     Type
  4057 ;;  x               1    wreg     unsigned char 
  4058 ;;  y               1    7[COMRAM] unsigned char 
  4059 ;; Auto vars:     Size  Location     Type
  4060 ;;  x               1    8[COMRAM] unsigned char 
  4061 ;;  address         1    9[COMRAM] unsigned char 
  4062 ;; Return value:  Size  Location     Type
  4063 ;;                  1    wreg      void 
  4064 ;; Registers used:
  4065 ;;		wreg, status,2, status,0, cstack
  4066 ;; Tracked objects:
  4067 ;;		On entry : 0/0
  4068 ;;		On exit  : 0/0
  4069 ;;		Unchanged: 0/0
  4070 ;; Data sizes:     COMRAM   BANK0   BANK1
  4071 ;;      Params:         1       0       0
  4072 ;;      Locals:         2       0       0
  4073 ;;      Temps:          0       0       0
  4074 ;;      Totals:         3       0       0
  4075 ;;Total ram usage:        3 bytes
  4076 ;; Hardware stack levels used: 1
  4077 ;; Hardware stack levels required when called: 4
  4078 ;; This function calls:
  4079 ;;		_lcdWrite
  4080 ;; This function is called by:
  4081 ;;		_main
  4082 ;;		_outValPreset
  4083 ;;		_lcdPrint
  4084 ;; This function uses a non-reentrant model
  4085 ;;
  4086                           
  4087                           	psect	text4
  4088  001AB0                     __ptext4:
  4089                           	callstack 0
  4090  001AB0                     _lcd_gotoxy:
  4091                           	callstack 25
  4092                           
  4093                           ;incstack = 0
  4094                           ;lcd_gotoxy@x stored from wreg
  4095  001AB0  6E4A               	movwf	lcd_gotoxy@x^0,c
  4096                           
  4097                           ;hd44780.c: 77: uint8_t address;;hd44780.c: 79: if (y != 1)
  4098  001AB2  0449               	decf	lcd_gotoxy@y^0,w,c
  4099  001AB4  E003               	bz	l491
  4100                           
  4101                           ;hd44780.c: 80: address = 0x40;
  4102  001AB6  0E40               	movlw	64
  4103  001AB8  6E4B               	movwf	lcd_gotoxy@address^0,c
  4104  001ABA  D001               	goto	l2807
  4105  001ABC                     l491:
  4106                           
  4107                           ;hd44780.c: 81: else;hd44780.c: 82: address = 0;
  4108  001ABC  6A4B               	clrf	lcd_gotoxy@address^0,c
  4109  001ABE                     l2807:
  4110                           
  4111                           ;hd44780.c: 84: address += x - 1;
  4112  001ABE  044A               	decf	lcd_gotoxy@x^0,w,c
  4113  001AC0  264B               	addwf	lcd_gotoxy@address^0,f,c
  4114                           
  4115                           ;hd44780.c: 85: lcdWrite(0x80 | address, COMMAND);
  4116  001AC2  6A47               	clrf	lcdWrite@type^0,c
  4117  001AC4  504B               	movf	lcd_gotoxy@address^0,w,c
  4118  001AC6  0980               	iorlw	128
  4119  001AC8  EF16  F00D         	goto	_lcdWrite
  4120  001ACC                     __end_of_lcd_gotoxy:
  4121                           	callstack 0
  4122                           
  4123 ;; *************** function _key_press *****************
  4124 ;; Defined at:
  4125 ;;		line 7 in file "key.c"
  4126 ;; Parameters:    Size  Location     Type
  4127 ;;		None
  4128 ;; Auto vars:     Size  Location     Type
  4129 ;;  key             1    3[COMRAM] unsigned char 
  4130 ;; Return value:  Size  Location     Type
  4131 ;;                  1    wreg      void 
  4132 ;; Registers used:
  4133 ;;		wreg, status,2, status,0
  4134 ;; Tracked objects:
  4135 ;;		On entry : 0/0
  4136 ;;		On exit  : 0/0
  4137 ;;		Unchanged: 0/0
  4138 ;; Data sizes:     COMRAM   BANK0   BANK1
  4139 ;;      Params:         0       0       0
  4140 ;;      Locals:         1       0       0
  4141 ;;      Temps:          0       0       0
  4142 ;;      Totals:         1       0       0
  4143 ;;Total ram usage:        1 bytes
  4144 ;; Hardware stack levels used: 1
  4145 ;; Hardware stack levels required when called: 2
  4146 ;; This function calls:
  4147 ;;		Nothing
  4148 ;; This function is called by:
  4149 ;;		_main
  4150 ;; This function uses a non-reentrant model
  4151 ;;
  4152                           
  4153                           	psect	text5
  4154  001722                     __ptext5:
  4155                           	callstack 0
  4156  001722                     _key_press:
  4157                           	callstack 28
  4158                           
  4159                           ;key.c: 9: static uint16_t count = 0;;key.c: 10: uint8_t key;;key.c: 11: if (((PORTB & (
      +                          1 << 1)) == 0) && ((PORTB & (1 << 2)) == 0))
  4160                           
  4161                           ;incstack = 0
  4162  001722  A281               	btfss	129,1,c	;volatile
  4163  001724  B481               	btfsc	129,2,c	;volatile
  4164  001726  D002               	goto	l586
  4165                           
  4166                           ;key.c: 12: key = 3;
  4167  001728  0E03               	movlw	3
  4168  00172A  D007               	goto	L10
  4169  00172C                     l586:
  4170                           
  4171                           ;key.c: 13: else if ((PORTB & (1 << 1)) == 0)
  4172  00172C  B281               	btfsc	129,1,c	;volatile
  4173  00172E  D002               	goto	l588
  4174                           
  4175                           ;key.c: 14: key = 1;
  4176  001730  0E01               	movlw	1
  4177  001732  D003               	goto	L10
  4178  001734                     l588:
  4179                           
  4180                           ;key.c: 15: else if ((PORTB & (1 << 2)) == 0)
  4181  001734  B481               	btfsc	129,2,c	;volatile
  4182  001736  D003               	goto	l590
  4183                           
  4184                           ;key.c: 16: key = 2;
  4185  001738  0E02               	movlw	2
  4186  00173A                     L10:
  4187  00173A  6E45               	movwf	key_press@key^0,c
  4188  00173C  D001               	goto	l3085
  4189  00173E                     l590:
  4190                           
  4191                           ;key.c: 17: else;key.c: 18: key = 0;
  4192  00173E  6A45               	clrf	key_press@key^0,c
  4193  001740                     l3085:
  4194                           
  4195                           ;key.c: 21: if (key) {
  4196  001740  5045               	movf	key_press@key^0,w,c
  4197  001742  E019               	bz	l592
  4198                           
  4199                           ;key.c: 22: if (count > 300) {
  4200  001744  0E2D               	movlw	45
  4201  001746  5C25               	subwf	key_press@count^0,w,c
  4202  001748  0E01               	movlw	1
  4203  00174A  5826               	subwfb	(key_press@count+1)^0,w,c
  4204  00174C  E309               	bnc	l3097
  4205                           
  4206                           ;key.c: 23: count = 300 - 10;
  4207  00174E  0E01               	movlw	1
  4208  001750  6E26               	movwf	(key_press@count+1)^0,c
  4209  001752  0E22               	movlw	34
  4210  001754  6E25               	movwf	key_press@count^0,c
  4211                           
  4212                           ;key.c: 24: key_pressed = key;
  4213  001756  C045  F02E         	movff	key_press@key,_key_pressed	;volatile
  4214                           
  4215                           ;key.c: 25: keyLong = 1;
  4216  00175A  0E01               	movlw	1
  4217  00175C  6E36               	movwf	_keyLong^0,c
  4218  00175E  0C01               	retlw	1
  4219  001760                     l3097:
  4220  001760  4A25               	infsnz	key_press@count^0,f,c
  4221  001762  2A26               	incf	(key_press@count+1)^0,f,c
  4222                           
  4223                           ;key.c: 29: if (count == 15) {
  4224  001764  0E0F               	movlw	15
  4225  001766  1825               	xorwf	key_press@count^0,w,c
  4226  001768  1026               	iorwf	(key_press@count+1)^0,w,c
  4227  00176A  A4D8               	btfss	status,2,c
  4228  00176C  0012               	return	
  4229                           
  4230                           ;key.c: 30: key_pressed = key;
  4231  00176E  C045  F02E         	movff	key_press@key,_key_pressed	;volatile
  4232                           
  4233                           ;key.c: 31: keyLong = 0;
  4234  001772  6A36               	clrf	_keyLong^0,c
  4235                           
  4236                           ;key.c: 32: return;
  4237  001774  0012               	return	
  4238  001776                     l592:
  4239  001776  6A25               	clrf	key_press@count^0,c
  4240  001778  6A26               	clrf	(key_press@count+1)^0,c
  4241  00177A  0012               	return		;funcret
  4242  00177C                     __end_of_key_press:
  4243                           	callstack 0
  4244                           
  4245 ;; *************** function _key_GetKey *****************
  4246 ;; Defined at:
  4247 ;;		line 52 in file "key.c"
  4248 ;; Parameters:    Size  Location     Type
  4249 ;;		None
  4250 ;; Auto vars:     Size  Location     Type
  4251 ;;  key             1    3[COMRAM] unsigned char 
  4252 ;; Return value:  Size  Location     Type
  4253 ;;                  1    wreg      unsigned char 
  4254 ;; Registers used:
  4255 ;;		wreg, status,2
  4256 ;; Tracked objects:
  4257 ;;		On entry : 0/0
  4258 ;;		On exit  : 0/0
  4259 ;;		Unchanged: 0/0
  4260 ;; Data sizes:     COMRAM   BANK0   BANK1
  4261 ;;      Params:         0       0       0
  4262 ;;      Locals:         1       0       0
  4263 ;;      Temps:          0       0       0
  4264 ;;      Totals:         1       0       0
  4265 ;;Total ram usage:        1 bytes
  4266 ;; Hardware stack levels used: 1
  4267 ;; Hardware stack levels required when called: 2
  4268 ;; This function calls:
  4269 ;;		Nothing
  4270 ;; This function is called by:
  4271 ;;		_main
  4272 ;; This function uses a non-reentrant model
  4273 ;;
  4274                           
  4275                           	psect	text6
  4276  001B44                     __ptext6:
  4277                           	callstack 0
  4278  001B44                     _key_GetKey:
  4279                           	callstack 28
  4280                           
  4281                           ;key.c: 54: uint8_t key = key_pressed;
  4282                           
  4283                           ;incstack = 0
  4284  001B44  C02E  F045         	movff	_key_pressed,key_GetKey@key	;volatile
  4285                           
  4286                           ;key.c: 56: key_pressed = 0;
  4287  001B48  6A2E               	clrf	_key_pressed^0,c	;volatile
  4288                           
  4289                           ;key.c: 57: return key;
  4290  001B4A  5045               	movf	key_GetKey@key^0,w,c
  4291  001B4C  0012               	return		;funcret
  4292  001B4E                     __end_of_key_GetKey:
  4293                           	callstack 0
  4294                           
  4295 ;; *************** function _ds18b20_readrom *****************
  4296 ;; Defined at:
  4297 ;;		line 172 in file "ds18b20.c"
  4298 ;; Parameters:    Size  Location     Type
  4299 ;;  num_dq          1    wreg     unsigned char 
  4300 ;; Auto vars:     Size  Location     Type
  4301 ;;  num_dq          1   18[COMRAM] unsigned char 
  4302 ;;  temp_rom        8   10[COMRAM] unsigned char [8]
  4303 ;;  i               1   19[COMRAM] unsigned char 
  4304 ;; Return value:  Size  Location     Type
  4305 ;;                  1    wreg      unsigned char 
  4306 ;; Registers used:
  4307 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4308 ;; Tracked objects:
  4309 ;;		On entry : 0/0
  4310 ;;		On exit  : 0/0
  4311 ;;		Unchanged: 0/0
  4312 ;; Data sizes:     COMRAM   BANK0   BANK1
  4313 ;;      Params:         0       0       0
  4314 ;;      Locals:        10       0       0
  4315 ;;      Temps:          0       0       0
  4316 ;;      Totals:        10       0       0
  4317 ;;Total ram usage:       10 bytes
  4318 ;; Hardware stack levels used: 1
  4319 ;; Hardware stack levels required when called: 4
  4320 ;; This function calls:
  4321 ;;		_Delay_ms
  4322 ;;		_ds18b20_crc8
  4323 ;;		_ow_reset
  4324 ;;		_read_byte
  4325 ;;		_write_byte
  4326 ;;		_write_eep
  4327 ;; This function is called by:
  4328 ;;		_main
  4329 ;; This function uses a non-reentrant model
  4330 ;;
  4331                           
  4332                           	psect	text7
  4333  0016BC                     __ptext7:
  4334                           	callstack 0
  4335  0016BC                     _ds18b20_readrom:
  4336                           	callstack 26
  4337                           
  4338                           ;incstack = 0
  4339                           ;ds18b20_readrom@num_dq stored from wreg
  4340  0016BC  6E54               	movwf	ds18b20_readrom@num_dq^0,c
  4341                           
  4342                           ;ds18b20.c: 173: uint8_t i;;ds18b20.c: 174: uint8_t temp_rom[8];;ds18b20.c: 176: if (!ow
      +                          _reset())
  4343  0016BE  ECAF  F00C         	call	_ow_reset	;wreg free
  4344  0016C2  0900               	iorlw	0
  4345  0016C4  E10C               	bnz	u2200
  4346                           
  4347                           ;ds18b20.c: 177: {;ds18b20.c: 178: write_byte(0x33);
  4348  0016C6  0E33               	movlw	51
  4349  0016C8  EC61  F00C         	call	_write_byte
  4350                           
  4351                           ;ds18b20.c: 179: for (i = 0; i < 8; i++) {
  4352  0016CC  6A55               	clrf	ds18b20_readrom@i^0,c
  4353  0016CE                     l3263:
  4354                           
  4355                           ;ds18b20.c: 180: temp_rom[i] = read_byte();
  4356  0016CE  D824               	call	PL44	;call to abstracted procedure
  4357  0016D0  EC46  F00C         	call	_read_byte	;wreg free
  4358  0016D4  6EDF               	movwf	indf2,c
  4359  0016D6  2A55               	incf	ds18b20_readrom@i^0,f,c
  4360  0016D8  0E07               	movlw	7
  4361  0016DA  6455               	cpfsgt	ds18b20_readrom@i^0,c
  4362  0016DC  D7F8               	goto	l3263
  4363  0016DE                     u2200:
  4364                           
  4365                           ;ds18b20.c: 181: };ds18b20.c: 182: };ds18b20.c: 183: if (!(ds18b20_crc8(temp_rom, 8))) {
  4366  0016DE  0E4C               	movlw	low ds18b20_readrom@temp_rom
  4367  0016E0  6E45               	movwf	ds18b20_crc8@data_in^0,c
  4368  0016E2  0E08               	movlw	8
  4369  0016E4  6E46               	movwf	ds18b20_crc8@num_bytes^0,c
  4370  0016E6  ECBE  F00B         	call	_ds18b20_crc8	;wreg free
  4371  0016EA  0900               	iorlw	0
  4372  0016EC  E114               	bnz	l3289
  4373                           
  4374                           ;ds18b20.c: 184: for (i = 0; i < 8; i++) {
  4375  0016EE  6A55               	clrf	ds18b20_readrom@i^0,c
  4376  0016F0                     l3277:
  4377                           
  4378                           ;ds18b20.c: 185: write_eep(((num_dq - 1)*8) + i, temp_rom[i]);
  4379  0016F0  D813               	call	PL44	;call to abstracted procedure
  4380  0016F2  50DF               	movf	indf2,w,c
  4381  0016F4  6E45               	movwf	write_eep@data^0,c
  4382  0016F6  5054               	movf	ds18b20_readrom@num_dq^0,w,c
  4383  0016F8  0D08               	mullw	8
  4384  0016FA  50F3               	movf	243,w,c
  4385  0016FC  2455               	addwf	ds18b20_readrom@i^0,w,c
  4386  0016FE  0FF8               	addlw	248
  4387  001700  ECF2  F00C         	call	_write_eep
  4388  001704  2A55               	incf	ds18b20_readrom@i^0,f,c
  4389  001706  0E07               	movlw	7
  4390  001708  6455               	cpfsgt	ds18b20_readrom@i^0,c
  4391  00170A  D7F2               	goto	l3277
  4392                           
  4393                           ;ds18b20.c: 186: };ds18b20.c: 187: Delay_ms(10);
  4394  00170C  ECE5  F007         	call	PL64	;call to abstracted procedure
  4395  001710  EC04  F00D         	call	_Delay_ms	;wreg free
  4396                           
  4397                           ;ds18b20.c: 188: return 1;
  4398  001714  0C01               	retlw	1
  4399  001716                     l3289:
  4400                           
  4401                           ;ds18b20.c: 189: };ds18b20.c: 190: return 0;
  4402  001716  0C00               	retlw	0	;funcret
  4403  001718                     __end_of_ds18b20_readrom:
  4404                           	callstack 0
  4405  001718                     PL44:
  4406                           	callstack 26
  4407  001718  5055               	movf	ds18b20_readrom@i^0,w,c
  4408  00171A  0F4C               	addlw	low ds18b20_readrom@temp_rom
  4409  00171C  6ED9               	movwf	fsr2l,c
  4410  00171E  6ADA               	clrf	fsr2h,c
  4411  001720  0012               	return	
  4412  001722                     __end_ofPL44:
  4413                           	callstack 0
  4414                           
  4415 ;; *************** function _write_eep *****************
  4416 ;; Defined at:
  4417 ;;		line 5 in file "eeprom.c"
  4418 ;; Parameters:    Size  Location     Type
  4419 ;;  address         1    wreg     unsigned char 
  4420 ;;  data            1    3[COMRAM] unsigned char 
  4421 ;; Auto vars:     Size  Location     Type
  4422 ;;  address         1    4[COMRAM] unsigned char 
  4423 ;; Return value:  Size  Location     Type
  4424 ;;                  1    wreg      void 
  4425 ;; Registers used:
  4426 ;;		wreg, status,2
  4427 ;; Tracked objects:
  4428 ;;		On entry : 0/0
  4429 ;;		On exit  : 0/0
  4430 ;;		Unchanged: 0/0
  4431 ;; Data sizes:     COMRAM   BANK0   BANK1
  4432 ;;      Params:         1       0       0
  4433 ;;      Locals:         1       0       0
  4434 ;;      Temps:          0       0       0
  4435 ;;      Totals:         2       0       0
  4436 ;;Total ram usage:        2 bytes
  4437 ;; Hardware stack levels used: 1
  4438 ;; Hardware stack levels required when called: 2
  4439 ;; This function calls:
  4440 ;;		Nothing
  4441 ;; This function is called by:
  4442 ;;		_main
  4443 ;;		_ds18b20_readrom
  4444 ;; This function uses a non-reentrant model
  4445 ;;
  4446                           
  4447                           	psect	text8
  4448  0019E4                     __ptext8:
  4449                           	callstack 0
  4450  0019E4                     _write_eep:
  4451                           	callstack 28
  4452                           
  4453                           ;incstack = 0
  4454                           ;write_eep@address stored from wreg
  4455  0019E4  6E46               	movwf	write_eep@address^0,c
  4456  0019E6                     
  4457                           ;eeprom.c: 8: {}
  4458  0019E6  B2A6               	btfsc	166,1,c	;volsfr
  4459  0019E8  D7FE               	goto	l2835
  4460                           
  4461                           ;eeprom.c: 11: EEADR = address;
  4462  0019EA  C046  FFA9         	movff	write_eep@address,4009	;volatile
  4463                           
  4464                           ;eeprom.c: 12: EEDATA = data;
  4465  0019EE  C045  FFA8         	movff	write_eep@data,4008	;volatile
  4466                           
  4467                           ;eeprom.c: 13: EECON1bits.EEPGD = 0;
  4468  0019F2  9EA6               	bcf	166,7,c	;volsfr
  4469                           
  4470                           ;eeprom.c: 14: EECON1bits.CFGS = 0;
  4471  0019F4  9CA6               	bcf	166,6,c	;volsfr
  4472                           
  4473                           ;eeprom.c: 15: EECON1bits.WREN = 1;
  4474  0019F6  84A6               	bsf	166,2,c	;volsfr
  4475                           
  4476                           ;eeprom.c: 16: INTCONbits.GIE = 0;
  4477  0019F8  9EF2               	bcf	242,7,c	;volatile
  4478                           
  4479                           ;eeprom.c: 18: EECON2 = 0x55;
  4480  0019FA  0E55               	movlw	85
  4481  0019FC  6EA7               	movwf	167,c	;volsfr
  4482                           
  4483                           ;eeprom.c: 19: EECON2 = 0xAA;
  4484  0019FE  0EAA               	movlw	170
  4485  001A00  6EA7               	movwf	167,c	;volsfr
  4486                           
  4487                           ;eeprom.c: 20: EECON1bits.WR = 1;
  4488  001A02  82A6               	bsf	166,1,c	;volsfr
  4489                           
  4490                           ;eeprom.c: 22: INTCONbits.GIE = 1;
  4491  001A04  8EF2               	bsf	242,7,c	;volatile
  4492  001A06  0CAA               	retlw	170	;funcret
  4493  001A08                     __end_of_write_eep:
  4494                           	callstack 0
  4495                           
  4496 ;; *************** function _Delay_ms *****************
  4497 ;; Defined at:
  4498 ;;		line 715 in file "main.c"
  4499 ;; Parameters:    Size  Location     Type
  4500 ;;  delay           2    3[COMRAM] unsigned int 
  4501 ;; Auto vars:     Size  Location     Type
  4502 ;;  i               2    6[COMRAM] unsigned int 
  4503 ;; Return value:  Size  Location     Type
  4504 ;;                  1    wreg      void 
  4505 ;; Registers used:
  4506 ;;		wreg, status,2, status,0
  4507 ;; Tracked objects:
  4508 ;;		On entry : 0/0
  4509 ;;		On exit  : 0/0
  4510 ;;		Unchanged: 0/0
  4511 ;; Data sizes:     COMRAM   BANK0   BANK1
  4512 ;;      Params:         2       0       0
  4513 ;;      Locals:         2       0       0
  4514 ;;      Temps:          1       0       0
  4515 ;;      Totals:         5       0       0
  4516 ;;Total ram usage:        5 bytes
  4517 ;; Hardware stack levels used: 1
  4518 ;; Hardware stack levels required when called: 2
  4519 ;; This function calls:
  4520 ;;		Nothing
  4521 ;; This function is called by:
  4522 ;;		_main
  4523 ;;		_ds18b20_readrom
  4524 ;; This function uses a non-reentrant model
  4525 ;;
  4526                           
  4527                           	psect	text9
  4528  001A08                     __ptext9:
  4529                           	callstack 0
  4530  001A08                     _Delay_ms:
  4531                           	callstack 27
  4532                           
  4533                           ;main.c: 716: for (uint16_t i = 0; i <= delay; i++)
  4534                           
  4535                           ;incstack = 0
  4536  001A08  6A48               	clrf	Delay_ms@i^0,c
  4537  001A0A  6A49               	clrf	(Delay_ms@i+1)^0,c
  4538  001A0C  D009               	goto	l335
  4539  001A0E                     l2813:
  4540                           
  4541                           ;main.c: 717: _delay((unsigned long)((1)*(8000000/4000.0)));
  4542  001A0E  0E03               	movlw	3
  4543  001A10  6E47               	movwf	??_Delay_ms^0,c
  4544  001A12  0E98               	movlw	152
  4545  001A14                     u3277:
  4546  001A14  2EE8               	decfsz	wreg,f,c
  4547  001A16  D7FE               	bra	u3277
  4548  001A18  2E47               	decfsz	??_Delay_ms^0,f,c
  4549  001A1A  D7FC               	bra	u3277
  4550  001A1C  4A48               	infsnz	Delay_ms@i^0,f,c
  4551  001A1E  2A49               	incf	(Delay_ms@i+1)^0,f,c
  4552  001A20                     l335:
  4553  001A20  5048               	movf	Delay_ms@i^0,w,c
  4554  001A22  5C45               	subwf	Delay_ms@delay^0,w,c
  4555  001A24  5049               	movf	(Delay_ms@i+1)^0,w,c
  4556  001A26  5846               	subwfb	(Delay_ms@delay+1)^0,w,c
  4557  001A28  E2F2               	bc	l2813
  4558  001A2A  0012               	return		;funcret
  4559  001A2C                     __end_of_Delay_ms:
  4560                           	callstack 0
  4561                           
  4562 ;; *************** function _ds18b20_readTemp *****************
  4563 ;; Defined at:
  4564 ;;		line 117 in file "ds18b20.c"
  4565 ;; Parameters:    Size  Location     Type
  4566 ;;  time_flag       1   10[COMRAM] PTR unsigned char 
  4567 ;;		 -> time_flag(1), 
  4568 ;;  timer_val       1   11[COMRAM] PTR unsigned char 
  4569 ;;		 -> timer_val(1), 
  4570 ;; Auto vars:     Size  Location     Type
  4571 ;;  j               1   16[COMRAM] unsigned char 
  4572 ;;  temp            2   14[COMRAM] unsigned int 
  4573 ;;  i               1   17[COMRAM] unsigned char 
  4574 ;; Return value:  Size  Location     Type
  4575 ;;                  1    wreg      unsigned char 
  4576 ;; Registers used:
  4577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4578 ;; Tracked objects:
  4579 ;;		On entry : 0/0
  4580 ;;		On exit  : 0/0
  4581 ;;		Unchanged: 0/0
  4582 ;; Data sizes:     COMRAM   BANK0   BANK1
  4583 ;;      Params:         2       0       0
  4584 ;;      Locals:         4       0       0
  4585 ;;      Temps:          2       0       0
  4586 ;;      Totals:         8       0       0
  4587 ;;Total ram usage:        8 bytes
  4588 ;; Hardware stack levels used: 1
  4589 ;; Hardware stack levels required when called: 4
  4590 ;; This function calls:
  4591 ;;		_ds18b20_crc8
  4592 ;;		_ow_reset
  4593 ;;		_read_byte
  4594 ;;		_write_byte
  4595 ;; This function is called by:
  4596 ;;		_main
  4597 ;; This function uses a non-reentrant model
  4598 ;;
  4599                           
  4600                           	psect	text10
  4601  001258                     __ptext10:
  4602                           	callstack 0
  4603  001258                     _ds18b20_readTemp:
  4604                           	callstack 26
  4605                           
  4606                           ;ds18b20.c: 120: uint8_t i;;ds18b20.c: 122: switch (*time_flag) {
  4607                           
  4608                           ;incstack = 0
  4609  001258  D05D               	goto	l3189
  4610  00125A                     l3111:
  4611                           
  4612                           ;ds18b20.c: 124: if (!ow_reset())
  4613  00125A  ECAF  F00C         	call	_ow_reset	;wreg free
  4614  00125E  0900               	iorlw	0
  4615  001260  A4D8               	btfss	status,2,c
  4616  001262  0C00               	retlw	0
  4617                           
  4618                           ;ds18b20.c: 125: {;ds18b20.c: 126: write_byte(0xCC);
  4619  001264  0ECC               	movlw	204
  4620  001266  EC61  F00C         	call	_write_byte
  4621                           
  4622                           ;ds18b20.c: 127: write_byte(0x44);
  4623  00126A  0E44               	movlw	68
  4624  00126C  EC61  F00C         	call	_write_byte
  4625                           
  4626                           ;ds18b20.c: 128: *timer_val = 0;
  4627  001270  504D               	movf	ds18b20_readTemp@timer_val^0,w,c
  4628  001272  6ED9               	movwf	fsr2l,c
  4629  001274  6ADA               	clrf	fsr2h,c
  4630  001276  6ADF               	clrf	indf2,c
  4631                           
  4632                           ;ds18b20.c: 129: *time_flag = 2;
  4633  001278  504C               	movf	ds18b20_readTemp@time_flag^0,w,c
  4634  00127A  6ED9               	movwf	fsr2l,c
  4635  00127C  6ADA               	clrf	fsr2h,c
  4636  00127E  0E02               	movlw	2
  4637  001280  6EDF               	movwf	indf2,c
  4638                           
  4639                           ;ds18b20.c: 130: T1CONbits.TMR1ON = 1;
  4640  001282  80CD               	bsf	205,0,c	;volatile
  4641                           
  4642                           ;ds18b20.c: 132: return 0;
  4643  001284  0C00               	retlw	0
  4644  001286                     l425:
  4645                           
  4646                           ;ds18b20.c: 136: for (uint8_t j = 0; j < 2; j++) {
  4647  001286  6A52               	clrf	ds18b20_readTemp@j^0,c
  4648  001288                     l426:
  4649                           
  4650                           ;ds18b20.c: 137: (INTCONbits.GIE = 0);
  4651  001288  9EF2               	bcf	242,7,c	;volatile
  4652                           
  4653                           ;ds18b20.c: 138: ow_reset();
  4654  00128A  ECAF  F00C         	call	_ow_reset	;wreg free
  4655                           
  4656                           ;ds18b20.c: 139: write_byte(0x55);
  4657  00128E  0E55               	movlw	85
  4658  001290  EC61  F00C         	call	_write_byte
  4659                           
  4660                           ;ds18b20.c: 140: for (i = 0; i < 8; i++) {
  4661  001294  6A53               	clrf	ds18b20_readTemp@i^0,c
  4662  001296                     l3139:
  4663                           
  4664                           ;ds18b20.c: 141: write_byte(rom_dq[j][i]);
  4665  001296  5052               	movf	ds18b20_readTemp@j^0,w,c
  4666  001298  0D08               	mullw	8
  4667  00129A  50F3               	movf	243,w,c
  4668  00129C  0F11               	addlw	low _rom_dq
  4669  00129E  2453               	addwf	ds18b20_readTemp@i^0,w,c
  4670  0012A0  6ED9               	movwf	fsr2l,c
  4671  0012A2  6ADA               	clrf	fsr2h,c
  4672  0012A4  50DF               	movf	indf2,w,c
  4673  0012A6  EC61  F00C         	call	_write_byte
  4674  0012AA  2A53               	incf	ds18b20_readTemp@i^0,f,c
  4675  0012AC  0E07               	movlw	7
  4676  0012AE  6453               	cpfsgt	ds18b20_readTemp@i^0,c
  4677  0012B0  D7F2               	goto	l3139
  4678                           
  4679                           ;ds18b20.c: 142: };ds18b20.c: 143: write_byte(0xBE);
  4680  0012B2  0EBE               	movlw	190
  4681  0012B4  EC61  F00C         	call	_write_byte
  4682                           
  4683                           ;ds18b20.c: 145: for (i = 0; i < 9; i++)
  4684  0012B8  6A53               	clrf	ds18b20_readTemp@i^0,c
  4685  0012BA                     l3153:
  4686                           
  4687                           ;ds18b20.c: 146: {;ds18b20.c: 147: scratch[i] = read_byte();
  4688  0012BA  5053               	movf	ds18b20_readTemp@i^0,w,c
  4689  0012BC  0F37               	addlw	low _scratch
  4690  0012BE  6ED9               	movwf	fsr2l,c
  4691  0012C0  6ADA               	clrf	fsr2h,c
  4692  0012C2  EC46  F00C         	call	_read_byte	;wreg free
  4693  0012C6  6EDF               	movwf	indf2,c
  4694  0012C8  2A53               	incf	ds18b20_readTemp@i^0,f,c
  4695  0012CA  0E08               	movlw	8
  4696  0012CC  6453               	cpfsgt	ds18b20_readTemp@i^0,c
  4697  0012CE  D7F5               	goto	l3153
  4698                           
  4699                           ;ds18b20.c: 148: };ds18b20.c: 150: if (!(ds18b20_crc8(scratch, 9))) {
  4700  0012D0  0E37               	movlw	low _scratch
  4701  0012D2  6E45               	movwf	ds18b20_crc8@data_in^0,c
  4702  0012D4  0E09               	movlw	9
  4703  0012D6  6E46               	movwf	ds18b20_crc8@num_bytes^0,c
  4704  0012D8  ECBE  F00B         	call	_ds18b20_crc8	;wreg free
  4705  0012DC  0900               	iorlw	0
  4706  0012DE  E10C               	bnz	l3165
  4707                           
  4708                           ;ds18b20.c: 151: temp = (((uint16_t) scratch[1]) << 8) | ((uint16_t) scratch[0]);
  4709  0012E0  5038               	movf	(_scratch+1)^0,w,c
  4710  0012E2  6E4E               	movwf	??_ds18b20_readTemp^0,c
  4711  0012E4  5037               	movf	_scratch^0,w,c
  4712  0012E6  6E50               	movwf	ds18b20_readTemp@temp^0,c
  4713  0012E8  C04E  F051         	movff	??_ds18b20_readTemp,ds18b20_readTemp@temp+1
  4714                           
  4715                           ;ds18b20.c: 152: temp_ready[j] = temp;
  4716  0012EC  D81C               	call	PL32	;call to abstracted procedure
  4717  0012EE  C050  FFDE         	movff	ds18b20_readTemp@temp,postinc2
  4718  0012F2  C051  FFDD         	movff	ds18b20_readTemp@temp+1,postdec2
  4719                           
  4720                           ;ds18b20.c: 153: }else
  4721  0012F6  D004               	goto	l3167
  4722  0012F8                     l3165:
  4723                           
  4724                           ;ds18b20.c: 154: temp_ready[j] = 32767;
  4725  0012F8  D816               	call	PL32	;call to abstracted procedure
  4726  0012FA  68DE               	setf	postinc2,c
  4727  0012FC  0E7F               	movlw	127
  4728  0012FE  6EDD               	movwf	postdec2,c
  4729  001300                     l3167:
  4730                           
  4731                           ;ds18b20.c: 155: (INTCONbits.GIE = 1);
  4732  001300  8EF2               	bsf	242,7,c	;volatile
  4733  001302  2A52               	incf	ds18b20_readTemp@j^0,f,c
  4734  001304  0E01               	movlw	1
  4735  001306  6452               	cpfsgt	ds18b20_readTemp@j^0,c
  4736  001308  D7BF               	goto	l426
  4737                           
  4738                           ;ds18b20.c: 156: };ds18b20.c: 157: *time_flag = 0;
  4739  00130A  504C               	movf	ds18b20_readTemp@time_flag^0,w,c
  4740  00130C  6ED9               	movwf	fsr2l,c
  4741  00130E  6ADA               	clrf	fsr2h,c
  4742  001310  6ADF               	clrf	indf2,c
  4743                           
  4744                           ;ds18b20.c: 158: return 1;
  4745  001312  0C01               	retlw	1
  4746  001314                     l3189:
  4747  001314  504C               	movf	ds18b20_readTemp@time_flag^0,w,c
  4748  001316  6ED9               	movwf	fsr2l,c
  4749  001318  6ADA               	clrf	fsr2h,c
  4750  00131A  50DF               	movf	indf2,w,c
  4751                           
  4752                           ; Switch size 1, requested type "space"
  4753                           ; Number of cases is 3, Range of values is 0 to 2
  4754                           ; switch strategies available:
  4755                           ; Name         Instructions Cycles
  4756                           ; simple_byte           10     6 (average)
  4757                           ;	Chosen strategy is simple_byte
  4758  00131C  E09E               	bz	l3111
  4759  00131E  0A01               	xorlw	1	; case 1
  4760  001320  E0B2               	bz	l425
  4761  001322  0A03               	xorlw	3	; case 2
  4762  001324  0C00               	retlw	0
  4763  001326                     __end_of_ds18b20_readTemp:
  4764                           	callstack 0
  4765  001326                     PL32:
  4766                           	callstack 26
  4767  001326  5052               	movf	ds18b20_readTemp@j^0,w,c
  4768  001328  0D02               	mullw	2
  4769  00132A  50F3               	movf	243,w,c
  4770  00132C  0F21               	addlw	low _temp_ready
  4771  00132E  6ED9               	movwf	fsr2l,c
  4772  001330  6ADA               	clrf	fsr2h,c
  4773  001332  0012               	return	
  4774  001334                     __end_ofPL32:
  4775                           	callstack 0
  4776                           
  4777 ;; *************** function _read_byte *****************
  4778 ;; Defined at:
  4779 ;;		line 50 in file "onewire.c"
  4780 ;; Parameters:    Size  Location     Type
  4781 ;;		None
  4782 ;; Auto vars:     Size  Location     Type
  4783 ;;  i               1    6[COMRAM] unsigned char 
  4784 ;;  val             1    5[COMRAM] unsigned char 
  4785 ;; Return value:  Size  Location     Type
  4786 ;;                  1    wreg      unsigned char 
  4787 ;; Registers used:
  4788 ;;		wreg, status,2, status,0, cstack
  4789 ;; Tracked objects:
  4790 ;;		On entry : 0/0
  4791 ;;		On exit  : 0/0
  4792 ;;		Unchanged: 0/0
  4793 ;; Data sizes:     COMRAM   BANK0   BANK1
  4794 ;;      Params:         0       0       0
  4795 ;;      Locals:         2       0       0
  4796 ;;      Temps:          2       0       0
  4797 ;;      Totals:         4       0       0
  4798 ;;Total ram usage:        4 bytes
  4799 ;; Hardware stack levels used: 1
  4800 ;; Hardware stack levels required when called: 3
  4801 ;; This function calls:
  4802 ;;		_read_bit
  4803 ;; This function is called by:
  4804 ;;		_ds18b20_readTemp
  4805 ;;		_ds18b20_readrom
  4806 ;; This function uses a non-reentrant model
  4807 ;;
  4808                           
  4809                           	psect	text11
  4810  00188C                     __ptext11:
  4811                           	callstack 0
  4812  00188C                     _read_byte:
  4813                           	callstack 26
  4814                           
  4815                           ;onewire.c: 52: uint8_t i;;onewire.c: 53: uint8_t val = 0;
  4816                           
  4817                           ;incstack = 0
  4818  00188C  6A47               	clrf	read_byte@val^0,c
  4819                           
  4820                           ;onewire.c: 55: for(i=0;i<8;i++)
  4821  00188E  6A48               	clrf	read_byte@i^0,c
  4822  001890                     l2941:
  4823                           
  4824                           ;onewire.c: 56: {;onewire.c: 57: if(read_bit()) val |= (0x01 << i);
  4825  001890  EC81  F00D         	call	_read_bit	;wreg free
  4826  001894  0900               	iorlw	0
  4827  001896  E00C               	bz	l2945
  4828  001898  C048  F045         	movff	read_byte@i,??_read_byte
  4829  00189C  0E01               	movlw	1
  4830  00189E  6E46               	movwf	(??_read_byte+1)^0,c
  4831  0018A0  2A45               	incf	??_read_byte^0,f,c
  4832  0018A2  D002               	goto	u1964
  4833  0018A4                     u1965:
  4834  0018A4  90D8               	bcf	status,0,c
  4835  0018A6  3646               	rlcf	(??_read_byte+1)^0,f,c
  4836  0018A8                     u1964:
  4837  0018A8  2E45               	decfsz	??_read_byte^0,f,c
  4838  0018AA  D7FC               	goto	u1965
  4839  0018AC  5046               	movf	(??_read_byte+1)^0,w,c
  4840  0018AE  1247               	iorwf	read_byte@val^0,f,c
  4841  0018B0                     l2945:
  4842                           
  4843                           ;onewire.c: 58: _delay((unsigned long)((120)*(8000000/4000000.0)));
  4844  0018B0  0E50               	movlw	80
  4845  0018B2                     u3287:
  4846  0018B2  2EE8               	decfsz	wreg,f,c
  4847  0018B4  D7FE               	bra	u3287
  4848  0018B6  2A48               	incf	read_byte@i^0,f,c
  4849  0018B8  0E07               	movlw	7
  4850  0018BA  6448               	cpfsgt	read_byte@i^0,c
  4851  0018BC  D7E9               	goto	l2941
  4852                           
  4853                           ;onewire.c: 59: };onewire.c: 61: return val;
  4854  0018BE  5047               	movf	read_byte@val^0,w,c
  4855  0018C0  0012               	return		;funcret
  4856  0018C2                     __end_of_read_byte:
  4857                           	callstack 0
  4858                           
  4859 ;; *************** function _read_bit *****************
  4860 ;; Defined at:
  4861 ;;		line 22 in file "onewire.c"
  4862 ;; Parameters:    Size  Location     Type
  4863 ;;		None
  4864 ;; Auto vars:     Size  Location     Type
  4865 ;;		None
  4866 ;; Return value:  Size  Location     Type
  4867 ;;                  1    wreg      unsigned char 
  4868 ;; Registers used:
  4869 ;;		wreg
  4870 ;; Tracked objects:
  4871 ;;		On entry : 0/0
  4872 ;;		On exit  : 0/0
  4873 ;;		Unchanged: 0/0
  4874 ;; Data sizes:     COMRAM   BANK0   BANK1
  4875 ;;      Params:         0       0       0
  4876 ;;      Locals:         0       0       0
  4877 ;;      Temps:          0       0       0
  4878 ;;      Totals:         0       0       0
  4879 ;;Total ram usage:        0 bytes
  4880 ;; Hardware stack levels used: 1
  4881 ;; Hardware stack levels required when called: 2
  4882 ;; This function calls:
  4883 ;;		Nothing
  4884 ;; This function is called by:
  4885 ;;		_read_byte
  4886 ;; This function uses a non-reentrant model
  4887 ;;
  4888                           
  4889                           	psect	text12
  4890  001B02                     __ptext12:
  4891                           	callstack 0
  4892  001B02                     _read_bit:
  4893                           	callstack 26
  4894                           
  4895                           ;onewire.c: 24: PORTAbits.RA6 = 0;
  4896                           
  4897                           ;incstack = 0
  4898  001B02  9C80               	bcf	128,6,c	;volatile
  4899                           
  4900                           ;onewire.c: 25: TRISAbits.TRISA6 = 0;
  4901  001B04  9C92               	bcf	146,6,c	;volatile
  4902                           
  4903                           ;onewire.c: 26: _delay((unsigned long)((1)*(8000000/4000000.0)));
  4904  001B06  D000               	nop2		;2 cycle nop
  4905                           
  4906                           ;onewire.c: 27: PORTAbits.RA6 = 1;
  4907  001B08  8C80               	bsf	128,6,c	;volatile
  4908                           
  4909                           ;onewire.c: 28: TRISAbits.TRISA6 = 1;
  4910  001B0A  8C92               	bsf	146,6,c	;volatile
  4911                           
  4912                           ;onewire.c: 29: _delay((unsigned long)((6)*(8000000/4000000.0)));
  4913  001B0C  0E04               	movlw	4
  4914  001B0E                     u3297:
  4915  001B0E  2EE8               	decfsz	wreg,f,c
  4916  001B10  D7FE               	bra	u3297
  4917                           
  4918                           ;onewire.c: 30: return(PORTAbits.RA6);
  4919  001B12  BC80               	btfsc	128,6,c	;volatile
  4920  001B14  0C01               	retlw	1
  4921  001B16  0C00               	retlw	0	;funcret
  4922  001B18                     __end_of_read_bit:
  4923                           	callstack 0
  4924                           
  4925 ;; *************** function _ds18b20_crc8 *****************
  4926 ;; Defined at:
  4927 ;;		line 221 in file "ds18b20.c"
  4928 ;; Parameters:    Size  Location     Type
  4929 ;;  data_in         1    3[COMRAM] PTR unsigned char 
  4930 ;;		 -> ds18b20_readrom@temp_rom(8), scratch(9), 
  4931 ;;  num_bytes       1    4[COMRAM] unsigned char 
  4932 ;; Auto vars:     Size  Location     Type
  4933 ;;  crc             1    9[COMRAM] unsigned char 
  4934 ;;  loop_count      1    8[COMRAM] unsigned char 
  4935 ;;  feedback_bit    1    7[COMRAM] unsigned char 
  4936 ;;  data            1    6[COMRAM] unsigned char 
  4937 ;;  bit_counter     1    5[COMRAM] unsigned char 
  4938 ;; Return value:  Size  Location     Type
  4939 ;;                  1    wreg      unsigned char 
  4940 ;; Registers used:
  4941 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4942 ;; Tracked objects:
  4943 ;;		On entry : 0/0
  4944 ;;		On exit  : 0/0
  4945 ;;		Unchanged: 0/0
  4946 ;; Data sizes:     COMRAM   BANK0   BANK1
  4947 ;;      Params:         2       0       0
  4948 ;;      Locals:         5       0       0
  4949 ;;      Temps:          0       0       0
  4950 ;;      Totals:         7       0       0
  4951 ;;Total ram usage:        7 bytes
  4952 ;; Hardware stack levels used: 1
  4953 ;; Hardware stack levels required when called: 2
  4954 ;; This function calls:
  4955 ;;		Nothing
  4956 ;; This function is called by:
  4957 ;;		_ds18b20_readTemp
  4958 ;;		_ds18b20_readrom
  4959 ;; This function uses a non-reentrant model
  4960 ;;
  4961                           
  4962                           	psect	text13
  4963  00177C                     __ptext13:
  4964                           	callstack 0
  4965  00177C                     _ds18b20_crc8:
  4966                           	callstack 27
  4967                           
  4968                           ;ds18b20.c: 222: uint8_t crc;;ds18b20.c: 223: uint8_t loop_count;;ds18b20.c: 224: uint8_
      +                          t bit_counter;;ds18b20.c: 225: uint8_t data;;ds18b20.c: 226: uint8_t feedback_bit;;ds18b
      +                          20.c: 228: crc = 0x00;
  4969                           
  4970                           ;incstack = 0
  4971  00177C  6A4B               	clrf	ds18b20_crc8@crc^0,c
  4972                           
  4973                           ;ds18b20.c: 230: for (loop_count = 0; loop_count != num_bytes; loop_count++) {
  4974  00177E  6A4A               	clrf	ds18b20_crc8@loop_count^0,c
  4975  001780  D01D               	goto	l2975
  4976  001782                     l2955:
  4977                           
  4978                           ;ds18b20.c: 231: data = data_in[loop_count];
  4979  001782  5045               	movf	ds18b20_crc8@data_in^0,w,c
  4980  001784  244A               	addwf	ds18b20_crc8@loop_count^0,w,c
  4981  001786  6ED9               	movwf	fsr2l,c
  4982  001788  6ADA               	clrf	fsr2h,c
  4983  00178A  50DF               	movf	indf2,w,c
  4984  00178C  6E48               	movwf	ds18b20_crc8@data^0,c
  4985                           
  4986                           ;ds18b20.c: 233: bit_counter = 8;
  4987  00178E  0E08               	movlw	8
  4988  001790  6E47               	movwf	ds18b20_crc8@bit_counter^0,c
  4989  001792                     l2959:
  4990                           
  4991                           ;ds18b20.c: 235: feedback_bit = (crc ^ data) & 0x01;
  4992  001792  504B               	movf	ds18b20_crc8@crc^0,w,c
  4993  001794  1848               	xorwf	ds18b20_crc8@data^0,w,c
  4994  001796  0B01               	andlw	1
  4995  001798  6E49               	movwf	ds18b20_crc8@feedback_bit^0,c
  4996                           
  4997                           ;ds18b20.c: 237: if (feedback_bit == 0x01) {
  4998  00179A  0449               	decf	ds18b20_crc8@feedback_bit^0,w,c
  4999  00179C  E102               	bnz	l454
  5000                           
  5001                           ;ds18b20.c: 238: crc = crc ^ 0x18;
  5002  00179E  0E18               	movlw	24
  5003  0017A0  1A4B               	xorwf	ds18b20_crc8@crc^0,f,c
  5004  0017A2                     l454:
  5005                           
  5006                           ;ds18b20.c: 239: };ds18b20.c: 240: crc = (crc >> 1) & 0x7F;
  5007  0017A2  90D8               	bcf	status,0,c
  5008  0017A4  304B               	rrcf	ds18b20_crc8@crc^0,w,c
  5009  0017A6  0B7F               	andlw	127
  5010  0017A8  6E4B               	movwf	ds18b20_crc8@crc^0,c
  5011                           
  5012                           ;ds18b20.c: 241: if (feedback_bit == 0x01) {
  5013  0017AA  0449               	decf	ds18b20_crc8@feedback_bit^0,w,c
  5014  0017AC  E101               	bnz	l2967
  5015                           
  5016                           ;ds18b20.c: 242: crc = crc | 0x80;
  5017  0017AE  8E4B               	bsf	ds18b20_crc8@crc^0,7,c
  5018  0017B0                     l2967:
  5019                           
  5020                           ;ds18b20.c: 243: };ds18b20.c: 245: data = data >> 1;
  5021  0017B0  90D8               	bcf	status,0,c
  5022  0017B2  3248               	rrcf	ds18b20_crc8@data^0,f,c
  5023                           
  5024                           ;ds18b20.c: 246: bit_counter--;
  5025  0017B4  0647               	decf	ds18b20_crc8@bit_counter^0,f,c
  5026                           
  5027                           ;ds18b20.c: 248: } while (bit_counter > 0);
  5028  0017B6  5047               	movf	ds18b20_crc8@bit_counter^0,w,c
  5029  0017B8  E1EC               	bnz	l2959
  5030  0017BA  2A4A               	incf	ds18b20_crc8@loop_count^0,f,c
  5031  0017BC                     l2975:
  5032  0017BC  5046               	movf	ds18b20_crc8@num_bytes^0,w,c
  5033  0017BE  184A               	xorwf	ds18b20_crc8@loop_count^0,w,c
  5034  0017C0  E1E0               	bnz	l2955
  5035                           
  5036                           ;ds18b20.c: 249: };ds18b20.c: 251: return crc;
  5037  0017C2  504B               	movf	ds18b20_crc8@crc^0,w,c
  5038  0017C4  0012               	return		;funcret
  5039  0017C6                     __end_of_ds18b20_crc8:
  5040                           	callstack 0
  5041                           
  5042 ;; *************** function _ds18b20_get_temp *****************
  5043 ;; Defined at:
  5044 ;;		line 198 in file "ds18b20.c"
  5045 ;; Parameters:    Size  Location     Type
  5046 ;;  num_dq          1    wreg     unsigned char 
  5047 ;;  minus           1    3[COMRAM] PTR unsigned char 
  5048 ;;		 -> minus_2(1), minus_1(1), 
  5049 ;; Auto vars:     Size  Location     Type
  5050 ;;  num_dq          1    5[COMRAM] unsigned char 
  5051 ;;  temp            2    7[COMRAM] unsigned int 
  5052 ;;  tmp             1    6[COMRAM] unsigned char 
  5053 ;; Return value:  Size  Location     Type
  5054 ;;                  2    3[COMRAM] unsigned int 
  5055 ;; Registers used:
  5056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  5057 ;; Tracked objects:
  5058 ;;		On entry : 0/0
  5059 ;;		On exit  : 0/0
  5060 ;;		Unchanged: 0/0
  5061 ;; Data sizes:     COMRAM   BANK0   BANK1
  5062 ;;      Params:         2       0       0
  5063 ;;      Locals:         4       0       0
  5064 ;;      Temps:          0       0       0
  5065 ;;      Totals:         6       0       0
  5066 ;;Total ram usage:        6 bytes
  5067 ;; Hardware stack levels used: 1
  5068 ;; Hardware stack levels required when called: 2
  5069 ;; This function calls:
  5070 ;;		Nothing
  5071 ;; This function is called by:
  5072 ;;		_main
  5073 ;; This function uses a non-reentrant model
  5074 ;;
  5075                           
  5076                           	psect	text14
  5077  0013DC                     __ptext14:
  5078                           	callstack 0
  5079  0013DC                     _ds18b20_get_temp:
  5080                           	callstack 28
  5081                           
  5082                           ;incstack = 0
  5083                           ;ds18b20_get_temp@num_dq stored from wreg
  5084  0013DC  6E47               	movwf	ds18b20_get_temp@num_dq^0,c
  5085                           
  5086                           ;ds18b20.c: 199: uint16_t temp = temp_ready[num_dq-1];
  5087  0013DE  5047               	movf	ds18b20_get_temp@num_dq^0,w,c
  5088  0013E0  0D02               	mullw	2
  5089  0013E2  50F3               	movf	243,w,c
  5090  0013E4  0F1F               	addlw	low (_temp_ready+254)
  5091  0013E6  6ED9               	movwf	fsr2l,c
  5092  0013E8  6ADA               	clrf	fsr2h,c
  5093  0013EA  CFDE F049          	movff	postinc2,ds18b20_get_temp@temp
  5094  0013EE  CFDD F04A          	movff	postdec2,ds18b20_get_temp@temp+1
  5095                           
  5096                           ;ds18b20.c: 200: uint8_t tmp;;ds18b20.c: 201: *minus = '+';
  5097  0013F2  5045               	movf	ds18b20_get_temp@minus^0,w,c
  5098  0013F4  6ED9               	movwf	fsr2l,c
  5099  0013F6  6ADA               	clrf	fsr2h,c
  5100  0013F8  0E2B               	movlw	43
  5101  0013FA  6EDF               	movwf	indf2,c
  5102                           
  5103                           ;ds18b20.c: 202: if(temp == 32767)
  5104  0013FC  2849               	incf	ds18b20_get_temp@temp^0,w,c
  5105  0013FE  E108               	bnz	l446
  5106  001400  0E7F               	movlw	127
  5107  001402  184A               	xorwf	(ds18b20_get_temp@temp+1)^0,w,c
  5108  001404  E105               	bnz	l446
  5109  001406                     u2160:
  5110                           
  5111                           ;ds18b20.c: 203: return temp;
  5112  001406  C049  F045         	movff	ds18b20_get_temp@temp,?_ds18b20_get_temp
  5113  00140A  C04A  F046         	movff	ds18b20_get_temp@temp+1,?_ds18b20_get_temp+1
  5114  00140E  0012               	return	
  5115  001410                     l446:
  5116                           
  5117                           ;ds18b20.c: 204: if (temp & 0x8000) {
  5118  001410  AE4A               	btfss	(ds18b20_get_temp@temp+1)^0,7,c
  5119  001412  D009               	goto	l3207
  5120                           
  5121                           ;ds18b20.c: 205: temp = -temp;
  5122  001414  6C49               	negf	ds18b20_get_temp@temp^0,c
  5123  001416  1E4A               	comf	(ds18b20_get_temp@temp+1)^0,f,c
  5124  001418  B0D8               	btfsc	status,0,c
  5125  00141A  2A4A               	incf	(ds18b20_get_temp@temp+1)^0,f,c
  5126                           
  5127                           ;ds18b20.c: 206: *minus = '-';
  5128  00141C  5045               	movf	ds18b20_get_temp@minus^0,w,c
  5129  00141E  6ED9               	movwf	fsr2l,c
  5130  001420  6ADA               	clrf	fsr2h,c
  5131  001422  0E2D               	movlw	45
  5132  001424  6EDF               	movwf	indf2,c
  5133  001426                     l3207:
  5134                           
  5135                           ;ds18b20.c: 207: };ds18b20.c: 209: tmp = temp & 0x0f;
  5136  001426  5049               	movf	ds18b20_get_temp@temp^0,w,c
  5137  001428  0B0F               	andlw	15
  5138  00142A  6E48               	movwf	ds18b20_get_temp@tmp^0,c
  5139                           
  5140                           ;ds18b20.c: 210: tmp = fract[tmp];
  5141  00142C  0ECF               	movlw	low _fract
  5142  00142E  2448               	addwf	ds18b20_get_temp@tmp^0,w,c
  5143  001430  6EF6               	movwf	tblptrl,c
  5144  001432  6AF7               	clrf	tblptrh,c
  5145  001434  0E1E               	movlw	high _fract
  5146  001436  22F7               	addwfc	tblptrh,f,c
  5147  001438                     	if	0	;There are less than 3 active tblptr bytes
  5148  001438                     	endif
  5149  001438  0008               	tblrd		*
  5150  00143A  CFF5 F048          	movff	tablat,ds18b20_get_temp@tmp
  5151                           
  5152                           ;ds18b20.c: 211: temp = temp >> 4;
  5153  00143E  3A49               	swapf	ds18b20_get_temp@temp^0,f,c
  5154  001440  3A4A               	swapf	(ds18b20_get_temp@temp+1)^0,f,c
  5155  001442  0E0F               	movlw	15
  5156  001444  1649               	andwf	ds18b20_get_temp@temp^0,f,c
  5157  001446  504A               	movf	(ds18b20_get_temp@temp+1)^0,w,c
  5158  001448  0BF0               	andlw	240
  5159  00144A  1249               	iorwf	ds18b20_get_temp@temp^0,f,c
  5160  00144C  0E0F               	movlw	15
  5161  00144E  164A               	andwf	(ds18b20_get_temp@temp+1)^0,f,c
  5162                           
  5163                           ;ds18b20.c: 212: temp = (temp & 0x00ff) * 10;
  5164  001450  5049               	movf	ds18b20_get_temp@temp^0,w,c
  5165  001452  0D0A               	mullw	10
  5166  001454  CFF3 F049          	movff	prodl,ds18b20_get_temp@temp
  5167  001458  CFF4 F04A          	movff	prodh,ds18b20_get_temp@temp+1
  5168                           
  5169                           ;ds18b20.c: 213: temp = temp + tmp;
  5170  00145C  5048               	movf	ds18b20_get_temp@tmp^0,w,c
  5171  00145E  2649               	addwf	ds18b20_get_temp@temp^0,f,c
  5172  001460  0E00               	movlw	0
  5173  001462  224A               	addwfc	(ds18b20_get_temp@temp+1)^0,f,c
  5174  001464  D7D0               	goto	u2160
  5175  001466                     __end_of_ds18b20_get_temp:
  5176                           	callstack 0
  5177                           
  5178 ;; *************** function ___lwmod *****************
  5179 ;; Defined at:
  5180 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwmod.c"
  5181 ;; Parameters:    Size  Location     Type
  5182 ;;  dividend        2   10[COMRAM] unsigned int 
  5183 ;;  divisor         2   12[COMRAM] unsigned int 
  5184 ;; Auto vars:     Size  Location     Type
  5185 ;;  counter         1   14[COMRAM] unsigned char 
  5186 ;; Return value:  Size  Location     Type
  5187 ;;                  2   10[COMRAM] unsigned int 
  5188 ;; Registers used:
  5189 ;;		wreg, status,2, status,0
  5190 ;; Tracked objects:
  5191 ;;		On entry : 0/0
  5192 ;;		On exit  : 0/0
  5193 ;;		Unchanged: 0/0
  5194 ;; Data sizes:     COMRAM   BANK0   BANK1
  5195 ;;      Params:         4       0       0
  5196 ;;      Locals:         1       0       0
  5197 ;;      Temps:          0       0       0
  5198 ;;      Totals:         5       0       0
  5199 ;;Total ram usage:        5 bytes
  5200 ;; Hardware stack levels used: 1
  5201 ;; Hardware stack levels required when called: 2
  5202 ;; This function calls:
  5203 ;;		Nothing
  5204 ;; This function is called by:
  5205 ;;		_main
  5206 ;; This function uses a non-reentrant model
  5207 ;;
  5208                           
  5209                           	psect	text15
  5210  00184E                     __ptext15:
  5211                           	callstack 0
  5212  00184E                     ___lwmod:
  5213                           	callstack 28
  5214                           
  5215                           ;incstack = 0
  5216  00184E  504E               	movf	___lwmod@divisor^0,w,c
  5217  001850  104F               	iorwf	(___lwmod@divisor+1)^0,w,c
  5218  001852  E017               	bz	l1161
  5219  001854  0E01               	movlw	1
  5220  001856  6E50               	movwf	___lwmod@counter^0,c
  5221  001858  D004               	goto	l3445
  5222  00185A                     l3443:
  5223  00185A  90D8               	bcf	status,0,c
  5224  00185C  364E               	rlcf	___lwmod@divisor^0,f,c
  5225  00185E  364F               	rlcf	(___lwmod@divisor+1)^0,f,c
  5226  001860  2A50               	incf	___lwmod@counter^0,f,c
  5227  001862                     l3445:
  5228  001862  AE4F               	btfss	(___lwmod@divisor+1)^0,7,c
  5229  001864  D7FA               	goto	l3443
  5230  001866                     u2430:
  5231  001866  504E               	movf	___lwmod@divisor^0,w,c
  5232  001868  5C4C               	subwf	___lwmod@dividend^0,w,c
  5233  00186A  504F               	movf	(___lwmod@divisor+1)^0,w,c
  5234  00186C  584D               	subwfb	(___lwmod@dividend+1)^0,w,c
  5235  00186E  E304               	bnc	l3451
  5236  001870  504E               	movf	___lwmod@divisor^0,w,c
  5237  001872  5E4C               	subwf	___lwmod@dividend^0,f,c
  5238  001874  504F               	movf	(___lwmod@divisor+1)^0,w,c
  5239  001876  5A4D               	subwfb	(___lwmod@dividend+1)^0,f,c
  5240  001878                     l3451:
  5241  001878  90D8               	bcf	status,0,c
  5242  00187A  324F               	rrcf	(___lwmod@divisor+1)^0,f,c
  5243  00187C  324E               	rrcf	___lwmod@divisor^0,f,c
  5244  00187E  2E50               	decfsz	___lwmod@counter^0,f,c
  5245  001880  D7F2               	goto	u2430
  5246  001882                     l1161:
  5247  001882  C04C  F04C         	movff	___lwmod@dividend,?___lwmod
  5248  001886  C04D  F04D         	movff	___lwmod@dividend+1,?___lwmod+1
  5249  00188A  0012               	return		;funcret
  5250  00188C                     __end_of___lwmod:
  5251                           	callstack 0
  5252                           
  5253 ;; *************** function ___lwdiv *****************
  5254 ;; Defined at:
  5255 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwdiv.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;  dividend        2    3[COMRAM] unsigned int 
  5258 ;;  divisor         2    5[COMRAM] unsigned int 
  5259 ;; Auto vars:     Size  Location     Type
  5260 ;;  quotient        2    7[COMRAM] unsigned int 
  5261 ;;  counter         1    9[COMRAM] unsigned char 
  5262 ;; Return value:  Size  Location     Type
  5263 ;;                  2    3[COMRAM] unsigned int 
  5264 ;; Registers used:
  5265 ;;		wreg, status,2, status,0
  5266 ;; Tracked objects:
  5267 ;;		On entry : 0/0
  5268 ;;		On exit  : 0/0
  5269 ;;		Unchanged: 0/0
  5270 ;; Data sizes:     COMRAM   BANK0   BANK1
  5271 ;;      Params:         4       0       0
  5272 ;;      Locals:         3       0       0
  5273 ;;      Temps:          0       0       0
  5274 ;;      Totals:         7       0       0
  5275 ;;Total ram usage:        7 bytes
  5276 ;; Hardware stack levels used: 1
  5277 ;; Hardware stack levels required when called: 2
  5278 ;; This function calls:
  5279 ;;		Nothing
  5280 ;; This function is called by:
  5281 ;;		_main
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           	psect	text16
  5286  0017C6                     __ptext16:
  5287                           	callstack 0
  5288  0017C6                     ___lwdiv:
  5289                           	callstack 28
  5290                           
  5291                           ;incstack = 0
  5292  0017C6  6A49               	clrf	___lwdiv@quotient^0,c
  5293  0017C8  6A4A               	clrf	(___lwdiv@quotient+1)^0,c
  5294  0017CA  5047               	movf	___lwdiv@divisor^0,w,c
  5295  0017CC  1048               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5296  0017CE  E01B               	bz	l1151
  5297  0017D0  0E01               	movlw	1
  5298  0017D2  6E4B               	movwf	___lwdiv@counter^0,c
  5299  0017D4  D004               	goto	l3425
  5300  0017D6                     l3423:
  5301  0017D6  90D8               	bcf	status,0,c
  5302  0017D8  3647               	rlcf	___lwdiv@divisor^0,f,c
  5303  0017DA  3648               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5304  0017DC  2A4B               	incf	___lwdiv@counter^0,f,c
  5305  0017DE                     l3425:
  5306  0017DE  AE48               	btfss	(___lwdiv@divisor+1)^0,7,c
  5307  0017E0  D7FA               	goto	l3423
  5308  0017E2                     u2400:
  5309  0017E2  90D8               	bcf	status,0,c
  5310  0017E4  3649               	rlcf	___lwdiv@quotient^0,f,c
  5311  0017E6  364A               	rlcf	(___lwdiv@quotient+1)^0,f,c
  5312  0017E8  5047               	movf	___lwdiv@divisor^0,w,c
  5313  0017EA  5C45               	subwf	___lwdiv@dividend^0,w,c
  5314  0017EC  5048               	movf	(___lwdiv@divisor+1)^0,w,c
  5315  0017EE  5846               	subwfb	(___lwdiv@dividend+1)^0,w,c
  5316  0017F0  E305               	bnc	l3435
  5317  0017F2  5047               	movf	___lwdiv@divisor^0,w,c
  5318  0017F4  5E45               	subwf	___lwdiv@dividend^0,f,c
  5319  0017F6  5048               	movf	(___lwdiv@divisor+1)^0,w,c
  5320  0017F8  5A46               	subwfb	(___lwdiv@dividend+1)^0,f,c
  5321  0017FA  8049               	bsf	___lwdiv@quotient^0,0,c
  5322  0017FC                     l3435:
  5323  0017FC  90D8               	bcf	status,0,c
  5324  0017FE  3248               	rrcf	(___lwdiv@divisor+1)^0,f,c
  5325  001800  3247               	rrcf	___lwdiv@divisor^0,f,c
  5326  001802  2E4B               	decfsz	___lwdiv@counter^0,f,c
  5327  001804  D7EE               	goto	u2400
  5328  001806                     l1151:
  5329  001806  C049  F045         	movff	___lwdiv@quotient,?___lwdiv
  5330  00180A  C04A  F046         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5331  00180E  0012               	return		;funcret
  5332  001810                     __end_of___lwdiv:
  5333                           	callstack 0
  5334                           
  5335 ;; *************** function ___lbmod *****************
  5336 ;; Defined at:
  5337 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lbmod.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;  dividend        1    wreg     unsigned char 
  5340 ;;  divisor         1    7[COMRAM] unsigned char 
  5341 ;; Auto vars:     Size  Location     Type
  5342 ;;  dividend        1    8[COMRAM] unsigned char 
  5343 ;;  rem             1   10[COMRAM] unsigned char 
  5344 ;;  counter         1    9[COMRAM] unsigned char 
  5345 ;; Return value:  Size  Location     Type
  5346 ;;                  1    wreg      unsigned char 
  5347 ;; Registers used:
  5348 ;;		wreg, status,2, status,0
  5349 ;; Tracked objects:
  5350 ;;		On entry : 0/0
  5351 ;;		On exit  : 0/0
  5352 ;;		Unchanged: 0/0
  5353 ;; Data sizes:     COMRAM   BANK0   BANK1
  5354 ;;      Params:         1       0       0
  5355 ;;      Locals:         3       0       0
  5356 ;;      Temps:          0       0       0
  5357 ;;      Totals:         4       0       0
  5358 ;;Total ram usage:        4 bytes
  5359 ;; Hardware stack levels used: 1
  5360 ;; Hardware stack levels required when called: 2
  5361 ;; This function calls:
  5362 ;;		Nothing
  5363 ;; This function is called by:
  5364 ;;		_main
  5365 ;; This function uses a non-reentrant model
  5366 ;;
  5367                           
  5368                           	psect	text17
  5369  0019BE                     __ptext17:
  5370                           	callstack 0
  5371  0019BE                     ___lbmod:
  5372                           	callstack 28
  5373                           
  5374                           ;incstack = 0
  5375                           ;___lbmod@dividend stored from wreg
  5376  0019BE  6E4A               	movwf	___lbmod@dividend^0,c
  5377  0019C0  0E08               	movlw	8
  5378  0019C2  6E4B               	movwf	___lbmod@counter^0,c
  5379  0019C4  6A4C               	clrf	___lbmod@rem^0,c
  5380  0019C6                     l3403:
  5381  0019C6  90D8               	bcf	status,0,c
  5382  0019C8  344A               	rlcf	___lbmod@dividend^0,w,c
  5383  0019CA  344C               	rlcf	___lbmod@rem^0,w,c
  5384  0019CC  6E4C               	movwf	___lbmod@rem^0,c
  5385  0019CE  90D8               	bcf	status,0,c
  5386  0019D0  364A               	rlcf	___lbmod@dividend^0,f,c
  5387  0019D2  5049               	movf	___lbmod@divisor^0,w,c
  5388  0019D4  5C4C               	subwf	___lbmod@rem^0,w,c
  5389  0019D6  E302               	bnc	l3411
  5390  0019D8  5049               	movf	___lbmod@divisor^0,w,c
  5391  0019DA  5E4C               	subwf	___lbmod@rem^0,f,c
  5392  0019DC                     l3411:
  5393  0019DC  2E4B               	decfsz	___lbmod@counter^0,f,c
  5394  0019DE  D7F3               	goto	l3403
  5395  0019E0  504C               	movf	___lbmod@rem^0,w,c
  5396  0019E2  0012               	return		;funcret
  5397  0019E4                     __end_of___lbmod:
  5398                           	callstack 0
  5399                           
  5400 ;; *************** function ___lbdiv *****************
  5401 ;; Defined at:
  5402 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lbdiv.c"
  5403 ;; Parameters:    Size  Location     Type
  5404 ;;  dividend        1    wreg     unsigned char 
  5405 ;;  divisor         1    3[COMRAM] unsigned char 
  5406 ;; Auto vars:     Size  Location     Type
  5407 ;;  dividend        1    4[COMRAM] unsigned char 
  5408 ;;  quotient        1    6[COMRAM] unsigned char 
  5409 ;;  counter         1    5[COMRAM] unsigned char 
  5410 ;; Return value:  Size  Location     Type
  5411 ;;                  1    wreg      unsigned char 
  5412 ;; Registers used:
  5413 ;;		wreg, status,2, status,0
  5414 ;; Tracked objects:
  5415 ;;		On entry : 0/0
  5416 ;;		On exit  : 0/0
  5417 ;;		Unchanged: 0/0
  5418 ;; Data sizes:     COMRAM   BANK0   BANK1
  5419 ;;      Params:         1       0       0
  5420 ;;      Locals:         3       0       0
  5421 ;;      Temps:          0       0       0
  5422 ;;      Totals:         4       0       0
  5423 ;;Total ram usage:        4 bytes
  5424 ;; Hardware stack levels used: 1
  5425 ;; Hardware stack levels required when called: 2
  5426 ;; This function calls:
  5427 ;;		Nothing
  5428 ;; This function is called by:
  5429 ;;		_main
  5430 ;; This function uses a non-reentrant model
  5431 ;;
  5432                           
  5433                           	psect	text18
  5434  0018F8                     __ptext18:
  5435                           	callstack 0
  5436  0018F8                     ___lbdiv:
  5437                           	callstack 28
  5438                           
  5439                           ;incstack = 0
  5440                           ;___lbdiv@dividend stored from wreg
  5441  0018F8  6E46               	movwf	___lbdiv@dividend^0,c
  5442  0018FA  6A48               	clrf	___lbdiv@quotient^0,c
  5443  0018FC  5045               	movf	___lbdiv@divisor^0,w,c
  5444  0018FE  E014               	bz	l3395
  5445  001900  0E01               	movlw	1
  5446  001902  6E47               	movwf	___lbdiv@counter^0,c
  5447  001904  D003               	goto	l3383
  5448  001906                     l3379:
  5449  001906  90D8               	bcf	status,0,c
  5450  001908  3645               	rlcf	___lbdiv@divisor^0,f,c
  5451  00190A  2A47               	incf	___lbdiv@counter^0,f,c
  5452  00190C                     l3383:
  5453  00190C  AE45               	btfss	___lbdiv@divisor^0,7,c
  5454  00190E  D7FB               	goto	l3379
  5455  001910                     u2360:
  5456  001910  90D8               	bcf	status,0,c
  5457  001912  3648               	rlcf	___lbdiv@quotient^0,f,c
  5458  001914  5045               	movf	___lbdiv@divisor^0,w,c
  5459  001916  5C46               	subwf	___lbdiv@dividend^0,w,c
  5460  001918  E303               	bnc	l3391
  5461  00191A  5045               	movf	___lbdiv@divisor^0,w,c
  5462  00191C  5E46               	subwf	___lbdiv@dividend^0,f,c
  5463  00191E  8048               	bsf	___lbdiv@quotient^0,0,c
  5464  001920                     l3391:
  5465  001920  90D8               	bcf	status,0,c
  5466  001922  3245               	rrcf	___lbdiv@divisor^0,f,c
  5467  001924  2E47               	decfsz	___lbdiv@counter^0,f,c
  5468  001926  D7F4               	goto	u2360
  5469  001928                     l3395:
  5470  001928  5048               	movf	___lbdiv@quotient^0,w,c
  5471  00192A  0012               	return		;funcret
  5472  00192C                     __end_of___lbdiv:
  5473                           	callstack 0
  5474                           
  5475 ;; *************** function ___awmod *****************
  5476 ;; Defined at:
  5477 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\awmod.c"
  5478 ;; Parameters:    Size  Location     Type
  5479 ;;  dividend        2   11[COMRAM] int 
  5480 ;;  divisor         2   13[COMRAM] int 
  5481 ;; Auto vars:     Size  Location     Type
  5482 ;;  sign            1   16[COMRAM] unsigned char 
  5483 ;;  counter         1   15[COMRAM] unsigned char 
  5484 ;; Return value:  Size  Location     Type
  5485 ;;                  2   11[COMRAM] int 
  5486 ;; Registers used:
  5487 ;;		wreg, status,2, status,0
  5488 ;; Tracked objects:
  5489 ;;		On entry : 0/0
  5490 ;;		On exit  : 0/0
  5491 ;;		Unchanged: 0/0
  5492 ;; Data sizes:     COMRAM   BANK0   BANK1
  5493 ;;      Params:         4       0       0
  5494 ;;      Locals:         2       0       0
  5495 ;;      Temps:          0       0       0
  5496 ;;      Totals:         6       0       0
  5497 ;;Total ram usage:        6 bytes
  5498 ;; Hardware stack levels used: 1
  5499 ;; Hardware stack levels required when called: 2
  5500 ;; This function calls:
  5501 ;;		Nothing
  5502 ;; This function is called by:
  5503 ;;		_main
  5504 ;; This function uses a non-reentrant model
  5505 ;;
  5506                           
  5507                           	psect	text19
  5508  001654                     __ptext19:
  5509                           	callstack 0
  5510  001654                     ___awmod:
  5511                           	callstack 28
  5512                           
  5513                           ;incstack = 0
  5514  001654  6A52               	clrf	___awmod@sign^0,c
  5515  001656  AE4E               	btfss	(___awmod@dividend+1)^0,7,c
  5516  001658  D006               	goto	l3345
  5517  00165A  6C4D               	negf	___awmod@dividend^0,c
  5518  00165C  1E4E               	comf	(___awmod@dividend+1)^0,f,c
  5519  00165E  B0D8               	btfsc	status,0,c
  5520  001660  2A4E               	incf	(___awmod@dividend+1)^0,f,c
  5521  001662  0E01               	movlw	1
  5522  001664  6E52               	movwf	___awmod@sign^0,c
  5523  001666                     l3345:
  5524  001666  AE50               	btfss	(___awmod@divisor+1)^0,7,c
  5525  001668  D004               	goto	l3349
  5526  00166A  6C4F               	negf	___awmod@divisor^0,c
  5527  00166C  1E50               	comf	(___awmod@divisor+1)^0,f,c
  5528  00166E  B0D8               	btfsc	status,0,c
  5529  001670  2A50               	incf	(___awmod@divisor+1)^0,f,c
  5530  001672                     l3349:
  5531  001672  504F               	movf	___awmod@divisor^0,w,c
  5532  001674  1050               	iorwf	(___awmod@divisor+1)^0,w,c
  5533  001676  E017               	bz	l3365
  5534  001678  0E01               	movlw	1
  5535  00167A  6E51               	movwf	___awmod@counter^0,c
  5536  00167C  D004               	goto	l3355
  5537  00167E                     l3353:
  5538  00167E  90D8               	bcf	status,0,c
  5539  001680  364F               	rlcf	___awmod@divisor^0,f,c
  5540  001682  3650               	rlcf	(___awmod@divisor+1)^0,f,c
  5541  001684  2A51               	incf	___awmod@counter^0,f,c
  5542  001686                     l3355:
  5543  001686  AE50               	btfss	(___awmod@divisor+1)^0,7,c
  5544  001688  D7FA               	goto	l3353
  5545  00168A                     u2320:
  5546  00168A  504F               	movf	___awmod@divisor^0,w,c
  5547  00168C  5C4D               	subwf	___awmod@dividend^0,w,c
  5548  00168E  5050               	movf	(___awmod@divisor+1)^0,w,c
  5549  001690  584E               	subwfb	(___awmod@dividend+1)^0,w,c
  5550  001692  E304               	bnc	l3361
  5551  001694  504F               	movf	___awmod@divisor^0,w,c
  5552  001696  5E4D               	subwf	___awmod@dividend^0,f,c
  5553  001698  5050               	movf	(___awmod@divisor+1)^0,w,c
  5554  00169A  5A4E               	subwfb	(___awmod@dividend+1)^0,f,c
  5555  00169C                     l3361:
  5556  00169C  90D8               	bcf	status,0,c
  5557  00169E  3250               	rrcf	(___awmod@divisor+1)^0,f,c
  5558  0016A0  324F               	rrcf	___awmod@divisor^0,f,c
  5559  0016A2  2E51               	decfsz	___awmod@counter^0,f,c
  5560  0016A4  D7F2               	goto	u2320
  5561  0016A6                     l3365:
  5562  0016A6  5052               	movf	___awmod@sign^0,w,c
  5563  0016A8  E004               	bz	l3369
  5564  0016AA  6C4D               	negf	___awmod@dividend^0,c
  5565  0016AC  1E4E               	comf	(___awmod@dividend+1)^0,f,c
  5566  0016AE  B0D8               	btfsc	status,0,c
  5567  0016B0  2A4E               	incf	(___awmod@dividend+1)^0,f,c
  5568  0016B2                     l3369:
  5569  0016B2  C04D  F04D         	movff	___awmod@dividend,?___awmod
  5570  0016B6  C04E  F04E         	movff	___awmod@dividend+1,?___awmod+1
  5571  0016BA  0012               	return		;funcret
  5572  0016BC                     __end_of___awmod:
  5573                           	callstack 0
  5574                           
  5575 ;; *************** function ___awdiv *****************
  5576 ;; Defined at:
  5577 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\awdiv.c"
  5578 ;; Parameters:    Size  Location     Type
  5579 ;;  dividend        2    3[COMRAM] int 
  5580 ;;  divisor         2    5[COMRAM] int 
  5581 ;; Auto vars:     Size  Location     Type
  5582 ;;  quotient        2    9[COMRAM] int 
  5583 ;;  sign            1    8[COMRAM] unsigned char 
  5584 ;;  counter         1    7[COMRAM] unsigned char 
  5585 ;; Return value:  Size  Location     Type
  5586 ;;                  2    3[COMRAM] int 
  5587 ;; Registers used:
  5588 ;;		wreg, status,2, status,0
  5589 ;; Tracked objects:
  5590 ;;		On entry : 0/0
  5591 ;;		On exit  : 0/0
  5592 ;;		Unchanged: 0/0
  5593 ;; Data sizes:     COMRAM   BANK0   BANK1
  5594 ;;      Params:         4       0       0
  5595 ;;      Locals:         4       0       0
  5596 ;;      Temps:          0       0       0
  5597 ;;      Totals:         8       0       0
  5598 ;;Total ram usage:        8 bytes
  5599 ;; Hardware stack levels used: 1
  5600 ;; Hardware stack levels required when called: 2
  5601 ;; This function calls:
  5602 ;;		Nothing
  5603 ;; This function is called by:
  5604 ;;		_main
  5605 ;; This function uses a non-reentrant model
  5606 ;;
  5607                           
  5608                           	psect	text20
  5609  001568                     __ptext20:
  5610                           	callstack 0
  5611  001568                     ___awdiv:
  5612                           	callstack 28
  5613                           
  5614                           ;incstack = 0
  5615  001568  6A4A               	clrf	___awdiv@sign^0,c
  5616  00156A  AE48               	btfss	(___awdiv@divisor+1)^0,7,c
  5617  00156C  D006               	goto	l3301
  5618  00156E  6C47               	negf	___awdiv@divisor^0,c
  5619  001570  1E48               	comf	(___awdiv@divisor+1)^0,f,c
  5620  001572  B0D8               	btfsc	status,0,c
  5621  001574  2A48               	incf	(___awdiv@divisor+1)^0,f,c
  5622  001576  0E01               	movlw	1
  5623  001578  6E4A               	movwf	___awdiv@sign^0,c
  5624  00157A                     l3301:
  5625  00157A  AE46               	btfss	(___awdiv@dividend+1)^0,7,c
  5626  00157C  D006               	goto	l3307
  5627  00157E  6C45               	negf	___awdiv@dividend^0,c
  5628  001580  1E46               	comf	(___awdiv@dividend+1)^0,f,c
  5629  001582  B0D8               	btfsc	status,0,c
  5630  001584  2A46               	incf	(___awdiv@dividend+1)^0,f,c
  5631  001586  0E01               	movlw	1
  5632  001588  1A4A               	xorwf	___awdiv@sign^0,f,c
  5633  00158A                     l3307:
  5634  00158A  6A4B               	clrf	___awdiv@quotient^0,c
  5635  00158C  6A4C               	clrf	(___awdiv@quotient+1)^0,c
  5636  00158E  5047               	movf	___awdiv@divisor^0,w,c
  5637  001590  1048               	iorwf	(___awdiv@divisor+1)^0,w,c
  5638  001592  E01B               	bz	l3329
  5639  001594  0E01               	movlw	1
  5640  001596  6E49               	movwf	___awdiv@counter^0,c
  5641  001598  D004               	goto	l3315
  5642  00159A                     l3313:
  5643  00159A  90D8               	bcf	status,0,c
  5644  00159C  3647               	rlcf	___awdiv@divisor^0,f,c
  5645  00159E  3648               	rlcf	(___awdiv@divisor+1)^0,f,c
  5646  0015A0  2A49               	incf	___awdiv@counter^0,f,c
  5647  0015A2                     l3315:
  5648  0015A2  AE48               	btfss	(___awdiv@divisor+1)^0,7,c
  5649  0015A4  D7FA               	goto	l3313
  5650  0015A6                     u2260:
  5651  0015A6  90D8               	bcf	status,0,c
  5652  0015A8  364B               	rlcf	___awdiv@quotient^0,f,c
  5653  0015AA  364C               	rlcf	(___awdiv@quotient+1)^0,f,c
  5654  0015AC  5047               	movf	___awdiv@divisor^0,w,c
  5655  0015AE  5C45               	subwf	___awdiv@dividend^0,w,c
  5656  0015B0  5048               	movf	(___awdiv@divisor+1)^0,w,c
  5657  0015B2  5846               	subwfb	(___awdiv@dividend+1)^0,w,c
  5658  0015B4  E305               	bnc	l3325
  5659  0015B6  5047               	movf	___awdiv@divisor^0,w,c
  5660  0015B8  5E45               	subwf	___awdiv@dividend^0,f,c
  5661  0015BA  5048               	movf	(___awdiv@divisor+1)^0,w,c
  5662  0015BC  5A46               	subwfb	(___awdiv@dividend+1)^0,f,c
  5663  0015BE  804B               	bsf	___awdiv@quotient^0,0,c
  5664  0015C0                     l3325:
  5665  0015C0  90D8               	bcf	status,0,c
  5666  0015C2  3248               	rrcf	(___awdiv@divisor+1)^0,f,c
  5667  0015C4  3247               	rrcf	___awdiv@divisor^0,f,c
  5668  0015C6  2E49               	decfsz	___awdiv@counter^0,f,c
  5669  0015C8  D7EE               	goto	u2260
  5670  0015CA                     l3329:
  5671  0015CA  504A               	movf	___awdiv@sign^0,w,c
  5672  0015CC  E004               	bz	l3333
  5673  0015CE  6C4B               	negf	___awdiv@quotient^0,c
  5674  0015D0  1E4C               	comf	(___awdiv@quotient+1)^0,f,c
  5675  0015D2  B0D8               	btfsc	status,0,c
  5676  0015D4  2A4C               	incf	(___awdiv@quotient+1)^0,f,c
  5677  0015D6                     l3333:
  5678  0015D6  C04B  F045         	movff	___awdiv@quotient,?___awdiv
  5679  0015DA  C04C  F046         	movff	___awdiv@quotient+1,?___awdiv+1
  5680  0015DE  0012               	return		;funcret
  5681  0015E0                     __end_of___awdiv:
  5682                           	callstack 0
  5683                           
  5684 ;; *************** function _Main_init *****************
  5685 ;; Defined at:
  5686 ;;		line 660 in file "main.c"
  5687 ;; Parameters:    Size  Location     Type
  5688 ;;		None
  5689 ;; Auto vars:     Size  Location     Type
  5690 ;;		None
  5691 ;; Return value:  Size  Location     Type
  5692 ;;                  1    wreg      void 
  5693 ;; Registers used:
  5694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5695 ;; Tracked objects:
  5696 ;;		On entry : 0/0
  5697 ;;		On exit  : 0/0
  5698 ;;		Unchanged: 0/0
  5699 ;; Data sizes:     COMRAM   BANK0   BANK1
  5700 ;;      Params:         0       0       0
  5701 ;;      Locals:         0       0       0
  5702 ;;      Temps:          0       0       0
  5703 ;;      Totals:         0       0       0
  5704 ;;Total ram usage:        0 bytes
  5705 ;; Hardware stack levels used: 1
  5706 ;; Hardware stack levels required when called: 6
  5707 ;; This function calls:
  5708 ;;		_cgrom_char
  5709 ;;		_initLCD
  5710 ;;		_init_ds18b20
  5711 ;;		_init_uart
  5712 ;; This function is called by:
  5713 ;;		_main
  5714 ;; This function uses a non-reentrant model
  5715 ;;
  5716                           
  5717                           	psect	text21
  5718  001466                     __ptext21:
  5719                           	callstack 0
  5720  001466                     _Main_init:
  5721                           	callstack 24
  5722                           
  5723                           ;main.c: 663: PORTA = 0;
  5724                           
  5725                           ;incstack = 0
  5726  001466  6A80               	clrf	128,c	;volatile
  5727                           
  5728                           ;main.c: 664: LATA = 0;
  5729  001468  6A89               	clrf	137,c	;volatile
  5730                           
  5731                           ;main.c: 665: TRISA = 0;
  5732  00146A  6A92               	clrf	146,c	;volatile
  5733                           
  5734                           ;main.c: 666: PORTB = 0;
  5735  00146C  6A81               	clrf	129,c	;volatile
  5736                           
  5737                           ;main.c: 667: LATB = 0;
  5738  00146E  6A8A               	clrf	138,c	;volatile
  5739                           
  5740                           ;main.c: 668: TRISB = 0b00000110;
  5741  001470  0E06               	movlw	6
  5742  001472  6E93               	movwf	147,c	;volatile
  5743                           
  5744                           ;main.c: 669: PORTC = 0;
  5745  001474  6A82               	clrf	130,c	;volatile
  5746                           
  5747                           ;main.c: 670: LATC = 0;
  5748  001476  6A8B               	clrf	139,c	;volatile
  5749                           
  5750                           ;main.c: 671: TRISC = 0;
  5751  001478  6A94               	clrf	148,c	;volatile
  5752                           
  5753                           ;main.c: 672: OSCCONbits.SCS0 = 0;
  5754  00147A  90D3               	bcf	211,0,c	;volatile
  5755                           
  5756                           ;main.c: 673: OSCCONbits.SCS1 = 1;
  5757  00147C  82D3               	bsf	211,1,c	;volatile
  5758                           
  5759                           ;main.c: 674: OSCCONbits.IRCF = 0b111;
  5760  00147E  0E70               	movlw	112
  5761  001480  12D3               	iorwf	211,f,c	;volatile
  5762                           
  5763                           ;main.c: 675: ADCON1bits.PCFG = 0b1111;
  5764  001482  0E0F               	movlw	15
  5765  001484  12C1               	iorwf	193,f,c	;volatile
  5766                           
  5767                           ;main.c: 677: PORTAbits.RA6 = 1;
  5768  001486  8C80               	bsf	128,6,c	;volatile
  5769                           
  5770                           ;main.c: 679: init_ds18b20();
  5771  001488  ECF0  F00A         	call	_init_ds18b20	;wreg free
  5772                           
  5773                           ;main.c: 681: T1CON = 0b10000000;
  5774  00148C  0E80               	movlw	128
  5775  00148E  6ECD               	movwf	205,c	;volatile
  5776                           
  5777                           ;main.c: 683: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
  5778  001490  0E3C               	movlw	60
  5779  001492  6ECF               	movwf	207,c	;volatile
  5780                           
  5781                           ;main.c: 684: TMR1L = ((unsigned char)((15536)&0xFF));
  5782  001494  0EB0               	movlw	176
  5783  001496  6ECE               	movwf	206,c	;volatile
  5784                           
  5785                           ;main.c: 685: IPR1bits.TMR1IP = 1;
  5786  001498  809F               	bsf	159,0,c	;volatile
  5787                           
  5788                           ;main.c: 687: T0CONbits.T0PS = 0b000;
  5789  00149A  0EF8               	movlw	-8
  5790  00149C  16D5               	andwf	213,f,c	;volatile
  5791                           
  5792                           ;main.c: 688: T0CONbits.PSA = 1;
  5793  00149E  86D5               	bsf	213,3,c	;volatile
  5794                           
  5795                           ;main.c: 689: T0CONbits.T08BIT = 0;
  5796  0014A0  9CD5               	bcf	213,6,c	;volatile
  5797                           
  5798                           ;main.c: 690: T0CONbits.T0CS = 0;
  5799  0014A2  9AD5               	bcf	213,5,c	;volatile
  5800                           
  5801                           ;main.c: 691: T0CONbits.TMR0ON = 1;
  5802  0014A4  8ED5               	bsf	213,7,c	;volatile
  5803                           
  5804                           ;main.c: 692: TMR0H = ((unsigned char)(((45536)>>8)&0xFF));
  5805  0014A6  0EB1               	movlw	177
  5806  0014A8  6ED7               	movwf	215,c	;volatile
  5807                           
  5808                           ;main.c: 693: TMR0L = ((unsigned char)((45536)&0xFF));
  5809  0014AA  0EE0               	movlw	224
  5810  0014AC  6ED6               	movwf	214,c	;volatile
  5811                           
  5812                           ;main.c: 694: INTCONbits.T0IE = 1;
  5813  0014AE  8AF2               	bsf	242,5,c	;volatile
  5814                           
  5815                           ;main.c: 695: INTCON2bits.T0IP = 0;
  5816  0014B0  94F1               	bcf	241,2,c	;volatile
  5817                           
  5818                           ;main.c: 696: INTCON2bits.RBPU = 0;
  5819  0014B2  9EF1               	bcf	241,7,c	;volatile
  5820                           
  5821                           ;main.c: 700: PIE1bits.TMR1IE = 1;
  5822  0014B4  809D               	bsf	157,0,c	;volatile
  5823                           
  5824                           ;main.c: 701: RCONbits.IPEN = 1;
  5825  0014B6  8ED0               	bsf	208,7,c	;volatile
  5826                           
  5827                           ;main.c: 702: INTCONbits.PEIE = 1;
  5828  0014B8  8CF2               	bsf	242,6,c	;volatile
  5829                           
  5830                           ;main.c: 703: INTCONbits.GIE = 1;
  5831  0014BA  8EF2               	bsf	242,7,c	;volatile
  5832                           
  5833                           ;main.c: 704: initLCD();
  5834  0014BC  ECB0  F008         	call	_initLCD	;wreg free
  5835                           
  5836                           ;main.c: 705: init_uart();
  5837  0014C0  EC66  F00D         	call	_init_uart	;wreg free
  5838                           
  5839                           ;main.c: 706: cgrom_char(symbol_4, 1);
  5840  0014C4  0EE7               	movlw	low _symbol_4
  5841  0014C6  6E49               	movwf	cgrom_char@symbol^0,c
  5842  0014C8  0E1E               	movlw	high _symbol_4
  5843  0014CA  6E4A               	movwf	(cgrom_char@symbol+1)^0,c
  5844  0014CC  0E01               	movlw	1
  5845  0014CE  6E4B               	movwf	cgrom_char@address^0,c
  5846  0014D0  EC96  F00C         	call	_cgrom_char	;wreg free
  5847                           
  5848                           ;main.c: 707: cgrom_char(symbol_5, 2);
  5849  0014D4  0EDF               	movlw	low _symbol_5
  5850  0014D6  6E49               	movwf	cgrom_char@symbol^0,c
  5851  0014D8  0E1E               	movlw	high _symbol_5
  5852  0014DA  6E4A               	movwf	(cgrom_char@symbol+1)^0,c
  5853  0014DC  0E02               	movlw	2
  5854  0014DE  6E4B               	movwf	cgrom_char@address^0,c
  5855  0014E0  EC96  F00C         	call	_cgrom_char	;wreg free
  5856                           
  5857                           ;main.c: 708: LATCbits.LATC4 = 0;
  5858  0014E4  988B               	bcf	139,4,c	;volatile
  5859                           
  5860                           ;main.c: 709: snd_k = 0;
  5861  0014E6  9C66               	bcf	(_snd_k/(0+8))^0,_snd_k& (0+7),c
  5862                           
  5863                           ;main.c: 710: snd_b = 0;
  5864  0014E8  9A66               	bcf	(_snd_b/(0+8))^0,_snd_b& (0+7),c
  5865                           
  5866                           ;main.c: 711: snd_all = 0;
  5867  0014EA  9866               	bcf	(_snd_all/(0+8))^0,_snd_all& (0+7),c
  5868  0014EC  0012               	return		;funcret
  5869  0014EE                     __end_of_Main_init:
  5870                           	callstack 0
  5871                           
  5872 ;; *************** function _init_uart *****************
  5873 ;; Defined at:
  5874 ;;		line 28 in file "eusart.c"
  5875 ;; Parameters:    Size  Location     Type
  5876 ;;		None
  5877 ;; Auto vars:     Size  Location     Type
  5878 ;;		None
  5879 ;; Return value:  Size  Location     Type
  5880 ;;                  1    wreg      void 
  5881 ;; Registers used:
  5882 ;;		wreg, status,2
  5883 ;; Tracked objects:
  5884 ;;		On entry : 0/0
  5885 ;;		On exit  : 0/0
  5886 ;;		Unchanged: 0/0
  5887 ;; Data sizes:     COMRAM   BANK0   BANK1
  5888 ;;      Params:         0       0       0
  5889 ;;      Locals:         0       0       0
  5890 ;;      Temps:          0       0       0
  5891 ;;      Totals:         0       0       0
  5892 ;;Total ram usage:        0 bytes
  5893 ;; Hardware stack levels used: 1
  5894 ;; Hardware stack levels required when called: 2
  5895 ;; This function calls:
  5896 ;;		Nothing
  5897 ;; This function is called by:
  5898 ;;		_Main_init
  5899 ;; This function uses a non-reentrant model
  5900 ;;
  5901                           
  5902                           	psect	text22
  5903  001ACC                     __ptext22:
  5904                           	callstack 0
  5905  001ACC                     _init_uart:
  5906                           	callstack 27
  5907                           
  5908                           ;eusart.c: 30: TRISCbits.RC6 = 0;
  5909                           
  5910                           ;incstack = 0
  5911  001ACC  9C94               	bcf	148,6,c	;volatile
  5912                           
  5913                           ;eusart.c: 31: TRISCbits.RC7 = 1;
  5914  001ACE  8E94               	bsf	148,7,c	;volatile
  5915                           
  5916                           ;eusart.c: 32: TXSTAbits.SYNC = 0;
  5917  001AD0  98AC               	bcf	172,4,c	;volatile
  5918                           
  5919                           ;eusart.c: 33: TXSTAbits.TXEN = 1;
  5920  001AD2  8AAC               	bsf	172,5,c	;volatile
  5921                           
  5922                           ;eusart.c: 34: RCSTAbits.CREN = 1;
  5923  001AD4  88AB               	bsf	171,4,c	;volatile
  5924                           
  5925                           ;eusart.c: 35: RCSTAbits.SPEN = 1;
  5926  001AD6  8EAB               	bsf	171,7,c	;volatile
  5927                           
  5928                           ;eusart.c: 38: TXSTAbits.BRGH = 1;
  5929  001AD8  84AC               	bsf	172,2,c	;volatile
  5930                           
  5931                           ;eusart.c: 39: SPBRG = 0x33;
  5932  001ADA  0E33               	movlw	51
  5933  001ADC  6EAF               	movwf	175,c	;volatile
  5934                           
  5935                           ;eusart.c: 52: eusartTxHead = 0;
  5936  001ADE  6A2D               	clrf	_eusartTxHead^0,c
  5937                           
  5938                           ;eusart.c: 57: eusartRxTail = 0;
  5939  001AE0  0E10               	movlw	16
  5940  001AE2  6E2C               	movwf	_eusartTxBufferRemaining^0,c	;volatile
  5941                           
  5942                           ;eusart.c: 58: eusartRxCount = 0;
  5943  001AE4  6A2B               	clrf	_eusartRxCount^0,c	;volatile
  5944  001AE6  0012               	return		;funcret
  5945  001AE8                     __end_of_init_uart:
  5946                           	callstack 0
  5947                           
  5948 ;; *************** function _init_ds18b20 *****************
  5949 ;; Defined at:
  5950 ;;		line 18 in file "ds18b20.c"
  5951 ;; Parameters:    Size  Location     Type
  5952 ;;		None
  5953 ;; Auto vars:     Size  Location     Type
  5954 ;;  i               1   12[COMRAM] unsigned char 
  5955 ;;  q               1   11[COMRAM] unsigned char 
  5956 ;; Return value:  Size  Location     Type
  5957 ;;                  1    wreg      void 
  5958 ;; Registers used:
  5959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5960 ;; Tracked objects:
  5961 ;;		On entry : 0/0
  5962 ;;		On exit  : 0/0
  5963 ;;		Unchanged: 0/0
  5964 ;; Data sizes:     COMRAM   BANK0   BANK1
  5965 ;;      Params:         0       0       0
  5966 ;;      Locals:         2       0       0
  5967 ;;      Temps:          2       0       0
  5968 ;;      Totals:         4       0       0
  5969 ;;Total ram usage:        4 bytes
  5970 ;; Hardware stack levels used: 1
  5971 ;; Hardware stack levels required when called: 4
  5972 ;; This function calls:
  5973 ;;		_ow_reset
  5974 ;;		_read_eep
  5975 ;;		_write_byte
  5976 ;; This function is called by:
  5977 ;;		_Main_init
  5978 ;; This function uses a non-reentrant model
  5979 ;;
  5980                           
  5981                           	psect	text23
  5982  0015E0                     __ptext23:
  5983                           	callstack 0
  5984  0015E0                     _init_ds18b20:
  5985                           	callstack 25
  5986                           
  5987                           ;ds18b20.c: 20: if (!ow_reset())
  5988                           
  5989                           ;incstack = 0
  5990  0015E0  ECAF  F00C         	call	_ow_reset	;wreg free
  5991  0015E4  0900               	iorlw	0
  5992  0015E6  E10F               	bnz	l2861
  5993                           
  5994                           ;ds18b20.c: 21: {;ds18b20.c: 23: write_byte(0xCC);
  5995  0015E8  0ECC               	movlw	204
  5996  0015EA  EC61  F00C         	call	_write_byte
  5997                           
  5998                           ;ds18b20.c: 24: write_byte(0x4E);
  5999  0015EE  0E4E               	movlw	78
  6000  0015F0  EC61  F00C         	call	_write_byte
  6001                           
  6002                           ;ds18b20.c: 25: write_byte(0x00);
  6003  0015F4  0E00               	movlw	0
  6004  0015F6  EC61  F00C         	call	_write_byte
  6005                           
  6006                           ;ds18b20.c: 26: write_byte(0x00);
  6007  0015FA  0E00               	movlw	0
  6008  0015FC  EC61  F00C         	call	_write_byte
  6009                           
  6010                           ;ds18b20.c: 27: write_byte(0x7F);
  6011  001600  0E7F               	movlw	127
  6012  001602  EC61  F00C         	call	_write_byte
  6013  001606                     l2861:
  6014                           
  6015                           ;ds18b20.c: 28: };ds18b20.c: 30: for (uint8_t q = 0; q < 2; q++) {
  6016  001606  6A4D               	clrf	init_ds18b20@q^0,c
  6017  001608                     l413:
  6018                           
  6019                           ;ds18b20.c: 31: for (uint8_t i = 0; i < 8; i++) {
  6020  001608  6A4E               	clrf	init_ds18b20@i^0,c
  6021  00160A                     l2871:
  6022                           
  6023                           ;ds18b20.c: 32: rom_dq[q][i] = read_eep((q*8) + i);
  6024  00160A  504D               	movf	init_ds18b20@q^0,w,c
  6025  00160C  0D08               	mullw	8
  6026  00160E  50F3               	movf	243,w,c
  6027  001610  0F11               	addlw	low _rom_dq
  6028  001612  244E               	addwf	init_ds18b20@i^0,w,c
  6029  001614  6ED9               	movwf	fsr2l,c
  6030  001616  6ADA               	clrf	fsr2h,c
  6031  001618  504D               	movf	init_ds18b20@q^0,w,c
  6032  00161A  6E4B               	movwf	??_init_ds18b20^0,c
  6033  00161C  6A4C               	clrf	(??_init_ds18b20+1)^0,c
  6034  00161E  90D8               	bcf	status,0,c
  6035  001620  364B               	rlcf	??_init_ds18b20^0,f,c
  6036  001622  364C               	rlcf	(??_init_ds18b20+1)^0,f,c
  6037  001624  90D8               	bcf	status,0,c
  6038  001626  364B               	rlcf	??_init_ds18b20^0,f,c
  6039  001628  364C               	rlcf	(??_init_ds18b20+1)^0,f,c
  6040  00162A  90D8               	bcf	status,0,c
  6041  00162C  364B               	rlcf	??_init_ds18b20^0,f,c
  6042  00162E  364C               	rlcf	(??_init_ds18b20+1)^0,f,c
  6043  001630  504E               	movf	init_ds18b20@i^0,w,c
  6044  001632  244B               	addwf	??_init_ds18b20^0,w,c
  6045  001634  6E45               	movwf	read_eep@address^0,c
  6046  001636  0E00               	movlw	0
  6047  001638  204C               	addwfc	(??_init_ds18b20+1)^0,w,c
  6048  00163A  6E46               	movwf	(read_eep@address+1)^0,c
  6049  00163C  EC8C  F00D         	call	_read_eep	;wreg free
  6050  001640  6EDF               	movwf	indf2,c
  6051  001642  2A4E               	incf	init_ds18b20@i^0,f,c
  6052  001644  0E07               	movlw	7
  6053  001646  644E               	cpfsgt	init_ds18b20@i^0,c
  6054  001648  D7E0               	goto	l2871
  6055  00164A  2A4D               	incf	init_ds18b20@q^0,f,c
  6056  00164C  0E01               	movlw	1
  6057  00164E  644D               	cpfsgt	init_ds18b20@q^0,c
  6058  001650  D7DB               	goto	l413
  6059  001652  0C01               	retlw	1
  6060  001654                     __end_of_init_ds18b20:
  6061                           	callstack 0
  6062                           
  6063 ;; *************** function _write_byte *****************
  6064 ;; Defined at:
  6065 ;;		line 66 in file "onewire.c"
  6066 ;; Parameters:    Size  Location     Type
  6067 ;;  val             1    wreg     unsigned char 
  6068 ;; Auto vars:     Size  Location     Type
  6069 ;;  val             1    6[COMRAM] unsigned char 
  6070 ;;  i               1    8[COMRAM] unsigned char 
  6071 ;;  temp            1    7[COMRAM] unsigned char 
  6072 ;; Return value:  Size  Location     Type
  6073 ;;                  1    wreg      void 
  6074 ;; Registers used:
  6075 ;;		wreg, status,2, status,0, cstack
  6076 ;; Tracked objects:
  6077 ;;		On entry : 0/0
  6078 ;;		On exit  : 0/0
  6079 ;;		Unchanged: 0/0
  6080 ;; Data sizes:     COMRAM   BANK0   BANK1
  6081 ;;      Params:         0       0       0
  6082 ;;      Locals:         3       0       0
  6083 ;;      Temps:          2       0       0
  6084 ;;      Totals:         5       0       0
  6085 ;;Total ram usage:        5 bytes
  6086 ;; Hardware stack levels used: 1
  6087 ;; Hardware stack levels required when called: 3
  6088 ;; This function calls:
  6089 ;;		_write_bit
  6090 ;; This function is called by:
  6091 ;;		_init_ds18b20
  6092 ;;		_ds18b20_readTemp
  6093 ;;		_ds18b20_readrom
  6094 ;; This function uses a non-reentrant model
  6095 ;;
  6096                           
  6097                           	psect	text24
  6098  0018C2                     __ptext24:
  6099                           	callstack 0
  6100  0018C2                     _write_byte:
  6101                           	callstack 26
  6102                           
  6103                           ;incstack = 0
  6104                           ;write_byte@val stored from wreg
  6105  0018C2  6E48               	movwf	write_byte@val^0,c
  6106                           
  6107                           ;onewire.c: 68: uint8_t i;;onewire.c: 69: uint8_t temp;;onewire.c: 71: for (i=0;i<8;i++)
  6108  0018C4  6A4A               	clrf	write_byte@i^0,c
  6109  0018C6                     l2787:
  6110                           
  6111                           ;onewire.c: 72: {;onewire.c: 73: temp = val >> i;
  6112  0018C6  C04A  F046         	movff	write_byte@i,??_write_byte
  6113  0018CA  C048  F047         	movff	write_byte@val,??_write_byte+1
  6114  0018CE  2A46               	incf	??_write_byte^0,f,c
  6115  0018D0  D002               	goto	u1814
  6116  0018D2                     u1815:
  6117  0018D2  90D8               	bcf	status,0,c
  6118  0018D4  3247               	rrcf	(??_write_byte+1)^0,f,c
  6119  0018D6                     u1814:
  6120  0018D6  2E46               	decfsz	??_write_byte^0,f,c
  6121  0018D8  D7FC               	goto	u1815
  6122  0018DA  5047               	movf	(??_write_byte+1)^0,w,c
  6123  0018DC  6E49               	movwf	write_byte@temp^0,c
  6124                           
  6125                           ;onewire.c: 74: temp &= 0x01;
  6126  0018DE  0E01               	movlw	1
  6127  0018E0  1649               	andwf	write_byte@temp^0,f,c
  6128                           
  6129                           ;onewire.c: 75: write_bit(temp);
  6130  0018E2  5049               	movf	write_byte@temp^0,w,c
  6131  0018E4  EC49  F00D         	call	_write_bit
  6132  0018E8  2A4A               	incf	write_byte@i^0,f,c
  6133  0018EA  0E07               	movlw	7
  6134  0018EC  644A               	cpfsgt	write_byte@i^0,c
  6135  0018EE  D7EB               	goto	l2787
  6136                           
  6137                           ;onewire.c: 76: };onewire.c: 78: _delay((unsigned long)((105)*(8000000/4000000.0)));
  6138  0018F0  0E46               	movlw	70
  6139  0018F2                     u3307:
  6140  0018F2  2EE8               	decfsz	wreg,f,c
  6141  0018F4  D7FE               	bra	u3307
  6142  0018F6  0012               	return		;funcret
  6143  0018F8                     __end_of_write_byte:
  6144                           	callstack 0
  6145                           
  6146 ;; *************** function _write_bit *****************
  6147 ;; Defined at:
  6148 ;;		line 34 in file "onewire.c"
  6149 ;; Parameters:    Size  Location     Type
  6150 ;;  bitval          1    wreg     unsigned char 
  6151 ;; Auto vars:     Size  Location     Type
  6152 ;;  bitval          1    3[COMRAM] unsigned char 
  6153 ;; Return value:  Size  Location     Type
  6154 ;;                  1    wreg      void 
  6155 ;; Registers used:
  6156 ;;		wreg, status,2, status,0, cstack
  6157 ;; Tracked objects:
  6158 ;;		On entry : 0/0
  6159 ;;		On exit  : 0/0
  6160 ;;		Unchanged: 0/0
  6161 ;; Data sizes:     COMRAM   BANK0   BANK1
  6162 ;;      Params:         0       0       0
  6163 ;;      Locals:         1       0       0
  6164 ;;      Temps:          0       0       0
  6165 ;;      Totals:         1       0       0
  6166 ;;Total ram usage:        1 bytes
  6167 ;; Hardware stack levels used: 1
  6168 ;; Hardware stack levels required when called: 2
  6169 ;; This function calls:
  6170 ;;		Nothing
  6171 ;; This function is called by:
  6172 ;;		_write_byte
  6173 ;; This function uses a non-reentrant model
  6174 ;;
  6175                           
  6176                           	psect	text25
  6177  001A92                     __ptext25:
  6178                           	callstack 0
  6179  001A92                     _write_bit:
  6180                           	callstack 26
  6181                           
  6182                           ;incstack = 0
  6183                           ;write_bit@bitval stored from wreg
  6184  001A92  6E45               	movwf	write_bit@bitval^0,c
  6185                           
  6186                           ;onewire.c: 36: PORTAbits.RA6 = 0;
  6187  001A94  9C80               	bcf	128,6,c	;volatile
  6188                           
  6189                           ;onewire.c: 37: TRISAbits.TRISA6 = 0;
  6190  001A96  9C92               	bcf	146,6,c	;volatile
  6191                           
  6192                           ;onewire.c: 38: if(bitval == 1) {
  6193  001A98  0445               	decf	write_bit@bitval^0,w,c
  6194  001A9A  E104               	bnz	l2753
  6195                           
  6196                           ;onewire.c: 39: _delay((unsigned long)((2)*(8000000/4000000.0)));
  6197  001A9C  D000               	nop2		;2 cycle nop
  6198  001A9E  D000               	nop2		;2 cycle nop
  6199                           
  6200                           ;onewire.c: 40: PORTAbits.RA6 = 1;
  6201  001AA0  8C80               	bsf	128,6,c	;volatile
  6202                           
  6203                           ;onewire.c: 41: TRISAbits.TRISA6 = 1;
  6204  001AA2  8C92               	bsf	146,6,c	;volatile
  6205  001AA4                     l2753:
  6206                           
  6207                           ;onewire.c: 42: };onewire.c: 43: _delay((unsigned long)((105)*(8000000/4000000.0)));
  6208  001AA4  0E46               	movlw	70
  6209  001AA6                     u3317:
  6210  001AA6  2EE8               	decfsz	wreg,f,c
  6211  001AA8  D7FE               	bra	u3317
  6212                           
  6213                           ;onewire.c: 44: PORTAbits.RA6 = 1;
  6214  001AAA  8C80               	bsf	128,6,c	;volatile
  6215                           
  6216                           ;onewire.c: 45: TRISAbits.TRISA6 = 1;
  6217  001AAC  8C92               	bsf	146,6,c	;volatile
  6218  001AAE  0012               	return		;funcret
  6219  001AB0                     __end_of_write_bit:
  6220                           	callstack 0
  6221                           
  6222 ;; *************** function _read_eep *****************
  6223 ;; Defined at:
  6224 ;;		line 25 in file "eeprom.c"
  6225 ;; Parameters:    Size  Location     Type
  6226 ;;  address         2    3[COMRAM] unsigned short 
  6227 ;; Auto vars:     Size  Location     Type
  6228 ;;		None
  6229 ;; Return value:  Size  Location     Type
  6230 ;;                  1    wreg      unsigned char 
  6231 ;; Registers used:
  6232 ;;		wreg, status,2
  6233 ;; Tracked objects:
  6234 ;;		On entry : 0/0
  6235 ;;		On exit  : 0/0
  6236 ;;		Unchanged: 0/0
  6237 ;; Data sizes:     COMRAM   BANK0   BANK1
  6238 ;;      Params:         2       0       0
  6239 ;;      Locals:         0       0       0
  6240 ;;      Temps:          0       0       0
  6241 ;;      Totals:         2       0       0
  6242 ;;Total ram usage:        2 bytes
  6243 ;; Hardware stack levels used: 1
  6244 ;; Hardware stack levels required when called: 2
  6245 ;; This function calls:
  6246 ;;		Nothing
  6247 ;; This function is called by:
  6248 ;;		_main
  6249 ;;		_outValPreset
  6250 ;;		_init_ds18b20
  6251 ;; This function uses a non-reentrant model
  6252 ;;
  6253                           
  6254                           	psect	text26
  6255  001B18                     __ptext26:
  6256                           	callstack 0
  6257  001B18                     _read_eep:
  6258                           	callstack 28
  6259                           
  6260                           ;eeprom.c: 28: {}
  6261                           
  6262                           ;incstack = 0
  6263  001B18  B2A6               	btfsc	166,1,c	;volsfr
  6264  001B1A  D7FE               	goto	__ptext26
  6265                           
  6266                           ;eeprom.c: 30: EEADR = address;
  6267  001B1C  C045  FFA9         	movff	read_eep@address,4009	;volatile
  6268                           
  6269                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
  6270  001B20  9EA6               	bcf	166,7,c	;volsfr
  6271                           
  6272                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
  6273  001B22  9CA6               	bcf	166,6,c	;volsfr
  6274                           
  6275                           ;eeprom.c: 33: EECON1bits.RD = 1;
  6276  001B24  80A6               	bsf	166,0,c	;volsfr
  6277                           
  6278                           ;eeprom.c: 34: return( EEDATA );
  6279  001B26  50A8               	movf	168,w,c	;volatile
  6280  001B28  0012               	return		;funcret
  6281  001B2A                     __end_of_read_eep:
  6282                           	callstack 0
  6283                           
  6284 ;; *************** function _ow_reset *****************
  6285 ;; Defined at:
  6286 ;;		line 5 in file "onewire.c"
  6287 ;; Parameters:    Size  Location     Type
  6288 ;;		None
  6289 ;; Auto vars:     Size  Location     Type
  6290 ;;  presence        1    3[COMRAM] unsigned char 
  6291 ;; Return value:  Size  Location     Type
  6292 ;;                  1    wreg      unsigned char 
  6293 ;; Registers used:
  6294 ;;		wreg, status,2
  6295 ;; Tracked objects:
  6296 ;;		On entry : 0/0
  6297 ;;		On exit  : 0/0
  6298 ;;		Unchanged: 0/0
  6299 ;; Data sizes:     COMRAM   BANK0   BANK1
  6300 ;;      Params:         0       0       0
  6301 ;;      Locals:         1       0       0
  6302 ;;      Temps:          0       0       0
  6303 ;;      Totals:         1       0       0
  6304 ;;Total ram usage:        1 bytes
  6305 ;; Hardware stack levels used: 1
  6306 ;; Hardware stack levels required when called: 2
  6307 ;; This function calls:
  6308 ;;		Nothing
  6309 ;; This function is called by:
  6310 ;;		_init_ds18b20
  6311 ;;		_ds18b20_readTemp
  6312 ;;		_ds18b20_readrom
  6313 ;; This function uses a non-reentrant model
  6314 ;;
  6315                           
  6316                           	psect	text27
  6317  00195E                     __ptext27:
  6318                           	callstack 0
  6319  00195E                     _ow_reset:
  6320                           	callstack 27
  6321                           
  6322                           ;onewire.c: 7: uint8_t presence;;onewire.c: 8: PORTAbits.RA6 = 0;
  6323                           
  6324                           ;incstack = 0
  6325  00195E  9C80               	bcf	128,6,c	;volatile
  6326                           
  6327                           ;onewire.c: 9: TRISAbits.TRISA6 = 0;
  6328  001960  9C92               	bcf	146,6,c	;volatile
  6329                           
  6330                           ;onewire.c: 10: _delay((unsigned long)((500)*(8000000/4000000.0)));
  6331  001962  0EC8               	movlw	200
  6332  001964                     u3327:
  6333  001964  D000               	nop2	
  6334  001966  2EE8               	decfsz	wreg,f,c
  6335  001968  D7FD               	bra	u3327
  6336                           
  6337                           ;onewire.c: 11: PORTAbits.RA6 = 1;
  6338  00196A  8C80               	bsf	128,6,c	;volatile
  6339                           
  6340                           ;onewire.c: 12: TRISAbits.TRISA6 = 1;
  6341  00196C  8C92               	bsf	146,6,c	;volatile
  6342                           
  6343                           ;onewire.c: 13: _delay((unsigned long)((100)*(8000000/4000000.0)));
  6344  00196E  0E42               	movlw	66
  6345  001970                     u3337:
  6346  001970  2EE8               	decfsz	wreg,f,c
  6347  001972  D7FE               	bra	u3337
  6348  001974  D000               	nop2	
  6349                           
  6350                           ;onewire.c: 14: presence = PORTAbits.RA6;
  6351  001976  0E00               	movlw	0
  6352  001978  BC80               	btfsc	128,6,c	;volatile
  6353  00197A  0E01               	movlw	1
  6354  00197C  6E45               	movwf	ow_reset@presence^0,c
  6355                           
  6356                           ;onewire.c: 15: _delay((unsigned long)((424)*(8000000/4000000.0)));
  6357  00197E  0EA9               	movlw	169
  6358  001980                     u3347:
  6359  001980  D000               	nop2	
  6360  001982  2EE8               	decfsz	wreg,f,c
  6361  001984  D7FD               	bra	u3347
  6362  001986  D000               	nop2	
  6363  001988  F000               	nop	
  6364                           
  6365                           ;onewire.c: 16: return(presence);
  6366  00198A  5045               	movf	ow_reset@presence^0,w,c
  6367  00198C  0012               	return		;funcret
  6368  00198E                     __end_of_ow_reset:
  6369                           	callstack 0
  6370                           
  6371 ;; *************** function _initLCD *****************
  6372 ;; Defined at:
  6373 ;;		line 10 in file "hd44780.c"
  6374 ;; Parameters:    Size  Location     Type
  6375 ;;		None
  6376 ;; Auto vars:     Size  Location     Type
  6377 ;;		None
  6378 ;; Return value:  Size  Location     Type
  6379 ;;                  1    wreg      void 
  6380 ;; Registers used:
  6381 ;;		wreg, status,2, status,0, cstack
  6382 ;; Tracked objects:
  6383 ;;		On entry : 0/0
  6384 ;;		On exit  : 0/0
  6385 ;;		Unchanged: 0/0
  6386 ;; Data sizes:     COMRAM   BANK0   BANK1
  6387 ;;      Params:         0       0       0
  6388 ;;      Locals:         0       0       0
  6389 ;;      Temps:          1       0       0
  6390 ;;      Totals:         1       0       0
  6391 ;;Total ram usage:        1 bytes
  6392 ;; Hardware stack levels used: 1
  6393 ;; Hardware stack levels required when called: 5
  6394 ;; This function calls:
  6395 ;;		_clearLCD
  6396 ;;		_lcdNibble
  6397 ;;		_lcdWrite
  6398 ;; This function is called by:
  6399 ;;		_Main_init
  6400 ;; This function uses a non-reentrant model
  6401 ;;
  6402                           
  6403                           	psect	text28
  6404  001160                     __ptext28:
  6405                           	callstack 0
  6406  001160                     _initLCD:
  6407                           	callstack 24
  6408                           
  6409                           ;hd44780.c: 11: LATAbits.LATA2 = 0;
  6410                           
  6411                           ;incstack = 0
  6412  001160  9489               	bcf	137,2,c	;volatile
  6413                           
  6414                           ;hd44780.c: 12: LATAbits.LATA1 = 0;
  6415  001162  9289               	bcf	137,1,c	;volatile
  6416                           
  6417                           ;hd44780.c: 14: _delay((unsigned long)((10)*(8000000/4000.0)));
  6418  001164  0E1A               	movlw	26
  6419  001166  6E4A               	movwf	??_initLCD^0,c
  6420  001168  0EF8               	movlw	248
  6421  00116A                     u3357:
  6422  00116A  2EE8               	decfsz	wreg,f,c
  6423  00116C  D7FE               	bra	u3357
  6424  00116E  2E4A               	decfsz	??_initLCD^0,f,c
  6425  001170  D7FC               	bra	u3357
  6426  001172  D000               	nop2	
  6427                           
  6428                           ;hd44780.c: 15: _delay((unsigned long)((10)*(8000000/4000.0)));
  6429  001174  0E1A               	movlw	26
  6430  001176  6E4A               	movwf	??_initLCD^0,c
  6431  001178  0EF8               	movlw	248
  6432  00117A                     u3367:
  6433  00117A  2EE8               	decfsz	wreg,f,c
  6434  00117C  D7FE               	bra	u3367
  6435  00117E  2E4A               	decfsz	??_initLCD^0,f,c
  6436  001180  D7FC               	bra	u3367
  6437  001182  D000               	nop2	
  6438                           
  6439                           ;hd44780.c: 16: _delay((unsigned long)((10)*(8000000/4000.0)));
  6440  001184  0E1A               	movlw	26
  6441  001186  6E4A               	movwf	??_initLCD^0,c
  6442  001188  0EF8               	movlw	248
  6443  00118A                     u3377:
  6444  00118A  2EE8               	decfsz	wreg,f,c
  6445  00118C  D7FE               	bra	u3377
  6446  00118E  2E4A               	decfsz	??_initLCD^0,f,c
  6447  001190  D7FC               	bra	u3377
  6448  001192  D000               	nop2	
  6449                           
  6450                           ;hd44780.c: 17: _delay((unsigned long)((10)*(8000000/4000.0)));
  6451  001194  0E1A               	movlw	26
  6452  001196  6E4A               	movwf	??_initLCD^0,c
  6453  001198  0EF8               	movlw	248
  6454  00119A                     u3387:
  6455  00119A  2EE8               	decfsz	wreg,f,c
  6456  00119C  D7FE               	bra	u3387
  6457  00119E  2E4A               	decfsz	??_initLCD^0,f,c
  6458  0011A0  D7FC               	bra	u3387
  6459  0011A2  D000               	nop2	
  6460                           
  6461                           ;hd44780.c: 21: lcdNibble(0b0011);
  6462  0011A4  0E03               	movlw	3
  6463  0011A6  EC77  F00A         	call	_lcdNibble
  6464                           
  6465                           ;hd44780.c: 22: _delay((unsigned long)((5)*(8000000/4000.0)));
  6466  0011AA  0E0D               	movlw	13
  6467  0011AC  6E4A               	movwf	??_initLCD^0,c
  6468  0011AE  0EFC               	movlw	252
  6469  0011B0                     u3397:
  6470  0011B0  2EE8               	decfsz	wreg,f,c
  6471  0011B2  D7FE               	bra	u3397
  6472  0011B4  2E4A               	decfsz	??_initLCD^0,f,c
  6473  0011B6  D7FC               	bra	u3397
  6474                           
  6475                           ;hd44780.c: 23: lcdNibble(0b0011);
  6476  0011B8  0E03               	movlw	3
  6477  0011BA  EC77  F00A         	call	_lcdNibble
  6478                           
  6479                           ;hd44780.c: 24: _delay((unsigned long)((5)*(8000000/4000.0)));
  6480  0011BE  0E0D               	movlw	13
  6481  0011C0  6E4A               	movwf	??_initLCD^0,c
  6482  0011C2  0EFC               	movlw	252
  6483  0011C4                     u3407:
  6484  0011C4  2EE8               	decfsz	wreg,f,c
  6485  0011C6  D7FE               	bra	u3407
  6486  0011C8  2E4A               	decfsz	??_initLCD^0,f,c
  6487  0011CA  D7FC               	bra	u3407
  6488                           
  6489                           ;hd44780.c: 25: lcdNibble(0b0011);
  6490  0011CC  0E03               	movlw	3
  6491  0011CE  EC77  F00A         	call	_lcdNibble
  6492                           
  6493                           ;hd44780.c: 26: _delay((unsigned long)((5)*(8000000/4000.0)));
  6494  0011D2  0E0D               	movlw	13
  6495  0011D4  6E4A               	movwf	??_initLCD^0,c
  6496  0011D6  0EFC               	movlw	252
  6497  0011D8                     u3417:
  6498  0011D8  2EE8               	decfsz	wreg,f,c
  6499  0011DA  D7FE               	bra	u3417
  6500  0011DC  2E4A               	decfsz	??_initLCD^0,f,c
  6501  0011DE  D7FC               	bra	u3417
  6502                           
  6503                           ;hd44780.c: 27: lcdNibble(0b0010);
  6504  0011E0  0E02               	movlw	2
  6505  0011E2  EC77  F00A         	call	_lcdNibble
  6506                           
  6507                           ;hd44780.c: 28: _delay((unsigned long)((5)*(8000000/4000.0)));
  6508  0011E6  0E0D               	movlw	13
  6509  0011E8  6E4A               	movwf	??_initLCD^0,c
  6510  0011EA  0EFC               	movlw	252
  6511  0011EC                     u3427:
  6512  0011EC  2EE8               	decfsz	wreg,f,c
  6513  0011EE  D7FE               	bra	u3427
  6514  0011F0  2E4A               	decfsz	??_initLCD^0,f,c
  6515  0011F2  D7FC               	bra	u3427
  6516                           
  6517                           ;hd44780.c: 31: lcdWrite(((0b0010 << 4) | (1 << 3)), COMMAND);
  6518  0011F4  0E00               	movlw	0
  6519  0011F6  6E47               	movwf	lcdWrite@type^0,c
  6520  0011F8  0E28               	movlw	40
  6521  0011FA  EC16  F00D         	call	_lcdWrite
  6522                           
  6523                           ;hd44780.c: 32: _delay((unsigned long)((5)*(8000000/4000.0)));
  6524  0011FE  0E0D               	movlw	13
  6525  001200  6E4A               	movwf	??_initLCD^0,c
  6526  001202  0EFC               	movlw	252
  6527  001204                     u3437:
  6528  001204  2EE8               	decfsz	wreg,f,c
  6529  001206  D7FE               	bra	u3437
  6530  001208  2E4A               	decfsz	??_initLCD^0,f,c
  6531  00120A  D7FC               	bra	u3437
  6532                           
  6533                           ;hd44780.c: 33: lcdWrite(((0b1100) | (0 << 1) | (0 << 0)), COMMAND);
  6534  00120C  0E00               	movlw	0
  6535  00120E  6E47               	movwf	lcdWrite@type^0,c
  6536  001210  0E0C               	movlw	12
  6537  001212  EC16  F00D         	call	_lcdWrite
  6538                           
  6539                           ;hd44780.c: 34: _delay((unsigned long)((8)*(8000000/4000.0)));
  6540  001216  0E15               	movlw	21
  6541  001218  6E4A               	movwf	??_initLCD^0,c
  6542  00121A  0EC6               	movlw	198
  6543  00121C                     u3447:
  6544  00121C  2EE8               	decfsz	wreg,f,c
  6545  00121E  D7FE               	bra	u3447
  6546  001220  2E4A               	decfsz	??_initLCD^0,f,c
  6547  001222  D7FC               	bra	u3447
  6548  001224  D000               	nop2	
  6549                           
  6550                           ;hd44780.c: 35: clearLCD();
  6551  001226  EC74  F00D         	call	_clearLCD	;wreg free
  6552                           
  6553                           ;hd44780.c: 36: _delay((unsigned long)((5)*(8000000/4000.0)));
  6554  00122A  0E0D               	movlw	13
  6555  00122C  6E4A               	movwf	??_initLCD^0,c
  6556  00122E  0EFC               	movlw	252
  6557  001230                     u3457:
  6558  001230  2EE8               	decfsz	wreg,f,c
  6559  001232  D7FE               	bra	u3457
  6560  001234  2E4A               	decfsz	??_initLCD^0,f,c
  6561  001236  D7FC               	bra	u3457
  6562                           
  6563                           ;hd44780.c: 37: lcdWrite(0x06, COMMAND);
  6564  001238  0E00               	movlw	0
  6565  00123A  6E47               	movwf	lcdWrite@type^0,c
  6566  00123C  0E06               	movlw	6
  6567  00123E  EC16  F00D         	call	_lcdWrite
  6568                           
  6569                           ;hd44780.c: 38: _delay((unsigned long)((5)*(8000000/4000.0)));
  6570  001242  0E0D               	movlw	13
  6571  001244  6E4A               	movwf	??_initLCD^0,c
  6572  001246  0EFC               	movlw	252
  6573  001248                     u3467:
  6574  001248  2EE8               	decfsz	wreg,f,c
  6575  00124A  D7FE               	bra	u3467
  6576  00124C  2E4A               	decfsz	??_initLCD^0,f,c
  6577  00124E  D7FC               	bra	u3467
  6578                           
  6579                           ;hd44780.c: 39: clearLCD();
  6580  001250  EC74  F00D         	call	_clearLCD	;wreg free
  6581                           
  6582                           ;hd44780.c: 41: LATAbits.LATA2 = 1;
  6583  001254  8489               	bsf	137,2,c	;volatile
  6584  001256  0012               	return		;funcret
  6585  001258                     __end_of_initLCD:
  6586                           	callstack 0
  6587                           
  6588 ;; *************** function _clearLCD *****************
  6589 ;; Defined at:
  6590 ;;		line 45 in file "hd44780.c"
  6591 ;; Parameters:    Size  Location     Type
  6592 ;;		None
  6593 ;; Auto vars:     Size  Location     Type
  6594 ;;		None
  6595 ;; Return value:  Size  Location     Type
  6596 ;;                  1    wreg      void 
  6597 ;; Registers used:
  6598 ;;		wreg, status,2, status,0, cstack
  6599 ;; Tracked objects:
  6600 ;;		On entry : 0/0
  6601 ;;		On exit  : 0/0
  6602 ;;		Unchanged: 0/0
  6603 ;; Data sizes:     COMRAM   BANK0   BANK1
  6604 ;;      Params:         0       0       0
  6605 ;;      Locals:         0       0       0
  6606 ;;      Temps:          1       0       0
  6607 ;;      Totals:         1       0       0
  6608 ;;Total ram usage:        1 bytes
  6609 ;; Hardware stack levels used: 1
  6610 ;; Hardware stack levels required when called: 4
  6611 ;; This function calls:
  6612 ;;		_lcdWrite
  6613 ;; This function is called by:
  6614 ;;		_main
  6615 ;;		_initLCD
  6616 ;; This function uses a non-reentrant model
  6617 ;;
  6618                           
  6619                           	psect	text29
  6620  001AE8                     __ptext29:
  6621                           	callstack 0
  6622  001AE8                     _clearLCD:
  6623                           	callstack 0
  6624                           
  6625                           ;hd44780.c: 46: lcdWrite(0x01, COMMAND);
  6626                           
  6627                           ;incstack = 0
  6628  001AE8  ECEB  F009         	call	PL68	;call to abstracted procedure
  6629  001AEC  EC16  F00D         	call	_lcdWrite
  6630                           
  6631                           ;hd44780.c: 47: _delay((unsigned long)((2)*(8000000/4000.0)));
  6632  001AF0  0E06               	movlw	6
  6633  001AF2  6E49               	movwf	??_clearLCD^0,c
  6634  001AF4  0E30               	movlw	48
  6635  001AF6                     u3477:
  6636  001AF6  2EE8               	decfsz	wreg,f,c
  6637  001AF8  D7FE               	bra	u3477
  6638  001AFA  2E49               	decfsz	??_clearLCD^0,f,c
  6639  001AFC  D7FC               	bra	u3477
  6640  001AFE  D000               	nop2	
  6641  001B00  0012               	return		;funcret
  6642  001B02                     __end_of_clearLCD:
  6643                           	callstack 0
  6644                           
  6645 ;; *************** function _cgrom_char *****************
  6646 ;; Defined at:
  6647 ;;		line 127 in file "hd44780.c"
  6648 ;; Parameters:    Size  Location     Type
  6649 ;;  symbol          2    7[COMRAM] PTR unsigned char 
  6650 ;;		 -> symbol_5(8), symbol_4(8), 
  6651 ;;  address         1    9[COMRAM] unsigned char 
  6652 ;; Auto vars:     Size  Location     Type
  6653 ;;  i               1   10[COMRAM] unsigned char 
  6654 ;; Return value:  Size  Location     Type
  6655 ;;                  1    wreg      void 
  6656 ;; Registers used:
  6657 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6658 ;; Tracked objects:
  6659 ;;		On entry : 0/0
  6660 ;;		On exit  : 0/0
  6661 ;;		Unchanged: 0/0
  6662 ;; Data sizes:     COMRAM   BANK0   BANK1
  6663 ;;      Params:         3       0       0
  6664 ;;      Locals:         1       0       0
  6665 ;;      Temps:          0       0       0
  6666 ;;      Totals:         4       0       0
  6667 ;;Total ram usage:        4 bytes
  6668 ;; Hardware stack levels used: 1
  6669 ;; Hardware stack levels required when called: 4
  6670 ;; This function calls:
  6671 ;;		_lcdWrite
  6672 ;; This function is called by:
  6673 ;;		_Main_init
  6674 ;; This function uses a non-reentrant model
  6675 ;;
  6676                           
  6677                           	psect	text30
  6678  00192C                     __ptext30:
  6679                           	callstack 0
  6680  00192C                     _cgrom_char:
  6681                           	callstack 25
  6682                           
  6683                           ;hd44780.c: 128: uint8_t i;;hd44780.c: 129: lcdWrite(0x40 | (address * 8), COMMAND);
  6684                           
  6685                           ;incstack = 0
  6686  00192C  6A47               	clrf	lcdWrite@type^0,c
  6687  00192E  504B               	movf	cgrom_char@address^0,w,c
  6688  001930  0D08               	mullw	8
  6689  001932  50F3               	movf	243,w,c
  6690  001934  0940               	iorlw	64
  6691  001936  EC16  F00D         	call	_lcdWrite
  6692                           
  6693                           ;hd44780.c: 130: for (i = 0; i < 8; i++)
  6694  00193A  6A4C               	clrf	cgrom_char@i^0,c
  6695  00193C                     l2927:
  6696                           
  6697                           ;hd44780.c: 131: lcdWrite(*symbol++, DATA);
  6698  00193C  0E01               	movlw	1
  6699  00193E  6E47               	movwf	lcdWrite@type^0,c
  6700  001940  C049  FFF6         	movff	cgrom_char@symbol,tblptrl
  6701  001944  C04A  FFF7         	movff	cgrom_char@symbol+1,tblptrh
  6702  001948                     	if	0	;tblptru may be non-zero
  6703  001948                     	endif
  6704  001948                     	if	0	;tblptru may be non-zero
  6705  001948                     	endif
  6706  001948  0008               	tblrd		*
  6707  00194A  50F5               	movf	tablat,w,c
  6708  00194C  EC16  F00D         	call	_lcdWrite
  6709  001950  4A49               	infsnz	cgrom_char@symbol^0,f,c
  6710  001952  2A4A               	incf	(cgrom_char@symbol+1)^0,f,c
  6711  001954  2A4C               	incf	cgrom_char@i^0,f,c
  6712  001956  0E07               	movlw	7
  6713  001958  644C               	cpfsgt	cgrom_char@i^0,c
  6714  00195A  D7F0               	goto	l2927
  6715  00195C  0C07               	retlw	7
  6716  00195E                     __end_of_cgrom_char:
  6717                           	callstack 0
  6718                           
  6719 ;; *************** function _lcdWrite *****************
  6720 ;; Defined at:
  6721 ;;		line 50 in file "hd44780.c"
  6722 ;; Parameters:    Size  Location     Type
  6723 ;;  byte            1    wreg     unsigned char 
  6724 ;;  type            1    5[COMRAM] enum E2035
  6725 ;; Auto vars:     Size  Location     Type
  6726 ;;  byte            1    6[COMRAM] unsigned char 
  6727 ;; Return value:  Size  Location     Type
  6728 ;;                  1    wreg      void 
  6729 ;; Registers used:
  6730 ;;		wreg, status,2, status,0, cstack
  6731 ;; Tracked objects:
  6732 ;;		On entry : 0/0
  6733 ;;		On exit  : 0/0
  6734 ;;		Unchanged: 0/0
  6735 ;; Data sizes:     COMRAM   BANK0   BANK1
  6736 ;;      Params:         1       0       0
  6737 ;;      Locals:         1       0       0
  6738 ;;      Temps:          0       0       0
  6739 ;;      Totals:         2       0       0
  6740 ;;Total ram usage:        2 bytes
  6741 ;; Hardware stack levels used: 1
  6742 ;; Hardware stack levels required when called: 3
  6743 ;; This function calls:
  6744 ;;		_lcdNibble
  6745 ;; This function is called by:
  6746 ;;		_initLCD
  6747 ;;		_clearLCD
  6748 ;;		_lcd_gotoxy
  6749 ;;		_lcd_putc
  6750 ;;		_lcdPrint
  6751 ;;		_cgrom_char
  6752 ;; This function uses a non-reentrant model
  6753 ;;
  6754                           
  6755                           	psect	text31
  6756  001A2C                     __ptext31:
  6757                           	callstack 0
  6758  001A2C                     _lcdWrite:
  6759                           	callstack 25
  6760                           
  6761                           ;incstack = 0
  6762                           ;lcdWrite@byte stored from wreg
  6763  001A2C  6E48               	movwf	lcdWrite@byte^0,c
  6764                           
  6765                           ;hd44780.c: 51: if (type == COMMAND)
  6766  001A2E  5047               	movf	lcdWrite@type^0,w,c
  6767  001A30  E102               	bnz	l483
  6768                           
  6769                           ;hd44780.c: 52: LATAbits.LATA2 = 0;
  6770  001A32  9489               	bcf	137,2,c	;volatile
  6771  001A34  D001               	goto	l2741
  6772  001A36                     l483:
  6773                           
  6774                           ;hd44780.c: 53: else;hd44780.c: 54: LATAbits.LATA2 = 1;
  6775  001A36  8489               	bsf	137,2,c	;volatile
  6776  001A38                     l2741:
  6777                           
  6778                           ;hd44780.c: 56: _delay((unsigned long)((100)*(8000000/4000000.0)));
  6779  001A38  0E42               	movlw	66
  6780  001A3A                     u3487:
  6781  001A3A  2EE8               	decfsz	wreg,f,c
  6782  001A3C  D7FE               	bra	u3487
  6783  001A3E  D000               	nop2	
  6784                           
  6785                           ;hd44780.c: 58: lcdNibble(byte >> 4);
  6786  001A40  3848               	swapf	lcdWrite@byte^0,w,c
  6787  001A42  0B0F               	andlw	15
  6788  001A44  EC77  F00A         	call	_lcdNibble
  6789                           
  6790                           ;hd44780.c: 59: lcdNibble(byte & 0x0F);
  6791  001A48  5048               	movf	lcdWrite@byte^0,w,c
  6792  001A4A  0B0F               	andlw	15
  6793  001A4C  EF77  F00A         	goto	_lcdNibble
  6794  001A50                     __end_of_lcdWrite:
  6795                           	callstack 0
  6796                           
  6797 ;; *************** function _lcdNibble *****************
  6798 ;; Defined at:
  6799 ;;		line 63 in file "hd44780.c"
  6800 ;; Parameters:    Size  Location     Type
  6801 ;;  nibble          1    wreg     unsigned char 
  6802 ;; Auto vars:     Size  Location     Type
  6803 ;;  nibble          1    4[COMRAM] unsigned char 
  6804 ;; Return value:  Size  Location     Type
  6805 ;;                  1    wreg      void 
  6806 ;; Registers used:
  6807 ;;		wreg, status,2, status,0
  6808 ;; Tracked objects:
  6809 ;;		On entry : 0/0
  6810 ;;		On exit  : 0/0
  6811 ;;		Unchanged: 0/0
  6812 ;; Data sizes:     COMRAM   BANK0   BANK1
  6813 ;;      Params:         0       0       0
  6814 ;;      Locals:         1       0       0
  6815 ;;      Temps:          1       0       0
  6816 ;;      Totals:         2       0       0
  6817 ;;Total ram usage:        2 bytes
  6818 ;; Hardware stack levels used: 1
  6819 ;; Hardware stack levels required when called: 2
  6820 ;; This function calls:
  6821 ;;		Nothing
  6822 ;; This function is called by:
  6823 ;;		_initLCD
  6824 ;;		_lcdWrite
  6825 ;; This function uses a non-reentrant model
  6826 ;;
  6827                           
  6828                           	psect	text32
  6829  0014EE                     __ptext32:
  6830                           	callstack 0
  6831  0014EE                     _lcdNibble:
  6832                           	callstack 25
  6833                           
  6834                           ;incstack = 0
  6835                           ;lcdNibble@nibble stored from wreg
  6836  0014EE  6E46               	movwf	lcdNibble@nibble^0,c
  6837                           
  6838                           ;hd44780.c: 64: LATCbits.LATC0 = (nibble & 0x01) ? 1 : 0;
  6839  0014F0  A046               	btfss	lcdNibble@nibble^0,0,c
  6840  0014F2  D003               	goto	u1700
  6841  0014F4  6A45               	clrf	??_lcdNibble^0,c
  6842  0014F6  2A45               	incf	??_lcdNibble^0,f,c
  6843  0014F8  D001               	goto	u1718
  6844  0014FA                     u1700:
  6845  0014FA  6A45               	clrf	??_lcdNibble^0,c
  6846  0014FC                     u1718:
  6847  0014FC  508B               	movf	139,w,c	;volatile
  6848  0014FE  1845               	xorwf	??_lcdNibble^0,w,c
  6849  001500  0BFE               	andlw	-2
  6850  001502  1845               	xorwf	??_lcdNibble^0,w,c
  6851  001504  6E8B               	movwf	139,c	;volatile
  6852                           
  6853                           ;hd44780.c: 65: LATCbits.LATC1 = (nibble & 0x02) ? 1 : 0;
  6854  001506  A246               	btfss	lcdNibble@nibble^0,1,c
  6855  001508  D003               	goto	u1720
  6856  00150A  6A45               	clrf	??_lcdNibble^0,c
  6857  00150C  2A45               	incf	??_lcdNibble^0,f,c
  6858  00150E  D001               	goto	u1738
  6859  001510                     u1720:
  6860  001510  6A45               	clrf	??_lcdNibble^0,c
  6861  001512                     u1738:
  6862  001512  4645               	rlncf	??_lcdNibble^0,f,c
  6863  001514  508B               	movf	139,w,c	;volatile
  6864  001516  1845               	xorwf	??_lcdNibble^0,w,c
  6865  001518  0BFD               	andlw	-3
  6866  00151A  1845               	xorwf	??_lcdNibble^0,w,c
  6867  00151C  6E8B               	movwf	139,c	;volatile
  6868                           
  6869                           ;hd44780.c: 66: LATCbits.LATC2 = (nibble & 0x04) ? 1 : 0;
  6870  00151E  A446               	btfss	lcdNibble@nibble^0,2,c
  6871  001520  D003               	goto	u1740
  6872  001522  6A45               	clrf	??_lcdNibble^0,c
  6873  001524  2A45               	incf	??_lcdNibble^0,f,c
  6874  001526  D001               	goto	u1758
  6875  001528                     u1740:
  6876  001528  6A45               	clrf	??_lcdNibble^0,c
  6877  00152A                     u1758:
  6878  00152A  D819               	call	PL42	;call to abstracted procedure
  6879  00152C  0BFB               	andlw	-5
  6880  00152E  1845               	xorwf	??_lcdNibble^0,w,c
  6881  001530  6E8B               	movwf	139,c	;volatile
  6882                           
  6883                           ;hd44780.c: 67: LATCbits.LATC3 = (nibble & 0x08) ? 1 : 0;
  6884  001532  A646               	btfss	lcdNibble@nibble^0,3,c
  6885  001534  D003               	goto	u1760
  6886  001536  6A45               	clrf	??_lcdNibble^0,c
  6887  001538  2A45               	incf	??_lcdNibble^0,f,c
  6888  00153A  D001               	goto	u1778
  6889  00153C                     u1760:
  6890  00153C  6A45               	clrf	??_lcdNibble^0,c
  6891  00153E                     u1778:
  6892  00153E  4645               	rlncf	??_lcdNibble^0,f,c
  6893  001540  D80E               	call	PL42	;call to abstracted procedure
  6894  001542  0BF7               	andlw	-9
  6895  001544  1845               	xorwf	??_lcdNibble^0,w,c
  6896  001546  6E8B               	movwf	139,c	;volatile
  6897                           
  6898                           ;hd44780.c: 70: LATAbits.LATA1 = 1;
  6899  001548  8289               	bsf	137,1,c	;volatile
  6900                           
  6901                           ;hd44780.c: 71: _delay((unsigned long)((100)*(8000000/4000000.0)));
  6902  00154A  0E42               	movlw	66
  6903  00154C                     u3497:
  6904  00154C  2EE8               	decfsz	wreg,f,c
  6905  00154E  D7FE               	bra	u3497
  6906  001550  D000               	nop2	
  6907                           
  6908                           ;hd44780.c: 72: LATAbits.LATA1 = 0;
  6909  001552  9289               	bcf	137,1,c	;volatile
  6910                           
  6911                           ;hd44780.c: 73: _delay((unsigned long)((100)*(8000000/4000000.0)));
  6912  001554  0E42               	movlw	66
  6913  001556                     u3507:
  6914  001556  2EE8               	decfsz	wreg,f,c
  6915  001558  D7FE               	bra	u3507
  6916  00155A  D000               	nop2	
  6917  00155C  0012               	return		;funcret
  6918  00155E                     __end_of_lcdNibble:
  6919                           	callstack 0
  6920  00155E                     PL42:
  6921                           	callstack 25
  6922  00155E  4645               	rlncf	??_lcdNibble^0,f,c
  6923  001560  4645               	rlncf	??_lcdNibble^0,f,c
  6924  001562  508B               	movf	139,w,c	;volatile
  6925  001564  1845               	xorwf	??_lcdNibble^0,w,c
  6926  001566  0012               	return	
  6927  001568                     __end_ofPL42:
  6928                           	callstack 0
  6929                           
  6930 ;; *************** function _EUSART_Write_Str *****************
  6931 ;; Defined at:
  6932 ;;		line 106 in file "eusart.c"
  6933 ;; Parameters:    Size  Location     Type
  6934 ;;  t               2    4[COMRAM] PTR const unsigned char 
  6935 ;;		 -> STR_12(7), STR_11(4), STR_10(3), STR_9(4), 
  6936 ;;		 -> STR_8(5), STR_7(4), STR_6(4), 
  6937 ;; Auto vars:     Size  Location     Type
  6938 ;;		None
  6939 ;; Return value:  Size  Location     Type
  6940 ;;                  1    wreg      void 
  6941 ;; Registers used:
  6942 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6943 ;; Tracked objects:
  6944 ;;		On entry : 0/0
  6945 ;;		On exit  : 0/0
  6946 ;;		Unchanged: 0/0
  6947 ;; Data sizes:     COMRAM   BANK0   BANK1
  6948 ;;      Params:         2       0       0
  6949 ;;      Locals:         0       0       0
  6950 ;;      Temps:          0       0       0
  6951 ;;      Totals:         2       0       0
  6952 ;;Total ram usage:        2 bytes
  6953 ;; Hardware stack levels used: 1
  6954 ;; Hardware stack levels required when called: 3
  6955 ;; This function calls:
  6956 ;;		_EUSART_Write
  6957 ;; This function is called by:
  6958 ;;		_main
  6959 ;; This function uses a non-reentrant model
  6960 ;;
  6961                           
  6962                           	psect	text33
  6963  001A72                     __ptext33:
  6964                           	callstack 0
  6965  001A72                     _EUSART_Write_Str:
  6966                           	callstack 27
  6967                           
  6968                           ;eusart.c: 107: while (*t != '\0') {
  6969                           
  6970                           ;incstack = 0
  6971  001A72  D005               	goto	l3227
  6972  001A74                     l3223:
  6973                           
  6974                           ;eusart.c: 108: EUSART_Write(*t);
  6975  001A74  D807               	call	PL30	;call to abstracted procedure
  6976  001A76  ECC7  F00C         	call	_EUSART_Write
  6977                           
  6978                           ;eusart.c: 109: *t++;
  6979  001A7A  4A46               	infsnz	EUSART_Write_Str@t^0,f,c
  6980  001A7C  2A47               	incf	(EUSART_Write_Str@t+1)^0,f,c
  6981  001A7E                     l3227:
  6982  001A7E  D802               	call	PL30	;call to abstracted procedure
  6983  001A80  E1F9               	bnz	l3223
  6984  001A82  0012               	return		;funcret
  6985  001A84                     __end_of_EUSART_Write_Str:
  6986                           	callstack 0
  6987  001A84                     PL30:
  6988                           	callstack 27
  6989  001A84  C046  FFF6         	movff	EUSART_Write_Str@t,tblptrl
  6990  001A88  C047  FFF7         	movff	EUSART_Write_Str@t+1,tblptrh
  6991  001A8C                     	if	0	;tblptru may be non-zero
  6992  001A8C                     	endif
  6993  001A8C                     	if	0	;tblptru may be non-zero
  6994  001A8C                     	endif
  6995  001A8C  0008               	tblrd		*
  6996  001A8E  50F5               	movf	tablat,w,c
  6997  001A90  0012               	return	
  6998  001A92                     __end_ofPL30:
  6999                           	callstack 0
  7000                           
  7001 ;; *************** function _EUSART_Write *****************
  7002 ;; Defined at:
  7003 ;;		line 81 in file "eusart.c"
  7004 ;; Parameters:    Size  Location     Type
  7005 ;;  txData          1    wreg     unsigned char 
  7006 ;; Auto vars:     Size  Location     Type
  7007 ;;  txData          1    3[COMRAM] unsigned char 
  7008 ;; Return value:  Size  Location     Type
  7009 ;;                  1    wreg      void 
  7010 ;; Registers used:
  7011 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7012 ;; Tracked objects:
  7013 ;;		On entry : 0/0
  7014 ;;		On exit  : 0/0
  7015 ;;		Unchanged: 0/0
  7016 ;; Data sizes:     COMRAM   BANK0   BANK1
  7017 ;;      Params:         0       0       0
  7018 ;;      Locals:         1       0       0
  7019 ;;      Temps:          0       0       0
  7020 ;;      Totals:         1       0       0
  7021 ;;Total ram usage:        1 bytes
  7022 ;; Hardware stack levels used: 1
  7023 ;; Hardware stack levels required when called: 2
  7024 ;; This function calls:
  7025 ;;		Nothing
  7026 ;; This function is called by:
  7027 ;;		_main
  7028 ;;		_EUSART_Write_Str
  7029 ;; This function uses a non-reentrant model
  7030 ;;
  7031                           
  7032                           	psect	text34
  7033  00198E                     __ptext34:
  7034                           	callstack 0
  7035  00198E                     _EUSART_Write:
  7036                           	callstack 27
  7037                           
  7038                           ;incstack = 0
  7039                           ;EUSART_Write@txData stored from wreg
  7040  00198E  6E45               	movwf	EUSART_Write@txData^0,c
  7041  001990                     
  7042                           ;eusart.c: 82: while (0 == eusartTxBufferRemaining) {
  7043  001990  502C               	movf	_eusartTxBufferRemaining^0,w,c	;volatile
  7044  001992  E0FE               	bz	l2817
  7045                           
  7046                           ;eusart.c: 83: };eusart.c: 85: if (0 == PIE1bits.TXIE) {
  7047  001994  B89D               	btfsc	157,4,c	;volatile
  7048  001996  D005               	goto	l654
  7049  001998                     u1870:
  7050  001998  A89E               	btfss	3998,4,c	;volatile
  7051  00199A  D7FE               	goto	u1870
  7052                           
  7053                           ;eusart.c: 88: TXREG = txData;
  7054  00199C  C045  FFAD         	movff	EUSART_Write@txData,4013	;volatile
  7055                           
  7056                           ;eusart.c: 90: } else {
  7057  0019A0  0012               	return	
  7058  0019A2                     l654:
  7059                           
  7060                           ;eusart.c: 91: PIE1bits.TXIE = 0;
  7061  0019A2  989D               	bcf	157,4,c	;volatile
  7062                           
  7063                           ;eusart.c: 92: eusartTxBuffer[eusartTxHead++] = txData;
  7064  0019A4  502D               	movf	_eusartTxHead^0,w,c
  7065  0019A6  0F01               	addlw	low _eusartTxBuffer
  7066  0019A8  6ED9               	movwf	fsr2l,c
  7067  0019AA  6ADA               	clrf	fsr2h,c
  7068  0019AC  C045  FFDF         	movff	EUSART_Write@txData,indf2
  7069  0019B0  2A2D               	incf	_eusartTxHead^0,f,c
  7070                           
  7071                           ;eusart.c: 93: if (sizeof (eusartTxBuffer) <= eusartTxHead) {
  7072  0019B2  0E0F               	movlw	15
  7073  0019B4  642D               	cpfsgt	_eusartTxHead^0,c
  7074  0019B6  D001               	goto	l2831
  7075                           
  7076                           ;eusart.c: 94: eusartTxHead = 0;
  7077  0019B8  6A2D               	clrf	_eusartTxHead^0,c
  7078  0019BA                     l2831:
  7079                           
  7080                           ;eusart.c: 95: };eusart.c: 96: eusartTxBufferRemaining--;
  7081  0019BA  062C               	decf	_eusartTxBufferRemaining^0,f,c	;volatile
  7082  0019BC  0012               	return		;funcret
  7083  0019BE                     __end_of_EUSART_Write:
  7084                           	callstack 0
  7085                           
  7086 ;; *************** function _myIntL *****************
  7087 ;; Defined at:
  7088 ;;		line 738 in file "main.c"
  7089 ;; Parameters:    Size  Location     Type
  7090 ;;		None
  7091 ;; Auto vars:     Size  Location     Type
  7092 ;;		None
  7093 ;; Return value:  Size  Location     Type
  7094 ;;                  1    wreg      void 
  7095 ;; Registers used:
  7096 ;;		wreg, status,2, status,0
  7097 ;; Tracked objects:
  7098 ;;		On entry : 0/0
  7099 ;;		On exit  : 0/0
  7100 ;;		Unchanged: 0/0
  7101 ;; Data sizes:     COMRAM   BANK0   BANK1
  7102 ;;      Params:         0       0       0
  7103 ;;      Locals:         0       0       0
  7104 ;;      Temps:          3       0       0
  7105 ;;      Totals:         3       0       0
  7106 ;;Total ram usage:        3 bytes
  7107 ;; Hardware stack levels used: 1
  7108 ;; Hardware stack levels required when called: 1
  7109 ;; This function calls:
  7110 ;;		Nothing
  7111 ;; This function is called by:
  7112 ;;		Interrupt level 1
  7113 ;; This function uses a non-reentrant model
  7114 ;;
  7115                           
  7116                           	psect	intcodelo
  7117  000018                     __pintcodelo:
  7118                           	callstack 0
  7119  000018                     _myIntL:
  7120                           	callstack 24
  7121                           
  7122                           ;incstack = 0
  7123  000018  8068               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  7124  00001A  CFD8 F042          	movff	status,??_myIntL
  7125  00001E  CFE8 F043          	movff	wreg,??_myIntL+1
  7126  000022  CFE0 F044          	movff	bsr,??_myIntL+2
  7127                           
  7128                           ;main.c: 739: static uint8_t snd_delay;;main.c: 741: if (INTCONbits.T0IF == 1) {
  7129  000026  A4F2               	btfss	242,2,c	;volatile
  7130  000028  D030               	goto	i1l366
  7131                           
  7132                           ;main.c: 742: INTCONbits.T0IF = 0;
  7133  00002A  94F2               	bcf	242,2,c	;volatile
  7134                           
  7135                           ;main.c: 743: TMR0H = ((unsigned char)(((45536)>>8)&0xFF));
  7136  00002C  0EB1               	movlw	177
  7137  00002E  6ED7               	movwf	215,c	;volatile
  7138                           
  7139                           ;main.c: 744: TMR0L = ((unsigned char)((45536)&0xFF));
  7140  000030  0EE0               	movlw	224
  7141  000032  6ED6               	movwf	214,c	;volatile
  7142                           
  7143                           ;main.c: 745: read_key = 1;
  7144  000034  8267               	bsf	(_read_key/(0+8))^0,_read_key& (0+7),c
  7145                           
  7146                           ;main.c: 747: tik_time_b++;
  7147  000036  2A35               	incf	_tik_time^0,f,c
  7148                           
  7149                           ;main.c: 748: if (en_sound) {
  7150  000038  A067               	btfss	(_en_sound/(0+8))^0,_en_sound& (0+7),c
  7151  00003A  D026               	goto	i1l353
  7152                           
  7153                           ;main.c: 749: snd_delay++;
  7154  00003C  2A2F               	incf	myIntL@snd_delay^0,f,c
  7155                           
  7156                           ;main.c: 750: if (snd_k) {
  7157  00003E  AC66               	btfss	(_snd_k/(0+8))^0,_snd_k& (0+7),c
  7158  000040  D00A               	goto	i1l354
  7159                           
  7160                           ;main.c: 751: if (snd_delay <= 10) {
  7161  000042  0E0B               	movlw	11
  7162  000044  602F               	cpfslt	myIntL@snd_delay^0,c
  7163  000046  D002               	goto	i1l355
  7164                           
  7165                           ;main.c: 752: LATCbits.LATC4 = 1;
  7166  000048  888B               	bsf	139,4,c	;volatile
  7167                           
  7168                           ;main.c: 753: } else
  7169  00004A  D001               	goto	i1l2707
  7170  00004C                     i1l355:
  7171                           
  7172                           ;main.c: 754: LATCbits.LATC4 = 0;
  7173  00004C  988B               	bcf	139,4,c	;volatile
  7174  00004E                     i1l2707:
  7175                           
  7176                           ;main.c: 755: if (snd_delay > 80)
  7177  00004E  0E50               	movlw	80
  7178  000050  642F               	cpfsgt	myIntL@snd_delay^0,c
  7179  000052  D001               	goto	i1l354
  7180                           
  7181                           ;main.c: 756: snd_delay = 0;
  7182  000054  6A2F               	clrf	myIntL@snd_delay^0,c
  7183  000056                     i1l354:
  7184                           
  7185                           ;main.c: 757: };main.c: 758: if (snd_b) {
  7186  000056  AA66               	btfss	(_snd_b/(0+8))^0,_snd_b& (0+7),c
  7187  000058  D00A               	goto	i1l358
  7188                           
  7189                           ;main.c: 759: if (snd_delay <= 15) {
  7190  00005A  0E10               	movlw	16
  7191  00005C  602F               	cpfslt	myIntL@snd_delay^0,c
  7192  00005E  D002               	goto	i1l359
  7193                           
  7194                           ;main.c: 760: LATCbits.LATC4 = 1;
  7195  000060  888B               	bsf	139,4,c	;volatile
  7196                           
  7197                           ;main.c: 761: } else
  7198  000062  D001               	goto	i1l2715
  7199  000064                     i1l359:
  7200                           
  7201                           ;main.c: 762: LATCbits.LATC4 = 0;
  7202  000064  988B               	bcf	139,4,c	;volatile
  7203  000066                     i1l2715:
  7204                           
  7205                           ;main.c: 763: if (snd_delay > 50)
  7206  000066  0E32               	movlw	50
  7207  000068  642F               	cpfsgt	myIntL@snd_delay^0,c
  7208  00006A  D001               	goto	i1l358
  7209                           
  7210                           ;main.c: 764: snd_delay = 0;
  7211  00006C  6A2F               	clrf	myIntL@snd_delay^0,c
  7212  00006E                     i1l358:
  7213                           
  7214                           ;main.c: 765: };main.c: 766: if (snd_all) {
  7215  00006E  A866               	btfss	(_snd_all/(0+8))^0,_snd_all& (0+7),c
  7216  000070  D00C               	goto	i1l366
  7217                           
  7218                           ;main.c: 767: if (snd_delay <= 10) {
  7219  000072  0E0B               	movlw	11
  7220  000074  602F               	cpfslt	myIntL@snd_delay^0,c
  7221  000076  D002               	goto	i1l363
  7222                           
  7223                           ;main.c: 768: LATCbits.LATC4 = 1;
  7224  000078  888B               	bsf	139,4,c	;volatile
  7225                           
  7226                           ;main.c: 769: } else
  7227  00007A  D001               	goto	i1l2723
  7228  00007C                     i1l363:
  7229                           
  7230                           ;main.c: 770: LATCbits.LATC4 = 0;
  7231  00007C  988B               	bcf	139,4,c	;volatile
  7232  00007E                     i1l2723:
  7233                           
  7234                           ;main.c: 771: if (snd_delay > 25)
  7235  00007E  0E19               	movlw	25
  7236  000080  642F               	cpfsgt	myIntL@snd_delay^0,c
  7237  000082  D003               	goto	i1l366
  7238                           
  7239                           ;main.c: 772: snd_delay = 0;
  7240  000084  6A2F               	clrf	myIntL@snd_delay^0,c
  7241  000086  D001               	goto	i1l366
  7242  000088                     i1l353:
  7243                           
  7244                           ;main.c: 775: LATCbits.LATC4 = 0;
  7245  000088  988B               	bcf	139,4,c	;volatile
  7246  00008A                     i1l366:
  7247  00008A  C044  FFE0         	movff	??_myIntL+2,bsr
  7248  00008E  C043  FFE8         	movff	??_myIntL+1,wreg
  7249  000092  C042  FFD8         	movff	??_myIntL,status
  7250  000096  9068               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  7251  000098  0010               	retfie	
  7252  00009A                     __end_of_myIntL:
  7253                           	callstack 0
  7254                           
  7255 ;; *************** function _myIntH *****************
  7256 ;; Defined at:
  7257 ;;		line 720 in file "main.c"
  7258 ;; Parameters:    Size  Location     Type
  7259 ;;		None
  7260 ;; Auto vars:     Size  Location     Type
  7261 ;;		None
  7262 ;; Return value:  Size  Location     Type
  7263 ;;                  1    wreg      void 
  7264 ;; Registers used:
  7265 ;;		wreg, status,2, status,0
  7266 ;; Tracked objects:
  7267 ;;		On entry : 0/0
  7268 ;;		On exit  : 0/0
  7269 ;;		Unchanged: 0/0
  7270 ;; Data sizes:     COMRAM   BANK0   BANK1
  7271 ;;      Params:         0       0       0
  7272 ;;      Locals:         0       0       0
  7273 ;;      Temps:          0       0       0
  7274 ;;      Totals:         0       0       0
  7275 ;;Total ram usage:        0 bytes
  7276 ;; Hardware stack levels used: 1
  7277 ;; This function calls:
  7278 ;;		Nothing
  7279 ;; This function is called by:
  7280 ;;		Interrupt level 2
  7281 ;; This function uses a non-reentrant model
  7282 ;;
  7283                           
  7284                           	psect	intcode
  7285  000008                     __pintcode:
  7286                           	callstack 0
  7287  000008                     _myIntH:
  7288                           	callstack 24
  7289                           
  7290                           ;incstack = 0
  7291  000008  8268               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7292  00000A  EF28  F00D         	goto	int_func
  7293                           
  7294                           	psect	intcode_body
  7295  001A50                     __pintcode_body:
  7296                           	callstack 24
  7297  001A50                     int_func:
  7298                           	callstack 24
  7299                           
  7300                           ;main.c: 722: if (PIR1bits.TMR1IF == 1) {
  7301  001A50  A09E               	btfss	158,0,c	;volatile
  7302  001A52  D00D               	goto	i2l345
  7303                           
  7304                           ;main.c: 723: PIR1bits.TMR1IF = 0;
  7305  001A54  909E               	bcf	158,0,c	;volatile
  7306                           
  7307                           ;main.c: 724: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
  7308  001A56  0E3C               	movlw	60
  7309  001A58  6ECF               	movwf	207,c	;volatile
  7310                           
  7311                           ;main.c: 725: TMR1L = ((unsigned char)((15536)&0xFF));
  7312  001A5A  0EB0               	movlw	176
  7313  001A5C  6ECE               	movwf	206,c	;volatile
  7314                           
  7315                           ;main.c: 726: if (++timer_val >= 30)
  7316  001A5E  2A41               	incf	_timer_val^0,f,c
  7317  001A60  0E1D               	movlw	29
  7318  001A62  6441               	cpfsgt	_timer_val^0,c
  7319  001A64  D004               	goto	i2l345
  7320                           
  7321                           ;main.c: 727: {;main.c: 728: timer_val = 0;
  7322  001A66  6A41               	clrf	_timer_val^0,c
  7323                           
  7324                           ;main.c: 729: time_flag = 1;
  7325  001A68  0E01               	movlw	1
  7326  001A6A  6E40               	movwf	_time_flag^0,c
  7327                           
  7328                           ;main.c: 730: T1CONbits.TMR1ON = 0;
  7329  001A6C  90CD               	bcf	205,0,c	;volatile
  7330  001A6E                     i2l345:
  7331  001A6E  9268               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7332  001A70  0011               	retfie		f
  7333  001A72                     __end_of_myIntH:
  7334                           	callstack 0
  7335                           
  7336                           	psect	rparam
  7337  0000                     
  7338                           	psect	temp
  7339  000068                     btemp:
  7340                           	callstack 0
  7341  000068                     	ds	1
  7342  0000                     int$flags	set	btemp
  7343  0000                     wtemp8	set	btemp+1
  7344  0000                     ttemp5	set	btemp+1
  7345  0000                     ttemp6	set	btemp+4
  7346  0000                     ttemp7	set	btemp+8
  7347                           
  7348                           	psect	idloc
  7349                           
  7350                           ;Config register IDLOC0 @ 0x200000
  7351                           ;	unspecified, using default values
  7352  200000                     	org	2097152
  7353  200000  FF                 	db	255
  7354                           
  7355                           ;Config register IDLOC1 @ 0x200001
  7356                           ;	unspecified, using default values
  7357  200001                     	org	2097153
  7358  200001  FF                 	db	255
  7359                           
  7360                           ;Config register IDLOC2 @ 0x200002
  7361                           ;	unspecified, using default values
  7362  200002                     	org	2097154
  7363  200002  FF                 	db	255
  7364                           
  7365                           ;Config register IDLOC3 @ 0x200003
  7366                           ;	unspecified, using default values
  7367  200003                     	org	2097155
  7368  200003  FF                 	db	255
  7369                           
  7370                           ;Config register IDLOC4 @ 0x200004
  7371                           ;	unspecified, using default values
  7372  200004                     	org	2097156
  7373  200004  FF                 	db	255
  7374                           
  7375                           ;Config register IDLOC5 @ 0x200005
  7376                           ;	unspecified, using default values
  7377  200005                     	org	2097157
  7378  200005  FF                 	db	255
  7379                           
  7380                           ;Config register IDLOC6 @ 0x200006
  7381                           ;	unspecified, using default values
  7382  200006                     	org	2097158
  7383  200006  FF                 	db	255
  7384                           
  7385                           ;Config register IDLOC7 @ 0x200007
  7386                           ;	unspecified, using default values
  7387  200007                     	org	2097159
  7388  200007  FF                 	db	255
  7389                           
  7390                           	psect	config
  7391                           
  7392                           ; Padding undefined space
  7393  300000                     	org	3145728
  7394  300000  FF                 	db	255
  7395                           
  7396                           ;Config register CONFIG1H @ 0x300001
  7397                           ;	Oscillator Selection bits
  7398                           ;	OSC = INTIO2, Internal RC oscillator, port function on RA6 and port function on RA7
  7399                           ;	Fail-Safe Clock Monitor Enable bit
  7400                           ;	FSCM = OFF, Fail-Safe Clock Monitor disabled
  7401                           ;	Internal/External Switchover bit
  7402                           ;	IESO = OFF, Internal/External Switchover mode disabled
  7403  300001                     	org	3145729
  7404  300001  08                 	db	8
  7405                           
  7406                           ;Config register CONFIG2L @ 0x300002
  7407                           ;	Power-up Timer enable bit
  7408                           ;	PWRT = ON, PWRT enabled
  7409                           ;	Brown-out Reset enable bit
  7410                           ;	BOR = ON, Brown-out Reset enabled
  7411                           ;	Brown-out Reset Voltage bits
  7412                           ;	BORV = 27, VBOR set to 2.7V
  7413  300002                     	org	3145730
  7414  300002  0A                 	db	10
  7415                           
  7416                           ;Config register CONFIG2H @ 0x300003
  7417                           ;	Watchdog Timer Enable bit
  7418                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  7419                           ;	Watchdog Timer Postscale Select bits
  7420                           ;	WDTPS = 32768, 1:32768
  7421  300003                     	org	3145731
  7422  300003  1E                 	db	30
  7423                           
  7424                           ; Padding undefined space
  7425  300004                     	org	3145732
  7426  300004  FF                 	db	255
  7427                           
  7428                           ;Config register CONFIG3H @ 0x300005
  7429                           ;	CCP2 MUX bit
  7430                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  7431                           ;	PORTB A/D Enable bit
  7432                           ;	PBAD = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  7433                           ;	MCLR Pin Enable bit
  7434                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  7435  300005                     	org	3145733
  7436  300005  81                 	db	129
  7437                           
  7438                           ;Config register CONFIG4L @ 0x300006
  7439                           ;	Stack Full/Underflow Reset Enable bit
  7440                           ;	STVR = ON, Stack full/underflow will cause Reset
  7441                           ;	Single-Supply ICSP Enable bit
  7442                           ;	LVP = OFF, Single-Supply ICSP disabled
  7443                           ;	Background Debugger Enable bit
  7444                           ;	DEBUG = 0x1, unprogrammed default
  7445  300006                     	org	3145734
  7446  300006  81                 	db	129
  7447                           
  7448                           ; Padding undefined space
  7449  300007                     	org	3145735
  7450  300007  FF                 	db	255
  7451                           
  7452                           ;Config register CONFIG5L @ 0x300008
  7453                           ;	Code Protection bit
  7454                           ;	CP0 = OFF, Block 0 (000200-0007FFh) not code-protected
  7455                           ;	Code Protection bit
  7456                           ;	CP1 = OFF, Block 1 (000800-000FFFh) not code-protected
  7457                           ;	Code Protection bit
  7458                           ;	CP2 = OFF, Block 2 (001000-0017FFh) not code-protected
  7459                           ;	Code Protection bit
  7460                           ;	CP3 = OFF, Block 3 (001800-001FFFh) not code-protected
  7461  300008                     	org	3145736
  7462  300008  0F                 	db	15
  7463                           
  7464                           ;Config register CONFIG5H @ 0x300009
  7465                           ;	Boot Block Code Protection bit
  7466                           ;	CPB = OFF, Boot block (000000-0001FFh) is not code-protected
  7467                           ;	Data EEPROM Code Protection bit
  7468                           ;	CPD = OFF, Data EEPROM is not code-protected
  7469  300009                     	org	3145737
  7470  300009  C0                 	db	192
  7471                           
  7472                           ;Config register CONFIG6L @ 0x30000A
  7473                           ;	Write Protection bit
  7474                           ;	WRT0 = OFF, Block 0 (000200-0007FFh) not write-protected
  7475                           ;	Write Protection bit
  7476                           ;	WRT1 = OFF, Block 1 (000800-000FFFh) not write-protected
  7477                           ;	Write Protection bit
  7478                           ;	WRT2 = OFF, Block 2 (001000-0017FFh) not write-protected
  7479                           ;	Write Protection bit
  7480                           ;	WRT3 = OFF, Block 3 (001800-001FFFh) not write-protected
  7481  30000A                     	org	3145738
  7482  30000A  0F                 	db	15
  7483                           
  7484                           ;Config register CONFIG6H @ 0x30000B
  7485                           ;	Configuration Register Write Protection bit
  7486                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  7487                           ;	Boot Block Write Protection bit
  7488                           ;	WRTB = OFF, Boot block (000000-0001FFh) is not write-protected
  7489                           ;	Data EEPROM Write Protection bit
  7490                           ;	WRTD = OFF, Data EEPROM is not write-protected
  7491  30000B                     	org	3145739
  7492  30000B  E0                 	db	224
  7493                           
  7494                           ;Config register CONFIG7L @ 0x30000C
  7495                           ;	Table Read Protection bit
  7496                           ;	EBTR0 = OFF, Block 0 (000200-0007FFh) not protected from table reads executed in other
      +                           blocks
  7497                           ;	Table Read Protection bit
  7498                           ;	EBTR1 = OFF, Block 1 (000800-000FFFh) not protected from table reads executed in other
      +                           blocks
  7499                           ;	Table Read Protection bit
  7500                           ;	EBTR2 = OFF, Block 2 (001000-0017FFh) not protected from table reads executed in other
      +                           blocks
  7501                           ;	Table Read Protection bit
  7502                           ;	EBTR3 = OFF, Block 3 (001800-001FFFh) not protected from table reads executed in other
      +                           blocks
  7503  30000C                     	org	3145740
  7504  30000C  0F                 	db	15
  7505                           
  7506                           ;Config register CONFIG7H @ 0x30000D
  7507                           ;	Boot Block Table Read Protection bit
  7508                           ;	EBTRB = OFF, Boot block (000000-0001FFh) is not protected from table reads executed in
      +                           other blocks
  7509  30000D                     	org	3145741
  7510  30000D  40                 	db	64
  7511                           tosu	equ	0xFFF
  7512                           tosh	equ	0xFFE
  7513                           tosl	equ	0xFFD
  7514                           stkptr	equ	0xFFC
  7515                           pclatu	equ	0xFFB
  7516                           pclath	equ	0xFFA
  7517                           pcl	equ	0xFF9
  7518                           tblptru	equ	0xFF8
  7519                           tblptrh	equ	0xFF7
  7520                           tblptrl	equ	0xFF6
  7521                           tablat	equ	0xFF5
  7522                           prodh	equ	0xFF4
  7523                           prodl	equ	0xFF3
  7524                           indf0	equ	0xFEF
  7525                           postinc0	equ	0xFEE
  7526                           postdec0	equ	0xFED
  7527                           preinc0	equ	0xFEC
  7528                           plusw0	equ	0xFEB
  7529                           fsr0h	equ	0xFEA
  7530                           fsr0l	equ	0xFE9
  7531                           wreg	equ	0xFE8
  7532                           indf1	equ	0xFE7
  7533                           postinc1	equ	0xFE6
  7534                           postdec1	equ	0xFE5
  7535                           preinc1	equ	0xFE4
  7536                           plusw1	equ	0xFE3
  7537                           fsr1h	equ	0xFE2
  7538                           fsr1l	equ	0xFE1
  7539                           bsr	equ	0xFE0
  7540                           indf2	equ	0xFDF
  7541                           postinc2	equ	0xFDE
  7542                           postdec2	equ	0xFDD
  7543                           preinc2	equ	0xFDC
  7544                           plusw2	equ	0xFDB
  7545                           fsr2h	equ	0xFDA
  7546                           fsr2l	equ	0xFD9
  7547                           status	equ	0xFD8

Data Sizes:
    Strings     271
    Constant    96
    Data        13
    BSS         65
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     23     103
    BANK0           128      0       0
    BANK1           256      0       0

Pointer List with Targets:

    EUSART_Write_Str@t	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_12(CODE[7]), STR_11(CODE[4]), STR_10(CODE[3]), STR_9(CODE[4]), 
		 -> STR_8(CODE[5]), STR_7(CODE[4]), STR_6(CODE[4]), 

    cgrom_char@symbol	PTR unsigned char  size(2) Largest target is 8
		 -> symbol_5(CODE[8]), symbol_4(CODE[8]), 

    lcdPrint@t	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_34(CODE[3]), STR_33(CODE[3]), STR_32(CODE[3]), STR_31(CODE[3]), 
		 -> STR_30(CODE[3]), STR_29(CODE[3]), STR_28(CODE[3]), STR_27(CODE[3]), 
		 -> STR_26(CODE[3]), STR_25(CODE[15]), STR_24(CODE[9]), STR_23(CODE[13]), 
		 -> STR_22(CODE[11]), STR_21(CODE[13]), STR_20(CODE[15]), STR_19(CODE[15]), 
		 -> STR_18(CODE[14]), STR_17(CODE[16]), STR_16(CODE[16]), STR_15(CODE[16]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_5(CODE[2]), STR_4(CODE[13]), 
		 -> STR_3(CODE[16]), STR_2(CODE[16]), STR_1(CODE[16]), 

    ds18b20_crc8@data_in	PTR unsigned char  size(1) Largest target is 9
		 -> ds18b20_readrom@temp_rom(COMRAM[8]), scratch(COMRAM[9]), 

    ds18b20_get_temp@minus	PTR unsigned char  size(1) Largest target is 1
		 -> minus_2(COMRAM[1]), minus_1(COMRAM[1]), 

    ds18b20_readTemp@time_flag	PTR unsigned char  size(1) Largest target is 1
		 -> time_flag(COMRAM[1]), 

    ds18b20_readTemp@timer_val	PTR unsigned char  size(1) Largest target is 1
		 -> timer_val(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_ds18b20_readrom
    _outValPreset->_lcd_gotoxy
    _lcd_putc->_lcdWrite
    _lcdPrint->_lcd_gotoxy
    _lcd_gotoxy->_lcdWrite
    _ds18b20_readrom->_ds18b20_crc8
    _ds18b20_readTemp->_ds18b20_crc8
    ___lwmod->___lwdiv
    ___lbmod->___lbdiv
    ___awmod->___awdiv
    _Main_init->_init_ds18b20
    _init_ds18b20->_write_byte
    _write_byte->_write_bit
    _initLCD->_clearLCD
    _clearLCD->_lcdWrite
    _cgrom_char->_lcdWrite
    _lcdWrite->_lcdNibble
    _EUSART_Write_Str->_EUSART_Write

Critical Paths under _myIntL in COMRAM

    None.

Critical Paths under _myIntH in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _myIntL in BANK0

    None.

Critical Paths under _myIntH in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myIntL in BANK1

    None.

Critical Paths under _myIntH in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   50099
                                             20 COMRAM     3     3      0
                           _Delay_ms
                       _EUSART_Write
                   _EUSART_Write_Str
                          _Main_init
                            ___awdiv
                            ___awmod
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                           _clearLCD
                   _ds18b20_get_temp
                   _ds18b20_readTemp
                    _ds18b20_readrom
                         _key_GetKey
                          _key_press
                           _lcdPrint
                         _lcd_gotoxy
                           _lcd_putc
                       _outValPreset
                           _read_eep
                          _write_eep
 ---------------------------------------------------------------------------------
 (1) _outValPreset                                         3     3      0    7717
                                             10 COMRAM     3     3      0
                         _lcd_gotoxy
                           _lcd_putc
                           _read_eep
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0    1088
                                              7 COMRAM     1     1      0
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (1) _lcdPrint                                             6     4      2    6568
                                             10 COMRAM     6     4      2
                           _lcdWrite
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           3     2      1    3339
                                              7 COMRAM     3     2      1
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (1) _key_press                                            1     1      0      70
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _key_GetKey                                           1     1      0      23
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ds18b20_readrom                                     10    10      0    3200
                                             10 COMRAM    10    10      0
                           _Delay_ms
                       _ds18b20_crc8
                           _ow_reset
                          _read_byte
                         _write_byte
                          _write_eep
 ---------------------------------------------------------------------------------
 (1) _write_eep                                            2     1      1    1792
                                              3 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _Delay_ms                                             5     3      2     350
                                              3 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ds18b20_readTemp                                     8     6      2    1320
                                             10 COMRAM     8     6      2
                       _ds18b20_crc8
                           _ow_reset
                          _read_byte
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _read_byte                                            4     4      0      92
                                              3 COMRAM     4     4      0
                           _read_bit
 ---------------------------------------------------------------------------------
 (3) _read_bit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ds18b20_crc8                                         7     5      2     557
                                              3 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _ds18b20_get_temp                                     6     4      2     423
                                              3 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4    5175
                                             10 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4    3810
                                              3 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___lbmod                                              4     3      1     463
                                              7 COMRAM     4     3      1
                            ___lbdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lbdiv                                              4     3      1     314
                                              3 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4    1208
                                             11 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     908
                                              3 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Main_init                                            0     0      0    7310
                         _cgrom_char
                            _initLCD
                       _init_ds18b20
                          _init_uart
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_ds18b20                                         4     4      0    3629
                                              9 COMRAM     4     4      0
                           _ow_reset
                           _read_eep
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _write_byte                                           5     5      0     136
                                              4 COMRAM     5     5      0
                          _write_bit
 ---------------------------------------------------------------------------------
 (3) _write_bit                                            1     1      0      22
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_eep                                             2     0      2    3290
                                              3 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ow_reset                                             1     1      0      23
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0    2220
                                              8 COMRAM     1     1      0
                           _clearLCD
                          _lcdNibble
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (1) _clearLCD                                             1     1      0    1066
                                              7 COMRAM     1     1      0
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (2) _cgrom_char                                           4     1      3    1461
                                              7 COMRAM     4     1      3
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (3) _lcdWrite                                             2     1      1    1066
                                              5 COMRAM     2     1      1
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0      88
                                              3 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Write_Str                                     2     0      2     621
                                              4 COMRAM     2     0      2
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         1     1      0      44
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _myIntL                                               3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _myIntH                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay_ms
   _EUSART_Write
   _EUSART_Write_Str
     _EUSART_Write
   _Main_init
     _cgrom_char
       _lcdWrite
         _lcdNibble
     _initLCD
       _clearLCD
         _lcdWrite
       _lcdNibble
       _lcdWrite
     _init_ds18b20
       _ow_reset
       _read_eep
       _write_byte
         _write_bit
     _init_uart
   ___awdiv
   ___awmod
     ___awdiv (ARG)
   ___lbdiv
   ___lbmod
     ___lbdiv (ARG)
   ___lwdiv
   ___lwmod
     ___lwdiv (ARG)
   _clearLCD
   _ds18b20_get_temp
   _ds18b20_readTemp
     _ds18b20_crc8
     _ow_reset
     _read_byte
       _read_bit
     _write_byte
   _ds18b20_readrom
     _Delay_ms
     _ds18b20_crc8
     _ow_reset
     _read_byte
     _write_byte
     _write_eep
   _key_GetKey
   _key_press
   _lcdPrint
     _lcdWrite
     _lcd_gotoxy
       _lcdWrite
   _lcd_gotoxy
   _lcd_putc
     _lcdWrite
   _outValPreset
     _lcd_gotoxy
     _lcd_putc
     _read_eep
   _read_eep
   _write_eep

 _myIntL (ROOT)

 _myIntH (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       2       0        1.6%
COMRAM              7E     17      67       1       81.7%
BITBIGSFRhhhhhh     19      0       0       9        0.0%
BITBIGSFRhhhllh     11      0       0      13        0.0%
BITBIGSFRhhhhhh      D      0       0       8        0.0%
BITBIGSFRhhhlhl      B      0       0      12        0.0%
BITBIGSFRhhhlll      8      0       0      17        0.0%
BITBIGSFRhhhllh      6      0       0      16        0.0%
BITBIGSFRhhl         6      0       0      18        0.0%
BITBIGSFRhll         6      0       0      19        0.0%
BITBIGSFRhhhlhh      2      0       0      11        0.0%
BITBIGSFRhhhllh      1      0       0      14        0.0%
BITBIGSFRhhhllh      1      0       0      15        0.0%
BITBIGSFRhhhhl       1      0       0      10        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      67      20        0.0%
DATA                 0      0      67       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Sun May 08 10:28:44 2022

                       PL2 0F02                         PL4 0F12                         PL6 0F1E  
                       PL8 10D4               ___awdiv@sign 004A                         bsr 000FE0  
             lcdWrite@byte 0048                        PL10 0F2A                        PL20 13C8  
                      PL12 0F32                        PL30 1A84                        PL22 0F5C  
                      PL14 0F3C                        PL40 0FA4                        PL32 1326  
                      PL24 0F68                        PL16 0F46                        PL50 0FC2  
                      PL42 155E                        PL34 0F8A                        PL26 0F74  
                      PL18 0F56                        PL60 1100                        PL52 10E0  
                      PL44 1718                        PL36 0F96                        PL28 0F84  
                      PL70 1118                        PL62 1108                        PL54 10E8  
                      PL46 0FAE                        PL38 0F9E                        PL80 1140  
                      PL72 1120                        PL64 0FCA                        PL56 10F0  
                      PL48 0FB8                        PL82 1148                        PL74 1128  
                      PL66 1110                        PL58 10F8                        PL84 1150  
                      PL76 1130                        PL68 13D6                        PL86 0FD2  
                      PL78 1138                        PL88 1158               lcdWrite@type 0047  
                      l200 04BA                        l210 06CA                        l204 0532  
                      l221 077C                        l223 0798                        l215 085C  
                      l241 08AA                        l225 079A                        l217 077A  
                      l226 07DC                        l413 1608                        l261 09CC  
                      l229 081C                        l335 1A20                        l425 1286  
                      l426 1288                        l186 01DE                        l269 0A1A  
                      l189 01DC                        l446 1410                        l454 17A2  
                      l483 1A36                        l491 1ABC                        l654 19A2  
                      l590 173E                        l592 1776                        l586 172C  
                      l588 1734               ___awmod@sign 0052   __end_of_EUSART_Write_Str 1A84  
                      wreg 000FE8            lcdNibble@nibble 0046              write_eep@data 0045  
              lcd_gotoxy@x 004A                lcd_gotoxy@y 0049                       l1151 1806  
                     l1161 1882                       l3111 125A                       l3301 157A  
                     l3061 1364                       l3053 1336                       l3223 1A74  
                     l3207 1426                       l3071 13BE                       l3231 0FE2  
                     l3313 159A                       l3153 12BA                       l3065 1380  
                     l3057 134E                       l3073 13C2                       l3241 1056  
                     l3233 0FFE                       l3227 1A7E                       l3315 15A2  
                     l3307 158A                       l3411 19DC                       l3403 19C6  
                     l3139 1296                       l3059 1358                       l3243 106C  
                     l3235 1014                       l3251 10AE                       l3333 15D6  
                     l3325 15C0                       l3165 12F8                       l3085 1740  
                     l3069 13AE                       l3245 1082                       l3237 102A  
                     l3501 0176                       l3423 17D6                       l3167 1300  
                     l3263 16CE                       l3247 1098                       l3239 1040  
                     l3503 0180                       l3329 15CA                       l3361 169C  
                     l3353 167E                       l3345 1666                       l3425 17DE  
                     l3097 1760                       l3355 1686                       l3435 17FC  
                     l3451 1878                       l3443 185A                       l2741 1A38  
                     l3365 16A6                       l3349 1672                       l3445 1862  
                     l3189 1314                       l2813 1A0E                       l3277 16F0  
                     l3541 02FC                       l2831 19BA                       l3391 1920  
                     l3383 190C                       l2807 1ABE                       l3711 0962  
                     l3527 0260                       l3543 0310                       l2817 1990  
                     l2753 1AA4                       l3369 16B2                       l3289 1716  
                     l3721 0980                       l3633 0860                       l3529 0274  
                     l3379 1906                       l3395 1928                       l2835 19E6  
                     l3555 03B4                       l3483 010C                       l2861 1606  
                     l2941 1890                       l3813 0AD6                       l3741 09E2  
                     l3725 09A4                       l3581 06A6                       l3565 052C  
                     l3557 041A                       l2927 193C                       l2871 160A  
                     l3903 0CE0                       l3831 0B2C                       l3823 0B1C  
                     l3743 09E8                       l3735 09C6                       l3727 09A8  
                     l3655 089E                       l3647 088E                       l3559 0496  
                     l3495 016C                       l2945 18B0                       l3921 0D26  
                     l3905 0CE4                       l3729 09B0                       l3665 08C8  
                     l3657 08A2                       l3577 05D0                       l2787 18C6  
                     l2955 1782                       l3915 0D0E                       l3763 0A1E  
                     l3667 08D0                       l3587 0732                       l3579 0630  
                     l3941 0DD2                       l3933 0D82                       l3925 0D32  
                     l3917 0D14                       l3909 0CFA                       l3781 0A50  
                     l3773 0A40                       l3669 08D8                       l3589 0738  
                     l2967 17B0                       l2959 1792                       l2975 17BC  
                     l3871 0BDA                       l3839 0B52                       l3695 092E  
                     l3687 090A                       l3679 08FA                       l3953 0E4A  
                     l3945 0DFA                       l3937 0DAA                       l3929 0D5A  
                     l3961 0E8A                       l3881 0C1A                       l3873 0BE2  
                     l3857 0BA8                       l3849 0B98                       l3697 0934  
                     l3963 0EB4                       l3883 0C28                       l3875 0BF0  
                     l3957 0E74                       l3949 0E22                       l3885 0C36  
                     l3877 0BFE                       l3893 0C60                       l3869 0BCC  
                     l3797 0A94                       l3887 0C44                       l3879 0C0C  
                     l3895 0C84                       l3889 0C52                       l3977 0EC8  
                     STR_1 1EFF                       STR_2 1F2F                       STR_3 1F0F  
                     STR_4 1FA4                       STR_5 1FFC                       STR_6 1FDD  
                     STR_7 1FDD                       STR_8 1FCC                       STR_9 1FD9  
         ow_reset@presence 0045            _ds18b20_readrom 16BC                       u2200 16DE  
                     _LATA 000F89                       _LATB 000F8A                       _LATC 000F8B  
                     u2320 168A                       u2400 17E2                       u2160 1406  
                     u1700 14FA                       u2260 15A6                       u2430 1866  
                     u3230 0D20                       u2510 01EE                       u1720 1510  
                     u2360 1910                       u2520 027E                       u2530 0330  
                     u3307 18F2                       u1740 1528                       u3317 1AA6  
                     u1718 14FC                       u1814 18D6                       u3407 11C4  
                     u3327 1964                       u1815 18D2                       u1760 153C  
                     u2640 076C                       u3417 11D8                       u3337 1970  
                     u1738 1512                       u2650 0776                       u2570 0552  
                     u2490 01DC                       u3507 1556                       u3427 11EC  
                     u3347 1980                       u3267 1342                       u3437 1204  
                     u3357 116A                       u3277 1A14                       u1870 1998  
                     u1758 152A                       u3447 121C                       u3367 117A  
                     u3287 18B2                       u2680 0794                       u3457 1230  
                     u3377 118A                       u3297 1B0E                       u1778 153E  
                     u3467 1248                       u3387 119A                       u1964 18A8  
                     u2940 09F4                       u2908 0996                       u3477 1AF6  
                     u3397 11B0                       u1965 18A4                       u3487 1A3A  
                     u3497 154C                       u2970 0A04                       u2890 0994  
                     u2955 09F6                       u2985 0A06                       _TXIF 007CF4  
                     _main 009E                       fsr2h 000FDA                       indf2 000FDF  
                     fsr1l 000FE1                       fsr2l 000FD9                       btemp 0068  
            write_byte@val 0048                       prodh 000FF4                       prodl 000FF3  
                     start 009A               ___param_bank 000000           _ds18b20_get_temp 13DC  
            ?_EUSART_Write 0042           _ds18b20_readTemp 1258                      ?_main 0042  
          __end_of___awdiv 15E0            __end_of___lbdiv 192C                      _EEADR 000FA9  
                    STR_10 1FC9                      STR_11 1FD9                      STR_12 1FC5  
                    STR_20 1F4F                      STR_13 1FD5                      STR_21 1F97  
                    STR_30 1FED                      STR_14 1FD1                      STR_22 1FB1  
                    STR_31 1FF0                      STR_23 1F8A                      STR_15 1F3F  
                    STR_32 1FF3                      STR_24 1FBC                      STR_16 1F1F  
                    STR_33 1FF6                      STR_25 1F5E                      STR_17 1EEF  
                    STR_34 1FF9                      STR_26 1FE1                      STR_18 1F7C  
                    STR_27 1FE4                      STR_19 1F6D                      STR_28 1FE7  
          __end_of___awmod 16BC                      STR_29 1FEA            __end_of___lbmod 19E4  
          ___awdiv@divisor 0047                      _T1CON 000FCD            __end_of___lwdiv 1810  
                    i1l353 0088            __end_of___lwmod 188C                      i1l354 0056  
                    i1l363 007C                      i1l355 004C                      i1l366 008A  
                    i1l358 006E                      i1l359 0064                      i2l345 1A6E  
          ___awdiv@counter 0049                      _TMR0H 000FD7                      _TMR1H 000FCF  
                    _TMR0L 000FD6                      _TMR1L 000FCE                      _SPBRG 000FAF  
                    _PORTA 000F80                      _PORTB 000F81                      _PORTC 000F82  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
                    _TXREG 000FAD            __end_of_initLCD 1258                      _fract 1ECF  
                    _snd_b 0335                      _snd_k 0336             write_byte@temp 0049  
           __pbitbssCOMRAM 0330                      tablat 000FF5                      ttemp5 0069  
                    ttemp6 006C                      ttemp7 0070                      status 000FD8  
                    wtemp8 0069            ___lbdiv@divisor 0045            ___lbdiv@counter 0047  
         __end_of_Delay_ms 1A2C            write_bit@bitval 0045            __initialization 1810  
          ds18b20_crc8@crc 004B               __end_of_main 0F02        ds18b20_crc8@data_in 0045  
           ??_EUSART_Write 0045                     ??_main 0056              __activetblptr 000002  
            ?_init_ds18b20 0042    __end_of_ds18b20_readrom 1718          _temperature_1_old 005B  
        _temperature_2_old 0059                     _EEDATA 000FA8                     _EECON2 000FA7  
         ___awdiv@dividend 0045                     i1l2723 007E                     i1l2715 0066  
                   i1l2707 004E           __end_of_clearLCD 1B02           __end_of_lcdPrint 13C8  
         __end_of_lcdWrite 1A50           __end_of_lcd_putc 1B44                  ??___awdiv 0049  
                ??___lbdiv 0046                  ??___awmod 0051                  ??___lbmod 004A  
                ??___lwdiv 0049                  ??___lwmod 0050                     _dq_num 0061  
            Delay_ms@delay 0045                     _myIntH 0008                     _myIntL 0018  
         __end_of_read_eep 1B2A           __end_of_read_bit 1B18                     clear_0 183A  
         ___awdiv@quotient 004B            ___awmod@divisor 004F                     _select 0063  
                   isa$std 000001                     _rom_dq 0011            ___awmod@counter 0051  
           ??_init_ds18b20 004B                  ??_initLCD 004A               __pdataCOMRAM 0059  
             __mediumconst 1E8E           __end_of_ow_reset 198E                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8           ___lbdiv@dividend 0046  
         __end_of_symbol_4 1EEF           __end_of_symbol_5 1EE7            ___lbmod@divisor 0049  
               __accesstop 0080    __end_of__initialization 1840            ___lbmod@counter 004B  
            ___rparam_used 000001           write_eep@address 0046           ds18b20_crc8@data 0048  
           __pcstackCOMRAM 0042              __end_of_fract 1EDF          __end_of_Main_init 14EE  
   ds18b20_crc8@loop_count 004A                 __end_ofPL2 0F12                 __end_ofPL4 0F1E  
               __end_ofPL6 0F2A                 __end_ofPL8 10E0           ___lbdiv@quotient 0048  
            ?_ds18b20_crc8 0045       ds18b20_readTemp@temp 0050           ?_ds18b20_readrom 0042  
                ?_Delay_ms 0045          ?_EUSART_Write_Str 0046          lcd_gotoxy@address 004B  
       ??_EUSART_Write_Str 0048   __end_of_ds18b20_get_temp 1466       __end_of_EUSART_Write 19BE  
 __end_of_ds18b20_readTemp 1326    ds18b20_crc8@bit_counter 0047           ds18b20_readrom@i 0055  
      __end_of_HD44780_CYR 1ECF                    ?_myIntH 0042                    ?_myIntL 0042  
           ??_ds18b20_crc8 0047                 _cgrom_char 192C              _eusartRxCount 002B  
                ?_clearLCD 0042                 ??_Delay_ms 0047                 _lcd_gotoxy 1AB0  
                ?_lcdPrint 004C                  ?_lcdWrite 0047                  ?_lcd_putc 0042  
                ?_read_eep 0045                  ?_read_bit 0042                 _key_GetKey 1B44  
     __end_of_init_ds18b20 1654          __end_of_lcdNibble 155E                    __Hparam 0000  
                  __Lparam 0000                  ?_ow_reset 0042                    ___awdiv 1568  
                  ___lbdiv 18F8                    ___awmod 1654                    ___lbmod 19BE  
                  ___lwdiv 17C6                    ___lwmod 184E                    __pcinit 1810  
  ds18b20_readrom@temp_rom 004C                    __ramtop 0200                    __ptext0 009E  
                  __ptext1 0FD8                    __ptext2 1B38                    __ptext3 1334  
                  __ptext4 1AB0                    __ptext5 1722                    __ptext6 1B44  
                  __ptext7 16BC                    __ptext8 19E4                    __ptext9 1A08  
                _T0CONbits 000FD5                    _initLCD 1160                  _T1CONbits 000FCD  
                  _keyLong 0036          __end_of_key_press 177C          __end_of_init_uart 1AE8  
         ___awmod@dividend 004D          __end_of_read_byte 18C2                 ??_clearLCD 0049  
                  _minus_1 0065                    _minus_2 0064                    _scratch 0037  
                  _snd_b_b 0332                    _snd_all 0334                    _snd_k_b 0333  
                  _sub_sel 0033                 ??_lcdPrint 004E                 ??_lcdWrite 0048  
           __pintcode_body 1A50                 ??_lcd_putc 0049       end_of_initialization 1840  
                Delay_ms@i 0048               key_press@key 0045              __Lmediumconst 1E8E  
                  int_func 1A50                 ??_read_eep 0047                 ??_read_bit 0045  
              _HD44780_CYR 1E8F              ?_outValPreset 0042                  _RCSTAbits 000FAB  
               ??_ow_reset 0045                    postdec1 000FE5                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE                 _temp_ready 0021  
             read_byte@val 0047        ds18b20_get_temp@tmp 0048                ?_cgrom_char 0049  
                _PORTAbits 000F80              key_GetKey@key 0045          __end_of_write_bit 1AB0  
        __end_of_write_eep 1A08           ___lbmod@dividend 004A          EUSART_Write_Str@t 0046  
                _TRISAbits 000F92                  _TRISCbits 000F94                ?_lcd_gotoxy 0049  
              ___lbmod@rem 004C       __end_of_ds18b20_crc8 17C6                ?_key_GetKey 0042  
                _TXSTAbits 000FAC             ??_outValPreset 004C              __pidataCOMRAM 1B2A  
               _write_byte 18C2               _EUSART_Write 198E             __end_of_myIntH 1A72  
           __end_of_myIntL 009A                  _Main_init 1466                __end_ofPL10 0F32  
              __end_ofPL20 13D6                __end_ofPL12 0F3C                __end_ofPL30 1A92  
              __end_ofPL22 0F68                __end_ofPL14 0F46                __end_ofPL40 0FAE  
              __end_ofPL32 1334                __end_ofPL24 0F74                __end_ofPL16 0F56  
              __end_ofPL50 0FCA                __end_ofPL42 1568                __end_ofPL34 0F96  
              __end_ofPL26 0F84                __end_ofPL18 0F5C                __end_ofPL60 1108  
              __end_ofPL52 10E8                __end_ofPL44 1722                __end_ofPL36 0F9E  
              __end_ofPL28 0F8A                __end_ofPL70 1120                __end_ofPL62 1110  
              __end_ofPL54 10F0                __end_ofPL46 0FB8                __end_ofPL38 0FA4  
              __end_ofPL80 1148                __end_ofPL72 1128                __end_ofPL64 0FD2  
              __end_ofPL56 10F8                __end_ofPL48 0FC2                __end_ofPL82 1150  
              __end_ofPL74 1130                __end_ofPL66 1118                __end_ofPL58 1100  
              __end_ofPL84 1158                __end_ofPL76 1138                __end_ofPL68 13DC  
              __end_ofPL86 0FD8                __end_ofPL78 1140                __end_ofPL88 1160  
      start_initialization 1810          ?_ds18b20_get_temp 0045         ??_ds18b20_get_temp 0047  
        ?_ds18b20_readTemp 004C         ??_ds18b20_readTemp 004E   ds18b20_crc8@feedback_bit 0049  
                 ??_myIntH 0042                   ??_myIntL 0042            read_eep@address 0045  
               read_byte@i 0048                 ?_Main_init 0042               _init_ds18b20 15E0  
              __pbssCOMRAM 0001      ds18b20_crc8@num_bytes 0046          ds18b20_readTemp@i 0053  
        ds18b20_readTemp@j 0052           ___lwdiv@dividend 0045                  __pintcode 0008  
            __pmediumconst 1E8E                  _lcdNibble 14EE                   ?___awdiv 0045  
                 ?___lbdiv 0045                   ?___awmod 004D                   ?___lbmod 0049  
                 ?___lwdiv 0045                   ?___lwmod 004C               _eusartTxHead 002D  
              __pintcodelo 0018                ?_write_byte 0042    _eusartTxBufferRemaining 002C  
                 ?_initLCD 0042       __end_of_outValPreset 10D4           ___lwdiv@quotient 0049  
                _key_press 1722                  _init_uart 1ACC                  _read_byte 188C  
           _eusartTxBuffer 0001                   _LATAbits 000F89                   _LATCbits 000F8B  
                _temp1_fix 0027                   _IPR1bits 000F9F                   _PIE1bits 000F9D  
                 _PIR1bits 000F9E                  _set_t_dq2 0029              _set_t_dq1_dwn 0030  
                 _RCONbits 000FD0                 ?_lcdNibble 0042                  _time_flag 0040  
                _timer_val 0041                  lcdPrint@t 004C               ??_cgrom_char 004C  
               _ADCON1bits 000FC1               _ds18b20_crc8 177C                ??_Main_init 004F  
                _sound_yes 0337                  lcd_putc@c 0049                write_byte@i 004A  
                 _Delay_ms 1A08               ??_lcd_gotoxy 004A                 ?_key_press 0042  
                _write_bit 1A92                  _write_eep 19E4                 ?_init_uart 0042  
              _INTCON2bits 000FF1                 ?_read_byte 0042                  copy_data0 1824  
            init_ds18b20@i 004E              init_ds18b20@q 004D               ??_key_GetKey 0045  
               _EECON1bits 000FA6         __end_of_cgrom_char 195E           _EUSART_Write_Str 1A72  
                 __Hrparam 0000                   __Lrparam 0000          ??_ds18b20_readrom 004C  
       __end_of_lcd_gotoxy 1ACC             key_press@count 0025              _temperature_1 005F  
            _temperature_2 005D                   _clearLCD 1AE8                _key_pressed 002E  
       __end_of_key_GetKey 1B4E            ___lwdiv@divisor 0047            myIntL@snd_delay 002F  
          ___lwdiv@counter 004B                   __ptext10 1258                   __ptext11 188C  
                 __ptext20 1568                   __ptext12 1B02                   __ptext21 1466  
                 __ptext13 177C                   __ptext30 192C                   __ptext22 1ACC  
                 __ptext14 13DC                   __ptext31 1A2C                   __ptext23 15E0  
                 __ptext15 184E                   __ptext32 14EE                   __ptext24 18C2  
                 __ptext16 17C6                   __ptext33 1A72                   __ptext25 1A92  
                 __ptext17 19BE                   __ptext34 198E                   __ptext26 1B18  
                 __ptext18 18F8                   __ptext27 195E                   __ptext19 1654  
                 __ptext28 1160                   __ptext29 1AE8                   _lcdPrint 1334  
                 _en_snd_b 0330                   _lcdWrite 1A2C                   _en_snd_k 0331  
               ?_write_eep 0045                 ?_write_bit 0042                   _en_sound 0338  
                 _lcd_putc 1B38     ds18b20_get_temp@num_dq 0047                   _read_bit 1B02  
                 _read_eep 1B18      ds18b20_readrom@num_dq 0054                   _read_key 0339  
        cgrom_char@address 004B               _set_t_dq1_up 0031                   _tik_time 0035  
                 isa$xinst 000000                ??_lcdNibble 0045                   _ow_reset 195E  
                 int$flags 0068                   _sub_main 0062                   _symbol_4 1EE7  
                 _symbol_5 1EDF              _en_send_usart 033A                 _INTCONbits 000FF2  
              ??_key_press 0045                ??_init_uart 0045                ??_read_byte 0045  
                 intlevel1 0000                   intlevel2 0000           ___lwmod@dividend 004C  
    ds18b20_get_temp@minus 0045                 _OSCCONbits 000FD3               _outValPreset 0FD8  
ds18b20_readTemp@time_flag 004C  ds18b20_readTemp@timer_val 004D           cgrom_char@symbol 0049  
             ??_write_byte 0046            ___lwmod@divisor 004E       ds18b20_get_temp@temp 0049  
          ___lwmod@counter 0050                cgrom_char@i 004C                ??_write_eep 0046  
              ??_write_bit 0045                _pressed_key 0034         EUSART_Write@txData 0045  
       __end_of_write_byte 18F8                _sub_sel_kol 0032  
