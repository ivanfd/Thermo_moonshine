

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Fri Sep 16 13:30:07 2022

Microchip MPLAB XC8 C Compiler v2.36 (Pro license) build 20220127204148 Og9s 
     1                           	processor	18F2320
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    52                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    53                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    54                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    55                           	psect	pa_nodes0,global,class=CODE,delta=1
    56  0000                     
    57                           ; Version 2.40
    58                           ; Generated 17/11/2021 GMT
    59                           ; 
    60                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution. Publication is not required when
    74                           ;        this file is used in an embedded application.
    75                           ; 
    76                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    77                           ;        software without specific prior written permission.
    78                           ; 
    79                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    80                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    81                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    82                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    83                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    84                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    85                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    86                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    87                           ; 
    88                           ; 
    89                           ; Code-generator required, PIC18F2320 Definitions
    90                           ; 
    91                           ; SFR Addresses
    92  0000                     
    93                           	psect	idataCOMRAM
    94  001B92                     __pidataCOMRAM:
    95                           	callstack 0
    96                           
    97                           ;initializer for _temperature_2_old
    98  001B92  7FFF               	dw	32767
    99                           
   100                           ;initializer for _temperature_1_old
   101  001B94  7FFF               	dw	32767
   102                           
   103                           ;initializer for _temperature_2
   104  001B96  7FFF               	dw	32767
   105                           
   106                           ;initializer for _temperature_1
   107  001B98  7FFF               	dw	32767
   108                           
   109                           ;initializer for _dq_num
   110  001B9A  01                 	db	1
   111                           
   112                           ;initializer for _select
   113  001B9B  01                 	db	1
   114                           
   115                           ;initializer for _minus_2
   116  001B9C  2B                 	db	43
   117                           
   118                           ;initializer for _minus_1
   119  001B9D  2B                 	db	43
   120                           
   121                           	psect	mediumconst
   122  001E6C                     __pmediumconst:
   123                           	callstack 0
   124  001E6C  00                 	db	0
   125  001E6D                     _HD44780_CYR:
   126                           	callstack 0
   127  001E6D  41                 	db	65
   128  001E6E  A0                 	db	160
   129  001E6F  42                 	db	66
   130  001E70  A1                 	db	161
   131  001E71  E0                 	db	224
   132  001E72  45                 	db	69
   133  001E73  A3                 	db	163
   134  001E74  A4                 	db	164
   135  001E75  A5                 	db	165
   136  001E76  A6                 	db	166
   137  001E77  4B                 	db	75
   138  001E78  A7                 	db	167
   139  001E79  4D                 	db	77
   140  001E7A  48                 	db	72
   141  001E7B  4F                 	db	79
   142  001E7C  A8                 	db	168
   143  001E7D  50                 	db	80
   144  001E7E  43                 	db	67
   145  001E7F  54                 	db	84
   146  001E80  A9                 	db	169
   147  001E81  AA                 	db	170
   148  001E82  58                 	db	88
   149  001E83  E1                 	db	225
   150  001E84  AB                 	db	171
   151  001E85  AC                 	db	172
   152  001E86  E2                 	db	226
   153  001E87  AD                 	db	173
   154  001E88  AE                 	db	174
   155  001E89  62                 	db	98
   156  001E8A  AF                 	db	175
   157  001E8B  B0                 	db	176
   158  001E8C  B1                 	db	177
   159  001E8D  61                 	db	97
   160  001E8E  B2                 	db	178
   161  001E8F  B3                 	db	179
   162  001E90  B4                 	db	180
   163  001E91  E3                 	db	227
   164  001E92  65                 	db	101
   165  001E93  B6                 	db	182
   166  001E94  B7                 	db	183
   167  001E95  B8                 	db	184
   168  001E96  B9                 	db	185
   169  001E97  BA                 	db	186
   170  001E98  BB                 	db	187
   171  001E99  BC                 	db	188
   172  001E9A  BD                 	db	189
   173  001E9B  6F                 	db	111
   174  001E9C  BE                 	db	190
   175  001E9D  70                 	db	112
   176  001E9E  63                 	db	99
   177  001E9F  BF                 	db	191
   178  001EA0  79                 	db	121
   179  001EA1  E4                 	db	228
   180  001EA2  78                 	db	120
   181  001EA3  E5                 	db	229
   182  001EA4  C0                 	db	192
   183  001EA5  C1                 	db	193
   184  001EA6  E6                 	db	230
   185  001EA7  C2                 	db	194
   186  001EA8  C3                 	db	195
   187  001EA9  C4                 	db	196
   188  001EAA  C5                 	db	197
   189  001EAB  C6                 	db	198
   190  001EAC  C7                 	db	199
   191  001EAD                     __end_of_HD44780_CYR:
   192                           	callstack 0
   193  001EAD                     _fract:
   194                           	callstack 0
   195  001EAD  00                 	db	0
   196  001EAE  01                 	db	1
   197  001EAF  01                 	db	1
   198  001EB0  02                 	db	2
   199  001EB1  02                 	db	2
   200  001EB2  03                 	db	3
   201  001EB3  04                 	db	4
   202  001EB4  04                 	db	4
   203  001EB5  05                 	db	5
   204  001EB6  06                 	db	6
   205  001EB7  06                 	db	6
   206  001EB8  07                 	db	7
   207  001EB9  07                 	db	7
   208  001EBA  08                 	db	8
   209  001EBB  09                 	db	9
   210  001EBC  09                 	db	9
   211  001EBD                     __end_of_fract:
   212                           	callstack 0
   213  001EBD                     _symbol_5:
   214                           	callstack 0
   215  001EBD  06                 	db	6
   216  001EBE  09                 	db	9
   217  001EBF  09                 	db	9
   218  001EC0  06                 	db	6
   219  001EC1  00                 	db	0
   220  001EC2  00                 	db	0
   221  001EC3  0F                 	db	15
   222  001EC4  00                 	db	0
   223  001EC5                     __end_of_symbol_5:
   224                           	callstack 0
   225  001EC5                     _symbol_4:
   226                           	callstack 0
   227  001EC5  06                 	db	6
   228  001EC6  09                 	db	9
   229  001EC7  09                 	db	9
   230  001EC8  06                 	db	6
   231  001EC9  00                 	db	0
   232  001ECA  00                 	db	0
   233  001ECB  00                 	db	0
   234  001ECC  00                 	db	0
   235  001ECD                     __end_of_symbol_4:
   236                           	callstack 0
   237  0000                     _EECON2	set	4007
   238  0000                     _EEDATA	set	4008
   239  0000                     _EEADR	set	4009
   240  0000                     _PIR1bits	set	3998
   241  0000                     _TMR0L	set	4054
   242  0000                     _TMR0H	set	4055
   243  0000                     _TMR1L	set	4046
   244  0000                     _TMR1H	set	4047
   245  0000                     _LATB	set	3978
   246  0000                     _PORTA	set	3968
   247  0000                     _PORTB	set	3969
   248  0000                     _TRISCbits	set	3988
   249  0000                     _TRISAbits	set	3986
   250  0000                     _LATAbits	set	3977
   251  0000                     _T1CONbits	set	4045
   252  0000                     _PORTAbits	set	3968
   253  0000                     _LATC	set	3979
   254  0000                     _TXIF	set	31988
   255  0000                     _PORTC	set	3970
   256  0000                     _LATA	set	3977
   257  0000                     _LATCbits	set	3979
   258  0000                     _TRISA	set	3986
   259  0000                     _PIE1bits	set	3997
   260  0000                     _IPR1bits	set	3999
   261  0000                     _ADCON1bits	set	4033
   262  0000                     _OSCCONbits	set	4051
   263  0000                     _TRISC	set	3988
   264  0000                     _TRISB	set	3987
   265  0000                     _T0CONbits	set	4053
   266  0000                     _T1CON	set	4045
   267  0000                     _RCONbits	set	4048
   268  0000                     _EECON1bits	set	4006
   269  0000                     _INTCON2bits	set	4081
   270  0000                     _INTCONbits	set	4082
   271  0000                     _RCSTAbits	set	4011
   272  0000                     _TXSTAbits	set	4012
   273  0000                     _TXREG	set	4013
   274  0000                     _SPBRG	set	4015
   275  001ECD                     STR_27:
   276  001ECD  CD                 	db	-51
   277  001ECE  E0                 	db	-32
   278  001ECF  F2                 	db	-14
   279  001ED0  E8                 	db	-24
   280  001ED1  F1                 	db	-15
   281  001ED2  ED                 	db	-19
   282  001ED3  69                 	db	105	;'i'
   283  001ED4  F2                 	db	-14
   284  001ED5  FC                 	db	-4
   285  001ED6  20                 	db	32
   286  001ED7  E4                 	db	-28
   287  001ED8  E2                 	db	-30
   288  001ED9  B3                 	db	-77
   289  001EDA  20                 	db	32
   290  001EDB  EA                 	db	-22
   291  001EDC  ED                 	db	-19
   292  001EDD  00                 	db	0
   293  001EDE                     STR_26:
   294  001EDE  20                 	db	32
   295  001EDF  D4                 	db	-44
   296  001EE0  69                 	db	105	;'i'
   297  001EE1  EA                 	db	-22
   298  001EE2  F1                 	db	-15
   299  001EE3  E0                 	db	-32
   300  001EE4  F6                 	db	-10
   301  001EE5  69                 	db	105	;'i'
   302  001EE6  FF                 	db	-1
   303  001EE7  20                 	db	32
   304  001EE8  74                 	db	116	;'t'
   305  001EE9  20                 	db	32
   306  001EEA  EA                 	db	-22
   307  001EEB  EE                 	db	-18
   308  001EEC  EB                 	db	-21
   309  001EED  2E                 	db	46
   310  001EEE  00                 	db	0
   311  001EEF                     STR_17:
   312  001EEF  20                 	db	32
   313  001EF0  CA                 	db	-54
   314  001EF1  EE                 	db	-18
   315  001EF2  E4                 	db	-28
   316  001EF3  20                 	db	32
   317  001EF4  EF                 	db	-17
   318  001EF5  F0                 	db	-16
   319  001EF6  EE                 	db	-18
   320  001EF7  F7                 	db	-9
   321  001EF8  E8                 	db	-24
   322  001EF9  F2                 	db	-14
   323  001EFA  E0                 	db	-32
   324  001EFB  ED                 	db	-19
   325  001EFC  EE                 	db	-18
   326  001EFD  20                 	db	32
   327  001EFE  00                 	db	0
   328  001EFF                     STR_19:
   329  001EFF  20                 	db	32
   330  001F00  CA                 	db	-54
   331  001F01  EE                 	db	-18
   332  001F02  EB                 	db	-21
   333  001F03  28                 	db	40
   334  001F04  31                 	db	49	;'1'
   335  001F05  29                 	db	41
   336  001F06  20                 	db	32
   337  001F07  20                 	db	32
   338  001F08  CA                 	db	-54
   339  001F09  F3                 	db	-13
   340  001F0A  E1                 	db	-31
   341  001F0B  28                 	db	40
   342  001F0C  32                 	db	50	;'2'
   343  001F0D  29                 	db	41
   344  001F0E  00                 	db	0
   345  001F0F                     STR_1:
   346  001F0F  2D                 	db	45
   347  001F10  2D                 	db	45
   348  001F11  2D                 	db	45
   349  001F12  D2                 	db	-46
   350  001F13  C5                 	db	-59
   351  001F14  D0                 	db	-48
   352  001F15  CC                 	db	-52
   353  001F16  CE                 	db	-50
   354  001F17  CC                 	db	-52
   355  001F18  C5                 	db	-59
   356  001F19  D2                 	db	-46
   357  001F1A  D0                 	db	-48
   358  001F1B  2D                 	db	45
   359  001F1C  2D                 	db	45
   360  001F1D  2D                 	db	45
   361  001F1E  00                 	db	0
   362  001F1F                     STR_3:
   363  001F1F  C4                 	db	-60
   364  001F20  E0                 	db	-32
   365  001F21  F2                 	db	-14
   366  001F22  F7                 	db	-9
   367  001F23  E8                 	db	-24
   368  001F24  EA                 	db	-22
   369  001F25  20                 	db	32
   370  001F26  31                 	db	49	;'1'
   371  001F27  2C                 	db	44
   372  001F28  20                 	db	32
   373  001F29  E0                 	db	-32
   374  001F2A  E1                 	db	-31
   375  001F2B  EE                 	db	-18
   376  001F2C  20                 	db	32
   377  001F2D  32                 	db	50	;'2'
   378  001F2E  00                 	db	0
   379  001F2F                     STR_16:
   380  001F2F  20                 	db	32
   381  001F30  20                 	db	32
   382  001F31  31                 	db	49	;'1'
   383  001F32  20                 	db	32
   384  001F33  20                 	db	32
   385  001F34  20                 	db	32
   386  001F35  20                 	db	32
   387  001F36  20                 	db	32
   388  001F37  32                 	db	50	;'2'
   389  001F38  20                 	db	32
   390  001F39  20                 	db	32
   391  001F3A  20                 	db	32
   392  001F3B  31                 	db	49	;'1'
   393  001F3C  2D                 	db	45
   394  001F3D  32                 	db	50	;'2'
   395  001F3E  00                 	db	0
   396  001F3F                     STR_2:
   397  001F3F  28                 	db	40
   398  001F40  63                 	db	99	;'c'
   399  001F41  29                 	db	41
   400  001F42  49                 	db	73	;'I'
   401  001F43  76                 	db	118	;'v'
   402  001F44  61                 	db	97	;'a'
   403  001F45  6E                 	db	110	;'n'
   404  001F46  5F                 	db	95	;'_'
   405  001F47  66                 	db	102	;'f'
   406  001F48  64                 	db	100	;'d'
   407  001F49  20                 	db	32
   408  001F4A  76                 	db	118	;'v'
   409  001F4B  31                 	db	49	;'1'
   410  001F4C  2E                 	db	46
   411  001F4D  35                 	db	53	;'5'
   412  001F4E  00                 	db	0
   413  001F4F                     STR_15:
   414  001F4F  CF                 	db	-49
   415  001F50  EE                 	db	-18
   416  001F51  F0                 	db	-16
   417  001F52  69                 	db	105	;'i'
   418  001F53  E3                 	db	-29
   419  001F54  20                 	db	32
   420  001F55  D1                 	db	-47
   421  001F56  E8                 	db	-24
   422  001F57  E3                 	db	-29
   423  001F58  ED                 	db	-19
   424  001F59  2E                 	db	46
   425  001F5A  20                 	db	32
   426  001F5B  4C                 	db	76	;'L'
   427  001F5C  65                 	db	101	;'e'
   428  001F5D  64                 	db	100	;'d'
   429  001F5E  00                 	db	0
   430  001F5F                     STR_20:
   431  001F5F  20                 	db	32
   432  001F60  CA                 	db	-54
   433  001F61  EE                 	db	-18
   434  001F62  EB                 	db	-21
   435  001F63  EE                 	db	-18
   436  001F64  ED                 	db	-19
   437  001F65  E0                 	db	-32
   438  001F66  20                 	db	32
   439  001F67  20                 	db	32
   440  001F68  20                 	db	32
   441  001F69  20                 	db	32
   442  001F6A  CA                 	db	-54
   443  001F6B  F3                 	db	-13
   444  001F6C  E1                 	db	-31
   445  001F6D  00                 	db	0
   446  001F6E                     STR_25:
   447  001F6E  D2                 	db	-46
   448  001F6F  E5                 	db	-27
   449  001F70  EC                 	db	-20
   450  001F71  EF                 	db	-17
   451  001F72  20                 	db	32
   452  001F73  CD                 	db	-51
   453  001F74  E8                 	db	-24
   454  001F75  E7                 	db	-25
   455  001F76  3A                 	db	58	;':'
   456  001F77  20                 	db	32
   457  001F78  20                 	db	32
   458  001F79  20                 	db	32
   459  001F7A  20                 	db	32
   460  001F7B  20                 	db	32
   461  001F7C  00                 	db	0
   462  001F7D                     STR_18:
   463  001F7D  20                 	db	32
   464  001F7E  20                 	db	32
   465  001F7F  20                 	db	32
   466  001F80  C3                 	db	-61
   467  001F81  F0                 	db	-16
   468  001F82  E0                 	db	-32
   469  001F83  ED                 	db	-19
   470  001F84  E8                 	db	-24
   471  001F85  F6                 	db	-10
   472  001F86  69                 	db	105	;'i'
   473  001F87  20                 	db	32
   474  001F88  20                 	db	32
   475  001F89  20                 	db	32
   476  001F8A  00                 	db	0
   477  001F8B                     STR_23:
   478  001F8B  20                 	db	32
   479  001F8C  20                 	db	32
   480  001F8D  20                 	db	32
   481  001F8E  20                 	db	32
   482  001F8F  CA                 	db	-54
   483  001F90  F3                 	db	-13
   484  001F91  E1                 	db	-31
   485  001F92  EE                 	db	-18
   486  001F93  E2                 	db	-30
   487  001F94  E0                 	db	-32
   488  001F95  20                 	db	32
   489  001F96  20                 	db	32
   490  001F97  00                 	db	0
   491  001F98                     STR_21:
   492  001F98  20                 	db	32
   493  001F99  20                 	db	32
   494  001F9A  20                 	db	32
   495  001F9B  20                 	db	32
   496  001F9C  CA                 	db	-54
   497  001F9D  EE                 	db	-18
   498  001F9E  EB                 	db	-21
   499  001F9F  EE                 	db	-18
   500  001FA0  ED                 	db	-19
   501  001FA1  E0                 	db	-32
   502  001FA2  20                 	db	32
   503  001FA3  20                 	db	32
   504  001FA4  00                 	db	0
   505  001FA5                     STR_4:
   506  001FA5  C2                 	db	-62
   507  001FA6  E8                 	db	-24
   508  001FA7  E1                 	db	-31
   509  001FA8  69                 	db	105	;'i'
   510  001FA9  F0                 	db	-16
   511  001FAA  20                 	db	32
   512  001FAB  31                 	db	49	;'1'
   513  001FAC  38                 	db	56	;'8'
   514  001FAD  42                 	db	66	;'B'
   515  001FAE  32                 	db	50	;'2'
   516  001FAF  30                 	db	48	;'0'
   517  001FB0  3A                 	db	58	;':'
   518  001FB1  00                 	db	0
   519  001FB2                     STR_22:
   520  001FB2  D2                 	db	-46
   521  001FB3  E5                 	db	-27
   522  001FB4  EC                 	db	-20
   523  001FB5  EF                 	db	-17
   524  001FB6  20                 	db	32
   525  001FB7  C2                 	db	-62
   526  001FB8  E5                 	db	-27
   527  001FB9  F0                 	db	-16
   528  001FBA  F5                 	db	-11
   529  001FBB  3A                 	db	58	;':'
   530  001FBC  00                 	db	0
   531  001FBD                     STR_24:
   532  001FBD  C7                 	db	-57
   533  001FBE  E0                 	db	-32
   534  001FBF  E2                 	db	-30
   535  001FC0  E4                 	db	-28
   536  001FC1  E0                 	db	-32
   537  001FC2  ED                 	db	-19
   538  001FC3  ED                 	db	-19
   539  001FC4  FF                 	db	-1
   540  001FC5  00                 	db	0
   541  001FC6                     STR_12:
   542  001FC6  30                 	db	48	;'0'
   543  001FC7  30                 	db	48	;'0'
   544  001FC8  30                 	db	48	;'0'
   545  001FC9  30                 	db	48	;'0'
   546  001FCA  0D                 	db	13
   547  001FCB  0A                 	db	10
   548  001FCC  00                 	db	0
   549  001FCD                     STR_8:
   550  001FCD  30                 	db	48	;'0'
   551  001FCE  30                 	db	48	;'0'
   552  001FCF  30                 	db	48	;'0'
   553  001FD0  30                 	db	48	;'0'
   554  001FD1  00                 	db	0
   555  001FD2                     STR_14:
   556  001FD2  CA                 	db	-54
   557  001FD3  E1                 	db	-31
   558  001FD4  3A                 	db	58	;':'
   559  001FD5  00                 	db	0
   560  001FD6                     STR_13:
   561  001FD6  CA                 	db	-54
   562  001FD7  EB                 	db	-21
   563  001FD8  3A                 	db	58	;':'
   564  001FD9  00                 	db	0
   565  001FDA                     STR_9:
   566  001FDA  74                 	db	116	;'t'
   567  001FDB  62                 	db	98	;'b'
   568  001FDC  3A                 	db	58	;':'
   569  001FDD  00                 	db	0
   570  001FDE                     STR_6:
   571  001FDE  74                 	db	116	;'t'
   572  001FDF  6B                 	db	107	;'k'
   573  001FE0  3A                 	db	58	;':'
   574  001FE1  00                 	db	0
   575  001FE2                     STR_28:
   576  001FE2  31                 	db	49	;'1'
   577  001FE3  3A                 	db	58	;':'
   578  001FE4  00                 	db	0
   579  001FE5                     STR_29:
   580  001FE5  32                 	db	50	;'2'
   581  001FE6  3A                 	db	58	;':'
   582  001FE7  00                 	db	0
   583  001FE8                     STR_30:
   584  001FE8  33                 	db	51	;'3'
   585  001FE9  3A                 	db	58	;':'
   586  001FEA  00                 	db	0
   587  001FEB                     STR_31:
   588  001FEB  34                 	db	52	;'4'
   589  001FEC  3A                 	db	58	;':'
   590  001FED  00                 	db	0
   591  001FEE                     STR_32:
   592  001FEE  35                 	db	53	;'5'
   593  001FEF  3A                 	db	58	;':'
   594  001FF0  00                 	db	0
   595  001FF1                     STR_33:
   596  001FF1  36                 	db	54	;'6'
   597  001FF2  3A                 	db	58	;':'
   598  001FF3  00                 	db	0
   599  001FF4                     STR_34:
   600  001FF4  37                 	db	55	;'7'
   601  001FF5  3A                 	db	58	;':'
   602  001FF6  00                 	db	0
   603  001FF7                     STR_35:
   604  001FF7  38                 	db	56	;'8'
   605  001FF8  3A                 	db	58	;':'
   606  001FF9  00                 	db	0
   607  001FFA                     STR_36:
   608  001FFA  39                 	db	57	;'9'
   609  001FFB  3A                 	db	58	;':'
   610  001FFC  00                 	db	0
   611  001FFD                     STR_5:
   612  001FFD  31                 	db	49	;'1'
   613  001FFE  00                 	db	0
   614  001FFF  00                 	db	0	; dummy byte at the end
   615  0000                     
   616                           ; #config settings
   617                           
   618                           	psect	cinit
   619  001878                     __pcinit:
   620                           	callstack 0
   621  001878                     start_initialization:
   622                           	callstack 0
   623  001878                     __initialization:
   624                           	callstack 0
   625                           
   626                           ; Initialize objects allocated to COMRAM (12 bytes)
   627                           ; load TBLPTR registers with __pidataCOMRAM
   628  001878  0E92               	movlw	low __pidataCOMRAM
   629  00187A  6EF6               	movwf	tblptrl,c
   630  00187C  0E1B               	movlw	high __pidataCOMRAM
   631  00187E  6EF7               	movwf	tblptrh,c
   632  001880  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   633  001882  6EF8               	movwf	tblptru,c
   634  001884  EE00  F059         	lfsr	0,__pdataCOMRAM
   635  001888  EE10 F00C          	lfsr	1,12
   636  00188C                     copy_data0:
   637  00188C  0009               	tblrd		*+
   638  00188E  CFF5 FFEE          	movff	tablat,postinc0
   639  001892  50E5               	movf	postdec1,w,c
   640  001894  50E1               	movf	fsr1l,w,c
   641  001896  E1FA               	bnz	copy_data0
   642                           
   643                           ; Clear objects allocated to BITCOMRAM (2 bytes)
   644  001898  6A66               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
   645  00189A  6A65               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   646                           
   647                           ; Clear objects allocated to COMRAM (65 bytes)
   648  00189C  EE00  F001         	lfsr	0,__pbssCOMRAM
   649  0018A0  0E41               	movlw	65
   650  0018A2                     clear_0:
   651  0018A2  6AEE               	clrf	postinc0,c
   652  0018A4  06E8               	decf	wreg,f,c
   653  0018A6  E1FD               	bnz	clear_0
   654  0018A8                     end_of_initialization:
   655                           	callstack 0
   656  0018A8                     __end_of__initialization:
   657                           	callstack 0
   658  0018A8  9067               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   659  0018AA  9267               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   660  0018AC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   661  0018AE  6EF8               	movwf	tblptru,c
   662  0018B0  0100               	movlb	0
   663  0018B2  EF4F  F000         	goto	_main	;jump to C main() function
   664                           
   665                           	psect	bitbssCOMRAM
   666  000328                     __pbitbssCOMRAM:
   667                           	callstack 0
   668  000328                     _en_snd_b:
   669                           	callstack 0
   670  000328                     	ds	1
   671  000329                     _en_snd_k:
   672                           	callstack 0
   673  000329                     	ds	1
   674  00032A                     _snd_b_b:
   675                           	callstack 0
   676  00032A                     	ds	1
   677  00032B                     _snd_k_b:
   678                           	callstack 0
   679  00032B                     	ds	1
   680  00032C                     _snd_all:
   681                           	callstack 0
   682  00032C                     	ds	1
   683  00032D                     _snd_b:
   684                           	callstack 0
   685  00032D                     	ds	1
   686  00032E                     _snd_k:
   687                           	callstack 0
   688  00032E                     	ds	1
   689  00032F                     _sound_yes:
   690                           	callstack 0
   691  00032F                     	ds	1
   692  000330                     _en_sound:
   693                           	callstack 0
   694  000330                     	ds	1
   695  000331                     _read_key:
   696                           	callstack 0
   697  000331                     	ds	1
   698  000332                     _en_send_usart:
   699                           	callstack 0
   700  000332                     	ds	1
   701                           
   702                           	psect	bssCOMRAM
   703  000001                     __pbssCOMRAM:
   704                           	callstack 0
   705  000001                     _eusartTxBuffer:
   706                           	callstack 0
   707  000001                     	ds	16
   708  000011                     _rom_dq:
   709                           	callstack 0
   710  000011                     	ds	16
   711  000021                     _temp_ready:
   712                           	callstack 0
   713  000021                     	ds	4
   714  000025                     key_press@count:
   715                           	callstack 0
   716  000025                     	ds	2
   717  000027                     _temp1_fix:
   718                           	callstack 0
   719  000027                     	ds	2
   720  000029                     _set_t_dq2:
   721                           	callstack 0
   722  000029                     	ds	2
   723  00002B                     _eusartRxCount:
   724                           	callstack 0
   725  00002B                     	ds	1
   726  00002C                     _eusartTxBufferRemaining:
   727                           	callstack 0
   728  00002C                     	ds	1
   729  00002D                     _eusartTxHead:
   730                           	callstack 0
   731  00002D                     	ds	1
   732  00002E                     _key_pressed:
   733                           	callstack 0
   734  00002E                     	ds	1
   735  00002F                     myIntL@snd_delay:
   736                           	callstack 0
   737  00002F                     	ds	1
   738  000030                     _set_t_dq1_dwn:
   739                           	callstack 0
   740  000030                     	ds	1
   741  000031                     _set_t_dq1_up:
   742                           	callstack 0
   743  000031                     	ds	1
   744  000032                     _sub_sel_kol:
   745                           	callstack 0
   746  000032                     	ds	1
   747  000033                     _sub_sel:
   748                           	callstack 0
   749  000033                     	ds	1
   750  000034                     _pressed_key:
   751                           	callstack 0
   752  000034                     	ds	1
   753  000035                     _tik_time:
   754                           	callstack 0
   755  000035                     	ds	1
   756  000036                     _keyLong:
   757                           	callstack 0
   758  000036                     	ds	1
   759  000037                     _scratch:
   760                           	callstack 0
   761  000037                     	ds	9
   762  000040                     _time_flag:
   763                           	callstack 0
   764  000040                     	ds	1
   765  000041                     _timer_val:
   766                           	callstack 0
   767  000041                     	ds	1
   768                           
   769                           	psect	dataCOMRAM
   770  000059                     __pdataCOMRAM:
   771                           	callstack 0
   772  000059                     _temperature_2_old:
   773                           	callstack 0
   774  000059                     	ds	2
   775  00005B                     _temperature_1_old:
   776                           	callstack 0
   777  00005B                     	ds	2
   778  00005D                     _temperature_2:
   779                           	callstack 0
   780  00005D                     	ds	2
   781  00005F                     _temperature_1:
   782                           	callstack 0
   783  00005F                     	ds	2
   784  000061                     _dq_num:
   785                           	callstack 0
   786  000061                     	ds	1
   787  000062                     _select:
   788                           	callstack 0
   789  000062                     	ds	1
   790  000063                     _minus_2:
   791                           	callstack 0
   792  000063                     	ds	1
   793  000064                     _minus_1:
   794                           	callstack 0
   795  000064                     	ds	1
   796                           
   797                           	psect	cstackCOMRAM
   798  000042                     __pcstackCOMRAM:
   799                           	callstack 0
   800  000042                     ??_myIntL:
   801  000042                     
   802                           ; 1 bytes @ 0x0
   803  000042                     	ds	3
   804  000045                     ??_read_byte:
   805  000045                     ??_lcdNibble:
   806  000045                     ?_ds18b20_get_temp:
   807                           	callstack 0
   808  000045                     ?___awdiv:
   809                           	callstack 0
   810  000045                     ?___lwdiv:
   811                           	callstack 0
   812  000045                     ds18b20_get_temp@minus:
   813                           	callstack 0
   814  000045                     ds18b20_crc8@data_in:
   815                           	callstack 0
   816  000045                     ow_reset@presence:
   817                           	callstack 0
   818  000045                     write_bit@bitval:
   819                           	callstack 0
   820  000045                     write_eep@data:
   821                           	callstack 0
   822  000045                     key_press@key:
   823                           	callstack 0
   824  000045                     key_GetKey@key:
   825                           	callstack 0
   826  000045                     EUSART_Write@txData:
   827                           	callstack 0
   828  000045                     ___lbdiv@divisor:
   829                           	callstack 0
   830  000045                     Delay_ms@delay:
   831                           	callstack 0
   832  000045                     read_eep@address:
   833                           	callstack 0
   834  000045                     ___awdiv@dividend:
   835                           	callstack 0
   836  000045                     ___lwdiv@dividend:
   837                           	callstack 0
   838                           
   839                           ; 2 bytes @ 0x3
   840  000045                     	ds	1
   841  000046                     ??_write_byte:
   842  000046                     ds18b20_crc8@num_bytes:
   843                           	callstack 0
   844  000046                     lcdNibble@nibble:
   845                           	callstack 0
   846  000046                     write_eep@address:
   847                           	callstack 0
   848  000046                     ___lbdiv@dividend:
   849                           	callstack 0
   850  000046                     EUSART_Write_Str@t:
   851                           	callstack 0
   852                           
   853                           ; 2 bytes @ 0x4
   854  000046                     	ds	1
   855  000047                     ??_Delay_ms:
   856  000047                     ds18b20_get_temp@num_dq:
   857                           	callstack 0
   858  000047                     ds18b20_crc8@bit_counter:
   859                           	callstack 0
   860  000047                     lcdWrite@type:
   861                           	callstack 0
   862  000047                     read_byte@val:
   863                           	callstack 0
   864  000047                     ___lbdiv@counter:
   865                           	callstack 0
   866  000047                     ___awdiv@divisor:
   867                           	callstack 0
   868  000047                     ___lwdiv@divisor:
   869                           	callstack 0
   870                           
   871                           ; 2 bytes @ 0x5
   872  000047                     	ds	1
   873  000048                     ds18b20_get_temp@tmp:
   874                           	callstack 0
   875  000048                     ds18b20_crc8@data:
   876                           	callstack 0
   877  000048                     lcdWrite@byte:
   878                           	callstack 0
   879  000048                     read_byte@i:
   880                           	callstack 0
   881  000048                     write_byte@val:
   882                           	callstack 0
   883  000048                     ___lbdiv@quotient:
   884                           	callstack 0
   885  000048                     Delay_ms@i:
   886                           	callstack 0
   887                           
   888                           ; 2 bytes @ 0x6
   889  000048                     	ds	1
   890  000049                     ??_clearLCD:
   891  000049                     ds18b20_crc8@feedback_bit:
   892                           	callstack 0
   893  000049                     lcd_gotoxy@y:
   894                           	callstack 0
   895  000049                     lcd_putc@c:
   896                           	callstack 0
   897  000049                     write_byte@temp:
   898                           	callstack 0
   899  000049                     ___awdiv@counter:
   900                           	callstack 0
   901  000049                     ___lbmod@divisor:
   902                           	callstack 0
   903  000049                     ds18b20_get_temp@temp:
   904                           	callstack 0
   905  000049                     cgrom_char@symbol:
   906                           	callstack 0
   907  000049                     ___lwdiv@quotient:
   908                           	callstack 0
   909                           
   910                           ; 2 bytes @ 0x7
   911  000049                     	ds	1
   912  00004A                     ??_initLCD:
   913  00004A                     ds18b20_crc8@loop_count:
   914                           	callstack 0
   915  00004A                     lcd_gotoxy@x:
   916                           	callstack 0
   917  00004A                     write_byte@i:
   918                           	callstack 0
   919  00004A                     ___awdiv@sign:
   920                           	callstack 0
   921  00004A                     ___lbmod@dividend:
   922                           	callstack 0
   923                           
   924                           ; 1 bytes @ 0x8
   925  00004A                     	ds	1
   926  00004B                     ??_init_ds18b20:
   927  00004B                     ds18b20_crc8@crc:
   928                           	callstack 0
   929  00004B                     lcd_gotoxy@address:
   930                           	callstack 0
   931  00004B                     cgrom_char@address:
   932                           	callstack 0
   933  00004B                     ___lbmod@counter:
   934                           	callstack 0
   935  00004B                     ___lwdiv@counter:
   936                           	callstack 0
   937  00004B                     ___awdiv@quotient:
   938                           	callstack 0
   939                           
   940                           ; 2 bytes @ 0x9
   941  00004B                     	ds	1
   942  00004C                     ??_outValPreset:
   943  00004C                     ?___lwmod:
   944                           	callstack 0
   945  00004C                     ds18b20_readTemp@time_flag:
   946                           	callstack 0
   947  00004C                     cgrom_char@i:
   948                           	callstack 0
   949  00004C                     ___lbmod@rem:
   950                           	callstack 0
   951  00004C                     lcdPrint@t:
   952                           	callstack 0
   953  00004C                     ___lwmod@dividend:
   954                           	callstack 0
   955  00004C                     ds18b20_readrom@temp_rom:
   956                           	callstack 0
   957                           
   958                           ; 8 bytes @ 0xA
   959  00004C                     	ds	1
   960  00004D                     ?___awmod:
   961                           	callstack 0
   962  00004D                     init_ds18b20@q:
   963                           	callstack 0
   964  00004D                     ds18b20_readTemp@timer_val:
   965                           	callstack 0
   966  00004D                     ___awmod@dividend:
   967                           	callstack 0
   968                           
   969                           ; 2 bytes @ 0xB
   970  00004D                     	ds	1
   971  00004E                     ??_lcdPrint:
   972  00004E                     ??_ds18b20_readTemp:
   973  00004E                     init_ds18b20@i:
   974                           	callstack 0
   975  00004E                     ___lwmod@divisor:
   976                           	callstack 0
   977                           
   978                           ; 2 bytes @ 0xC
   979  00004E                     	ds	1
   980  00004F                     ___awmod@divisor:
   981                           	callstack 0
   982                           
   983                           ; 2 bytes @ 0xD
   984  00004F                     	ds	1
   985  000050                     ___lwmod@counter:
   986                           	callstack 0
   987  000050                     ds18b20_readTemp@temp:
   988                           	callstack 0
   989                           
   990                           ; 2 bytes @ 0xE
   991  000050                     	ds	1
   992  000051                     ___awmod@counter:
   993                           	callstack 0
   994                           
   995                           ; 1 bytes @ 0xF
   996  000051                     	ds	1
   997  000052                     ds18b20_readTemp@j:
   998                           	callstack 0
   999  000052                     ___awmod@sign:
  1000                           	callstack 0
  1001                           
  1002                           ; 1 bytes @ 0x10
  1003  000052                     	ds	1
  1004  000053                     ds18b20_readTemp@i:
  1005                           	callstack 0
  1006                           
  1007                           ; 1 bytes @ 0x11
  1008  000053                     	ds	1
  1009  000054                     ds18b20_readrom@num_dq:
  1010                           	callstack 0
  1011                           
  1012                           ; 1 bytes @ 0x12
  1013  000054                     	ds	1
  1014  000055                     ds18b20_readrom@i:
  1015                           	callstack 0
  1016                           
  1017                           ; 1 bytes @ 0x13
  1018  000055                     	ds	1
  1019  000056                     ??_main:
  1020                           
  1021                           ; 1 bytes @ 0x14
  1022  000056                     	ds	3
  1023                           
  1024 ;;
  1025 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1026 ;;
  1027 ;; *************** function _main *****************
  1028 ;; Defined at:
  1029 ;;		line 41 in file "main.c"
  1030 ;; Parameters:    Size  Location     Type
  1031 ;;		None
  1032 ;; Auto vars:     Size  Location     Type
  1033 ;;		None
  1034 ;; Return value:  Size  Location     Type
  1035 ;;                  1    wreg      void 
  1036 ;; Registers used:
  1037 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1038 ;; Tracked objects:
  1039 ;;		On entry : 0/0
  1040 ;;		On exit  : 0/0
  1041 ;;		Unchanged: 0/0
  1042 ;; Data sizes:     COMRAM   BANK0   BANK1
  1043 ;;      Params:         0       0       0
  1044 ;;      Locals:         0       0       0
  1045 ;;      Temps:          3       0       0
  1046 ;;      Totals:         3       0       0
  1047 ;;Total ram usage:        3 bytes
  1048 ;; Hardware stack levels required when called: 7
  1049 ;; This function calls:
  1050 ;;		_Delay_ms
  1051 ;;		_EUSART_Write
  1052 ;;		_EUSART_Write_Str
  1053 ;;		_Main_init
  1054 ;;		___awdiv
  1055 ;;		___awmod
  1056 ;;		___lbdiv
  1057 ;;		___lbmod
  1058 ;;		___lwdiv
  1059 ;;		___lwmod
  1060 ;;		_clearLCD
  1061 ;;		_ds18b20_get_temp
  1062 ;;		_ds18b20_readTemp
  1063 ;;		_ds18b20_readrom
  1064 ;;		_key_GetKey
  1065 ;;		_key_press
  1066 ;;		_lcdPrint
  1067 ;;		_lcd_gotoxy
  1068 ;;		_lcd_putc
  1069 ;;		_outValPreset
  1070 ;;		_read_eep
  1071 ;;		_write_eep
  1072 ;; This function is called by:
  1073 ;;		Startup code after reset
  1074 ;; This function uses a non-reentrant model
  1075 ;;
  1076                           
  1077                           	psect	text0
  1078  00009E                     __ptext0:
  1079                           	callstack 0
  1080  00009E                     _main:
  1081                           	callstack 24
  1082                           
  1083                           ;main.c: 42: Main_init();
  1084                           
  1085                           ;incstack = 0
  1086  00009E  EC67  F00A         	call	_Main_init	;wreg free
  1087                           
  1088                           ;main.c: 44: lcd_gotoxy(1, 1);
  1089  0000A2  0E01               	movlw	1
  1090  0000A4  6E49               	movwf	lcd_gotoxy@y^0,c
  1091  0000A6  EC8C  F00D         	call	_lcd_gotoxy
  1092                           
  1093                           ;main.c: 45: lcdPrint("---ÒÅÐÌÎÌÅÒÐ---");
  1094  0000AA  0E0F               	movlw	low STR_1
  1095  0000AC  6E4C               	movwf	lcdPrint@t^0,c
  1096  0000AE  0E1F               	movlw	high STR_1
  1097  0000B0  6E4D               	movwf	(lcdPrint@t+1)^0,c
  1098  0000B2  ECCE  F009         	call	_lcdPrint	;wreg free
  1099                           
  1100                           ;main.c: 46: lcd_gotoxy(1, 2);
  1101  0000B6  ECF6  F007         	call	PL28	;call to abstracted procedure
  1102  0000BA  EC8C  F00D         	call	_lcd_gotoxy
  1103                           
  1104                           ;main.c: 47: lcdPrint("(c)Ivan_fd v1.5");
  1105  0000BE  0E3F               	movlw	low STR_2
  1106  0000C0  6E4C               	movwf	lcdPrint@t^0,c
  1107  0000C2  0E1F               	movlw	high STR_2
  1108  0000C4  6E4D               	movwf	(lcdPrint@t+1)^0,c
  1109  0000C6  ECCE  F009         	call	_lcdPrint	;wreg free
  1110                           
  1111                           ;main.c: 48: Delay_ms(2000);
  1112  0000CA  0E07               	movlw	7
  1113  0000CC  6E46               	movwf	(Delay_ms@delay+1)^0,c
  1114  0000CE  0ED0               	movlw	208
  1115  0000D0  6E45               	movwf	Delay_ms@delay^0,c
  1116  0000D2  EC38  F00D         	call	_Delay_ms	;wreg free
  1117                           
  1118                           ;main.c: 49: clearLCD();
  1119  0000D6  ECA8  F00D         	call	_clearLCD	;wreg free
  1120                           
  1121                           ;main.c: 50: if ((PORTB & (1 << 1)) == 0) {
  1122  0000DA  B281               	btfsc	129,1,c	;volatile
  1123  0000DC  D017               	goto	l3489
  1124                           
  1125                           ;main.c: 51: clearLCD();
  1126  0000DE  ECA8  F00D         	call	_clearLCD	;wreg free
  1127                           
  1128                           ;main.c: 52: select = 2;
  1129  0000E2  0E02               	movlw	2
  1130                           
  1131                           ;main.c: 53: lcd_gotoxy(1, 1);
  1132  0000E4  EC02  F008         	call	PL38	;call to abstracted procedure
  1133  0000E8  EC8C  F00D         	call	_lcd_gotoxy
  1134                           
  1135                           ;main.c: 54: lcdPrint("Äàò÷èê 1, àáî 2");
  1136  0000EC  0E1F               	movlw	low STR_3
  1137  0000EE  6E4C               	movwf	lcdPrint@t^0,c
  1138  0000F0  0E1F               	movlw	high STR_3
  1139  0000F2  6E4D               	movwf	(lcdPrint@t+1)^0,c
  1140  0000F4  ECCE  F009         	call	_lcdPrint	;wreg free
  1141                           
  1142                           ;main.c: 55: lcd_gotoxy(1, 2);
  1143  0000F8  ECF6  F007         	call	PL28	;call to abstracted procedure
  1144  0000FC  EC8C  F00D         	call	_lcd_gotoxy
  1145                           
  1146                           ;main.c: 56: lcdPrint("Âèáið 18B20:");
  1147  000100  0EA5               	movlw	low STR_4
  1148  000102  6E4C               	movwf	lcdPrint@t^0,c
  1149  000104  0E1F               	movlw	high STR_4
  1150  000106  6E4D               	movwf	(lcdPrint@t+1)^0,c
  1151  000108  ECCE  F009         	call	_lcdPrint	;wreg free
  1152  00010C                     l3489:
  1153                           
  1154                           ;main.c: 58: };main.c: 60: set_t_dq1_up = read_eep(16);
  1155  00010C  6A46               	clrf	(read_eep@address+1)^0,c
  1156  00010E  0E10               	movlw	16
  1157  000110  6E45               	movwf	read_eep@address^0,c
  1158  000112  ECC0  F00D         	call	_read_eep	;wreg free
  1159  000116  6E31               	movwf	_set_t_dq1_up^0,c
  1160                           
  1161                           ;main.c: 61: set_t_dq1_dwn = read_eep(17);
  1162  000118  6A46               	clrf	(read_eep@address+1)^0,c
  1163  00011A  0E11               	movlw	17
  1164  00011C  6E45               	movwf	read_eep@address^0,c
  1165  00011E  ECC0  F00D         	call	_read_eep	;wreg free
  1166  000122  6E30               	movwf	_set_t_dq1_dwn^0,c
  1167                           
  1168                           ;main.c: 62: set_t_dq2 = (uint16_t) read_eep(23) << 8 | read_eep(24);
  1169  000124  EC15  F008         	call	PL50	;call to abstracted procedure
  1170  000128  ECC0  F00D         	call	_read_eep	;wreg free
  1171  00012C  EC06  F008         	call	PL40	;call to abstracted procedure
  1172  000130  ECC0  F00D         	call	_read_eep	;wreg free
  1173  000134  ECE8  F007         	call	PL24	;call to abstracted procedure
  1174                           
  1175                           ;main.c: 63: temp1_fix = (uint16_t) read_eep(20) << 8 | read_eep(20 + 1);
  1176  000138  6A46               	clrf	(read_eep@address+1)^0,c
  1177  00013A  0E15               	movlw	21
  1178  00013C  6E45               	movwf	read_eep@address^0,c
  1179  00013E  ECC0  F00D         	call	_read_eep	;wreg free
  1180  000142  6E56               	movwf	??_main^0,c
  1181  000144  6A46               	clrf	(read_eep@address+1)^0,c
  1182  000146  0E14               	movlw	20
  1183  000148  6E45               	movwf	read_eep@address^0,c
  1184  00014A  ECC0  F00D         	call	_read_eep	;wreg free
  1185  00014E  6E57               	movwf	(??_main+1)^0,c
  1186  000150  5056               	movf	??_main^0,w,c
  1187  000152  6E27               	movwf	_temp1_fix^0,c
  1188  000154  C057  F028         	movff	??_main+1,_temp1_fix+1
  1189                           
  1190                           ;main.c: 64: en_snd_k = read_eep(43);
  1191  000158  6A46               	clrf	(read_eep@address+1)^0,c
  1192  00015A  0E2B               	movlw	43
  1193  00015C  6E45               	movwf	read_eep@address^0,c
  1194  00015E  ECC0  F00D         	call	_read_eep	;wreg free
  1195  000162  6E56               	movwf	??_main^0,c
  1196  000164  3056               	rrcf	??_main^0,w,c
  1197  000166  E302               	bnc	u2500
  1198  000168  8265               	bsf	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  1199  00016A  D001               	goto	u2515
  1200  00016C                     u2500:
  1201  00016C  9265               	bcf	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  1202  00016E                     u2515:
  1203                           
  1204                           ;main.c: 65: en_snd_b = read_eep(44);
  1205  00016E  6A46               	clrf	(read_eep@address+1)^0,c
  1206  000170  0E2C               	movlw	44
  1207  000172  6E45               	movwf	read_eep@address^0,c
  1208  000174  ECC0  F00D         	call	_read_eep	;wreg free
  1209  000178  6E56               	movwf	??_main^0,c
  1210  00017A  3056               	rrcf	??_main^0,w,c
  1211  00017C  E302               	bnc	u2520
  1212  00017E  8065               	bsf	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  1213  000180  D001               	goto	u2535
  1214  000182                     u2520:
  1215  000182  9065               	bcf	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  1216  000184                     u2535:
  1217                           
  1218                           ;main.c: 67: if (!(en_snd_k) && !(en_snd_b)) {
  1219  000184  A265               	btfss	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  1220  000186  B065               	btfsc	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  1221  000188  D002               	goto	l182
  1222                           
  1223                           ;main.c: 68: sound_yes = 0;
  1224  00018A  9E65               	bcf	(_sound_yes/(0+8))^0,_sound_yes& (0+7),c
  1225                           
  1226                           ;main.c: 69: } else
  1227  00018C  D001               	goto	l3507
  1228  00018E                     l182:
  1229                           
  1230                           ;main.c: 70: sound_yes = 1;
  1231  00018E  8E65               	bsf	(_sound_yes/(0+8))^0,_sound_yes& (0+7),c
  1232  000190                     l3507:
  1233                           
  1234                           ;main.c: 72: lcd_gotoxy(10, 2);
  1235  000190  ECFF  F007         	call	PL36	;call to abstracted procedure
  1236  000194  EC8C  F00D         	call	_lcd_gotoxy
  1237                           
  1238                           ;main.c: 73: lcdPrint("1");
  1239  000198  0EFD               	movlw	low STR_5
  1240  00019A  6E4C               	movwf	lcdPrint@t^0,c
  1241  00019C  0E1F               	movlw	high STR_5
  1242  00019E  6E4D               	movwf	(lcdPrint@t+1)^0,c
  1243  0001A0  ECCE  F009         	call	_lcdPrint	;wreg free
  1244  0001A4                     l3511:
  1245                           
  1246                           ;main.c: 80: if (read_key) {
  1247  0001A4  A266               	btfss	(_read_key/(0+8))^0,_read_key& (0+7),c
  1248  0001A6  D003               	goto	l3517
  1249                           
  1250                           ;main.c: 81: key_press();
  1251  0001A8  ECC5  F00B         	call	_key_press	;wreg free
  1252                           
  1253                           ;main.c: 82: read_key = 0;
  1254  0001AC  9266               	bcf	(_read_key/(0+8))^0,_read_key& (0+7),c
  1255  0001AE                     l3517:
  1256                           
  1257                           ;main.c: 83: };main.c: 84: pressed_key = key_GetKey();
  1258  0001AE  ECD5  F00D         	call	_key_GetKey	;wreg free
  1259  0001B2  6E34               	movwf	_pressed_key^0,c
  1260                           
  1261                           ;main.c: 86: switch (select) {
  1262  0001B4  EF98  F007         	goto	l3993
  1263  0001B8                     l3519:
  1264                           
  1265                           ;main.c: 88: if (ds18b20_readTemp(&time_flag, &timer_val)) {
  1266  0001B8  0E40               	movlw	low _time_flag
  1267  0001BA  6E4C               	movwf	ds18b20_readTemp@time_flag^0,c
  1268  0001BC  0E41               	movlw	low _timer_val
  1269  0001BE  6E4D               	movwf	ds18b20_readTemp@timer_val^0,c
  1270  0001C0  EC60  F009         	call	_ds18b20_readTemp	;wreg free
  1271  0001C4  0900               	iorlw	0
  1272  0001C6  E027               	bz	l188
  1273                           
  1274                           ;main.c: 89: temperature_1_old = temperature_1;
  1275  0001C8  C05F  F05B         	movff	_temperature_1,_temperature_1_old
  1276  0001CC  C060  F05C         	movff	_temperature_1+1,_temperature_1_old+1
  1277                           
  1278                           ;main.c: 90: temperature_2_old = temperature_2;
  1279  0001D0  C05D  F059         	movff	_temperature_2,_temperature_2_old
  1280  0001D4  C05E  F05A         	movff	_temperature_2+1,_temperature_2_old+1
  1281                           
  1282                           ;main.c: 91: temperature_1 = ds18b20_get_temp(1, &minus_1);
  1283  0001D8  0E64               	movlw	low _minus_1
  1284  0001DA  6E45               	movwf	ds18b20_get_temp@minus^0,c
  1285  0001DC  0E01               	movlw	1
  1286  0001DE  EC22  F00A         	call	_ds18b20_get_temp
  1287  0001E2  C045  F05F         	movff	?_ds18b20_get_temp,_temperature_1
  1288  0001E6  C046  F060         	movff	?_ds18b20_get_temp+1,_temperature_1+1
  1289                           
  1290                           ;main.c: 92: temperature_2 = ds18b20_get_temp(2, &minus_2);
  1291  0001EA  0E63               	movlw	low _minus_2
  1292  0001EC  6E45               	movwf	ds18b20_get_temp@minus^0,c
  1293  0001EE  0E02               	movlw	2
  1294  0001F0  EC22  F00A         	call	_ds18b20_get_temp
  1295  0001F4  C045  F05D         	movff	?_ds18b20_get_temp,_temperature_2
  1296  0001F8  C046  F05E         	movff	?_ds18b20_get_temp+1,_temperature_2+1
  1297                           
  1298                           ;main.c: 93: if((temperature_1 != temperature_1_old) || (temperature_2 != temperature_2_
      +                          old))
  1299  0001FC  505B               	movf	_temperature_1_old^0,w,c
  1300  0001FE  185F               	xorwf	_temperature_1^0,w,c
  1301  000200  E109               	bnz	l191
  1302  000202  505C               	movf	(_temperature_1_old+1)^0,w,c
  1303  000204  1860               	xorwf	(_temperature_1+1)^0,w,c
  1304  000206  E106               	bnz	u2590
  1305  000208  5059               	movf	_temperature_2_old^0,w,c
  1306  00020A  185D               	xorwf	_temperature_2^0,w,c
  1307  00020C  E103               	bnz	u2590
  1308  00020E  505A               	movf	(_temperature_2_old+1)^0,w,c
  1309  000210  185E               	xorwf	(_temperature_2+1)^0,w,c
  1310  000212  E001               	bz	l188
  1311  000214                     u2590:
  1312  000214                     l191:
  1313                           
  1314                           ;main.c: 94: en_send_usart = 1;
  1315  000214  8466               	bsf	(_en_send_usart/(0+8))^0,_en_send_usart& (0+7),c
  1316  000216                     l188:
  1317                           
  1318                           ;main.c: 95: };main.c: 97: if (en_send_usart) {
  1319  000216  A466               	btfss	(_en_send_usart/(0+8))^0,_en_send_usart& (0+7),c
  1320  000218  D097               	goto	l3559
  1321                           
  1322                           ;main.c: 98: en_send_usart = 0;
  1323  00021A  9466               	bcf	(_en_send_usart/(0+8))^0,_en_send_usart& (0+7),c
  1324                           
  1325                           ;main.c: 99: if (temperature_1 != 32767) {
  1326  00021C  285F               	incf	_temperature_1^0,w,c
  1327  00021E  E103               	bnz	u2610
  1328  000220  0E7F               	movlw	127
  1329  000222  1860               	xorwf	(_temperature_1+1)^0,w,c
  1330  000224  E039               	bz	l3543
  1331  000226                     u2610:
  1332                           
  1333                           ;main.c: 100: EUSART_Write_Str("tk:");
  1334  000226  EC0B  F008         	call	PL46	;call to abstracted procedure
  1335  00022A  EC6D  F00D         	call	_EUSART_Write_Str	;wreg free
  1336                           
  1337                           ;main.c: 101: EUSART_Write(((temperature_1 / 1000) % 10) + 48);
  1338  00022E  ECDF  F007         	call	PL18	;call to abstracted procedure
  1339  000232  ECBD  F007         	call	PL4	;call to abstracted procedure
  1340  000236  EC17  F00C         	call	___lwdiv	;wreg free
  1341  00023A  ECB5  F007         	call	PL2	;call to abstracted procedure
  1342  00023E  EC5B  F00C         	call	___lwmod	;wreg free
  1343  000242  504C               	movf	?___lwmod^0,w,c
  1344  000244  0F30               	addlw	48
  1345  000246  ECFB  F00C         	call	_EUSART_Write
  1346                           
  1347                           ;main.c: 102: EUSART_Write(((temperature_1 / 100) % 10) + 48);
  1348  00024A  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1349  00024C  0E64               	movlw	100
  1350  00024E  ECBD  F007         	call	PL4	;call to abstracted procedure
  1351  000252  EC17  F00C         	call	___lwdiv	;wreg free
  1352  000256  ECB5  F007         	call	PL2	;call to abstracted procedure
  1353  00025A  EC5B  F00C         	call	___lwmod	;wreg free
  1354  00025E  504C               	movf	?___lwmod^0,w,c
  1355  000260  0F30               	addlw	48
  1356  000262  ECFB  F00C         	call	_EUSART_Write
  1357                           
  1358                           ;main.c: 103: EUSART_Write(((temperature_1 / 10) % 10) + 48);
  1359  000266  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1360  000268  0E0A               	movlw	10
  1361  00026A  ECBD  F007         	call	PL4	;call to abstracted procedure
  1362  00026E  EC17  F00C         	call	___lwdiv	;wreg free
  1363  000272  ECB5  F007         	call	PL2	;call to abstracted procedure
  1364  000276  EC5B  F00C         	call	___lwmod	;wreg free
  1365  00027A  504C               	movf	?___lwmod^0,w,c
  1366  00027C  0F30               	addlw	48
  1367  00027E  ECFB  F00C         	call	_EUSART_Write
  1368                           
  1369                           ;main.c: 104: EUSART_Write((temperature_1 % 10) + 48);
  1370  000282  ECCD  F007         	call	PL12	;call to abstracted procedure
  1371  000286  ECC9  F007         	call	PL10	;call to abstracted procedure
  1372  00028A  EC5B  F00C         	call	___lwmod	;wreg free
  1373  00028E  504C               	movf	?___lwmod^0,w,c
  1374  000290  0F30               	addlw	48
  1375  000292  ECFB  F00C         	call	_EUSART_Write
  1376                           
  1377                           ;main.c: 106: } else {
  1378  000296  D00A               	goto	l3545
  1379  000298                     l3543:
  1380                           
  1381                           ;main.c: 107: EUSART_Write_Str("tk:");
  1382  000298  EC0B  F008         	call	PL46	;call to abstracted procedure
  1383  00029C  EC6D  F00D         	call	_EUSART_Write_Str	;wreg free
  1384                           
  1385                           ;main.c: 108: EUSART_Write_Str("0000");
  1386  0002A0  0ECD               	movlw	low STR_8
  1387  0002A2  6E46               	movwf	EUSART_Write_Str@t^0,c
  1388  0002A4  0E1F               	movlw	high STR_8
  1389  0002A6  6E47               	movwf	(EUSART_Write_Str@t+1)^0,c
  1390  0002A8  EC6D  F00D         	call	_EUSART_Write_Str	;wreg free
  1391  0002AC                     l3545:
  1392                           
  1393                           ;main.c: 109: };main.c: 110: if (temperature_2 != 32767) {
  1394  0002AC  285D               	incf	_temperature_2^0,w,c
  1395  0002AE  E103               	bnz	u2620
  1396  0002B0  0E7F               	movlw	127
  1397  0002B2  185E               	xorwf	(_temperature_2+1)^0,w,c
  1398  0002B4  E03F               	bz	l3557
  1399  0002B6                     u2620:
  1400                           
  1401                           ;main.c: 111: EUSART_Write_Str("tb:");
  1402  0002B6  EC10  F008         	call	PL48	;call to abstracted procedure
  1403  0002BA  EC6D  F00D         	call	_EUSART_Write_Str	;wreg free
  1404                           
  1405                           ;main.c: 112: EUSART_Write(((temperature_2 / 1000) % 10) + 48);
  1406  0002BE  ECDF  F007         	call	PL18	;call to abstracted procedure
  1407  0002C2  ECC3  F007         	call	PL6	;call to abstracted procedure
  1408  0002C6  EC17  F00C         	call	___lwdiv	;wreg free
  1409  0002CA  ECB5  F007         	call	PL2	;call to abstracted procedure
  1410  0002CE  EC5B  F00C         	call	___lwmod	;wreg free
  1411  0002D2  504C               	movf	?___lwmod^0,w,c
  1412  0002D4  0F30               	addlw	48
  1413  0002D6  ECFB  F00C         	call	_EUSART_Write
  1414                           
  1415                           ;main.c: 113: EUSART_Write(((temperature_2 / 100) % 10) + 48);
  1416  0002DA  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1417  0002DC  0E64               	movlw	100
  1418  0002DE  ECC3  F007         	call	PL6	;call to abstracted procedure
  1419  0002E2  EC17  F00C         	call	___lwdiv	;wreg free
  1420  0002E6  ECB5  F007         	call	PL2	;call to abstracted procedure
  1421  0002EA  EC5B  F00C         	call	___lwmod	;wreg free
  1422  0002EE  504C               	movf	?___lwmod^0,w,c
  1423  0002F0  0F30               	addlw	48
  1424  0002F2  ECFB  F00C         	call	_EUSART_Write
  1425                           
  1426                           ;main.c: 114: EUSART_Write(((temperature_2 / 10) % 10) + 48);
  1427  0002F6  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1428  0002F8  0E0A               	movlw	10
  1429  0002FA  ECC3  F007         	call	PL6	;call to abstracted procedure
  1430  0002FE  EC17  F00C         	call	___lwdiv	;wreg free
  1431  000302  ECB5  F007         	call	PL2	;call to abstracted procedure
  1432  000306  EC5B  F00C         	call	___lwmod	;wreg free
  1433  00030A  504C               	movf	?___lwmod^0,w,c
  1434  00030C  0F30               	addlw	48
  1435  00030E  ECFB  F00C         	call	_EUSART_Write
  1436                           
  1437                           ;main.c: 115: EUSART_Write((temperature_2 % 10) + 48);
  1438  000312  ECD2  F007         	call	PL14	;call to abstracted procedure
  1439  000316  ECC9  F007         	call	PL10	;call to abstracted procedure
  1440  00031A  EC5B  F00C         	call	___lwmod	;wreg free
  1441  00031E  504C               	movf	?___lwmod^0,w,c
  1442  000320  0F30               	addlw	48
  1443  000322  ECFB  F00C         	call	_EUSART_Write
  1444                           
  1445                           ;main.c: 116: EUSART_Write_Str("\r\n");
  1446  000326  0ECA               	movlw	low (STR_12+4)
  1447  000328  6E46               	movwf	EUSART_Write_Str@t^0,c
  1448  00032A  0E1F               	movlw	high (STR_12+4)
  1449  00032C  6E47               	movwf	(EUSART_Write_Str@t+1)^0,c
  1450  00032E  EC6D  F00D         	call	_EUSART_Write_Str	;wreg free
  1451                           
  1452                           ;main.c: 117: } else {
  1453  000332  D00A               	goto	l3559
  1454  000334                     l3557:
  1455                           
  1456                           ;main.c: 118: EUSART_Write_Str("tb:");
  1457  000334  EC10  F008         	call	PL48	;call to abstracted procedure
  1458  000338  EC6D  F00D         	call	_EUSART_Write_Str	;wreg free
  1459                           
  1460                           ;main.c: 119: EUSART_Write_Str("0000\r\n");
  1461  00033C  0EC6               	movlw	low STR_12
  1462  00033E  6E46               	movwf	EUSART_Write_Str@t^0,c
  1463  000340  0E1F               	movlw	high STR_12
  1464  000342  6E47               	movwf	(EUSART_Write_Str@t+1)^0,c
  1465  000344  EC6D  F00D         	call	_EUSART_Write_Str	;wreg free
  1466  000348                     l3559:
  1467                           
  1468                           ;main.c: 121: };main.c: 122: };main.c: 128: lcd_gotoxy(1, 1);
  1469  000348  0E01               	movlw	1
  1470  00034A  6E49               	movwf	lcd_gotoxy@y^0,c
  1471  00034C  EC8C  F00D         	call	_lcd_gotoxy
  1472                           
  1473                           ;main.c: 129: lcdPrint("Êë:");
  1474  000350  0ED6               	movlw	low STR_13
  1475  000352  6E4C               	movwf	lcdPrint@t^0,c
  1476  000354  0E1F               	movlw	high STR_13
  1477  000356  6E4D               	movwf	(lcdPrint@t+1)^0,c
  1478  000358  ECCE  F009         	call	_lcdPrint	;wreg free
  1479                           
  1480                           ;main.c: 131: if (!(temperature_1 == 32767)) {
  1481  00035C  285F               	incf	_temperature_1^0,w,c
  1482  00035E  E104               	bnz	u2630
  1483  000360  0E7F               	movlw	127
  1484  000362  1860               	xorwf	(_temperature_1+1)^0,w,c
  1485  000364  E101 D0B3          	bz	l3575
  1486  000368                     u2630:
  1487                           
  1488                           ;main.c: 132: if (((temperature_1 / 1000) % 10) == 0) {
  1489  000368  ECDF  F007         	call	PL18	;call to abstracted procedure
  1490  00036C  ECBD  F007         	call	PL4	;call to abstracted procedure
  1491  000370  EC17  F00C         	call	___lwdiv	;wreg free
  1492  000374  ECB5  F007         	call	PL2	;call to abstracted procedure
  1493  000378  EC5B  F00C         	call	___lwmod	;wreg free
  1494  00037C  504C               	movf	?___lwmod^0,w,c
  1495  00037E  104D               	iorwf	(?___lwmod+1)^0,w,c
  1496  000380  E168               	bnz	l3573
  1497                           
  1498                           ;main.c: 133: if (((temperature_1 / 100) % 10) == 0) {
  1499  000382  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1500  000384  0E64               	movlw	100
  1501  000386  ECBD  F007         	call	PL4	;call to abstracted procedure
  1502  00038A  EC17  F00C         	call	___lwdiv	;wreg free
  1503  00038E  ECB5  F007         	call	PL2	;call to abstracted procedure
  1504  000392  EC5B  F00C         	call	___lwmod	;wreg free
  1505  000396  504C               	movf	?___lwmod^0,w,c
  1506  000398  104D               	iorwf	(?___lwmod+1)^0,w,c
  1507  00039A  E128               	bnz	l3571
  1508                           
  1509                           ;main.c: 136: lcd_putc(((temperature_1 / 10) % 10) + 48);
  1510  00039C  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1511  00039E  0E0A               	movlw	10
  1512  0003A0  ECBD  F007         	call	PL4	;call to abstracted procedure
  1513  0003A4  EC17  F00C         	call	___lwdiv	;wreg free
  1514  0003A8  ECB5  F007         	call	PL2	;call to abstracted procedure
  1515  0003AC  EC5B  F00C         	call	___lwmod	;wreg free
  1516  0003B0  504C               	movf	?___lwmod^0,w,c
  1517  0003B2  0F30               	addlw	48
  1518  0003B4  ECCF  F00D         	call	_lcd_putc
  1519                           
  1520                           ;main.c: 137: lcd_putc('.');
  1521  0003B8  0E2E               	movlw	46
  1522  0003BA  ECCF  F00D         	call	_lcd_putc
  1523                           
  1524                           ;main.c: 138: lcd_putc(((temperature_1 % 10) + 48));
  1525  0003BE  ECCD  F007         	call	PL12	;call to abstracted procedure
  1526  0003C2  ECC9  F007         	call	PL10	;call to abstracted procedure
  1527  0003C6  EC5B  F00C         	call	___lwmod	;wreg free
  1528  0003CA  504C               	movf	?___lwmod^0,w,c
  1529  0003CC  0F30               	addlw	48
  1530  0003CE  ECCF  F00D         	call	_lcd_putc
  1531                           
  1532                           ;main.c: 139: lcd_putc(0x01);
  1533  0003D2  0E01               	movlw	1
  1534  0003D4  ECCF  F00D         	call	_lcd_putc
  1535                           
  1536                           ;main.c: 141: lcd_putc(' ');
  1537  0003D8  0E20               	movlw	32
  1538  0003DA  ECCF  F00D         	call	_lcd_putc
  1539                           
  1540                           ;main.c: 142: lcd_putc(' ');
  1541  0003DE  0E20               	movlw	32
  1542  0003E0  ECCF  F00D         	call	_lcd_putc
  1543                           
  1544                           ;main.c: 143: lcd_putc(' ');
  1545  0003E4  0E20               	movlw	32
  1546  0003E6  ECCF  F00D         	call	_lcd_putc
  1547                           
  1548                           ;main.c: 144: } else {
  1549  0003EA  D086               	goto	l202
  1550  0003EC                     l3571:
  1551                           
  1552                           ;main.c: 146: lcd_putc(((temperature_1 / 100) % 10) + 48);
  1553  0003EC  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1554  0003EE  0E64               	movlw	100
  1555  0003F0  ECBD  F007         	call	PL4	;call to abstracted procedure
  1556  0003F4  EC17  F00C         	call	___lwdiv	;wreg free
  1557  0003F8  ECB5  F007         	call	PL2	;call to abstracted procedure
  1558  0003FC  EC5B  F00C         	call	___lwmod	;wreg free
  1559  000400  504C               	movf	?___lwmod^0,w,c
  1560  000402  0F30               	addlw	48
  1561  000404  ECCF  F00D         	call	_lcd_putc
  1562                           
  1563                           ;main.c: 147: lcd_putc(((temperature_1 / 10) % 10) + 48);
  1564  000408  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1565  00040A  0E0A               	movlw	10
  1566  00040C  ECBD  F007         	call	PL4	;call to abstracted procedure
  1567  000410  EC17  F00C         	call	___lwdiv	;wreg free
  1568  000414  ECB5  F007         	call	PL2	;call to abstracted procedure
  1569  000418  EC5B  F00C         	call	___lwmod	;wreg free
  1570  00041C  504C               	movf	?___lwmod^0,w,c
  1571  00041E  0F30               	addlw	48
  1572  000420  ECCF  F00D         	call	_lcd_putc
  1573                           
  1574                           ;main.c: 148: lcd_putc('.');
  1575  000424  0E2E               	movlw	46
  1576  000426  ECCF  F00D         	call	_lcd_putc
  1577                           
  1578                           ;main.c: 149: lcd_putc(((temperature_1 % 10) + 48));
  1579  00042A  ECCD  F007         	call	PL12	;call to abstracted procedure
  1580  00042E  ECC9  F007         	call	PL10	;call to abstracted procedure
  1581  000432  EC5B  F00C         	call	___lwmod	;wreg free
  1582  000436  504C               	movf	?___lwmod^0,w,c
  1583  000438  0F30               	addlw	48
  1584  00043A  ECCF  F00D         	call	_lcd_putc
  1585                           
  1586                           ;main.c: 150: lcd_putc(0x01);
  1587  00043E  0E01               	movlw	1
  1588  000440  ECCF  F00D         	call	_lcd_putc
  1589                           
  1590                           ;main.c: 152: lcd_putc(' ');
  1591  000444  0E20               	movlw	32
  1592  000446  ECCF  F00D         	call	_lcd_putc
  1593                           
  1594                           ;main.c: 153: lcd_putc(' ');
  1595  00044A  0E20               	movlw	32
  1596  00044C  ECCF  F00D         	call	_lcd_putc
  1597  000450  D053               	goto	l202
  1598  000452                     l3573:
  1599                           
  1600                           ;main.c: 158: lcd_putc(((temperature_1 / 1000) % 10) + 48);
  1601  000452  ECDF  F007         	call	PL18	;call to abstracted procedure
  1602  000456  ECBD  F007         	call	PL4	;call to abstracted procedure
  1603  00045A  EC17  F00C         	call	___lwdiv	;wreg free
  1604  00045E  ECB5  F007         	call	PL2	;call to abstracted procedure
  1605  000462  EC5B  F00C         	call	___lwmod	;wreg free
  1606  000466  504C               	movf	?___lwmod^0,w,c
  1607  000468  0F30               	addlw	48
  1608  00046A  ECCF  F00D         	call	_lcd_putc
  1609                           
  1610                           ;main.c: 159: lcd_putc(((temperature_1 / 100) % 10) + 48);
  1611  00046E  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1612  000470  0E64               	movlw	100
  1613  000472  ECBD  F007         	call	PL4	;call to abstracted procedure
  1614  000476  EC17  F00C         	call	___lwdiv	;wreg free
  1615  00047A  ECB5  F007         	call	PL2	;call to abstracted procedure
  1616  00047E  EC5B  F00C         	call	___lwmod	;wreg free
  1617  000482  504C               	movf	?___lwmod^0,w,c
  1618  000484  0F30               	addlw	48
  1619  000486  ECCF  F00D         	call	_lcd_putc
  1620                           
  1621                           ;main.c: 160: lcd_putc(((temperature_1 / 10) % 10) + 48);
  1622  00048A  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1623  00048C  0E0A               	movlw	10
  1624  00048E  ECBD  F007         	call	PL4	;call to abstracted procedure
  1625  000492  EC17  F00C         	call	___lwdiv	;wreg free
  1626  000496  ECB5  F007         	call	PL2	;call to abstracted procedure
  1627  00049A  EC5B  F00C         	call	___lwmod	;wreg free
  1628  00049E  504C               	movf	?___lwmod^0,w,c
  1629  0004A0  0F30               	addlw	48
  1630  0004A2  ECCF  F00D         	call	_lcd_putc
  1631                           
  1632                           ;main.c: 161: lcd_putc('.');
  1633  0004A6  0E2E               	movlw	46
  1634  0004A8  ECCF  F00D         	call	_lcd_putc
  1635                           
  1636                           ;main.c: 162: lcd_putc(((temperature_1 % 10) + 48));
  1637  0004AC  ECCD  F007         	call	PL12	;call to abstracted procedure
  1638  0004B0  ECC9  F007         	call	PL10	;call to abstracted procedure
  1639  0004B4  EC5B  F00C         	call	___lwmod	;wreg free
  1640  0004B8  504C               	movf	?___lwmod^0,w,c
  1641  0004BA  0F30               	addlw	48
  1642  0004BC  ECCF  F00D         	call	_lcd_putc
  1643                           
  1644                           ;main.c: 163: lcd_putc(0x01);
  1645  0004C0  0E01               	movlw	1
  1646  0004C2  ECCF  F00D         	call	_lcd_putc
  1647                           
  1648                           ;main.c: 165: lcd_putc(' ');
  1649  0004C6  0E20               	movlw	32
  1650  0004C8  ECCF  F00D         	call	_lcd_putc
  1651  0004CC  D015               	goto	l202
  1652  0004CE                     l3575:
  1653                           
  1654                           ;main.c: 169: lcd_putc('-');
  1655  0004CE  0E2D               	movlw	45
  1656  0004D0  ECCF  F00D         	call	_lcd_putc
  1657                           
  1658                           ;main.c: 170: lcd_putc('-');
  1659  0004D4  0E2D               	movlw	45
  1660  0004D6  ECCF  F00D         	call	_lcd_putc
  1661                           
  1662                           ;main.c: 171: lcd_putc('-');
  1663  0004DA  0E2D               	movlw	45
  1664  0004DC  ECCF  F00D         	call	_lcd_putc
  1665                           
  1666                           ;main.c: 172: lcd_putc(' ');
  1667  0004E0  0E20               	movlw	32
  1668  0004E2  ECCF  F00D         	call	_lcd_putc
  1669                           
  1670                           ;main.c: 173: lcd_putc(' ');
  1671  0004E6  0E20               	movlw	32
  1672  0004E8  ECCF  F00D         	call	_lcd_putc
  1673                           
  1674                           ;main.c: 174: lcd_putc(' ');
  1675  0004EC  0E20               	movlw	32
  1676  0004EE  ECCF  F00D         	call	_lcd_putc
  1677                           
  1678                           ;main.c: 175: lcd_putc(' ');
  1679  0004F2  0E20               	movlw	32
  1680  0004F4  ECCF  F00D         	call	_lcd_putc
  1681  0004F8                     l202:
  1682                           
  1683                           ;main.c: 176: };main.c: 180: lcd_gotoxy(11, 1);
  1684  0004F8  0E01               	movlw	1
  1685  0004FA  6E49               	movwf	lcd_gotoxy@y^0,c
  1686  0004FC  0E0B               	movlw	11
  1687  0004FE  EC8C  F00D         	call	_lcd_gotoxy
  1688                           
  1689                           ;main.c: 182: lcd_putc(0xAA);
  1690  000502  0EAA               	movlw	170
  1691  000504  ECCF  F00D         	call	_lcd_putc
  1692                           
  1693                           ;main.c: 183: lcd_putc(((temp1_fix / 100) % 10) + 48);
  1694  000508  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1695  00050A  0E64               	movlw	100
  1696  00050C  ECF9  F007         	call	PL34	;call to abstracted procedure
  1697  000510  EC17  F00C         	call	___lwdiv	;wreg free
  1698  000514  ECB5  F007         	call	PL2	;call to abstracted procedure
  1699  000518  EC5B  F00C         	call	___lwmod	;wreg free
  1700  00051C  504C               	movf	?___lwmod^0,w,c
  1701  00051E  0F30               	addlw	48
  1702  000520  ECCF  F00D         	call	_lcd_putc
  1703                           
  1704                           ;main.c: 184: lcd_putc(((temp1_fix / 10) % 10) + 48);
  1705  000524  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1706  000526  0E0A               	movlw	10
  1707  000528  ECF9  F007         	call	PL34	;call to abstracted procedure
  1708  00052C  EC17  F00C         	call	___lwdiv	;wreg free
  1709  000530  ECB5  F007         	call	PL2	;call to abstracted procedure
  1710  000534  EC5B  F00C         	call	___lwmod	;wreg free
  1711  000538  504C               	movf	?___lwmod^0,w,c
  1712  00053A  0F30               	addlw	48
  1713  00053C  ECCF  F00D         	call	_lcd_putc
  1714                           
  1715                           ;main.c: 185: lcd_putc('.');
  1716  000540  0E2E               	movlw	46
  1717  000542  ECCF  F00D         	call	_lcd_putc
  1718                           
  1719                           ;main.c: 186: lcd_putc(((temp1_fix % 10) + 48));
  1720  000546  C027  F04C         	movff	_temp1_fix,___lwmod@dividend
  1721  00054A  C028  F04D         	movff	_temp1_fix+1,___lwmod@dividend+1
  1722  00054E  ECC9  F007         	call	PL10	;call to abstracted procedure
  1723  000552  EC5B  F00C         	call	___lwmod	;wreg free
  1724  000556  504C               	movf	?___lwmod^0,w,c
  1725  000558  0F30               	addlw	48
  1726  00055A  ECCF  F00D         	call	_lcd_putc
  1727                           
  1728                           ;main.c: 187: (en_snd_k) ? lcd_putc(2) : lcd_putc(1);
  1729  00055E  A265               	btfss	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  1730  000560  D004               	goto	l3581
  1731  000562  0E02               	movlw	2
  1732  000564  ECCF  F00D         	call	_lcd_putc
  1733  000568  D003               	goto	l206
  1734  00056A                     l3581:
  1735  00056A  0E01               	movlw	1
  1736  00056C  ECCF  F00D         	call	_lcd_putc
  1737  000570                     l206:
  1738                           
  1739                           ;main.c: 189: lcd_gotoxy(1, 2);
  1740  000570  ECF6  F007         	call	PL28	;call to abstracted procedure
  1741  000574  EC8C  F00D         	call	_lcd_gotoxy
  1742                           
  1743                           ;main.c: 190: lcdPrint("Êá:");
  1744  000578  0ED2               	movlw	low STR_14
  1745  00057A  6E4C               	movwf	lcdPrint@t^0,c
  1746  00057C  0E1F               	movlw	high STR_14
  1747  00057E  6E4D               	movwf	(lcdPrint@t+1)^0,c
  1748  000580  ECCE  F009         	call	_lcdPrint	;wreg free
  1749                           
  1750                           ;main.c: 192: if (!(temperature_2 == 32767)) {
  1751  000584  285D               	incf	_temperature_2^0,w,c
  1752  000586  E104               	bnz	u2670
  1753  000588  0E7F               	movlw	127
  1754  00058A  185E               	xorwf	(_temperature_2+1)^0,w,c
  1755  00058C  E101 D0AA          	bz	l3597
  1756  000590                     u2670:
  1757                           
  1758                           ;main.c: 193: if (((temperature_2 / 1000) % 10) == 0) {
  1759  000590  ECDF  F007         	call	PL18	;call to abstracted procedure
  1760  000594  ECC3  F007         	call	PL6	;call to abstracted procedure
  1761  000598  EC17  F00C         	call	___lwdiv	;wreg free
  1762  00059C  ECB5  F007         	call	PL2	;call to abstracted procedure
  1763  0005A0  EC5B  F00C         	call	___lwmod	;wreg free
  1764  0005A4  504C               	movf	?___lwmod^0,w,c
  1765  0005A6  104D               	iorwf	(?___lwmod+1)^0,w,c
  1766  0005A8  E162               	bnz	l3595
  1767                           
  1768                           ;main.c: 194: if (((temperature_2 / 100) % 10) == 0) {
  1769  0005AA  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1770  0005AC  0E64               	movlw	100
  1771  0005AE  ECC3  F007         	call	PL6	;call to abstracted procedure
  1772  0005B2  EC17  F00C         	call	___lwdiv	;wreg free
  1773  0005B6  ECB5  F007         	call	PL2	;call to abstracted procedure
  1774  0005BA  EC5B  F00C         	call	___lwmod	;wreg free
  1775  0005BE  504C               	movf	?___lwmod^0,w,c
  1776  0005C0  104D               	iorwf	(?___lwmod+1)^0,w,c
  1777  0005C2  E125               	bnz	l3593
  1778                           
  1779                           ;main.c: 197: lcd_putc(((temperature_2 / 10) % 10) + 48);
  1780  0005C4  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1781  0005C6  0E0A               	movlw	10
  1782  0005C8  ECC3  F007         	call	PL6	;call to abstracted procedure
  1783  0005CC  EC17  F00C         	call	___lwdiv	;wreg free
  1784  0005D0  ECB5  F007         	call	PL2	;call to abstracted procedure
  1785  0005D4  EC5B  F00C         	call	___lwmod	;wreg free
  1786  0005D8  504C               	movf	?___lwmod^0,w,c
  1787  0005DA  0F30               	addlw	48
  1788  0005DC  ECCF  F00D         	call	_lcd_putc
  1789                           
  1790                           ;main.c: 198: lcd_putc('.');
  1791  0005E0  0E2E               	movlw	46
  1792  0005E2  ECCF  F00D         	call	_lcd_putc
  1793                           
  1794                           ;main.c: 199: lcd_putc(((temperature_2 % 10) + 48));
  1795  0005E6  ECD2  F007         	call	PL14	;call to abstracted procedure
  1796  0005EA  ECC9  F007         	call	PL10	;call to abstracted procedure
  1797  0005EE  EC5B  F00C         	call	___lwmod	;wreg free
  1798  0005F2  504C               	movf	?___lwmod^0,w,c
  1799  0005F4  0F30               	addlw	48
  1800  0005F6  ECCF  F00D         	call	_lcd_putc
  1801                           
  1802                           ;main.c: 200: lcd_putc(0x01);
  1803  0005FA  0E01               	movlw	1
  1804  0005FC  ECCF  F00D         	call	_lcd_putc
  1805                           
  1806                           ;main.c: 202: lcd_putc(' ');
  1807  000600  0E20               	movlw	32
  1808  000602  ECCF  F00D         	call	_lcd_putc
  1809                           
  1810                           ;main.c: 203: lcd_putc(' ');
  1811  000606  0E20               	movlw	32
  1812  000608  ECCF  F00D         	call	_lcd_putc
  1813                           
  1814                           ;main.c: 205: } else {
  1815  00060C  D07D               	goto	l212
  1816  00060E                     l3593:
  1817                           
  1818                           ;main.c: 207: lcd_putc(((temperature_2 / 100) % 10) + 48);
  1819  00060E  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1820  000610  0E64               	movlw	100
  1821  000612  ECC3  F007         	call	PL6	;call to abstracted procedure
  1822  000616  EC17  F00C         	call	___lwdiv	;wreg free
  1823  00061A  ECB5  F007         	call	PL2	;call to abstracted procedure
  1824  00061E  EC5B  F00C         	call	___lwmod	;wreg free
  1825  000622  504C               	movf	?___lwmod^0,w,c
  1826  000624  0F30               	addlw	48
  1827  000626  ECCF  F00D         	call	_lcd_putc
  1828                           
  1829                           ;main.c: 208: lcd_putc(((temperature_2 / 10) % 10) + 48);
  1830  00062A  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1831  00062C  0E0A               	movlw	10
  1832  00062E  ECC3  F007         	call	PL6	;call to abstracted procedure
  1833  000632  EC17  F00C         	call	___lwdiv	;wreg free
  1834  000636  ECB5  F007         	call	PL2	;call to abstracted procedure
  1835  00063A  EC5B  F00C         	call	___lwmod	;wreg free
  1836  00063E  504C               	movf	?___lwmod^0,w,c
  1837  000640  0F30               	addlw	48
  1838  000642  ECCF  F00D         	call	_lcd_putc
  1839                           
  1840                           ;main.c: 209: lcd_putc('.');
  1841  000646  0E2E               	movlw	46
  1842  000648  ECCF  F00D         	call	_lcd_putc
  1843                           
  1844                           ;main.c: 210: lcd_putc(((temperature_2 % 10) + 48));
  1845  00064C  ECD2  F007         	call	PL14	;call to abstracted procedure
  1846  000650  ECC9  F007         	call	PL10	;call to abstracted procedure
  1847  000654  EC5B  F00C         	call	___lwmod	;wreg free
  1848  000658  504C               	movf	?___lwmod^0,w,c
  1849  00065A  0F30               	addlw	48
  1850  00065C  ECCF  F00D         	call	_lcd_putc
  1851                           
  1852                           ;main.c: 211: lcd_putc(0x01);
  1853  000660  0E01               	movlw	1
  1854  000662  ECCF  F00D         	call	_lcd_putc
  1855                           
  1856                           ;main.c: 212: lcd_putc(' ');
  1857  000666  0E20               	movlw	32
  1858  000668  ECCF  F00D         	call	_lcd_putc
  1859  00066C  D04D               	goto	l212
  1860  00066E                     l3595:
  1861                           
  1862                           ;main.c: 217: lcd_putc(((temperature_2 / 1000) % 10) + 48);
  1863  00066E  ECDF  F007         	call	PL18	;call to abstracted procedure
  1864  000672  ECC3  F007         	call	PL6	;call to abstracted procedure
  1865  000676  EC17  F00C         	call	___lwdiv	;wreg free
  1866  00067A  ECB5  F007         	call	PL2	;call to abstracted procedure
  1867  00067E  EC5B  F00C         	call	___lwmod	;wreg free
  1868  000682  504C               	movf	?___lwmod^0,w,c
  1869  000684  0F30               	addlw	48
  1870  000686  ECCF  F00D         	call	_lcd_putc
  1871                           
  1872                           ;main.c: 218: lcd_putc(((temperature_2 / 100) % 10) + 48);
  1873  00068A  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1874  00068C  0E64               	movlw	100
  1875  00068E  ECC3  F007         	call	PL6	;call to abstracted procedure
  1876  000692  EC17  F00C         	call	___lwdiv	;wreg free
  1877  000696  ECB5  F007         	call	PL2	;call to abstracted procedure
  1878  00069A  EC5B  F00C         	call	___lwmod	;wreg free
  1879  00069E  504C               	movf	?___lwmod^0,w,c
  1880  0006A0  0F30               	addlw	48
  1881  0006A2  ECCF  F00D         	call	_lcd_putc
  1882                           
  1883                           ;main.c: 219: lcd_putc(((temperature_2 / 10) % 10) + 48);
  1884  0006A6  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1885  0006A8  0E0A               	movlw	10
  1886  0006AA  ECC3  F007         	call	PL6	;call to abstracted procedure
  1887  0006AE  EC17  F00C         	call	___lwdiv	;wreg free
  1888  0006B2  ECB5  F007         	call	PL2	;call to abstracted procedure
  1889  0006B6  EC5B  F00C         	call	___lwmod	;wreg free
  1890  0006BA  504C               	movf	?___lwmod^0,w,c
  1891  0006BC  0F30               	addlw	48
  1892  0006BE  ECCF  F00D         	call	_lcd_putc
  1893                           
  1894                           ;main.c: 220: lcd_putc('.');
  1895  0006C2  0E2E               	movlw	46
  1896  0006C4  ECCF  F00D         	call	_lcd_putc
  1897                           
  1898                           ;main.c: 221: lcd_putc(((temperature_2 % 10) + 48));
  1899  0006C8  ECD2  F007         	call	PL14	;call to abstracted procedure
  1900  0006CC  ECC9  F007         	call	PL10	;call to abstracted procedure
  1901  0006D0  EC5B  F00C         	call	___lwmod	;wreg free
  1902  0006D4  504C               	movf	?___lwmod^0,w,c
  1903  0006D6  0F30               	addlw	48
  1904  0006D8  ECCF  F00D         	call	_lcd_putc
  1905                           
  1906                           ;main.c: 222: lcd_putc(0x01);
  1907  0006DC  0E01               	movlw	1
  1908  0006DE  ECCF  F00D         	call	_lcd_putc
  1909  0006E2  D012               	goto	l212
  1910  0006E4                     l3597:
  1911                           
  1912                           ;main.c: 226: lcd_putc('-');
  1913  0006E4  0E2D               	movlw	45
  1914  0006E6  ECCF  F00D         	call	_lcd_putc
  1915                           
  1916                           ;main.c: 227: lcd_putc('-');
  1917  0006EA  0E2D               	movlw	45
  1918  0006EC  ECCF  F00D         	call	_lcd_putc
  1919                           
  1920                           ;main.c: 228: lcd_putc('-');
  1921  0006F0  0E2D               	movlw	45
  1922  0006F2  ECCF  F00D         	call	_lcd_putc
  1923                           
  1924                           ;main.c: 229: lcd_putc(' ');
  1925  0006F6  0E20               	movlw	32
  1926  0006F8  ECCF  F00D         	call	_lcd_putc
  1927                           
  1928                           ;main.c: 230: lcd_putc(' ');
  1929  0006FC  0E20               	movlw	32
  1930  0006FE  ECCF  F00D         	call	_lcd_putc
  1931                           
  1932                           ;main.c: 231: lcd_putc(' ');
  1933  000702  0E20               	movlw	32
  1934  000704  ECCF  F00D         	call	_lcd_putc
  1935  000708                     l212:
  1936                           
  1937                           ;main.c: 233: };main.c: 236: lcd_gotoxy(11, 2);
  1938  000708  EC19  F008         	call	PL60	;call to abstracted procedure
  1939  00070C  EC8C  F00D         	call	_lcd_gotoxy
  1940                           
  1941                           ;main.c: 238: lcd_putc(0xbe);
  1942  000710  0EBE               	movlw	190
  1943  000712  ECCF  F00D         	call	_lcd_putc
  1944                           
  1945                           ;main.c: 240: lcd_putc(((set_t_dq2 / 100) % 10) + 48);
  1946  000716  6A48               	clrf	(___awdiv@divisor+1)^0,c
  1947  000718  0E64               	movlw	100
  1948  00071A  ECE2  F007         	call	PL22	;call to abstracted procedure
  1949  00071E  ECE8  F00A         	call	___awdiv	;wreg free
  1950  000722  ECD7  F007         	call	PL16	;call to abstracted procedure
  1951  000726  EC5E  F00B         	call	___awmod	;wreg free
  1952  00072A  504D               	movf	?___awmod^0,w,c
  1953  00072C  0F30               	addlw	48
  1954  00072E  ECCF  F00D         	call	_lcd_putc
  1955                           
  1956                           ;main.c: 241: lcd_putc(((set_t_dq2 / 10) % 10) + 48);
  1957  000732  6A48               	clrf	(___awdiv@divisor+1)^0,c
  1958  000734  0E0A               	movlw	10
  1959  000736  ECE2  F007         	call	PL22	;call to abstracted procedure
  1960  00073A  ECE8  F00A         	call	___awdiv	;wreg free
  1961  00073E  ECD7  F007         	call	PL16	;call to abstracted procedure
  1962  000742  EC5E  F00B         	call	___awmod	;wreg free
  1963  000746  504D               	movf	?___awmod^0,w,c
  1964  000748  0F30               	addlw	48
  1965  00074A  ECCF  F00D         	call	_lcd_putc
  1966                           
  1967                           ;main.c: 242: lcd_putc('.');
  1968  00074E  0E2E               	movlw	46
  1969  000750  ECCF  F00D         	call	_lcd_putc
  1970                           
  1971                           ;main.c: 243: lcd_putc(((set_t_dq2 % 10) + 48));
  1972  000754  ECEE  F007         	call	PL26	;call to abstracted procedure
  1973  000758  EC5E  F00B         	call	___awmod	;wreg free
  1974  00075C  504D               	movf	?___awmod^0,w,c
  1975  00075E  0F30               	addlw	48
  1976  000760  ECCF  F00D         	call	_lcd_putc
  1977                           
  1978                           ;main.c: 244: (en_snd_b) ? lcd_putc(2) : lcd_putc(1);
  1979  000764  A065               	btfss	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  1980  000766  D004               	goto	l3603
  1981  000768  0E02               	movlw	2
  1982  00076A  ECCF  F00D         	call	_lcd_putc
  1983  00076E  D003               	goto	l3605
  1984  000770                     l3603:
  1985  000770  0E01               	movlw	1
  1986  000772  ECCF  F00D         	call	_lcd_putc
  1987  000776                     l3605:
  1988                           
  1989                           ;main.c: 253: if (sound_yes) {
  1990  000776  AE65               	btfss	(_sound_yes/(0+8))^0,_sound_yes& (0+7),c
  1991  000778  D090               	goto	l217
  1992                           
  1993                           ;main.c: 257: if (en_snd_k) {
  1994  00077A  A265               	btfss	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  1995  00077C  D01D               	goto	l219
  1996                           
  1997                           ;main.c: 258: if (((temperature_1 >= (temp1_fix + set_t_dq1_up)) ||;main.c: 259: (temper
      +                          ature_1 <= (temp1_fix - set_t_dq1_dwn))) &&;main.c: 260: !(temperature_1 == 32767)) {
  1998  00077E  5031               	movf	_set_t_dq1_up^0,w,c
  1999  000780  2427               	addwf	_temp1_fix^0,w,c
  2000  000782  6E56               	movwf	??_main^0,c
  2001  000784  0E00               	movlw	0
  2002  000786  2028               	addwfc	(_temp1_fix+1)^0,w,c
  2003  000788  6E57               	movwf	(??_main+1)^0,c
  2004  00078A  5056               	movf	??_main^0,w,c
  2005  00078C  5C5F               	subwf	_temperature_1^0,w,c
  2006  00078E  5057               	movf	(??_main+1)^0,w,c
  2007  000790  5860               	subwfb	(_temperature_1+1)^0,w,c
  2008  000792  E20B               	bc	u2740
  2009  000794  5030               	movf	_set_t_dq1_dwn^0,w,c
  2010  000796  5C27               	subwf	_temp1_fix^0,w,c
  2011  000798  6E56               	movwf	??_main^0,c
  2012  00079A  0E00               	movlw	0
  2013  00079C  5828               	subwfb	(_temp1_fix+1)^0,w,c
  2014  00079E  6E57               	movwf	(??_main+1)^0,c
  2015  0007A0  505F               	movf	_temperature_1^0,w,c
  2016  0007A2  5C56               	subwf	??_main^0,w,c
  2017  0007A4  5060               	movf	(_temperature_1+1)^0,w,c
  2018  0007A6  5857               	subwfb	(??_main+1)^0,w,c
  2019  0007A8  E307               	bnc	l219
  2020  0007AA                     u2740:
  2021  0007AA  285F               	incf	_temperature_1^0,w,c
  2022  0007AC  E103               	bnz	u2750
  2023  0007AE  0E7F               	movlw	127
  2024  0007B0  1860               	xorwf	(_temperature_1+1)^0,w,c
  2025  0007B2  E002               	bz	l219
  2026  0007B4                     u2750:
  2027                           
  2028                           ;main.c: 262: snd_k_b = 1;
  2029  0007B4  8665               	bsf	(_snd_k_b/(0+8))^0,_snd_k_b& (0+7),c
  2030                           
  2031                           ;main.c: 263: } else
  2032  0007B6  D001               	goto	l223
  2033  0007B8                     l219:
  2034                           
  2035                           ;main.c: 264: snd_k_b = 0;
  2036  0007B8  9665               	bcf	(_snd_k_b/(0+8))^0,_snd_k_b& (0+7),c
  2037  0007BA                     l223:
  2038                           
  2039                           ;main.c: 268: if (en_snd_b) {
  2040  0007BA  A065               	btfss	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2041  0007BC  D00C               	goto	l225
  2042                           
  2043                           ;main.c: 269: if ((temperature_2 >= set_t_dq2) && !(temperature_2 == 32767))
  2044  0007BE  5029               	movf	_set_t_dq2^0,w,c
  2045  0007C0  5C5D               	subwf	_temperature_2^0,w,c
  2046  0007C2  502A               	movf	(_set_t_dq2+1)^0,w,c
  2047  0007C4  585E               	subwfb	(_temperature_2+1)^0,w,c
  2048  0007C6  E307               	bnc	l225
  2049  0007C8  285D               	incf	_temperature_2^0,w,c
  2050  0007CA  E103               	bnz	u2780
  2051  0007CC  0E7F               	movlw	127
  2052  0007CE  185E               	xorwf	(_temperature_2+1)^0,w,c
  2053  0007D0  E002               	bz	l225
  2054  0007D2                     u2780:
  2055                           
  2056                           ;main.c: 270: snd_b_b = 1;
  2057  0007D2  8465               	bsf	(_snd_b_b/(0+8))^0,_snd_b_b& (0+7),c
  2058  0007D4  D001               	goto	l227
  2059  0007D6                     l225:
  2060                           
  2061                           ;main.c: 271: else;main.c: 272: snd_b_b = 0;
  2062  0007D6  9465               	bcf	(_snd_b_b/(0+8))^0,_snd_b_b& (0+7),c
  2063  0007D8                     l227:
  2064                           
  2065                           ;main.c: 276: if (snd_k_b && snd_b_b) {
  2066  0007D8  B665               	btfsc	(_snd_k_b/(0+8))^0,_snd_k_b& (0+7),c
  2067  0007DA  A465               	btfss	(_snd_b_b/(0+8))^0,_snd_b_b& (0+7),c
  2068  0007DC  D01E               	goto	l228
  2069                           
  2070                           ;main.c: 277: en_sound = 1;
  2071  0007DE  8066               	bsf	(_en_sound/(0+8))^0,_en_sound& (0+7),c
  2072                           
  2073                           ;main.c: 278: snd_k = 0;
  2074  0007E0  9C65               	bcf	(_snd_k/(0+8))^0,_snd_k& (0+7),c
  2075                           
  2076                           ;main.c: 279: snd_b = 0;
  2077  0007E2  9A65               	bcf	(_snd_b/(0+8))^0,_snd_b& (0+7),c
  2078                           
  2079                           ;main.c: 280: snd_all = 1;
  2080  0007E4  8865               	bsf	(_snd_all/(0+8))^0,_snd_all& (0+7),c
  2081                           
  2082                           ;main.c: 281: if (tik_time >= 100) {
  2083  0007E6  0E63               	movlw	99
  2084  0007E8  6435               	cpfsgt	_tik_time^0,c
  2085  0007EA  D059               	goto	l3649
  2086                           
  2087                           ;main.c: 282: tik_time = 0;
  2088  0007EC  6A35               	clrf	_tik_time^0,c
  2089                           
  2090                           ;main.c: 283: EUSART_Write('A');
  2091  0007EE  0E41               	movlw	65
  2092  0007F0  ECFB  F00C         	call	_EUSART_Write
  2093                           
  2094                           ;main.c: 284: EUSART_Write('l');
  2095  0007F4  0E6C               	movlw	108
  2096  0007F6  ECFB  F00C         	call	_EUSART_Write
  2097                           
  2098                           ;main.c: 285: EUSART_Write('r');
  2099  0007FA  0E72               	movlw	114
  2100  0007FC  ECFB  F00C         	call	_EUSART_Write
  2101                           
  2102                           ;main.c: 286: EUSART_Write('_');
  2103  000800  0E5F               	movlw	95
  2104  000802  ECFB  F00C         	call	_EUSART_Write
  2105                           
  2106                           ;main.c: 287: EUSART_Write('A');
  2107  000806  0E41               	movlw	65
  2108  000808  ECFB  F00C         	call	_EUSART_Write
  2109                           
  2110                           ;main.c: 288: EUSART_Write('\r');
  2111  00080C  0E0D               	movlw	13
  2112  00080E  ECFB  F00C         	call	_EUSART_Write
  2113                           
  2114                           ;main.c: 289: EUSART_Write('\n');
  2115  000812  0E0A               	movlw	10
  2116  000814  ECFB  F00C         	call	_EUSART_Write
  2117  000818  D042               	goto	l3649
  2118  00081A                     l228:
  2119  00081A  A465               	btfss	(_snd_b_b/(0+8))^0,_snd_b_b& (0+7),c
  2120  00081C  D01E               	goto	l231
  2121                           
  2122                           ;main.c: 292: en_sound = 1;
  2123  00081E  8066               	bsf	(_en_sound/(0+8))^0,_en_sound& (0+7),c
  2124                           
  2125                           ;main.c: 293: snd_k = 0;
  2126  000820  9C65               	bcf	(_snd_k/(0+8))^0,_snd_k& (0+7),c
  2127                           
  2128                           ;main.c: 294: snd_all = 0;
  2129  000822  9865               	bcf	(_snd_all/(0+8))^0,_snd_all& (0+7),c
  2130                           
  2131                           ;main.c: 295: snd_b = 1;
  2132  000824  8A65               	bsf	(_snd_b/(0+8))^0,_snd_b& (0+7),c
  2133                           
  2134                           ;main.c: 296: if (tik_time >= 100) {
  2135  000826  0E63               	movlw	99
  2136  000828  6435               	cpfsgt	_tik_time^0,c
  2137  00082A  D039               	goto	l3649
  2138                           
  2139                           ;main.c: 297: tik_time = 0;
  2140  00082C  6A35               	clrf	_tik_time^0,c
  2141                           
  2142                           ;main.c: 298: EUSART_Write('A');
  2143  00082E  0E41               	movlw	65
  2144  000830  ECFB  F00C         	call	_EUSART_Write
  2145                           
  2146                           ;main.c: 299: EUSART_Write('l');
  2147  000834  0E6C               	movlw	108
  2148  000836  ECFB  F00C         	call	_EUSART_Write
  2149                           
  2150                           ;main.c: 300: EUSART_Write('r');
  2151  00083A  0E72               	movlw	114
  2152  00083C  ECFB  F00C         	call	_EUSART_Write
  2153                           
  2154                           ;main.c: 301: EUSART_Write('_');
  2155  000840  0E5F               	movlw	95
  2156  000842  ECFB  F00C         	call	_EUSART_Write
  2157                           
  2158                           ;main.c: 302: EUSART_Write('B');
  2159  000846  0E42               	movlw	66
  2160  000848  ECFB  F00C         	call	_EUSART_Write
  2161                           
  2162                           ;main.c: 303: EUSART_Write('\r');
  2163  00084C  0E0D               	movlw	13
  2164  00084E  ECFB  F00C         	call	_EUSART_Write
  2165                           
  2166                           ;main.c: 304: EUSART_Write('\n');
  2167  000852  0E0A               	movlw	10
  2168  000854  ECFB  F00C         	call	_EUSART_Write
  2169  000858  D022               	goto	l3649
  2170  00085A                     l231:
  2171  00085A  A665               	btfss	(_snd_k_b/(0+8))^0,_snd_k_b& (0+7),c
  2172  00085C  D01F               	goto	L1
  2173                           
  2174                           ;main.c: 307: en_sound = 1;
  2175  00085E  8066               	bsf	(_en_sound/(0+8))^0,_en_sound& (0+7),c
  2176                           
  2177                           ;main.c: 308: snd_k = 1;
  2178  000860  8C65               	bsf	(_snd_k/(0+8))^0,_snd_k& (0+7),c
  2179                           
  2180                           ;main.c: 309: snd_all = 0;
  2181  000862  9865               	bcf	(_snd_all/(0+8))^0,_snd_all& (0+7),c
  2182                           
  2183                           ;main.c: 310: snd_b = 0;
  2184  000864  9A65               	bcf	(_snd_b/(0+8))^0,_snd_b& (0+7),c
  2185                           
  2186                           ;main.c: 311: if (tik_time >= 100) {
  2187  000866  0E63               	movlw	99
  2188  000868  6435               	cpfsgt	_tik_time^0,c
  2189  00086A  D019               	goto	l3649
  2190                           
  2191                           ;main.c: 312: tik_time = 0;
  2192  00086C  6A35               	clrf	_tik_time^0,c
  2193                           
  2194                           ;main.c: 313: EUSART_Write('A');
  2195  00086E  0E41               	movlw	65
  2196  000870  ECFB  F00C         	call	_EUSART_Write
  2197                           
  2198                           ;main.c: 314: EUSART_Write('l');
  2199  000874  0E6C               	movlw	108
  2200  000876  ECFB  F00C         	call	_EUSART_Write
  2201                           
  2202                           ;main.c: 315: EUSART_Write('r');
  2203  00087A  0E72               	movlw	114
  2204  00087C  ECFB  F00C         	call	_EUSART_Write
  2205                           
  2206                           ;main.c: 316: EUSART_Write('_');
  2207  000880  0E5F               	movlw	95
  2208  000882  ECFB  F00C         	call	_EUSART_Write
  2209                           
  2210                           ;main.c: 317: EUSART_Write('K');
  2211  000886  0E4B               	movlw	75
  2212  000888  ECFB  F00C         	call	_EUSART_Write
  2213                           
  2214                           ;main.c: 318: EUSART_Write('\r');
  2215  00088C  0E0D               	movlw	13
  2216  00088E  ECFB  F00C         	call	_EUSART_Write
  2217                           
  2218                           ;main.c: 319: EUSART_Write('\n');
  2219  000892  0E0A               	movlw	10
  2220  000894  ECFB  F00C         	call	_EUSART_Write
  2221  000898  D002               	goto	l3649
  2222  00089A                     l217:
  2223                           
  2224                           ;main.c: 328: LATCbits.LATC4 = 0;
  2225  00089A  988B               	bcf	139,4,c	;volatile
  2226  00089C                     L1:
  2227                           
  2228                           ;main.c: 329: en_sound = 0;
  2229  00089C  9066               	bcf	(_en_sound/(0+8))^0,_en_sound& (0+7),c
  2230  00089E                     l3649:
  2231                           
  2232                           ;main.c: 330: };main.c: 333: if (pressed_key == 1) {
  2233  00089E  0434               	decf	_pressed_key^0,w,c
  2234  0008A0  E107               	bnz	l3659
  2235                           
  2236                           ;main.c: 334: sub_sel--;
  2237  0008A2  0633               	decf	_sub_sel^0,f,c
  2238                           
  2239                           ;main.c: 335: if (sub_sel == 255)
  2240  0008A4  2833               	incf	_sub_sel^0,w,c
  2241  0008A6  E102               	bnz	l3657
  2242                           
  2243                           ;main.c: 336: sub_sel = VAL_9;
  2244  0008A8  0E08               	movlw	8
  2245  0008AA  6E33               	movwf	_sub_sel^0,c
  2246  0008AC                     l3657:
  2247                           
  2248                           ;main.c: 337: outValPreset();
  2249  0008AC  EC20  F008         	call	_outValPreset	;wreg free
  2250  0008B0                     l3659:
  2251                           
  2252                           ;main.c: 339: };main.c: 341: if (pressed_key == 2) {
  2253  0008B0  0E02               	movlw	2
  2254  0008B2  1834               	xorwf	_pressed_key^0,w,c
  2255  0008B4  E107               	bnz	l3669
  2256                           
  2257                           ;main.c: 343: sub_sel++;
  2258  0008B6  2A33               	incf	_sub_sel^0,f,c
  2259                           
  2260                           ;main.c: 344: if (sub_sel > VAL_9)
  2261  0008B8  0E08               	movlw	8
  2262  0008BA  6433               	cpfsgt	_sub_sel^0,c
  2263  0008BC  D001               	goto	l3667
  2264                           
  2265                           ;main.c: 345: sub_sel = VAL_1;
  2266  0008BE  6A33               	clrf	_sub_sel^0,c
  2267  0008C0                     l3667:
  2268                           
  2269                           ;main.c: 346: outValPreset();
  2270  0008C0  EC20  F008         	call	_outValPreset	;wreg free
  2271  0008C4                     l3669:
  2272                           
  2273                           ;main.c: 347: };main.c: 349: if (pressed_key == 3) {
  2274  0008C4  0E03               	movlw	3
  2275  0008C6  1834               	xorwf	_pressed_key^0,w,c
  2276  0008C8  E001 D46C          	bnz	l3511
  2277                           
  2278                           ;main.c: 351: clearLCD();
  2279  0008CC  ECA8  F00D         	call	_clearLCD	;wreg free
  2280                           
  2281                           ;main.c: 352: select = 7;
  2282  0008D0  0E07               	movlw	7
  2283                           
  2284                           ;main.c: 353: lcd_gotoxy(1, 1);
  2285  0008D2  DB98               	call	PL38	;call to abstracted procedure
  2286  0008D4  EC8C  F00D         	call	_lcd_gotoxy
  2287                           
  2288                           ;main.c: 354: lcdPrint("Ïîðiã Ñèãí. Led");
  2289  0008D8  0E4F               	movlw	low STR_15
  2290  0008DA  6E4C               	movwf	lcdPrint@t^0,c
  2291  0008DC  0E1F               	movlw	high STR_15
  2292  0008DE  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2293  0008E0  ECCE  F009         	call	_lcdPrint	;wreg free
  2294                           
  2295                           ;main.c: 355: lcd_gotoxy(1, 2);
  2296  0008E4  DB83               	call	PL28	;call to abstracted procedure
  2297  0008E6  EC8C  F00D         	call	_lcd_gotoxy
  2298                           
  2299                           ;main.c: 356: lcdPrint("  1     2   1-2");
  2300  0008EA  0E2F               	movlw	low STR_16
  2301  0008EC  6E4C               	movwf	lcdPrint@t^0,c
  2302  0008EE  0E1F               	movlw	high STR_16
  2303  0008F0  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2304  0008F2  ECCE  F009         	call	_lcdPrint	;wreg free
  2305  0008F6  D456               	goto	l3511
  2306  0008F8                     l3683:
  2307                           
  2308                           ;main.c: 364: lcd_gotoxy(14, 2);
  2309  0008F8  0E02               	movlw	2
  2310  0008FA  6E49               	movwf	lcd_gotoxy@y^0,c
  2311  0008FC  0E0E               	movlw	14
  2312  0008FE  EC8C  F00D         	call	_lcd_gotoxy
  2313                           
  2314                           ;main.c: 365: lcd_putc(dq_num + 48);
  2315  000902  5061               	movf	_dq_num^0,w,c
  2316  000904  0F30               	addlw	48
  2317  000906  ECCF  F00D         	call	_lcd_putc
  2318                           
  2319                           ;main.c: 366: if (pressed_key == 1) {
  2320  00090A  0434               	decf	_pressed_key^0,w,c
  2321  00090C  E106               	bnz	l3693
  2322                           
  2323                           ;main.c: 367: dq_num++;
  2324  00090E  2A61               	incf	_dq_num^0,f,c
  2325                           
  2326                           ;main.c: 368: if (dq_num == 3)
  2327  000910  0E03               	movlw	3
  2328  000912  1861               	xorwf	_dq_num^0,w,c
  2329  000914  E102               	bnz	l3693
  2330                           
  2331                           ;main.c: 369: dq_num = 1;
  2332  000916  0E01               	movlw	1
  2333  000918  6E61               	movwf	_dq_num^0,c
  2334  00091A                     l3693:
  2335                           
  2336                           ;main.c: 370: };main.c: 371: if (pressed_key == 2) {
  2337  00091A  0E02               	movlw	2
  2338  00091C  1834               	xorwf	_pressed_key^0,w,c
  2339  00091E  E105               	bnz	l3701
  2340                           
  2341                           ;main.c: 372: dq_num--;
  2342  000920  0661               	decf	_dq_num^0,f,c
  2343                           
  2344                           ;main.c: 373: if (dq_num == 0)
  2345  000922  5061               	movf	_dq_num^0,w,c
  2346  000924  E102               	bnz	l3701
  2347                           
  2348                           ;main.c: 374: dq_num = 2;
  2349  000926  0E02               	movlw	2
  2350  000928  6E61               	movwf	_dq_num^0,c
  2351  00092A                     l3701:
  2352                           
  2353                           ;main.c: 375: };main.c: 376: if (pressed_key == 3) {
  2354  00092A  0E03               	movlw	3
  2355  00092C  1834               	xorwf	_pressed_key^0,w,c
  2356  00092E  E001 D439          	bnz	l3511
  2357                           
  2358                           ;main.c: 377: if (ds18b20_readrom(dq_num)) {
  2359  000932  5061               	movf	_dq_num^0,w,c
  2360  000934  EC92  F00B         	call	_ds18b20_readrom
  2361  000938  0900               	iorlw	0
  2362  00093A  E009               	bz	l3709
  2363                           
  2364                           ;main.c: 378: lcd_gotoxy(1, 2);
  2365  00093C  DB57               	call	PL28	;call to abstracted procedure
  2366  00093E  EC8C  F00D         	call	_lcd_gotoxy
  2367                           
  2368                           ;main.c: 379: lcdPrint(" Êîä ïðî÷èòàíî ");
  2369  000942  0EEF               	movlw	low STR_17
  2370  000944  6E4C               	movwf	lcdPrint@t^0,c
  2371  000946  0E1E               	movlw	high STR_17
  2372  000948  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2373  00094A  ECCE  F009         	call	_lcdPrint	;wreg free
  2374  00094E                     l3709:
  2375                           
  2376                           ;main.c: 380: };main.c: 382: select = 3;
  2377  00094E  0E03               	movlw	3
  2378  000950  6E62               	movwf	_select^0,c
  2379  000952  D428               	goto	l3511
  2380  000954                     l3711:
  2381                           
  2382                           ;main.c: 388: if (pressed_key == 1) {
  2383  000954  0434               	decf	_pressed_key^0,w,c
  2384  000956  E115               	bnz	l3725
  2385                           
  2386                           ;main.c: 389: clearLCD();
  2387  000958  ECA8  F00D         	call	_clearLCD	;wreg free
  2388                           
  2389                           ;main.c: 390: select = 4;
  2390  00095C  0E04               	movlw	4
  2391                           
  2392                           ;main.c: 391: lcd_gotoxy(1, 1);
  2393  00095E  DB52               	call	PL38	;call to abstracted procedure
  2394  000960  EC8C  F00D         	call	_lcd_gotoxy
  2395                           
  2396                           ;main.c: 392: lcdPrint("   Ãðàíèöi   ");
  2397  000964  0E7D               	movlw	low STR_18
  2398  000966  6E4C               	movwf	lcdPrint@t^0,c
  2399  000968  0E1F               	movlw	high STR_18
  2400  00096A  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2401  00096C  ECCE  F009         	call	_lcdPrint	;wreg free
  2402                           
  2403                           ;main.c: 393: lcd_gotoxy(1, 2);
  2404  000970  DB3D               	call	PL28	;call to abstracted procedure
  2405  000972  EC8C  F00D         	call	_lcd_gotoxy
  2406                           
  2407                           ;main.c: 394: lcdPrint(" Êîë(1)  Êóá(2)");
  2408  000976  0EFF               	movlw	low STR_19
  2409  000978  6E4C               	movwf	lcdPrint@t^0,c
  2410  00097A  0E1E               	movlw	high STR_19
  2411  00097C  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2412  00097E  ECCE  F009         	call	_lcdPrint	;wreg free
  2413  000982                     l3725:
  2414                           
  2415                           ;main.c: 395: };main.c: 397: if (pressed_key == 2) {
  2416  000982  0E02               	movlw	2
  2417  000984  1834               	xorwf	_pressed_key^0,w,c
  2418  000986  E10C               	bnz	l3735
  2419                           
  2420                           ;main.c: 400: clearLCD();
  2421  000988  ECA8  F00D         	call	_clearLCD	;wreg free
  2422                           
  2423                           ;main.c: 401: select = 8;
  2424  00098C  0E08               	movlw	8
  2425                           
  2426                           ;main.c: 402: lcd_gotoxy(1, 1);
  2427  00098E  DB3A               	call	PL38	;call to abstracted procedure
  2428  000990  EC8C  F00D         	call	_lcd_gotoxy
  2429                           
  2430                           ;main.c: 403: lcdPrint(" Êîëîíà    Êóá");
  2431  000994  0E5F               	movlw	low STR_20
  2432  000996  6E4C               	movwf	lcdPrint@t^0,c
  2433  000998  0E1F               	movlw	high STR_20
  2434  00099A  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2435  00099C  ECCE  F009         	call	_lcdPrint	;wreg free
  2436  0009A0                     l3735:
  2437                           
  2438                           ;main.c: 404: };main.c: 405: if (pressed_key == 3) {
  2439  0009A0  0E03               	movlw	3
  2440  0009A2  1834               	xorwf	_pressed_key^0,w,c
  2441  0009A4  E002 EFD2  F000    	bnz	l3511
  2442                           
  2443                           ;main.c: 406: LATCbits.LATC5 = !(LATCbits.LATC5);
  2444  0009AA  BA8B               	btfsc	139,5,c	;volatile
  2445  0009AC  D003               	goto	u3000
  2446  0009AE  6A56               	clrf	??_main^0,c
  2447  0009B0  2A56               	incf	??_main^0,f,c
  2448  0009B2  D001               	goto	u3018
  2449  0009B4                     u3000:
  2450  0009B4  6A56               	clrf	??_main^0,c
  2451  0009B6                     u3018:
  2452  0009B6  3A56               	swapf	??_main^0,f,c
  2453  0009B8  4656               	rlncf	??_main^0,f,c
  2454  0009BA  508B               	movf	139,w,c	;volatile
  2455  0009BC  1856               	xorwf	??_main^0,w,c
  2456  0009BE  0BDF               	andlw	-33
  2457  0009C0  1856               	xorwf	??_main^0,w,c
  2458  0009C2  6E8B               	movwf	139,c	;volatile
  2459  0009C4                     l3739:
  2460                           
  2461                           ;main.c: 407: select = 1;
  2462  0009C4  0E01               	movlw	1
  2463  0009C6  6E62               	movwf	_select^0,c
  2464  0009C8                     l3741:
  2465                           
  2466                           ;main.c: 408: outValPreset();
  2467  0009C8  EC20  F008         	call	_outValPreset	;wreg free
  2468  0009CC  EFD2  F000         	goto	l3511
  2469  0009D0                     l3743:
  2470                           
  2471                           ;main.c: 412: lcd_gotoxy(4, 2);
  2472  0009D0  0E02               	movlw	2
  2473  0009D2  6E49               	movwf	lcd_gotoxy@y^0,c
  2474  0009D4  0E04               	movlw	4
  2475  0009D6  EC8C  F00D         	call	_lcd_gotoxy
  2476                           
  2477                           ;main.c: 413: (en_snd_k) ? lcd_putc(0xED) : lcd_putc(0xD5);
  2478  0009DA  A265               	btfss	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2479  0009DC  D004               	goto	l3749
  2480  0009DE  0EED               	movlw	237
  2481  0009E0  ECCF  F00D         	call	_lcd_putc
  2482  0009E4  D003               	goto	l260
  2483  0009E6                     l3749:
  2484  0009E6  0ED5               	movlw	213
  2485  0009E8  ECCF  F00D         	call	_lcd_putc
  2486  0009EC                     l260:
  2487                           
  2488                           ;main.c: 414: lcd_gotoxy(13, 2);
  2489  0009EC  0E02               	movlw	2
  2490  0009EE  6E49               	movwf	lcd_gotoxy@y^0,c
  2491  0009F0  0E0D               	movlw	13
  2492  0009F2  EC8C  F00D         	call	_lcd_gotoxy
  2493                           
  2494                           ;main.c: 415: (en_snd_b) ? lcd_putc(0xED) : lcd_putc(0xD5);
  2495  0009F6  A065               	btfss	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2496  0009F8  D004               	goto	l3755
  2497  0009FA  0EED               	movlw	237
  2498  0009FC  ECCF  F00D         	call	_lcd_putc
  2499  000A00  D003               	goto	l3757
  2500  000A02                     l3755:
  2501  000A02  0ED5               	movlw	213
  2502  000A04  ECCF  F00D         	call	_lcd_putc
  2503  000A08                     l3757:
  2504                           
  2505                           ;main.c: 417: if (pressed_key == 1) {
  2506  000A08  0434               	decf	_pressed_key^0,w,c
  2507  000A0A  E105               	bnz	u3065
  2508                           
  2509                           ;main.c: 418: en_snd_k = !(en_snd_k);
  2510  000A0C  B265               	btfsc	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2511  000A0E  D002               	goto	u3050
  2512  000A10  8265               	bsf	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2513  000A12  D001               	goto	u3065
  2514  000A14                     u3050:
  2515  000A14  9265               	bcf	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2516  000A16                     u3065:
  2517                           
  2518                           ;main.c: 419: };main.c: 421: if (pressed_key == 2) {
  2519  000A16  0E02               	movlw	2
  2520  000A18  1834               	xorwf	_pressed_key^0,w,c
  2521  000A1A  E105               	bnz	u3095
  2522                           
  2523                           ;main.c: 422: en_snd_b = !(en_snd_b);
  2524  000A1C  B065               	btfsc	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2525  000A1E  D002               	goto	u3080
  2526  000A20  8065               	bsf	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2527  000A22  D001               	goto	u3095
  2528  000A24                     u3080:
  2529  000A24  9065               	bcf	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2530  000A26                     u3095:
  2531                           
  2532                           ;main.c: 423: };main.c: 424: if (pressed_key == 3) {
  2533  000A26  0E03               	movlw	3
  2534  000A28  1834               	xorwf	_pressed_key^0,w,c
  2535  000A2A  E002 EFD2  F000    	bnz	l3511
  2536                           
  2537                           ;main.c: 425: if (!(en_snd_k) && !(en_snd_b)) {
  2538  000A30  A265               	btfss	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2539  000A32  B065               	btfsc	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2540  000A34  D002               	goto	l268
  2541                           
  2542                           ;main.c: 426: sound_yes = 0;
  2543  000A36  9E65               	bcf	(_sound_yes/(0+8))^0,_sound_yes& (0+7),c
  2544                           
  2545                           ;main.c: 427: } else
  2546  000A38  D001               	goto	l3773
  2547  000A3A                     l268:
  2548                           
  2549                           ;main.c: 428: sound_yes = 1;
  2550  000A3A  8E65               	bsf	(_sound_yes/(0+8))^0,_sound_yes& (0+7),c
  2551  000A3C                     l3773:
  2552                           
  2553                           ;main.c: 430: write_eep(43, en_snd_k);
  2554  000A3C  0E00               	movlw	0
  2555  000A3E  B265               	btfsc	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2556  000A40  0E01               	movlw	1
  2557  000A42  6E45               	movwf	write_eep@data^0,c
  2558  000A44  0E2B               	movlw	43
  2559  000A46  EC26  F00D         	call	_write_eep
  2560                           
  2561                           ;main.c: 431: write_eep(44, en_snd_b);
  2562  000A4A  0E00               	movlw	0
  2563  000A4C  B065               	btfsc	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2564  000A4E  0E01               	movlw	1
  2565  000A50  6E45               	movwf	write_eep@data^0,c
  2566  000A52  0E2C               	movlw	44
  2567  000A54  EC26  F00D         	call	_write_eep
  2568  000A58  D7B5               	goto	l3739
  2569  000A5A                     l3779:
  2570                           
  2571                           ;main.c: 438: if (pressed_key == 1) {
  2572  000A5A  0434               	decf	_pressed_key^0,w,c
  2573  000A5C  E119               	bnz	l3793
  2574                           
  2575                           ;main.c: 439: select = 5;
  2576  000A5E  0E05               	movlw	5
  2577  000A60  6E62               	movwf	_select^0,c
  2578                           
  2579                           ;main.c: 440: sub_sel_kol = 1;
  2580  000A62  0E01               	movlw	1
  2581  000A64  6E32               	movwf	_sub_sel_kol^0,c
  2582                           
  2583                           ;main.c: 441: clearLCD();
  2584  000A66  ECA8  F00D         	call	_clearLCD	;wreg free
  2585                           
  2586                           ;main.c: 442: lcd_gotoxy(1, 1);
  2587  000A6A  0E01               	movlw	1
  2588  000A6C  6E49               	movwf	lcd_gotoxy@y^0,c
  2589  000A6E  EC8C  F00D         	call	_lcd_gotoxy
  2590                           
  2591                           ;main.c: 443: lcdPrint("    Êîëîíà  ");
  2592  000A72  0E98               	movlw	low STR_21
  2593  000A74  6E4C               	movwf	lcdPrint@t^0,c
  2594  000A76  0E1F               	movlw	high STR_21
  2595  000A78  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2596  000A7A  ECCE  F009         	call	_lcdPrint	;wreg free
  2597                           
  2598                           ;main.c: 444: lcd_gotoxy(1, 2);
  2599  000A7E  DAB6               	call	PL28	;call to abstracted procedure
  2600  000A80  EC8C  F00D         	call	_lcd_gotoxy
  2601                           
  2602                           ;main.c: 445: lcdPrint("Òåìï Âåðõ:");
  2603  000A84  0EB2               	movlw	low STR_22
  2604  000A86  6E4C               	movwf	lcdPrint@t^0,c
  2605  000A88  0E1F               	movlw	high STR_22
  2606  000A8A  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2607  000A8C  ECCE  F009         	call	_lcdPrint	;wreg free
  2608  000A90                     l3793:
  2609                           
  2610                           ;main.c: 446: };main.c: 447: if (pressed_key == 2) {
  2611  000A90  0E02               	movlw	2
  2612  000A92  1834               	xorwf	_pressed_key^0,w,c
  2613  000A94  E002 EFD2  F000    	bnz	l3511
  2614                           
  2615                           ;main.c: 448: select = 6;
  2616  000A9A  0E06               	movlw	6
  2617  000A9C  6E62               	movwf	_select^0,c
  2618                           
  2619                           ;main.c: 450: clearLCD();
  2620  000A9E  ECA8  F00D         	call	_clearLCD	;wreg free
  2621                           
  2622                           ;main.c: 451: lcd_gotoxy(1, 1);
  2623  000AA2  0E01               	movlw	1
  2624  000AA4  6E49               	movwf	lcd_gotoxy@y^0,c
  2625  000AA6  EC8C  F00D         	call	_lcd_gotoxy
  2626                           
  2627                           ;main.c: 452: lcdPrint("    Êóáîâà  ");
  2628  000AAA  0E8B               	movlw	low STR_23
  2629  000AAC  6E4C               	movwf	lcdPrint@t^0,c
  2630  000AAE  0E1F               	movlw	high STR_23
  2631  000AB0  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2632  000AB2  ECCE  F009         	call	_lcdPrint	;wreg free
  2633                           
  2634                           ;main.c: 453: lcd_gotoxy(1, 2);
  2635  000AB6  DA9A               	call	PL28	;call to abstracted procedure
  2636  000AB8  EC8C  F00D         	call	_lcd_gotoxy
  2637                           
  2638                           ;main.c: 454: lcdPrint("Çàâäàííÿ");
  2639  000ABC  0EBD               	movlw	low STR_24
  2640  000ABE  6E4C               	movwf	lcdPrint@t^0,c
  2641  000AC0  0E1F               	movlw	high STR_24
  2642  000AC2  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2643  000AC4  ECCE  F009         	call	_lcdPrint	;wreg free
  2644                           
  2645                           ;main.c: 456: pre_sub_sel = sub_sel;
  2646  000AC8  DAB0               	call	PL50	;call to abstracted procedure
  2647  000ACA  ECC0  F00D         	call	_read_eep	;wreg free
  2648  000ACE  DA9E               	call	PL40	;call to abstracted procedure
  2649  000AD0  ECC0  F00D         	call	_read_eep	;wreg free
  2650  000AD4  DA7D               	call	PL24	;call to abstracted procedure
  2651                           
  2652                           ;main.c: 457: sub_sel = VAL_1;
  2653  000AD6  6A33               	clrf	_sub_sel^0,c
  2654  000AD8  EFD2  F000         	goto	l3511
  2655  000ADC                     l3811:
  2656                           
  2657                           ;main.c: 465: lcd_gotoxy(11, 2);
  2658  000ADC  DAAA               	call	PL60	;call to abstracted procedure
  2659  000ADE  EC8C  F00D         	call	_lcd_gotoxy
  2660                           
  2661                           ;main.c: 466: lcd_putc('+');
  2662  000AE2  0E2B               	movlw	43
  2663  000AE4  ECCF  F00D         	call	_lcd_putc
  2664                           
  2665                           ;main.c: 467: lcd_putc(((set_t_dq1_up / 10) % 10) + 48);
  2666  000AE8  0E0A               	movlw	10
  2667  000AEA  6E49               	movwf	___lbmod@divisor^0,c
  2668  000AEC  6E45               	movwf	___lbdiv@divisor^0,c
  2669  000AEE  5031               	movf	_set_t_dq1_up^0,w,c
  2670  000AF0  ECB0  F00C         	call	___lbdiv
  2671  000AF4  EC13  F00D         	call	___lbmod
  2672  000AF8  0F30               	addlw	48
  2673  000AFA  ECCF  F00D         	call	_lcd_putc
  2674                           
  2675                           ;main.c: 468: lcd_putc('.');
  2676  000AFE  0E2E               	movlw	46
  2677  000B00  ECCF  F00D         	call	_lcd_putc
  2678                           
  2679                           ;main.c: 469: lcd_putc(((set_t_dq1_up % 10) + 48));
  2680  000B04  0E0A               	movlw	10
  2681  000B06  6E49               	movwf	___lbmod@divisor^0,c
  2682  000B08  5031               	movf	_set_t_dq1_up^0,w,c
  2683  000B0A  EC13  F00D         	call	___lbmod
  2684  000B0E  0F30               	addlw	48
  2685  000B10  ECCF  F00D         	call	_lcd_putc
  2686                           
  2687                           ;main.c: 471: if (pressed_key == 1) {
  2688  000B14  0434               	decf	_pressed_key^0,w,c
  2689  000B16  E105               	bnz	l3821
  2690                           
  2691                           ;main.c: 472: set_t_dq1_up++;
  2692  000B18  2A31               	incf	_set_t_dq1_up^0,f,c
  2693                           
  2694                           ;main.c: 473: if (set_t_dq1_up == 11)
  2695  000B1A  0E0B               	movlw	11
  2696  000B1C  1831               	xorwf	_set_t_dq1_up^0,w,c
  2697  000B1E  E101               	bnz	l3821
  2698                           
  2699                           ;main.c: 474: set_t_dq1_up = 0;
  2700  000B20  6A31               	clrf	_set_t_dq1_up^0,c
  2701  000B22                     l3821:
  2702                           
  2703                           ;main.c: 475: };main.c: 476: if (pressed_key == 2) {
  2704  000B22  0E02               	movlw	2
  2705  000B24  1834               	xorwf	_pressed_key^0,w,c
  2706  000B26  E105               	bnz	l3829
  2707                           
  2708                           ;main.c: 477: set_t_dq1_up--;
  2709  000B28  0631               	decf	_set_t_dq1_up^0,f,c
  2710                           
  2711                           ;main.c: 478: if (set_t_dq1_up == 255)
  2712  000B2A  2831               	incf	_set_t_dq1_up^0,w,c
  2713  000B2C  E102               	bnz	l3829
  2714                           
  2715                           ;main.c: 479: set_t_dq1_up = 10;
  2716  000B2E  0E0A               	movlw	10
  2717  000B30  6E31               	movwf	_set_t_dq1_up^0,c
  2718  000B32                     l3829:
  2719                           
  2720                           ;main.c: 480: };main.c: 481: if (pressed_key == 3) {
  2721  000B32  0E03               	movlw	3
  2722  000B34  1834               	xorwf	_pressed_key^0,w,c
  2723  000B36  E002 EFD2  F000    	bnz	l3511
  2724                           
  2725                           ;main.c: 482: sub_sel_kol = 2;
  2726  000B3C  0E02               	movlw	2
  2727  000B3E  6E32               	movwf	_sub_sel_kol^0,c
  2728                           
  2729                           ;main.c: 483: lcd_gotoxy(1, 2);
  2730  000B40  6E49               	movwf	lcd_gotoxy@y^0,c
  2731  000B42  0E01               	movlw	1
  2732  000B44  EC8C  F00D         	call	_lcd_gotoxy
  2733                           
  2734                           ;main.c: 484: lcdPrint("Òåìï Íèç:     ");
  2735  000B48  0E6E               	movlw	low STR_25
  2736  000B4A  6E4C               	movwf	lcdPrint@t^0,c
  2737  000B4C  0E1F               	movlw	high STR_25
  2738  000B4E  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2739  000B50  ECCE  F009         	call	_lcdPrint	;wreg free
  2740  000B54  EFD2  F000         	goto	l3511
  2741  000B58                     l3837:
  2742                           
  2743                           ;main.c: 488: lcd_gotoxy(10, 2);
  2744  000B58  DA52               	call	PL36	;call to abstracted procedure
  2745  000B5A  EC8C  F00D         	call	_lcd_gotoxy
  2746                           
  2747                           ;main.c: 489: lcd_putc('-');
  2748  000B5E  0E2D               	movlw	45
  2749  000B60  ECCF  F00D         	call	_lcd_putc
  2750                           
  2751                           ;main.c: 490: lcd_putc(((set_t_dq1_dwn / 10) % 10) + 48);
  2752  000B64  0E0A               	movlw	10
  2753  000B66  6E49               	movwf	___lbmod@divisor^0,c
  2754  000B68  6E45               	movwf	___lbdiv@divisor^0,c
  2755  000B6A  5030               	movf	_set_t_dq1_dwn^0,w,c
  2756  000B6C  ECB0  F00C         	call	___lbdiv
  2757  000B70  EC13  F00D         	call	___lbmod
  2758  000B74  0F30               	addlw	48
  2759  000B76  ECCF  F00D         	call	_lcd_putc
  2760                           
  2761                           ;main.c: 491: lcd_putc('.');
  2762  000B7A  0E2E               	movlw	46
  2763  000B7C  ECCF  F00D         	call	_lcd_putc
  2764                           
  2765                           ;main.c: 492: lcd_putc(((set_t_dq1_dwn % 10) + 48));
  2766  000B80  0E0A               	movlw	10
  2767  000B82  6E49               	movwf	___lbmod@divisor^0,c
  2768  000B84  5030               	movf	_set_t_dq1_dwn^0,w,c
  2769  000B86  EC13  F00D         	call	___lbmod
  2770  000B8A  0F30               	addlw	48
  2771  000B8C  ECCF  F00D         	call	_lcd_putc
  2772                           
  2773                           ;main.c: 494: if (pressed_key == 1) {
  2774  000B90  0434               	decf	_pressed_key^0,w,c
  2775  000B92  E105               	bnz	l3847
  2776                           
  2777                           ;main.c: 495: set_t_dq1_dwn++;
  2778  000B94  2A30               	incf	_set_t_dq1_dwn^0,f,c
  2779                           
  2780                           ;main.c: 496: if (set_t_dq1_dwn == 11)
  2781  000B96  0E0B               	movlw	11
  2782  000B98  1830               	xorwf	_set_t_dq1_dwn^0,w,c
  2783  000B9A  E101               	bnz	l3847
  2784                           
  2785                           ;main.c: 497: set_t_dq1_dwn = 0;
  2786  000B9C  6A30               	clrf	_set_t_dq1_dwn^0,c
  2787  000B9E                     l3847:
  2788                           
  2789                           ;main.c: 498: };main.c: 499: if (pressed_key == 2) {
  2790  000B9E  0E02               	movlw	2
  2791  000BA0  1834               	xorwf	_pressed_key^0,w,c
  2792  000BA2  E105               	bnz	l3855
  2793                           
  2794                           ;main.c: 500: set_t_dq1_dwn--;
  2795  000BA4  0630               	decf	_set_t_dq1_dwn^0,f,c
  2796                           
  2797                           ;main.c: 501: if (set_t_dq1_dwn == 255)
  2798  000BA6  2830               	incf	_set_t_dq1_dwn^0,w,c
  2799  000BA8  E102               	bnz	l3855
  2800                           
  2801                           ;main.c: 502: set_t_dq1_dwn = 10;
  2802  000BAA  0E0A               	movlw	10
  2803  000BAC  6E30               	movwf	_set_t_dq1_dwn^0,c
  2804  000BAE                     l3855:
  2805                           
  2806                           ;main.c: 503: };main.c: 504: if (pressed_key == 3) {
  2807  000BAE  0E03               	movlw	3
  2808  000BB0  1834               	xorwf	_pressed_key^0,w,c
  2809  000BB2  E002 EFD2  F000    	bnz	l3511
  2810                           
  2811                           ;main.c: 505: sub_sel_kol = 3;
  2812  000BB8  0E03               	movlw	3
  2813  000BBA  6E32               	movwf	_sub_sel_kol^0,c
  2814                           
  2815                           ;main.c: 506: write_eep(16, set_t_dq1_up);
  2816  000BBC  C031  F045         	movff	_set_t_dq1_up,write_eep@data
  2817  000BC0  0E10               	movlw	16
  2818  000BC2  EC26  F00D         	call	_write_eep
  2819                           
  2820                           ;main.c: 507: write_eep(17, set_t_dq1_dwn);
  2821  000BC6  C030  F045         	movff	_set_t_dq1_dwn,write_eep@data
  2822  000BCA  0E11               	movlw	17
  2823  000BCC  EC26  F00D         	call	_write_eep
  2824                           
  2825                           ;main.c: 508: lcd_gotoxy(1, 1);
  2826  000BD0  0E01               	movlw	1
  2827  000BD2  6E49               	movwf	lcd_gotoxy@y^0,c
  2828  000BD4  EC8C  F00D         	call	_lcd_gotoxy
  2829                           
  2830                           ;main.c: 509: lcdPrint(" Ôiêñàöiÿ t êîë.");
  2831  000BD8  0EDE               	movlw	low STR_26
  2832  000BDA  6E4C               	movwf	lcdPrint@t^0,c
  2833  000BDC  0E1E               	movlw	high STR_26
  2834  000BDE  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2835  000BE0  ECCE  F009         	call	_lcdPrint	;wreg free
  2836                           
  2837                           ;main.c: 510: lcd_gotoxy(1, 2);
  2838  000BE4  DA03               	call	PL28	;call to abstracted procedure
  2839  000BE6  EC8C  F00D         	call	_lcd_gotoxy
  2840                           
  2841                           ;main.c: 511: lcdPrint("Íàòèñíiòü äâ³ êí");
  2842  000BEA  0ECD               	movlw	low STR_27
  2843  000BEC  6E4C               	movwf	lcdPrint@t^0,c
  2844  000BEE  0E1E               	movlw	high STR_27
  2845  000BF0  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2846  000BF2  ECCE  F009         	call	_lcdPrint	;wreg free
  2847  000BF6  EFD2  F000         	goto	l3511
  2848  000BFA                     l3871:
  2849                           
  2850                           ;main.c: 517: if (pressed_key == 3) {
  2851  000BFA  0E03               	movlw	3
  2852  000BFC  1834               	xorwf	_pressed_key^0,w,c
  2853  000BFE  E002 EFD2  F000    	bnz	l3511
  2854                           
  2855                           ;main.c: 518: select = 1;
  2856  000C04  0E01               	movlw	1
  2857  000C06  6E62               	movwf	_select^0,c
  2858                           
  2859                           ;main.c: 519: temp1_fix = temperature_1;
  2860  000C08  C05F  F027         	movff	_temperature_1,_temp1_fix
  2861  000C0C  C060  F028         	movff	_temperature_1+1,_temp1_fix+1
  2862                           
  2863                           ;main.c: 520: write_eep(20, (temp1_fix >> 8));
  2864  000C10  C028  F045         	movff	_temp1_fix+1,write_eep@data
  2865  000C14  0E14               	movlw	20
  2866  000C16  EC26  F00D         	call	_write_eep
  2867                           
  2868                           ;main.c: 521: write_eep(20 + 1, (uint8_t) temp1_fix);
  2869  000C1A  C027  F045         	movff	_temp1_fix,write_eep@data
  2870  000C1E  0E15               	movlw	21
  2871  000C20  EC26  F00D         	call	_write_eep
  2872  000C24  D6D1               	goto	l3741
  2873  000C26                     l3885:
  2874  000C26  5032               	movf	_sub_sel_kol^0,w,c
  2875                           
  2876                           ; Switch size 1, requested type "space"
  2877                           ; Number of cases is 3, Range of values is 1 to 3
  2878                           ; switch strategies available:
  2879                           ; Name         Instructions Cycles
  2880                           ; simple_byte           10     6 (average)
  2881                           ;	Chosen strategy is simple_byte
  2882  000C28  0A01               	xorlw	1	; case 1
  2883  000C2A  E101 D757          	bz	l3811
  2884  000C2E  0A03               	xorlw	3	; case 2
  2885  000C30  E093               	bz	l3837
  2886  000C32  0A01               	xorlw	1	; case 3
  2887  000C34  E0E2               	bz	l3871
  2888  000C36  EFD2  F000         	goto	l3511
  2889  000C3A                     l3887:
  2890                           
  2891                           ;main.c: 531: lcd_gotoxy(10, 2);
  2892  000C3A  D9E1               	call	PL36	;call to abstracted procedure
  2893  000C3C  EC8C  F00D         	call	_lcd_gotoxy
  2894                           
  2895                           ;main.c: 533: switch (sub_sel) {
  2896  000C40  D03F               	goto	l3909
  2897  000C42                     l3889:
  2898                           
  2899                           ;main.c: 535: lcdPrint("1:");
  2900  000C42  0EE2               	movlw	low STR_28
  2901  000C44  6E4C               	movwf	lcdPrint@t^0,c
  2902  000C46  0E1F               	movlw	high STR_28
  2903  000C48  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2904  000C4A  ECCE  F009         	call	_lcdPrint	;wreg free
  2905                           
  2906                           ;main.c: 536: break;
  2907  000C4E  D04A               	goto	l3911
  2908  000C50                     l3891:
  2909                           
  2910                           ;main.c: 538: lcdPrint("2:");
  2911  000C50  0EE5               	movlw	low STR_29
  2912  000C52  6E4C               	movwf	lcdPrint@t^0,c
  2913  000C54  0E1F               	movlw	high STR_29
  2914  000C56  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2915  000C58  ECCE  F009         	call	_lcdPrint	;wreg free
  2916                           
  2917                           ;main.c: 539: break;
  2918  000C5C  D043               	goto	l3911
  2919  000C5E                     l3893:
  2920                           
  2921                           ;main.c: 541: lcdPrint("3:");
  2922  000C5E  0EE8               	movlw	low STR_30
  2923  000C60  6E4C               	movwf	lcdPrint@t^0,c
  2924  000C62  0E1F               	movlw	high STR_30
  2925  000C64  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2926  000C66  ECCE  F009         	call	_lcdPrint	;wreg free
  2927                           
  2928                           ;main.c: 542: break;
  2929  000C6A  D03C               	goto	l3911
  2930  000C6C                     l3895:
  2931                           
  2932                           ;main.c: 544: lcdPrint("4:");
  2933  000C6C  0EEB               	movlw	low STR_31
  2934  000C6E  6E4C               	movwf	lcdPrint@t^0,c
  2935  000C70  0E1F               	movlw	high STR_31
  2936  000C72  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2937  000C74  ECCE  F009         	call	_lcdPrint	;wreg free
  2938                           
  2939                           ;main.c: 545: break;
  2940  000C78  D035               	goto	l3911
  2941  000C7A                     l3897:
  2942                           
  2943                           ;main.c: 547: lcdPrint("5:");
  2944  000C7A  0EEE               	movlw	low STR_32
  2945  000C7C  6E4C               	movwf	lcdPrint@t^0,c
  2946  000C7E  0E1F               	movlw	high STR_32
  2947  000C80  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2948  000C82  ECCE  F009         	call	_lcdPrint	;wreg free
  2949                           
  2950                           ;main.c: 548: break;
  2951  000C86  D02E               	goto	l3911
  2952  000C88                     l3899:
  2953                           
  2954                           ;main.c: 550: lcdPrint("6:");
  2955  000C88  0EF1               	movlw	low STR_33
  2956  000C8A  6E4C               	movwf	lcdPrint@t^0,c
  2957  000C8C  0E1F               	movlw	high STR_33
  2958  000C8E  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2959  000C90  ECCE  F009         	call	_lcdPrint	;wreg free
  2960                           
  2961                           ;main.c: 551: break;
  2962  000C94  D027               	goto	l3911
  2963  000C96                     l3901:
  2964                           
  2965                           ;main.c: 553: lcdPrint("7:");
  2966  000C96  0EF4               	movlw	low STR_34
  2967  000C98  6E4C               	movwf	lcdPrint@t^0,c
  2968  000C9A  0E1F               	movlw	high STR_34
  2969  000C9C  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2970  000C9E  ECCE  F009         	call	_lcdPrint	;wreg free
  2971                           
  2972                           ;main.c: 554: break;
  2973  000CA2  D020               	goto	l3911
  2974  000CA4                     l3903:
  2975                           
  2976                           ;main.c: 556: lcdPrint("8:");
  2977  000CA4  0EF7               	movlw	low STR_35
  2978  000CA6  6E4C               	movwf	lcdPrint@t^0,c
  2979  000CA8  0E1F               	movlw	high STR_35
  2980  000CAA  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2981  000CAC  ECCE  F009         	call	_lcdPrint	;wreg free
  2982                           
  2983                           ;main.c: 557: break;
  2984  000CB0  D019               	goto	l3911
  2985  000CB2                     l3905:
  2986                           
  2987                           ;main.c: 559: lcdPrint("9:");
  2988  000CB2  0EFA               	movlw	low STR_36
  2989  000CB4  6E4C               	movwf	lcdPrint@t^0,c
  2990  000CB6  0E1F               	movlw	high STR_36
  2991  000CB8  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2992  000CBA  ECCE  F009         	call	_lcdPrint	;wreg free
  2993                           
  2994                           ;main.c: 560: break;
  2995  000CBE  D012               	goto	l3911
  2996  000CC0                     l3909:
  2997  000CC0  5033               	movf	_sub_sel^0,w,c
  2998                           
  2999                           ; Switch size 1, requested type "space"
  3000                           ; Number of cases is 9, Range of values is 0 to 8
  3001                           ; switch strategies available:
  3002                           ; Name         Instructions Cycles
  3003                           ; simple_byte           28    15 (average)
  3004                           ;	Chosen strategy is simple_byte
  3005  000CC2  E0BF               	bz	l3889
  3006  000CC4  0A01               	xorlw	1	; case 1
  3007  000CC6  E0C4               	bz	l3891
  3008  000CC8  0A03               	xorlw	3	; case 2
  3009  000CCA  E0C9               	bz	l3893
  3010  000CCC  0A01               	xorlw	1	; case 3
  3011  000CCE  E0CE               	bz	l3895
  3012  000CD0  0A07               	xorlw	7	; case 4
  3013  000CD2  E0D3               	bz	l3897
  3014  000CD4  0A01               	xorlw	1	; case 5
  3015  000CD6  E0D8               	bz	l3899
  3016  000CD8  0A03               	xorlw	3	; case 6
  3017  000CDA  E0DD               	bz	l3901
  3018  000CDC  0A01               	xorlw	1	; case 7
  3019  000CDE  E0E2               	bz	l3903
  3020  000CE0  0A0F               	xorlw	15	; case 8
  3021  000CE2  E0E7               	bz	l3905
  3022  000CE4                     l3911:
  3023                           
  3024                           ;main.c: 562: lcd_putc(((set_t_dq2 / 100) % 10) + 48);
  3025  000CE4  6A48               	clrf	(___awdiv@divisor+1)^0,c
  3026  000CE6  0E64               	movlw	100
  3027  000CE8  D96D               	call	PL22	;call to abstracted procedure
  3028  000CEA  ECE8  F00A         	call	___awdiv	;wreg free
  3029  000CEE  D95F               	call	PL16	;call to abstracted procedure
  3030  000CF0  EC5E  F00B         	call	___awmod	;wreg free
  3031  000CF4  504D               	movf	?___awmod^0,w,c
  3032  000CF6  0F30               	addlw	48
  3033  000CF8  ECCF  F00D         	call	_lcd_putc
  3034                           
  3035                           ;main.c: 563: lcd_putc(((set_t_dq2 / 10) % 10) + 48);
  3036  000CFC  6A48               	clrf	(___awdiv@divisor+1)^0,c
  3037  000CFE  0E0A               	movlw	10
  3038  000D00  D961               	call	PL22	;call to abstracted procedure
  3039  000D02  ECE8  F00A         	call	___awdiv	;wreg free
  3040  000D06  D953               	call	PL16	;call to abstracted procedure
  3041  000D08  EC5E  F00B         	call	___awmod	;wreg free
  3042  000D0C  504D               	movf	?___awmod^0,w,c
  3043  000D0E  0F30               	addlw	48
  3044  000D10  ECCF  F00D         	call	_lcd_putc
  3045                           
  3046                           ;main.c: 564: lcd_putc('.');
  3047  000D14  0E2E               	movlw	46
  3048  000D16  ECCF  F00D         	call	_lcd_putc
  3049                           
  3050                           ;main.c: 565: lcd_putc((set_t_dq2 % 10) + 48);
  3051  000D1A  D960               	call	PL26	;call to abstracted procedure
  3052  000D1C  EC5E  F00B         	call	___awmod	;wreg free
  3053  000D20  504D               	movf	?___awmod^0,w,c
  3054  000D22  0F30               	addlw	48
  3055  000D24  ECCF  F00D         	call	_lcd_putc
  3056                           
  3057                           ;main.c: 566: lcd_putc(0x01);
  3058  000D28  0E01               	movlw	1
  3059  000D2A  ECCF  F00D         	call	_lcd_putc
  3060                           
  3061                           ;main.c: 568: if (pressed_key == 1) {
  3062  000D2E  0434               	decf	_pressed_key^0,w,c
  3063  000D30  E114               	bnz	l3925
  3064                           
  3065                           ;main.c: 569: if (keyLong)
  3066  000D32  5036               	movf	_keyLong^0,w,c
  3067  000D34  E005               	bz	l3919
  3068                           
  3069                           ;main.c: 570: set_t_dq2 += 10;
  3070  000D36  0E0A               	movlw	10
  3071  000D38  2629               	addwf	_set_t_dq2^0,f,c
  3072  000D3A  0E00               	movlw	0
  3073  000D3C  222A               	addwfc	(_set_t_dq2+1)^0,f,c
  3074  000D3E  D002               	goto	l3921
  3075  000D40                     l3919:
  3076                           
  3077                           ;main.c: 571: else;main.c: 572: set_t_dq2++;
  3078  000D40  4A29               	infsnz	_set_t_dq2^0,f,c
  3079  000D42  2A2A               	incf	(_set_t_dq2+1)^0,f,c
  3080  000D44                     l3921:
  3081                           
  3082                           ;main.c: 574: if (set_t_dq2 > 999)
  3083  000D44  BE2A               	btfsc	(_set_t_dq2+1)^0,7,c
  3084  000D46  D009               	goto	l3925
  3085  000D48  0EE8               	movlw	232
  3086  000D4A  5C29               	subwf	_set_t_dq2^0,w,c
  3087  000D4C  0E03               	movlw	3
  3088  000D4E  582A               	subwfb	(_set_t_dq2+1)^0,w,c
  3089  000D50  E304               	bnc	l3925
  3090                           
  3091                           ;main.c: 575: set_t_dq2 = 999;
  3092  000D52  0E03               	movlw	3
  3093  000D54  6E2A               	movwf	(_set_t_dq2+1)^0,c
  3094  000D56  0EE7               	movlw	231
  3095  000D58  6E29               	movwf	_set_t_dq2^0,c
  3096  000D5A                     l3925:
  3097                           
  3098                           ;main.c: 576: };main.c: 577: if (pressed_key == 2) {
  3099  000D5A  0E02               	movlw	2
  3100  000D5C  1834               	xorwf	_pressed_key^0,w,c
  3101  000D5E  E113               	bnz	l3937
  3102                           
  3103                           ;main.c: 578: if (keyLong)
  3104  000D60  5036               	movf	_keyLong^0,w,c
  3105  000D62  E005               	bz	l3931
  3106                           
  3107                           ;main.c: 579: set_t_dq2 -= 10;
  3108  000D64  0EF6               	movlw	246
  3109  000D66  2629               	addwf	_set_t_dq2^0,f,c
  3110  000D68  0EFF               	movlw	255
  3111  000D6A  222A               	addwfc	(_set_t_dq2+1)^0,f,c
  3112  000D6C  D003               	goto	l3933
  3113  000D6E                     l3931:
  3114                           
  3115                           ;main.c: 580: else;main.c: 581: set_t_dq2--;
  3116  000D6E  0629               	decf	_set_t_dq2^0,f,c
  3117  000D70  A0D8               	btfss	status,0,c
  3118  000D72  062A               	decf	(_set_t_dq2+1)^0,f,c
  3119  000D74                     l3933:
  3120                           
  3121                           ;main.c: 583: if (set_t_dq2 < 1)
  3122  000D74  BE2A               	btfsc	(_set_t_dq2+1)^0,7,c
  3123  000D76  D004               	goto	u3310
  3124  000D78  502A               	movf	(_set_t_dq2+1)^0,w,c
  3125  000D7A  E105               	bnz	l3937
  3126  000D7C  0429               	decf	_set_t_dq2^0,w,c
  3127  000D7E  E203               	bc	l3937
  3128  000D80                     u3310:
  3129                           
  3130                           ;main.c: 584: set_t_dq2 = 1;
  3131  000D80  6A2A               	clrf	(_set_t_dq2+1)^0,c
  3132  000D82  0E01               	movlw	1
  3133  000D84  6E29               	movwf	_set_t_dq2^0,c
  3134  000D86                     l3937:
  3135                           
  3136                           ;main.c: 585: };main.c: 587: if (pressed_key == 3) {
  3137  000D86  0E03               	movlw	3
  3138  000D88  1834               	xorwf	_pressed_key^0,w,c
  3139  000D8A  E101 D0AE          	bz	l3977
  3140  000D8E  EFD2  F000         	goto	l3511
  3141  000D92                     l3941:
  3142                           
  3143                           ;main.c: 591: write_eep(23, ((unsigned char)(((set_t_dq2)>>8)&0xFF)));
  3144  000D92  502A               	movf	(_set_t_dq2+1)^0,w,c
  3145  000D94  6E45               	movwf	write_eep@data^0,c
  3146  000D96  0E17               	movlw	23
  3147  000D98  EC26  F00D         	call	_write_eep
  3148                           
  3149                           ;main.c: 592: write_eep(24, ((unsigned char)((set_t_dq2)&0xFF)));
  3150  000D9C  C029  F045         	movff	_set_t_dq2,write_eep@data
  3151  000DA0  0E18               	movlw	24
  3152  000DA2  EC26  F00D         	call	_write_eep
  3153                           
  3154                           ;main.c: 593: set_t_dq2 = (uint16_t) read_eep(25) << 8 | read_eep(26);
  3155  000DA6  ECCC  F008         	call	PL74	;call to abstracted procedure
  3156  000DAA  ECC0  F00D         	call	_read_eep	;wreg free
  3157  000DAE  6E56               	movwf	??_main^0,c
  3158  000DB0  ECB8  F008         	call	PL64	;call to abstracted procedure
  3159  000DB4  ECC0  F00D         	call	_read_eep	;wreg free
  3160  000DB8  D08B               	goto	L8
  3161  000DBA                     l3945:
  3162                           
  3163                           ;main.c: 596: write_eep(25, ((unsigned char)(((set_t_dq2)>>8)&0xFF)));
  3164  000DBA  502A               	movf	(_set_t_dq2+1)^0,w,c
  3165  000DBC  6E45               	movwf	write_eep@data^0,c
  3166  000DBE  0E19               	movlw	25
  3167  000DC0  EC26  F00D         	call	_write_eep
  3168                           
  3169                           ;main.c: 597: write_eep(26, ((unsigned char)((set_t_dq2)&0xFF)));
  3170  000DC4  C029  F045         	movff	_set_t_dq2,write_eep@data
  3171  000DC8  0E1A               	movlw	26
  3172  000DCA  EC26  F00D         	call	_write_eep
  3173                           
  3174                           ;main.c: 598: set_t_dq2 = (uint16_t) read_eep(27) << 8 | read_eep(28);
  3175  000DCE  ECA8  F008         	call	PL54	;call to abstracted procedure
  3176  000DD2  ECC0  F00D         	call	_read_eep	;wreg free
  3177  000DD6  6E56               	movwf	??_main^0,c
  3178  000DD8  ECC0  F008         	call	PL68	;call to abstracted procedure
  3179  000DDC  ECC0  F00D         	call	_read_eep	;wreg free
  3180  000DE0  D077               	goto	L8
  3181  000DE2                     l3949:
  3182                           
  3183                           ;main.c: 601: write_eep(27, ((unsigned char)(((set_t_dq2)>>8)&0xFF)));
  3184  000DE2  502A               	movf	(_set_t_dq2+1)^0,w,c
  3185  000DE4  6E45               	movwf	write_eep@data^0,c
  3186  000DE6  0E1B               	movlw	27
  3187  000DE8  EC26  F00D         	call	_write_eep
  3188                           
  3189                           ;main.c: 602: write_eep(28, ((unsigned char)((set_t_dq2)&0xFF)));
  3190  000DEC  C029  F045         	movff	_set_t_dq2,write_eep@data
  3191  000DF0  0E1C               	movlw	28
  3192  000DF2  EC26  F00D         	call	_write_eep
  3193                           
  3194                           ;main.c: 603: set_t_dq2 = (uint16_t) read_eep(29) << 8 | read_eep(30);
  3195  000DF6  ECDC  F008         	call	PL86	;call to abstracted procedure
  3196  000DFA  ECC0  F00D         	call	_read_eep	;wreg free
  3197  000DFE  6E56               	movwf	??_main^0,c
  3198  000E00  ECAC  F008         	call	PL56	;call to abstracted procedure
  3199  000E04  ECC0  F00D         	call	_read_eep	;wreg free
  3200  000E08  D063               	goto	L8
  3201  000E0A                     l3953:
  3202                           
  3203                           ;main.c: 606: write_eep(29, ((unsigned char)(((set_t_dq2)>>8)&0xFF)));
  3204  000E0A  502A               	movf	(_set_t_dq2+1)^0,w,c
  3205  000E0C  6E45               	movwf	write_eep@data^0,c
  3206  000E0E  0E1D               	movlw	29
  3207  000E10  EC26  F00D         	call	_write_eep
  3208                           
  3209                           ;main.c: 607: write_eep(30, ((unsigned char)((set_t_dq2)&0xFF)));
  3210  000E14  C029  F045         	movff	_set_t_dq2,write_eep@data
  3211  000E18  0E1E               	movlw	30
  3212  000E1A  EC26  F00D         	call	_write_eep
  3213                           
  3214                           ;main.c: 608: set_t_dq2 = (uint16_t) read_eep(31) << 8 | read_eep(32);
  3215  000E1E  ECD4  F008         	call	PL82	;call to abstracted procedure
  3216  000E22  ECC0  F00D         	call	_read_eep	;wreg free
  3217  000E26  6E56               	movwf	??_main^0,c
  3218  000E28  ECE0  F008         	call	PL88	;call to abstracted procedure
  3219  000E2C  ECC0  F00D         	call	_read_eep	;wreg free
  3220  000E30  D04F               	goto	L8
  3221  000E32                     l3957:
  3222                           
  3223                           ;main.c: 611: write_eep(31, ((unsigned char)(((set_t_dq2)>>8)&0xFF)));
  3224  000E32  502A               	movf	(_set_t_dq2+1)^0,w,c
  3225  000E34  6E45               	movwf	write_eep@data^0,c
  3226  000E36  0E1F               	movlw	31
  3227  000E38  EC26  F00D         	call	_write_eep
  3228                           
  3229                           ;main.c: 612: write_eep(32, ((unsigned char)((set_t_dq2)&0xFF)));
  3230  000E3C  C029  F045         	movff	_set_t_dq2,write_eep@data
  3231  000E40  0E20               	movlw	32
  3232  000E42  EC26  F00D         	call	_write_eep
  3233                           
  3234                           ;main.c: 613: set_t_dq2 = (uint16_t) read_eep(33) << 8 | read_eep(34);
  3235  000E46  ECB4  F008         	call	PL62	;call to abstracted procedure
  3236  000E4A  ECC0  F00D         	call	_read_eep	;wreg free
  3237  000E4E  6E56               	movwf	??_main^0,c
  3238  000E50  ECD0  F008         	call	PL78	;call to abstracted procedure
  3239  000E54  ECC0  F00D         	call	_read_eep	;wreg free
  3240  000E58  D03B               	goto	L8
  3241  000E5A                     l3961:
  3242                           
  3243                           ;main.c: 616: write_eep(33, ((unsigned char)(((set_t_dq2)>>8)&0xFF)));
  3244  000E5A  502A               	movf	(_set_t_dq2+1)^0,w,c
  3245  000E5C  6E45               	movwf	write_eep@data^0,c
  3246  000E5E  0E21               	movlw	33
  3247  000E60  EC26  F00D         	call	_write_eep
  3248                           
  3249                           ;main.c: 617: write_eep(34, ((unsigned char)((set_t_dq2)&0xFF)));
  3250  000E64  C029  F045         	movff	_set_t_dq2,write_eep@data
  3251  000E68  0E22               	movlw	34
  3252  000E6A  EC26  F00D         	call	_write_eep
  3253                           
  3254                           ;main.c: 618: set_t_dq2 = (uint16_t) read_eep(35) << 8 | read_eep(36);
  3255  000E6E  ECC8  F008         	call	PL72	;call to abstracted procedure
  3256  000E72  ECC0  F00D         	call	_read_eep	;wreg free
  3257  000E76  6E56               	movwf	??_main^0,c
  3258  000E78  ECBC  F008         	call	PL66	;call to abstracted procedure
  3259  000E7C  ECC0  F00D         	call	_read_eep	;wreg free
  3260  000E80  D027               	goto	L8
  3261  000E82                     l3965:
  3262                           
  3263                           ;main.c: 621: write_eep(35, ((unsigned char)(((set_t_dq2)>>8)&0xFF)));
  3264  000E82  502A               	movf	(_set_t_dq2+1)^0,w,c
  3265  000E84  6E45               	movwf	write_eep@data^0,c
  3266  000E86  0E23               	movlw	35
  3267  000E88  EC26  F00D         	call	_write_eep
  3268                           
  3269                           ;main.c: 622: write_eep(36, ((unsigned char)((set_t_dq2)&0xFF)));
  3270  000E8C  C029  F045         	movff	_set_t_dq2,write_eep@data
  3271  000E90  0E24               	movlw	36
  3272  000E92  EC26  F00D         	call	_write_eep
  3273                           
  3274                           ;main.c: 623: set_t_dq2 = (uint16_t) read_eep(37) << 8 | read_eep(38);
  3275  000E96  ECA4  F008         	call	PL52	;call to abstracted procedure
  3276  000E9A  ECC0  F00D         	call	_read_eep	;wreg free
  3277  000E9E  6E56               	movwf	??_main^0,c
  3278  000EA0  ECC4  F008         	call	PL70	;call to abstracted procedure
  3279  000EA4  ECC0  F00D         	call	_read_eep	;wreg free
  3280  000EA8  D013               	goto	L8
  3281  000EAA                     l3969:
  3282                           
  3283                           ;main.c: 626: write_eep(37, ((unsigned char)(((set_t_dq2)>>8)&0xFF)));
  3284  000EAA  502A               	movf	(_set_t_dq2+1)^0,w,c
  3285  000EAC  6E45               	movwf	write_eep@data^0,c
  3286  000EAE  0E25               	movlw	37
  3287  000EB0  EC26  F00D         	call	_write_eep
  3288                           
  3289                           ;main.c: 627: write_eep(38, ((unsigned char)((set_t_dq2)&0xFF)));
  3290  000EB4  C029  F045         	movff	_set_t_dq2,write_eep@data
  3291  000EB8  0E26               	movlw	38
  3292  000EBA  EC26  F00D         	call	_write_eep
  3293                           
  3294                           ;main.c: 628: set_t_dq2 = (uint16_t) read_eep(39) << 8 | read_eep(40);
  3295  000EBE  ECD8  F008         	call	PL84	;call to abstracted procedure
  3296  000EC2  ECC0  F00D         	call	_read_eep	;wreg free
  3297  000EC6  6E56               	movwf	??_main^0,c
  3298  000EC8  ECB0  F008         	call	PL58	;call to abstracted procedure
  3299  000ECC  ECC0  F00D         	call	_read_eep	;wreg free
  3300  000ED0                     L8:
  3301  000ED0  D87F               	call	PL24	;call to abstracted procedure
  3302                           
  3303                           ;main.c: 629: break;
  3304  000ED2  D020               	goto	l3979
  3305  000ED4                     l3973:
  3306                           
  3307                           ;main.c: 631: write_eep(39, ((unsigned char)(((set_t_dq2)>>8)&0xFF)));
  3308  000ED4  502A               	movf	(_set_t_dq2+1)^0,w,c
  3309  000ED6  6E45               	movwf	write_eep@data^0,c
  3310  000ED8  0E27               	movlw	39
  3311  000EDA  EC26  F00D         	call	_write_eep
  3312                           
  3313                           ;main.c: 632: write_eep(40, ((unsigned char)((set_t_dq2)&0xFF)));
  3314  000EDE  C029  F045         	movff	_set_t_dq2,write_eep@data
  3315  000EE2  0E28               	movlw	40
  3316  000EE4  EC26  F00D         	call	_write_eep
  3317                           
  3318                           ;main.c: 633: break;
  3319  000EE8  D015               	goto	l3979
  3320  000EEA                     l3977:
  3321  000EEA  5033               	movf	_sub_sel^0,w,c
  3322                           
  3323                           ; Switch size 1, requested type "space"
  3324                           ; Number of cases is 9, Range of values is 0 to 8
  3325                           ; switch strategies available:
  3326                           ; Name         Instructions Cycles
  3327                           ; simple_byte           28    15 (average)
  3328                           ;	Chosen strategy is simple_byte
  3329  000EEC  E101 D751          	bz	l3941
  3330  000EF0  0A01               	xorlw	1	; case 1
  3331  000EF2  E101 D762          	bz	l3945
  3332  000EF6  0A03               	xorlw	3	; case 2
  3333  000EF8  E101 D773          	bz	l3949
  3334  000EFC  0A01               	xorlw	1	; case 3
  3335  000EFE  E085               	bz	l3953
  3336  000F00  0A07               	xorlw	7	; case 4
  3337  000F02  E097               	bz	l3957
  3338  000F04  0A01               	xorlw	1	; case 5
  3339  000F06  E0A9               	bz	l3961
  3340  000F08  0A03               	xorlw	3	; case 6
  3341  000F0A  E0BB               	bz	l3965
  3342  000F0C  0A01               	xorlw	1	; case 7
  3343  000F0E  E0CD               	bz	l3969
  3344  000F10  0A0F               	xorlw	15	; case 8
  3345  000F12  E0E0               	bz	l3973
  3346  000F14                     l3979:
  3347                           
  3348                           ;main.c: 637: sub_sel++;
  3349  000F14  2A33               	incf	_sub_sel^0,f,c
  3350                           
  3351                           ;main.c: 639: if (sub_sel > VAL_9) {
  3352  000F16  0E08               	movlw	8
  3353  000F18  6433               	cpfsgt	_sub_sel^0,c
  3354  000F1A  D005               	goto	l3989
  3355                           
  3356                           ;main.c: 640: sub_sel = VAL_1;
  3357  000F1C  6A33               	clrf	_sub_sel^0,c
  3358                           
  3359                           ;main.c: 641: select = 1;
  3360  000F1E  0E01               	movlw	1
  3361  000F20  6E62               	movwf	_select^0,c
  3362                           
  3363                           ;main.c: 642: outValPreset();
  3364  000F22  EC20  F008         	call	_outValPreset	;wreg free
  3365  000F26                     l3989:
  3366                           
  3367                           ;main.c: 647: };main.c: 649: Delay_ms(10);
  3368  000F26  D888               	call	PL76	;call to abstracted procedure
  3369  000F28  EC38  F00D         	call	_Delay_ms	;wreg free
  3370  000F2C  EFD2  F000         	goto	l3511
  3371  000F30                     l3993:
  3372  000F30  5062               	movf	_select^0,w,c
  3373                           
  3374                           ; Switch size 1, requested type "space"
  3375                           ; Number of cases is 8, Range of values is 1 to 8
  3376                           ; switch strategies available:
  3377                           ; Name         Instructions Cycles
  3378                           ; simple_byte           25    13 (average)
  3379                           ;	Chosen strategy is simple_byte
  3380  000F32  0A01               	xorlw	1	; case 1
  3381  000F34  E102 EFDC  F000    	bz	l3519
  3382  000F3A  0A03               	xorlw	3	; case 2
  3383  000F3C  E101 D4DC          	bz	l3683
  3384  000F40  0A01               	xorlw	1	; case 3
  3385  000F42  E102 EFD2  F000    	bz	l3511
  3386  000F48  0A07               	xorlw	7	; case 4
  3387  000F4A  E101 D586          	bz	l3779
  3388  000F4E  0A01               	xorlw	1	; case 5
  3389  000F50  E101 D669          	bz	l3885
  3390  000F54  0A03               	xorlw	3	; case 6
  3391  000F56  E101 D670          	bz	l3887
  3392  000F5A  0A01               	xorlw	1	; case 7
  3393  000F5C  E101 D4FA          	bz	l3711
  3394  000F60  0A0F               	xorlw	15	; case 8
  3395  000F62  E101 D535          	bz	l3743
  3396  000F66  EFD2  F000         	goto	l3511
  3397  000F6A                     __end_of_main:
  3398                           	callstack 0
  3399  000F6A                     PL2:
  3400                           	callstack 24
  3401  000F6A  C045  F04C         	movff	?___lwdiv,___lwmod@dividend
  3402  000F6E  C046  F04D         	movff	?___lwdiv+1,___lwmod@dividend+1
  3403  000F72  6A4F               	clrf	(___lwmod@divisor+1)^0,c
  3404  000F74  0E0A               	movlw	10
  3405  000F76  6E4E               	movwf	___lwmod@divisor^0,c
  3406  000F78  0C0A               	retlw	10
  3407  000F7A                     __end_ofPL2:
  3408                           	callstack 0
  3409  000F7A                     PL4:
  3410                           	callstack 24
  3411  000F7A  6E47               	movwf	___lwdiv@divisor^0,c
  3412  000F7C  C05F  F045         	movff	_temperature_1,___lwdiv@dividend
  3413  000F80  C060  F046         	movff	_temperature_1+1,___lwdiv@dividend+1
  3414  000F84  0012               	return	
  3415  000F86                     __end_ofPL4:
  3416                           	callstack 0
  3417  000F86                     PL6:
  3418                           	callstack 24
  3419  000F86  6E47               	movwf	___lwdiv@divisor^0,c
  3420  000F88  C05D  F045         	movff	_temperature_2,___lwdiv@dividend
  3421  000F8C  C05E  F046         	movff	_temperature_2+1,___lwdiv@dividend+1
  3422  000F90  0012               	return	
  3423  000F92                     __end_ofPL6:
  3424                           	callstack 0
  3425  000F92                     PL10:
  3426                           	callstack 24
  3427  000F92  6A4F               	clrf	(___lwmod@divisor+1)^0,c
  3428  000F94  0E0A               	movlw	10
  3429  000F96  6E4E               	movwf	___lwmod@divisor^0,c
  3430  000F98  0C0A               	retlw	10
  3431  000F9A                     __end_ofPL10:
  3432                           	callstack 0
  3433  000F9A                     PL12:
  3434                           	callstack 24
  3435  000F9A  C05F  F04C         	movff	_temperature_1,___lwmod@dividend
  3436  000F9E  C060  F04D         	movff	_temperature_1+1,___lwmod@dividend+1
  3437  000FA2  0012               	return	
  3438  000FA4                     __end_ofPL12:
  3439                           	callstack 0
  3440  000FA4                     PL14:
  3441                           	callstack 24
  3442  000FA4  C05D  F04C         	movff	_temperature_2,___lwmod@dividend
  3443  000FA8  C05E  F04D         	movff	_temperature_2+1,___lwmod@dividend+1
  3444  000FAC  0012               	return	
  3445  000FAE                     __end_ofPL14:
  3446                           	callstack 0
  3447  000FAE                     PL16:
  3448                           	callstack 24
  3449  000FAE  C045  F04D         	movff	?___awdiv,___awmod@dividend
  3450  000FB2  C046  F04E         	movff	?___awdiv+1,___awmod@dividend+1
  3451  000FB6  6A50               	clrf	(___awmod@divisor+1)^0,c
  3452  000FB8  0E0A               	movlw	10
  3453  000FBA  6E4F               	movwf	___awmod@divisor^0,c
  3454  000FBC  0C0A               	retlw	10
  3455  000FBE                     __end_ofPL16:
  3456                           	callstack 0
  3457  000FBE                     PL18:
  3458                           	callstack 24
  3459  000FBE  0E03               	movlw	3
  3460  000FC0  6E48               	movwf	(___lwdiv@divisor+1)^0,c
  3461  000FC2  0CE8               	retlw	232
  3462  000FC4                     __end_ofPL18:
  3463                           	callstack 0
  3464  000FC4                     PL22:
  3465                           	callstack 24
  3466  000FC4  6E47               	movwf	___awdiv@divisor^0,c
  3467  000FC6  C029  F045         	movff	_set_t_dq2,___awdiv@dividend
  3468  000FCA  C02A  F046         	movff	_set_t_dq2+1,___awdiv@dividend+1
  3469  000FCE  0012               	return	
  3470  000FD0                     __end_ofPL22:
  3471                           	callstack 0
  3472  000FD0                     PL24:
  3473                           	callstack 24
  3474  000FD0  6E57               	movwf	(??_main+1)^0,c
  3475  000FD2  5056               	movf	??_main^0,w,c
  3476  000FD4  6E29               	movwf	_set_t_dq2^0,c
  3477  000FD6  C057  F02A         	movff	??_main+1,_set_t_dq2+1
  3478  000FDA  0012               	return	
  3479  000FDC                     __end_ofPL24:
  3480                           	callstack 0
  3481  000FDC                     PL26:
  3482                           	callstack 24
  3483  000FDC  C029  F04D         	movff	_set_t_dq2,___awmod@dividend
  3484  000FE0  C02A  F04E         	movff	_set_t_dq2+1,___awmod@dividend+1
  3485  000FE4  6A50               	clrf	(___awmod@divisor+1)^0,c
  3486  000FE6  0E0A               	movlw	10
  3487  000FE8  6E4F               	movwf	___awmod@divisor^0,c
  3488  000FEA  0C0A               	retlw	10
  3489  000FEC                     __end_ofPL26:
  3490                           	callstack 0
  3491  000FEC                     PL28:
  3492                           	callstack 24
  3493  000FEC  0E02               	movlw	2
  3494  000FEE  6E49               	movwf	lcd_gotoxy@y^0,c
  3495  000FF0  0C01               	retlw	1
  3496  000FF2                     __end_ofPL28:
  3497                           	callstack 0
  3498  000FF2                     PL34:
  3499                           	callstack 24
  3500  000FF2  6E47               	movwf	___lwdiv@divisor^0,c
  3501  000FF4  C027  F045         	movff	_temp1_fix,___lwdiv@dividend
  3502  000FF8  C028  F046         	movff	_temp1_fix+1,___lwdiv@dividend+1
  3503  000FFC  0012               	return	
  3504  000FFE                     __end_ofPL34:
  3505                           	callstack 0
  3506  000FFE                     PL36:
  3507                           	callstack 24
  3508  000FFE  0E02               	movlw	2
  3509  001000  6E49               	movwf	lcd_gotoxy@y^0,c
  3510  001002  0C0A               	retlw	10
  3511  001004                     __end_ofPL36:
  3512                           	callstack 0
  3513  001004                     PL38:
  3514                           	callstack 24
  3515  001004  6E62               	movwf	_select^0,c
  3516  001006  0E01               	movlw	1
  3517  001008  6E49               	movwf	lcd_gotoxy@y^0,c
  3518  00100A  0C01               	retlw	1
  3519  00100C                     __end_ofPL38:
  3520                           	callstack 0
  3521  00100C                     PL40:
  3522                           	callstack 24
  3523  00100C  6E56               	movwf	??_main^0,c
  3524  00100E  6A46               	clrf	(read_eep@address+1)^0,c
  3525  001010  0E17               	movlw	23
  3526  001012  6E45               	movwf	read_eep@address^0,c
  3527  001014  0C17               	retlw	23
  3528  001016                     __end_ofPL40:
  3529                           	callstack 0
  3530  001016                     PL46:
  3531                           	callstack 24
  3532  001016  0EDE               	movlw	low STR_6
  3533  001018  6E46               	movwf	EUSART_Write_Str@t^0,c
  3534  00101A  0E1F               	movlw	high STR_6
  3535  00101C  6E47               	movwf	(EUSART_Write_Str@t+1)^0,c
  3536  00101E  0012               	return	
  3537  001020                     __end_ofPL46:
  3538                           	callstack 0
  3539  001020                     PL48:
  3540                           	callstack 24
  3541  001020  0EDA               	movlw	low STR_9
  3542  001022  6E46               	movwf	EUSART_Write_Str@t^0,c
  3543  001024  0E1F               	movlw	high STR_9
  3544  001026  6E47               	movwf	(EUSART_Write_Str@t+1)^0,c
  3545  001028  0012               	return	
  3546  00102A                     __end_ofPL48:
  3547                           	callstack 0
  3548  00102A                     PL50:
  3549                           	callstack 24
  3550  00102A  6A46               	clrf	(read_eep@address+1)^0,c
  3551  00102C  0E18               	movlw	24
  3552  00102E  6E45               	movwf	read_eep@address^0,c
  3553  001030  0C18               	retlw	24
  3554  001032                     __end_ofPL50:
  3555                           	callstack 0
  3556  001032                     PL60:
  3557                           	callstack 24
  3558  001032  0E02               	movlw	2
  3559  001034  6E49               	movwf	lcd_gotoxy@y^0,c
  3560  001036  0C0B               	retlw	11
  3561  001038                     __end_ofPL60:
  3562                           	callstack 0
  3563  001038                     PL76:
  3564                           	callstack 26
  3565  001038  6A46               	clrf	(Delay_ms@delay+1)^0,c
  3566  00103A  0E0A               	movlw	10
  3567  00103C  6E45               	movwf	Delay_ms@delay^0,c
  3568  00103E  0C0A               	retlw	10
  3569  001040                     __end_ofPL76:
  3570                           	callstack 0
  3571                           
  3572 ;; *************** function _outValPreset *****************
  3573 ;; Defined at:
  3574 ;;		line 785 in file "main.c"
  3575 ;; Parameters:    Size  Location     Type
  3576 ;;		None
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;		None
  3579 ;; Return value:  Size  Location     Type
  3580 ;;                  1    wreg      void 
  3581 ;; Registers used:
  3582 ;;		wreg, status,2, status,0, cstack
  3583 ;; Tracked objects:
  3584 ;;		On entry : 0/0
  3585 ;;		On exit  : 0/0
  3586 ;;		Unchanged: 0/0
  3587 ;; Data sizes:     COMRAM   BANK0   BANK1
  3588 ;;      Params:         0       0       0
  3589 ;;      Locals:         0       0       0
  3590 ;;      Temps:          3       0       0
  3591 ;;      Totals:         3       0       0
  3592 ;;Total ram usage:        3 bytes
  3593 ;; Hardware stack levels used: 1
  3594 ;; Hardware stack levels required when called: 5
  3595 ;; This function calls:
  3596 ;;		_lcd_gotoxy
  3597 ;;		_lcd_putc
  3598 ;;		_read_eep
  3599 ;; This function is called by:
  3600 ;;		_main
  3601 ;; This function uses a non-reentrant model
  3602 ;;
  3603                           
  3604                           	psect	text1
  3605  001040                     __ptext1:
  3606                           	callstack 0
  3607  001040                     _outValPreset:
  3608                           	callstack 0
  3609                           
  3610                           ;main.c: 786: lcd_gotoxy(10, 2);
  3611                           
  3612                           ;incstack = 0
  3613  001040  ECFF  F007         	call	PL36	;call to abstracted procedure
  3614  001044  EC8C  F00D         	call	_lcd_gotoxy
  3615                           
  3616                           ;main.c: 787: switch (sub_sel) {
  3617  001048  D066               	goto	l3257
  3618  00104A                     l3237:
  3619                           
  3620                           ;main.c: 790: set_t_dq2 = (uint16_t) read_eep(23) << 8 | read_eep(24);
  3621  00104A  EC15  F008         	call	PL50	;call to abstracted procedure
  3622  00104E  ECC0  F00D         	call	_read_eep	;wreg free
  3623  001052  6E4C               	movwf	??_outValPreset^0,c
  3624  001054  6A46               	clrf	(read_eep@address+1)^0,c
  3625  001056  0E17               	movlw	23
  3626  001058  6E45               	movwf	read_eep@address^0,c
  3627  00105A  ECC0  F00D         	call	_read_eep	;wreg free
  3628  00105E  D86E               	call	PL8	;call to abstracted procedure
  3629                           
  3630                           ;main.c: 791: lcd_putc('1');
  3631  001060  0E31               	movlw	49
  3632  001062  EFCF  F00D         	goto	_lcd_putc
  3633  001066                     l3239:
  3634                           
  3635                           ;main.c: 794: set_t_dq2 = (uint16_t) read_eep(25) << 8 | read_eep(26);
  3636  001066  D898               	call	PL74	;call to abstracted procedure
  3637  001068  ECC0  F00D         	call	_read_eep	;wreg free
  3638  00106C  6E4C               	movwf	??_outValPreset^0,c
  3639  00106E  D880               	call	PL64	;call to abstracted procedure
  3640  001070  ECC0  F00D         	call	_read_eep	;wreg free
  3641  001074  D863               	call	PL8	;call to abstracted procedure
  3642                           
  3643                           ;main.c: 795: lcd_putc('2');
  3644  001076  0E32               	movlw	50
  3645  001078  EFCF  F00D         	goto	_lcd_putc
  3646  00107C                     l3241:
  3647                           
  3648                           ;main.c: 798: set_t_dq2 = (uint16_t) read_eep(27) << 8 | read_eep(28);
  3649  00107C  D869               	call	PL54	;call to abstracted procedure
  3650  00107E  ECC0  F00D         	call	_read_eep	;wreg free
  3651  001082  6E4C               	movwf	??_outValPreset^0,c
  3652  001084  D87D               	call	PL68	;call to abstracted procedure
  3653  001086  ECC0  F00D         	call	_read_eep	;wreg free
  3654  00108A  D858               	call	PL8	;call to abstracted procedure
  3655                           
  3656                           ;main.c: 799: lcd_putc('3');
  3657  00108C  0E33               	movlw	51
  3658  00108E  EFCF  F00D         	goto	_lcd_putc
  3659  001092                     l3243:
  3660                           
  3661                           ;main.c: 802: set_t_dq2 = (uint16_t) read_eep(29) << 8 | read_eep(30);
  3662  001092  D892               	call	PL86	;call to abstracted procedure
  3663  001094  ECC0  F00D         	call	_read_eep	;wreg free
  3664  001098  6E4C               	movwf	??_outValPreset^0,c
  3665  00109A  D85E               	call	PL56	;call to abstracted procedure
  3666  00109C  ECC0  F00D         	call	_read_eep	;wreg free
  3667  0010A0  D84D               	call	PL8	;call to abstracted procedure
  3668                           
  3669                           ;main.c: 803: lcd_putc('4');
  3670  0010A2  0E34               	movlw	52
  3671  0010A4  EFCF  F00D         	goto	_lcd_putc
  3672  0010A8                     l3245:
  3673                           
  3674                           ;main.c: 806: set_t_dq2 = (uint16_t) read_eep(31) << 8 | read_eep(32);
  3675  0010A8  D87F               	call	PL82	;call to abstracted procedure
  3676  0010AA  ECC0  F00D         	call	_read_eep	;wreg free
  3677  0010AE  6E4C               	movwf	??_outValPreset^0,c
  3678  0010B0  D887               	call	PL88	;call to abstracted procedure
  3679  0010B2  ECC0  F00D         	call	_read_eep	;wreg free
  3680  0010B6  D842               	call	PL8	;call to abstracted procedure
  3681                           
  3682                           ;main.c: 807: lcd_putc('5');
  3683  0010B8  0E35               	movlw	53
  3684  0010BA  EFCF  F00D         	goto	_lcd_putc
  3685  0010BE                     l3247:
  3686                           
  3687                           ;main.c: 810: set_t_dq2 = (uint16_t) read_eep(33) << 8 | read_eep(34);
  3688  0010BE  D854               	call	PL62	;call to abstracted procedure
  3689  0010C0  ECC0  F00D         	call	_read_eep	;wreg free
  3690  0010C4  6E4C               	movwf	??_outValPreset^0,c
  3691  0010C6  D86C               	call	PL78	;call to abstracted procedure
  3692  0010C8  ECC0  F00D         	call	_read_eep	;wreg free
  3693  0010CC  D837               	call	PL8	;call to abstracted procedure
  3694                           
  3695                           ;main.c: 811: lcd_putc('6');
  3696  0010CE  0E36               	movlw	54
  3697  0010D0  EFCF  F00D         	goto	_lcd_putc
  3698  0010D4                     l3249:
  3699                           
  3700                           ;main.c: 814: set_t_dq2 = (uint16_t) read_eep(35) << 8 | read_eep(36);
  3701  0010D4  D85D               	call	PL72	;call to abstracted procedure
  3702  0010D6  ECC0  F00D         	call	_read_eep	;wreg free
  3703  0010DA  6E4C               	movwf	??_outValPreset^0,c
  3704  0010DC  D84D               	call	PL66	;call to abstracted procedure
  3705  0010DE  ECC0  F00D         	call	_read_eep	;wreg free
  3706  0010E2  D82C               	call	PL8	;call to abstracted procedure
  3707                           
  3708                           ;main.c: 815: lcd_putc('7');
  3709  0010E4  0E37               	movlw	55
  3710  0010E6  EFCF  F00D         	goto	_lcd_putc
  3711  0010EA                     l3251:
  3712                           
  3713                           ;main.c: 818: set_t_dq2 = (uint16_t) read_eep(37) << 8 | read_eep(38);
  3714  0010EA  D82E               	call	PL52	;call to abstracted procedure
  3715  0010EC  ECC0  F00D         	call	_read_eep	;wreg free
  3716  0010F0  6E4C               	movwf	??_outValPreset^0,c
  3717  0010F2  D84A               	call	PL70	;call to abstracted procedure
  3718  0010F4  ECC0  F00D         	call	_read_eep	;wreg free
  3719  0010F8  D821               	call	PL8	;call to abstracted procedure
  3720                           
  3721                           ;main.c: 819: lcd_putc('8');
  3722  0010FA  0E38               	movlw	56
  3723  0010FC  EFCF  F00D         	goto	_lcd_putc
  3724  001100                     l3253:
  3725                           
  3726                           ;main.c: 822: set_t_dq2 = (uint16_t) read_eep(39) << 8 | read_eep(40);
  3727  001100  D857               	call	PL84	;call to abstracted procedure
  3728  001102  ECC0  F00D         	call	_read_eep	;wreg free
  3729  001106  6E4C               	movwf	??_outValPreset^0,c
  3730  001108  D82B               	call	PL58	;call to abstracted procedure
  3731  00110A  ECC0  F00D         	call	_read_eep	;wreg free
  3732  00110E  D816               	call	PL8	;call to abstracted procedure
  3733                           
  3734                           ;main.c: 823: lcd_putc('9');
  3735  001110  0E39               	movlw	57
  3736  001112  EFCF  F00D         	goto	_lcd_putc
  3737  001116                     l3257:
  3738  001116  5033               	movf	_sub_sel^0,w,c
  3739                           
  3740                           ; Switch size 1, requested type "space"
  3741                           ; Number of cases is 9, Range of values is 0 to 8
  3742                           ; switch strategies available:
  3743                           ; Name         Instructions Cycles
  3744                           ; simple_byte           28    15 (average)
  3745                           ;	Chosen strategy is simple_byte
  3746  001118  E098               	bz	l3237
  3747  00111A  0A01               	xorlw	1	; case 1
  3748  00111C  E0A4               	bz	l3239
  3749  00111E  0A03               	xorlw	3	; case 2
  3750  001120  E0AD               	bz	l3241
  3751  001122  0A01               	xorlw	1	; case 3
  3752  001124  E0B6               	bz	l3243
  3753  001126  0A07               	xorlw	7	; case 4
  3754  001128  E0BF               	bz	l3245
  3755  00112A  0A01               	xorlw	1	; case 5
  3756  00112C  E0C8               	bz	l3247
  3757  00112E  0A03               	xorlw	3	; case 6
  3758  001130  E0D1               	bz	l3249
  3759  001132  0A01               	xorlw	1	; case 7
  3760  001134  E0DA               	bz	l3251
  3761  001136  0A0F               	xorlw	15	; case 8
  3762  001138  E0E3               	bz	l3253
  3763  00113A  0012               	return		;funcret
  3764  00113C                     __end_of_outValPreset:
  3765                           	callstack 0
  3766  00113C                     PL8:
  3767                           	callstack 25
  3768  00113C  6E4D               	movwf	(??_outValPreset+1)^0,c
  3769  00113E  504C               	movf	??_outValPreset^0,w,c
  3770  001140  6E29               	movwf	_set_t_dq2^0,c
  3771  001142  C04D  F02A         	movff	??_outValPreset+1,_set_t_dq2+1
  3772  001146  0012               	return	
  3773  001148                     __end_ofPL8:
  3774                           	callstack 0
  3775  001148                     PL52:
  3776                           	callstack 24
  3777  001148  6A46               	clrf	(read_eep@address+1)^0,c
  3778  00114A  0E26               	movlw	38
  3779  00114C  6E45               	movwf	read_eep@address^0,c
  3780  00114E  0C26               	retlw	38
  3781  001150                     __end_ofPL52:
  3782                           	callstack 0
  3783  001150                     PL54:
  3784                           	callstack 24
  3785  001150  6A46               	clrf	(read_eep@address+1)^0,c
  3786  001152  0E1C               	movlw	28
  3787  001154  6E45               	movwf	read_eep@address^0,c
  3788  001156  0C1C               	retlw	28
  3789  001158                     __end_ofPL54:
  3790                           	callstack 0
  3791  001158                     PL56:
  3792                           	callstack 24
  3793  001158  6A46               	clrf	(read_eep@address+1)^0,c
  3794  00115A  0E1D               	movlw	29
  3795  00115C  6E45               	movwf	read_eep@address^0,c
  3796  00115E  0C1D               	retlw	29
  3797  001160                     __end_ofPL56:
  3798                           	callstack 0
  3799  001160                     PL58:
  3800                           	callstack 24
  3801  001160  6A46               	clrf	(read_eep@address+1)^0,c
  3802  001162  0E27               	movlw	39
  3803  001164  6E45               	movwf	read_eep@address^0,c
  3804  001166  0C27               	retlw	39
  3805  001168                     __end_ofPL58:
  3806                           	callstack 0
  3807  001168                     PL62:
  3808                           	callstack 24
  3809  001168  6A46               	clrf	(read_eep@address+1)^0,c
  3810  00116A  0E22               	movlw	34
  3811  00116C  6E45               	movwf	read_eep@address^0,c
  3812  00116E  0C22               	retlw	34
  3813  001170                     __end_ofPL62:
  3814                           	callstack 0
  3815  001170                     PL64:
  3816                           	callstack 24
  3817  001170  6A46               	clrf	(read_eep@address+1)^0,c
  3818  001172  0E19               	movlw	25
  3819  001174  6E45               	movwf	read_eep@address^0,c
  3820  001176  0C19               	retlw	25
  3821  001178                     __end_ofPL64:
  3822                           	callstack 0
  3823  001178                     PL66:
  3824                           	callstack 24
  3825  001178  6A46               	clrf	(read_eep@address+1)^0,c
  3826  00117A  0E23               	movlw	35
  3827  00117C  6E45               	movwf	read_eep@address^0,c
  3828  00117E  0C23               	retlw	35
  3829  001180                     __end_ofPL66:
  3830                           	callstack 0
  3831  001180                     PL68:
  3832                           	callstack 24
  3833  001180  6A46               	clrf	(read_eep@address+1)^0,c
  3834  001182  0E1B               	movlw	27
  3835  001184  6E45               	movwf	read_eep@address^0,c
  3836  001186  0C1B               	retlw	27
  3837  001188                     __end_ofPL68:
  3838                           	callstack 0
  3839  001188                     PL70:
  3840                           	callstack 24
  3841  001188  6A46               	clrf	(read_eep@address+1)^0,c
  3842  00118A  0E25               	movlw	37
  3843  00118C  6E45               	movwf	read_eep@address^0,c
  3844  00118E  0C25               	retlw	37
  3845  001190                     __end_ofPL70:
  3846                           	callstack 0
  3847  001190                     PL72:
  3848                           	callstack 24
  3849  001190  6A46               	clrf	(read_eep@address+1)^0,c
  3850  001192  0E24               	movlw	36
  3851  001194  6E45               	movwf	read_eep@address^0,c
  3852  001196  0C24               	retlw	36
  3853  001198                     __end_ofPL72:
  3854                           	callstack 0
  3855  001198                     PL74:
  3856                           	callstack 24
  3857  001198  6A46               	clrf	(read_eep@address+1)^0,c
  3858  00119A  0E1A               	movlw	26
  3859  00119C  6E45               	movwf	read_eep@address^0,c
  3860  00119E  0C1A               	retlw	26
  3861  0011A0                     __end_ofPL74:
  3862                           	callstack 0
  3863  0011A0                     PL78:
  3864                           	callstack 24
  3865  0011A0  6A46               	clrf	(read_eep@address+1)^0,c
  3866  0011A2  0E21               	movlw	33
  3867  0011A4  6E45               	movwf	read_eep@address^0,c
  3868  0011A6  0C21               	retlw	33
  3869  0011A8                     __end_ofPL78:
  3870                           	callstack 0
  3871  0011A8                     PL82:
  3872                           	callstack 24
  3873  0011A8  6A46               	clrf	(read_eep@address+1)^0,c
  3874  0011AA  0E20               	movlw	32
  3875  0011AC  6E45               	movwf	read_eep@address^0,c
  3876  0011AE  0C20               	retlw	32
  3877  0011B0                     __end_ofPL82:
  3878                           	callstack 0
  3879  0011B0                     PL84:
  3880                           	callstack 24
  3881  0011B0  6A46               	clrf	(read_eep@address+1)^0,c
  3882  0011B2  0E28               	movlw	40
  3883  0011B4  6E45               	movwf	read_eep@address^0,c
  3884  0011B6  0C28               	retlw	40
  3885  0011B8                     __end_ofPL84:
  3886                           	callstack 0
  3887  0011B8                     PL86:
  3888                           	callstack 24
  3889  0011B8  6A46               	clrf	(read_eep@address+1)^0,c
  3890  0011BA  0E1E               	movlw	30
  3891  0011BC  6E45               	movwf	read_eep@address^0,c
  3892  0011BE  0C1E               	retlw	30
  3893  0011C0                     __end_ofPL86:
  3894                           	callstack 0
  3895  0011C0                     PL88:
  3896                           	callstack 24
  3897  0011C0  6A46               	clrf	(read_eep@address+1)^0,c
  3898  0011C2  0E1F               	movlw	31
  3899  0011C4  6E45               	movwf	read_eep@address^0,c
  3900  0011C6  0C1F               	retlw	31
  3901  0011C8                     __end_ofPL88:
  3902                           	callstack 0
  3903                           
  3904 ;; *************** function _lcd_putc *****************
  3905 ;; Defined at:
  3906 ;;		line 90 in file "hd44780.c"
  3907 ;; Parameters:    Size  Location     Type
  3908 ;;  c               1    wreg     unsigned char 
  3909 ;; Auto vars:     Size  Location     Type
  3910 ;;  c               1    7[COMRAM] unsigned char 
  3911 ;; Return value:  Size  Location     Type
  3912 ;;                  1    wreg      void 
  3913 ;; Registers used:
  3914 ;;		wreg, status,2, status,0, cstack
  3915 ;; Tracked objects:
  3916 ;;		On entry : 0/0
  3917 ;;		On exit  : 0/0
  3918 ;;		Unchanged: 0/0
  3919 ;; Data sizes:     COMRAM   BANK0   BANK1
  3920 ;;      Params:         0       0       0
  3921 ;;      Locals:         1       0       0
  3922 ;;      Temps:          0       0       0
  3923 ;;      Totals:         1       0       0
  3924 ;;Total ram usage:        1 bytes
  3925 ;; Hardware stack levels used: 1
  3926 ;; Hardware stack levels required when called: 4
  3927 ;; This function calls:
  3928 ;;		_lcdWrite
  3929 ;; This function is called by:
  3930 ;;		_main
  3931 ;;		_outValPreset
  3932 ;; This function uses a non-reentrant model
  3933 ;;
  3934                           
  3935                           	psect	text2
  3936  001B9E                     __ptext2:
  3937                           	callstack 0
  3938  001B9E                     _lcd_putc:
  3939                           	callstack 25
  3940                           
  3941                           ;incstack = 0
  3942                           ;lcd_putc@c stored from wreg
  3943  001B9E  6E49               	movwf	lcd_putc@c^0,c
  3944                           
  3945                           ;hd44780.c: 92: lcdWrite(c, DATA);
  3946  001BA0  0E01               	movlw	1
  3947  001BA2  6E47               	movwf	lcdWrite@type^0,c
  3948  001BA4  5049               	movf	lcd_putc@c^0,w,c
  3949  001BA6  EF4A  F00D         	goto	_lcdWrite
  3950  001BAA                     __end_of_lcd_putc:
  3951                           	callstack 0
  3952                           
  3953 ;; *************** function _lcdPrint *****************
  3954 ;; Defined at:
  3955 ;;		line 96 in file "hd44780.c"
  3956 ;; Parameters:    Size  Location     Type
  3957 ;;  t               2   10[COMRAM] PTR const unsigned char 
  3958 ;;		 -> STR_36(3), STR_35(3), STR_34(3), STR_33(3), 
  3959 ;;		 -> STR_32(3), STR_31(3), STR_30(3), STR_29(3), 
  3960 ;;		 -> STR_28(3), STR_27(17), STR_26(17), STR_25(15), 
  3961 ;;		 -> STR_24(9), STR_23(13), STR_22(11), STR_21(13), 
  3962 ;;		 -> STR_20(15), STR_19(16), STR_18(14), STR_17(16), 
  3963 ;;		 -> STR_16(16), STR_15(16), STR_14(4), STR_13(4), 
  3964 ;;		 -> STR_5(2), STR_4(13), STR_3(16), STR_2(16), 
  3965 ;;		 -> STR_1(16), 
  3966 ;; Auto vars:     Size  Location     Type
  3967 ;;		None
  3968 ;; Return value:  Size  Location     Type
  3969 ;;                  1    wreg      void 
  3970 ;; Registers used:
  3971 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3972 ;; Tracked objects:
  3973 ;;		On entry : 0/0
  3974 ;;		On exit  : 0/0
  3975 ;;		Unchanged: 0/0
  3976 ;; Data sizes:     COMRAM   BANK0   BANK1
  3977 ;;      Params:         2       0       0
  3978 ;;      Locals:         0       0       0
  3979 ;;      Temps:          4       0       0
  3980 ;;      Totals:         6       0       0
  3981 ;;Total ram usage:        6 bytes
  3982 ;; Hardware stack levels used: 1
  3983 ;; Hardware stack levels required when called: 5
  3984 ;; This function calls:
  3985 ;;		_lcdWrite
  3986 ;;		_lcd_gotoxy
  3987 ;; This function is called by:
  3988 ;;		_main
  3989 ;; This function uses a non-reentrant model
  3990 ;;
  3991                           
  3992                           	psect	text3
  3993  00139C                     __ptext3:
  3994                           	callstack 0
  3995  00139C                     _lcdPrint:
  3996                           	callstack 25
  3997                           
  3998                           ;hd44780.c: 97: while(*t != '\0'){
  3999                           
  4000                           ;incstack = 0
  4001  00139C  D046               	goto	l3079
  4002  00139E                     l3059:
  4003                           
  4004                           ;hd44780.c: 100: lcdWrite(1, COMMAND);
  4005  00139E  D84F               	call	PL80	;call to abstracted procedure
  4006  0013A0  EC4A  F00D         	call	_lcdWrite
  4007                           
  4008                           ;hd44780.c: 101: _delay((unsigned long)((2)*(8000000/4000.0)));
  4009  0013A4  0E06               	movlw	6
  4010  0013A6  6E4E               	movwf	??_lcdPrint^0,c
  4011  0013A8  0E30               	movlw	48
  4012  0013AA                     u3347:
  4013  0013AA  2EE8               	decfsz	wreg,f,c
  4014  0013AC  D7FE               	bra	u3347
  4015  0013AE  2E4E               	decfsz	??_lcdPrint^0,f,c
  4016  0013B0  D7FC               	bra	u3347
  4017  0013B2  D000               	nop2	
  4018                           
  4019                           ;hd44780.c: 102: break;
  4020  0013B4  D038               	goto	l3077
  4021  0013B6                     l3063:
  4022                           
  4023                           ;hd44780.c: 105: lcd_gotoxy(1, 2);
  4024  0013B6  ECF6  F007         	call	PL28	;call to abstracted procedure
  4025  0013BA  EC8C  F00D         	call	_lcd_gotoxy
  4026                           
  4027                           ;hd44780.c: 106: break;
  4028  0013BE  D033               	goto	l3077
  4029  0013C0                     l3065:
  4030                           
  4031                           ;hd44780.c: 109: lcdWrite(0x10, COMMAND);
  4032  0013C0  0E00               	movlw	0
  4033  0013C2  6E47               	movwf	lcdWrite@type^0,c
  4034  0013C4  0E10               	movlw	16
  4035  0013C6  EC4A  F00D         	call	_lcdWrite
  4036                           
  4037                           ;hd44780.c: 110: break;
  4038  0013CA  D02D               	goto	l3077
  4039  0013CC                     l3067:
  4040                           
  4041                           ;hd44780.c: 113: if (*t < 0xC0) {
  4042  0013CC  C04C  FFF6         	movff	lcdPrint@t,tblptrl
  4043  0013D0  C04D  FFF7         	movff	lcdPrint@t+1,tblptrh
  4044  0013D4                     	if	0	;tblptru may be non-zero
  4045  0013D4                     	endif
  4046  0013D4                     	if	0	;tblptru may be non-zero
  4047  0013D4                     	endif
  4048  0013D4  0EC0               	movlw	192
  4049  0013D6  0008               	tblrd		*
  4050  0013D8  60F5               	cpfslt	tablat,c
  4051  0013DA  D006               	goto	l3071
  4052                           
  4053                           ;hd44780.c: 114: lcdWrite(*t, DATA);
  4054  0013DC  0E01               	movlw	1
  4055  0013DE  6E47               	movwf	lcdWrite@type^0,c
  4056  0013E0  D827               	call	PL20	;call to abstracted procedure
  4057  0013E2  EC4A  F00D         	call	_lcdWrite
  4058                           
  4059                           ;hd44780.c: 115: } else {
  4060  0013E6  D01F               	goto	l3077
  4061  0013E8                     l3071:
  4062                           
  4063                           ;hd44780.c: 116: lcdWrite(HD44780_CYR[(unsigned char) (*t) - 0xC0], DATA);
  4064  0013E8  0E01               	movlw	1
  4065  0013EA  6E47               	movwf	lcdWrite@type^0,c
  4066  0013EC  0E40               	movlw	64
  4067  0013EE  6E4E               	movwf	??_lcdPrint^0,c
  4068  0013F0  684F               	setf	(??_lcdPrint+1)^0,c
  4069  0013F2  D81E               	call	PL20	;call to abstracted procedure
  4070  0013F4  6E50               	movwf	(??_lcdPrint+2)^0,c
  4071  0013F6  6A51               	clrf	(??_lcdPrint+3)^0,c
  4072  0013F8  504E               	movf	??_lcdPrint^0,w,c
  4073  0013FA  2650               	addwf	(??_lcdPrint+2)^0,f,c
  4074  0013FC  504F               	movf	(??_lcdPrint+1)^0,w,c
  4075  0013FE  2251               	addwfc	(??_lcdPrint+3)^0,f,c
  4076  001400  0E6D               	movlw	low _HD44780_CYR
  4077  001402  2450               	addwf	(??_lcdPrint+2)^0,w,c
  4078  001404  6EF6               	movwf	tblptrl,c
  4079  001406  0E1E               	movlw	high _HD44780_CYR
  4080  001408  2051               	addwfc	(??_lcdPrint+3)^0,w,c
  4081  00140A  6EF7               	movwf	tblptrh,c
  4082  00140C                     	if	0	;There are less than 3 active tblptr bytes
  4083  00140C                     	endif
  4084  00140C  0008               	tblrd		*
  4085  00140E  50F5               	movf	tablat,w,c
  4086  001410  EC4A  F00D         	call	_lcdWrite
  4087  001414  D008               	goto	l3077
  4088  001416                     l3075:
  4089  001416  D80C               	call	PL20	;call to abstracted procedure
  4090                           
  4091                           ; Switch size 1, requested type "space"
  4092                           ; Number of cases is 3, Range of values is 8 to 12
  4093                           ; switch strategies available:
  4094                           ; Name         Instructions Cycles
  4095                           ; simple_byte           10     6 (average)
  4096                           ;	Chosen strategy is simple_byte
  4097  001418  0A08               	xorlw	8	; case 8
  4098  00141A  E0D2               	bz	l3065
  4099  00141C  0A02               	xorlw	2	; case 10
  4100  00141E  E0CB               	bz	l3063
  4101  001420  0A06               	xorlw	6	; case 12
  4102  001422  E0BD               	bz	l3059
  4103  001424  D7D3               	goto	l3067
  4104  001426                     l3077:
  4105                           
  4106                           ;hd44780.c: 121: *t++;
  4107  001426  4A4C               	infsnz	lcdPrint@t^0,f,c
  4108  001428  2A4D               	incf	(lcdPrint@t+1)^0,f,c
  4109  00142A                     l3079:
  4110  00142A  D802               	call	PL20	;call to abstracted procedure
  4111  00142C  E1F4               	bnz	l3075
  4112  00142E  0012               	return		;funcret
  4113  001430                     __end_of_lcdPrint:
  4114                           	callstack 0
  4115  001430                     PL20:
  4116                           	callstack 25
  4117  001430  C04C  FFF6         	movff	lcdPrint@t,tblptrl
  4118  001434  C04D  FFF7         	movff	lcdPrint@t+1,tblptrh
  4119  001438                     	if	0	;tblptru may be non-zero
  4120  001438                     	endif
  4121  001438                     	if	0	;tblptru may be non-zero
  4122  001438                     	endif
  4123  001438  0008               	tblrd		*
  4124  00143A  50F5               	movf	tablat,w,c
  4125  00143C  0012               	return	
  4126  00143E                     __end_ofPL20:
  4127                           	callstack 0
  4128  00143E                     PL80:
  4129                           	callstack 26
  4130  00143E  0E00               	movlw	0
  4131  001440  6E47               	movwf	lcdWrite@type^0,c
  4132  001442  0C01               	retlw	1
  4133  001444                     __end_ofPL80:
  4134                           	callstack 0
  4135                           
  4136 ;; *************** function _lcd_gotoxy *****************
  4137 ;; Defined at:
  4138 ;;		line 76 in file "hd44780.c"
  4139 ;; Parameters:    Size  Location     Type
  4140 ;;  x               1    wreg     unsigned char 
  4141 ;;  y               1    7[COMRAM] unsigned char 
  4142 ;; Auto vars:     Size  Location     Type
  4143 ;;  x               1    8[COMRAM] unsigned char 
  4144 ;;  address         1    9[COMRAM] unsigned char 
  4145 ;; Return value:  Size  Location     Type
  4146 ;;                  1    wreg      void 
  4147 ;; Registers used:
  4148 ;;		wreg, status,2, status,0, cstack
  4149 ;; Tracked objects:
  4150 ;;		On entry : 0/0
  4151 ;;		On exit  : 0/0
  4152 ;;		Unchanged: 0/0
  4153 ;; Data sizes:     COMRAM   BANK0   BANK1
  4154 ;;      Params:         1       0       0
  4155 ;;      Locals:         2       0       0
  4156 ;;      Temps:          0       0       0
  4157 ;;      Totals:         3       0       0
  4158 ;;Total ram usage:        3 bytes
  4159 ;; Hardware stack levels used: 1
  4160 ;; Hardware stack levels required when called: 4
  4161 ;; This function calls:
  4162 ;;		_lcdWrite
  4163 ;; This function is called by:
  4164 ;;		_main
  4165 ;;		_outValPreset
  4166 ;;		_lcdPrint
  4167 ;; This function uses a non-reentrant model
  4168 ;;
  4169                           
  4170                           	psect	text4
  4171  001B18                     __ptext4:
  4172                           	callstack 0
  4173  001B18                     _lcd_gotoxy:
  4174                           	callstack 25
  4175                           
  4176                           ;incstack = 0
  4177                           ;lcd_gotoxy@x stored from wreg
  4178  001B18  6E4A               	movwf	lcd_gotoxy@x^0,c
  4179                           
  4180                           ;hd44780.c: 77: uint8_t address;;hd44780.c: 79: if (y != 1)
  4181  001B1A  0449               	decf	lcd_gotoxy@y^0,w,c
  4182  001B1C  E003               	bz	l487
  4183                           
  4184                           ;hd44780.c: 80: address = 0x40;
  4185  001B1E  0E40               	movlw	64
  4186  001B20  6E4B               	movwf	lcd_gotoxy@address^0,c
  4187  001B22  D001               	goto	l2813
  4188  001B24                     l487:
  4189                           
  4190                           ;hd44780.c: 81: else;hd44780.c: 82: address = 0;
  4191  001B24  6A4B               	clrf	lcd_gotoxy@address^0,c
  4192  001B26                     l2813:
  4193                           
  4194                           ;hd44780.c: 84: address += x - 1;
  4195  001B26  044A               	decf	lcd_gotoxy@x^0,w,c
  4196  001B28  264B               	addwf	lcd_gotoxy@address^0,f,c
  4197                           
  4198                           ;hd44780.c: 85: lcdWrite(0x80 | address, COMMAND);
  4199  001B2A  6A47               	clrf	lcdWrite@type^0,c
  4200  001B2C  504B               	movf	lcd_gotoxy@address^0,w,c
  4201  001B2E  0980               	iorlw	128
  4202  001B30  EF4A  F00D         	goto	_lcdWrite
  4203  001B34                     __end_of_lcd_gotoxy:
  4204                           	callstack 0
  4205                           
  4206 ;; *************** function _key_press *****************
  4207 ;; Defined at:
  4208 ;;		line 7 in file "key.c"
  4209 ;; Parameters:    Size  Location     Type
  4210 ;;		None
  4211 ;; Auto vars:     Size  Location     Type
  4212 ;;  key             1    3[COMRAM] unsigned char 
  4213 ;; Return value:  Size  Location     Type
  4214 ;;                  1    wreg      void 
  4215 ;; Registers used:
  4216 ;;		wreg, status,2, status,0
  4217 ;; Tracked objects:
  4218 ;;		On entry : 0/0
  4219 ;;		On exit  : 0/0
  4220 ;;		Unchanged: 0/0
  4221 ;; Data sizes:     COMRAM   BANK0   BANK1
  4222 ;;      Params:         0       0       0
  4223 ;;      Locals:         1       0       0
  4224 ;;      Temps:          0       0       0
  4225 ;;      Totals:         1       0       0
  4226 ;;Total ram usage:        1 bytes
  4227 ;; Hardware stack levels used: 1
  4228 ;; Hardware stack levels required when called: 2
  4229 ;; This function calls:
  4230 ;;		Nothing
  4231 ;; This function is called by:
  4232 ;;		_main
  4233 ;; This function uses a non-reentrant model
  4234 ;;
  4235                           
  4236                           	psect	text5
  4237  00178A                     __ptext5:
  4238                           	callstack 0
  4239  00178A                     _key_press:
  4240                           	callstack 28
  4241                           
  4242                           ;key.c: 9: static uint16_t count = 0;;key.c: 10: uint8_t key;;key.c: 11: if (((PORTB & (
      +                          1 << 1)) == 0) && ((PORTB & (1 << 2)) == 0))
  4243                           
  4244                           ;incstack = 0
  4245  00178A  A281               	btfss	129,1,c	;volatile
  4246  00178C  B481               	btfsc	129,2,c	;volatile
  4247  00178E  D002               	goto	l582
  4248                           
  4249                           ;key.c: 12: key = 3;
  4250  001790  0E03               	movlw	3
  4251  001792  D007               	goto	L10
  4252  001794                     l582:
  4253                           
  4254                           ;key.c: 13: else if ((PORTB & (1 << 1)) == 0)
  4255  001794  B281               	btfsc	129,1,c	;volatile
  4256  001796  D002               	goto	l584
  4257                           
  4258                           ;key.c: 14: key = 1;
  4259  001798  0E01               	movlw	1
  4260  00179A  D003               	goto	L10
  4261  00179C                     l584:
  4262                           
  4263                           ;key.c: 15: else if ((PORTB & (1 << 2)) == 0)
  4264  00179C  B481               	btfsc	129,2,c	;volatile
  4265  00179E  D003               	goto	l586
  4266                           
  4267                           ;key.c: 16: key = 2;
  4268  0017A0  0E02               	movlw	2
  4269  0017A2                     L10:
  4270  0017A2  6E45               	movwf	key_press@key^0,c
  4271  0017A4  D001               	goto	l3091
  4272  0017A6                     l586:
  4273                           
  4274                           ;key.c: 17: else;key.c: 18: key = 0;
  4275  0017A6  6A45               	clrf	key_press@key^0,c
  4276  0017A8                     l3091:
  4277                           
  4278                           ;key.c: 21: if (key) {
  4279  0017A8  5045               	movf	key_press@key^0,w,c
  4280  0017AA  E019               	bz	l588
  4281                           
  4282                           ;key.c: 22: if (count > 300) {
  4283  0017AC  0E2D               	movlw	45
  4284  0017AE  5C25               	subwf	key_press@count^0,w,c
  4285  0017B0  0E01               	movlw	1
  4286  0017B2  5826               	subwfb	(key_press@count+1)^0,w,c
  4287  0017B4  E309               	bnc	l3103
  4288                           
  4289                           ;key.c: 23: count = 300 - 10;
  4290  0017B6  0E01               	movlw	1
  4291  0017B8  6E26               	movwf	(key_press@count+1)^0,c
  4292  0017BA  0E22               	movlw	34
  4293  0017BC  6E25               	movwf	key_press@count^0,c
  4294                           
  4295                           ;key.c: 24: key_pressed = key;
  4296  0017BE  C045  F02E         	movff	key_press@key,_key_pressed	;volatile
  4297                           
  4298                           ;key.c: 25: keyLong = 1;
  4299  0017C2  0E01               	movlw	1
  4300  0017C4  6E36               	movwf	_keyLong^0,c
  4301  0017C6  0C01               	retlw	1
  4302  0017C8                     l3103:
  4303  0017C8  4A25               	infsnz	key_press@count^0,f,c
  4304  0017CA  2A26               	incf	(key_press@count+1)^0,f,c
  4305                           
  4306                           ;key.c: 29: if (count == 15) {
  4307  0017CC  0E0F               	movlw	15
  4308  0017CE  1825               	xorwf	key_press@count^0,w,c
  4309  0017D0  1026               	iorwf	(key_press@count+1)^0,w,c
  4310  0017D2  A4D8               	btfss	status,2,c
  4311  0017D4  0012               	return	
  4312                           
  4313                           ;key.c: 30: key_pressed = key;
  4314  0017D6  C045  F02E         	movff	key_press@key,_key_pressed	;volatile
  4315                           
  4316                           ;key.c: 31: keyLong = 0;
  4317  0017DA  6A36               	clrf	_keyLong^0,c
  4318                           
  4319                           ;key.c: 32: return;
  4320  0017DC  0012               	return	
  4321  0017DE                     l588:
  4322  0017DE  6A25               	clrf	key_press@count^0,c
  4323  0017E0  6A26               	clrf	(key_press@count+1)^0,c
  4324  0017E2  0012               	return		;funcret
  4325  0017E4                     __end_of_key_press:
  4326                           	callstack 0
  4327                           
  4328 ;; *************** function _key_GetKey *****************
  4329 ;; Defined at:
  4330 ;;		line 52 in file "key.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;		None
  4333 ;; Auto vars:     Size  Location     Type
  4334 ;;  key             1    3[COMRAM] unsigned char 
  4335 ;; Return value:  Size  Location     Type
  4336 ;;                  1    wreg      unsigned char 
  4337 ;; Registers used:
  4338 ;;		wreg, status,2
  4339 ;; Tracked objects:
  4340 ;;		On entry : 0/0
  4341 ;;		On exit  : 0/0
  4342 ;;		Unchanged: 0/0
  4343 ;; Data sizes:     COMRAM   BANK0   BANK1
  4344 ;;      Params:         0       0       0
  4345 ;;      Locals:         1       0       0
  4346 ;;      Temps:          0       0       0
  4347 ;;      Totals:         1       0       0
  4348 ;;Total ram usage:        1 bytes
  4349 ;; Hardware stack levels used: 1
  4350 ;; Hardware stack levels required when called: 2
  4351 ;; This function calls:
  4352 ;;		Nothing
  4353 ;; This function is called by:
  4354 ;;		_main
  4355 ;; This function uses a non-reentrant model
  4356 ;;
  4357                           
  4358                           	psect	text6
  4359  001BAA                     __ptext6:
  4360                           	callstack 0
  4361  001BAA                     _key_GetKey:
  4362                           	callstack 28
  4363                           
  4364                           ;key.c: 54: uint8_t key = key_pressed;
  4365                           
  4366                           ;incstack = 0
  4367  001BAA  C02E  F045         	movff	_key_pressed,key_GetKey@key	;volatile
  4368                           
  4369                           ;key.c: 56: key_pressed = 0;
  4370  001BAE  6A2E               	clrf	_key_pressed^0,c	;volatile
  4371                           
  4372                           ;key.c: 57: return key;
  4373  001BB0  5045               	movf	key_GetKey@key^0,w,c
  4374  001BB2  0012               	return		;funcret
  4375  001BB4                     __end_of_key_GetKey:
  4376                           	callstack 0
  4377                           
  4378 ;; *************** function _ds18b20_readrom *****************
  4379 ;; Defined at:
  4380 ;;		line 172 in file "ds18b20.c"
  4381 ;; Parameters:    Size  Location     Type
  4382 ;;  num_dq          1    wreg     unsigned char 
  4383 ;; Auto vars:     Size  Location     Type
  4384 ;;  num_dq          1   18[COMRAM] unsigned char 
  4385 ;;  temp_rom        8   10[COMRAM] unsigned char [8]
  4386 ;;  i               1   19[COMRAM] unsigned char 
  4387 ;; Return value:  Size  Location     Type
  4388 ;;                  1    wreg      unsigned char 
  4389 ;; Registers used:
  4390 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4391 ;; Tracked objects:
  4392 ;;		On entry : 0/0
  4393 ;;		On exit  : 0/0
  4394 ;;		Unchanged: 0/0
  4395 ;; Data sizes:     COMRAM   BANK0   BANK1
  4396 ;;      Params:         0       0       0
  4397 ;;      Locals:        10       0       0
  4398 ;;      Temps:          0       0       0
  4399 ;;      Totals:        10       0       0
  4400 ;;Total ram usage:       10 bytes
  4401 ;; Hardware stack levels used: 1
  4402 ;; Hardware stack levels required when called: 4
  4403 ;; This function calls:
  4404 ;;		_Delay_ms
  4405 ;;		_ds18b20_crc8
  4406 ;;		_ow_reset
  4407 ;;		_read_byte
  4408 ;;		_write_byte
  4409 ;;		_write_eep
  4410 ;; This function is called by:
  4411 ;;		_main
  4412 ;; This function uses a non-reentrant model
  4413 ;;
  4414                           
  4415                           	psect	text7
  4416  001724                     __ptext7:
  4417                           	callstack 0
  4418  001724                     _ds18b20_readrom:
  4419                           	callstack 26
  4420                           
  4421                           ;incstack = 0
  4422                           ;ds18b20_readrom@num_dq stored from wreg
  4423  001724  6E54               	movwf	ds18b20_readrom@num_dq^0,c
  4424                           
  4425                           ;ds18b20.c: 173: uint8_t i;;ds18b20.c: 174: uint8_t temp_rom[8];;ds18b20.c: 176: if (!ow
      +                          _reset())
  4426  001726  ECE3  F00C         	call	_ow_reset	;wreg free
  4427  00172A  0900               	iorlw	0
  4428  00172C  E10C               	bnz	u2240
  4429                           
  4430                           ;ds18b20.c: 177: {;ds18b20.c: 178: write_byte(0x33);
  4431  00172E  0E33               	movlw	51
  4432  001730  EC95  F00C         	call	_write_byte
  4433                           
  4434                           ;ds18b20.c: 179: for (i = 0; i < 8; i++) {
  4435  001734  6A55               	clrf	ds18b20_readrom@i^0,c
  4436  001736                     l3269:
  4437                           
  4438                           ;ds18b20.c: 180: temp_rom[i] = read_byte();
  4439  001736  D824               	call	PL44	;call to abstracted procedure
  4440  001738  EC7A  F00C         	call	_read_byte	;wreg free
  4441  00173C  6EDF               	movwf	indf2,c
  4442  00173E  2A55               	incf	ds18b20_readrom@i^0,f,c
  4443  001740  0E07               	movlw	7
  4444  001742  6455               	cpfsgt	ds18b20_readrom@i^0,c
  4445  001744  D7F8               	goto	l3269
  4446  001746                     u2240:
  4447                           
  4448                           ;ds18b20.c: 181: };ds18b20.c: 182: };ds18b20.c: 183: if (!(ds18b20_crc8(temp_rom, 8))) {
  4449  001746  0E4C               	movlw	low ds18b20_readrom@temp_rom
  4450  001748  6E45               	movwf	ds18b20_crc8@data_in^0,c
  4451  00174A  0E08               	movlw	8
  4452  00174C  6E46               	movwf	ds18b20_crc8@num_bytes^0,c
  4453  00174E  ECF2  F00B         	call	_ds18b20_crc8	;wreg free
  4454  001752  0900               	iorlw	0
  4455  001754  E114               	bnz	l3295
  4456                           
  4457                           ;ds18b20.c: 184: for (i = 0; i < 8; i++) {
  4458  001756  6A55               	clrf	ds18b20_readrom@i^0,c
  4459  001758                     l3283:
  4460                           
  4461                           ;ds18b20.c: 185: write_eep(((num_dq - 1)*8) + i, temp_rom[i]);
  4462  001758  D813               	call	PL44	;call to abstracted procedure
  4463  00175A  50DF               	movf	indf2,w,c
  4464  00175C  6E45               	movwf	write_eep@data^0,c
  4465  00175E  5054               	movf	ds18b20_readrom@num_dq^0,w,c
  4466  001760  0D08               	mullw	8
  4467  001762  50F3               	movf	243,w,c
  4468  001764  2455               	addwf	ds18b20_readrom@i^0,w,c
  4469  001766  0FF8               	addlw	248
  4470  001768  EC26  F00D         	call	_write_eep
  4471  00176C  2A55               	incf	ds18b20_readrom@i^0,f,c
  4472  00176E  0E07               	movlw	7
  4473  001770  6455               	cpfsgt	ds18b20_readrom@i^0,c
  4474  001772  D7F2               	goto	l3283
  4475                           
  4476                           ;ds18b20.c: 186: };ds18b20.c: 187: Delay_ms(10);
  4477  001774  EC1C  F008         	call	PL76	;call to abstracted procedure
  4478  001778  EC38  F00D         	call	_Delay_ms	;wreg free
  4479                           
  4480                           ;ds18b20.c: 188: return 1;
  4481  00177C  0C01               	retlw	1
  4482  00177E                     l3295:
  4483                           
  4484                           ;ds18b20.c: 189: };ds18b20.c: 190: return 0;
  4485  00177E  0C00               	retlw	0	;funcret
  4486  001780                     __end_of_ds18b20_readrom:
  4487                           	callstack 0
  4488  001780                     PL44:
  4489                           	callstack 26
  4490  001780  5055               	movf	ds18b20_readrom@i^0,w,c
  4491  001782  0F4C               	addlw	low ds18b20_readrom@temp_rom
  4492  001784  6ED9               	movwf	fsr2l,c
  4493  001786  6ADA               	clrf	fsr2h,c
  4494  001788  0012               	return	
  4495  00178A                     __end_ofPL44:
  4496                           	callstack 0
  4497                           
  4498 ;; *************** function _write_eep *****************
  4499 ;; Defined at:
  4500 ;;		line 5 in file "eeprom.c"
  4501 ;; Parameters:    Size  Location     Type
  4502 ;;  address         1    wreg     unsigned char 
  4503 ;;  data            1    3[COMRAM] unsigned char 
  4504 ;; Auto vars:     Size  Location     Type
  4505 ;;  address         1    4[COMRAM] unsigned char 
  4506 ;; Return value:  Size  Location     Type
  4507 ;;                  1    wreg      void 
  4508 ;; Registers used:
  4509 ;;		wreg, status,2
  4510 ;; Tracked objects:
  4511 ;;		On entry : 0/0
  4512 ;;		On exit  : 0/0
  4513 ;;		Unchanged: 0/0
  4514 ;; Data sizes:     COMRAM   BANK0   BANK1
  4515 ;;      Params:         1       0       0
  4516 ;;      Locals:         1       0       0
  4517 ;;      Temps:          0       0       0
  4518 ;;      Totals:         2       0       0
  4519 ;;Total ram usage:        2 bytes
  4520 ;; Hardware stack levels used: 1
  4521 ;; Hardware stack levels required when called: 2
  4522 ;; This function calls:
  4523 ;;		Nothing
  4524 ;; This function is called by:
  4525 ;;		_main
  4526 ;;		_ds18b20_readrom
  4527 ;; This function uses a non-reentrant model
  4528 ;;
  4529                           
  4530                           	psect	text8
  4531  001A4C                     __ptext8:
  4532                           	callstack 0
  4533  001A4C                     _write_eep:
  4534                           	callstack 28
  4535                           
  4536                           ;incstack = 0
  4537                           ;write_eep@address stored from wreg
  4538  001A4C  6E46               	movwf	write_eep@address^0,c
  4539  001A4E                     
  4540                           ;eeprom.c: 8: {}
  4541  001A4E  B2A6               	btfsc	166,1,c	;volsfr
  4542  001A50  D7FE               	goto	l2841
  4543                           
  4544                           ;eeprom.c: 11: EEADR = address;
  4545  001A52  C046  FFA9         	movff	write_eep@address,4009	;volatile
  4546                           
  4547                           ;eeprom.c: 12: EEDATA = data;
  4548  001A56  C045  FFA8         	movff	write_eep@data,4008	;volatile
  4549                           
  4550                           ;eeprom.c: 13: EECON1bits.EEPGD = 0;
  4551  001A5A  9EA6               	bcf	166,7,c	;volsfr
  4552                           
  4553                           ;eeprom.c: 14: EECON1bits.CFGS = 0;
  4554  001A5C  9CA6               	bcf	166,6,c	;volsfr
  4555                           
  4556                           ;eeprom.c: 15: EECON1bits.WREN = 1;
  4557  001A5E  84A6               	bsf	166,2,c	;volsfr
  4558                           
  4559                           ;eeprom.c: 16: INTCONbits.GIE = 0;
  4560  001A60  9EF2               	bcf	242,7,c	;volatile
  4561                           
  4562                           ;eeprom.c: 18: EECON2 = 0x55;
  4563  001A62  0E55               	movlw	85
  4564  001A64  6EA7               	movwf	167,c	;volsfr
  4565                           
  4566                           ;eeprom.c: 19: EECON2 = 0xAA;
  4567  001A66  0EAA               	movlw	170
  4568  001A68  6EA7               	movwf	167,c	;volsfr
  4569                           
  4570                           ;eeprom.c: 20: EECON1bits.WR = 1;
  4571  001A6A  82A6               	bsf	166,1,c	;volsfr
  4572                           
  4573                           ;eeprom.c: 22: INTCONbits.GIE = 1;
  4574  001A6C  8EF2               	bsf	242,7,c	;volatile
  4575  001A6E  0CAA               	retlw	170	;funcret
  4576  001A70                     __end_of_write_eep:
  4577                           	callstack 0
  4578                           
  4579 ;; *************** function _Delay_ms *****************
  4580 ;; Defined at:
  4581 ;;		line 719 in file "main.c"
  4582 ;; Parameters:    Size  Location     Type
  4583 ;;  delay           2    3[COMRAM] unsigned int 
  4584 ;; Auto vars:     Size  Location     Type
  4585 ;;  i               2    6[COMRAM] unsigned int 
  4586 ;; Return value:  Size  Location     Type
  4587 ;;                  1    wreg      void 
  4588 ;; Registers used:
  4589 ;;		wreg, status,2, status,0
  4590 ;; Tracked objects:
  4591 ;;		On entry : 0/0
  4592 ;;		On exit  : 0/0
  4593 ;;		Unchanged: 0/0
  4594 ;; Data sizes:     COMRAM   BANK0   BANK1
  4595 ;;      Params:         2       0       0
  4596 ;;      Locals:         2       0       0
  4597 ;;      Temps:          1       0       0
  4598 ;;      Totals:         5       0       0
  4599 ;;Total ram usage:        5 bytes
  4600 ;; Hardware stack levels used: 1
  4601 ;; Hardware stack levels required when called: 2
  4602 ;; This function calls:
  4603 ;;		Nothing
  4604 ;; This function is called by:
  4605 ;;		_main
  4606 ;;		_ds18b20_readrom
  4607 ;; This function uses a non-reentrant model
  4608 ;;
  4609                           
  4610                           	psect	text9
  4611  001A70                     __ptext9:
  4612                           	callstack 0
  4613  001A70                     _Delay_ms:
  4614                           	callstack 27
  4615                           
  4616                           ;main.c: 720: for (uint16_t i = 0; i <= delay; i++)
  4617                           
  4618                           ;incstack = 0
  4619  001A70  6A48               	clrf	Delay_ms@i^0,c
  4620  001A72  6A49               	clrf	(Delay_ms@i+1)^0,c
  4621  001A74  D009               	goto	l331
  4622  001A76                     l2819:
  4623                           
  4624                           ;main.c: 721: _delay((unsigned long)((1)*(8000000/4000.0)));
  4625  001A76  0E03               	movlw	3
  4626  001A78  6E47               	movwf	??_Delay_ms^0,c
  4627  001A7A  0E98               	movlw	152
  4628  001A7C                     u3357:
  4629  001A7C  2EE8               	decfsz	wreg,f,c
  4630  001A7E  D7FE               	bra	u3357
  4631  001A80  2E47               	decfsz	??_Delay_ms^0,f,c
  4632  001A82  D7FC               	bra	u3357
  4633  001A84  4A48               	infsnz	Delay_ms@i^0,f,c
  4634  001A86  2A49               	incf	(Delay_ms@i+1)^0,f,c
  4635  001A88                     l331:
  4636  001A88  5048               	movf	Delay_ms@i^0,w,c
  4637  001A8A  5C45               	subwf	Delay_ms@delay^0,w,c
  4638  001A8C  5049               	movf	(Delay_ms@i+1)^0,w,c
  4639  001A8E  5846               	subwfb	(Delay_ms@delay+1)^0,w,c
  4640  001A90  E2F2               	bc	l2819
  4641  001A92  0012               	return		;funcret
  4642  001A94                     __end_of_Delay_ms:
  4643                           	callstack 0
  4644                           
  4645 ;; *************** function _ds18b20_readTemp *****************
  4646 ;; Defined at:
  4647 ;;		line 117 in file "ds18b20.c"
  4648 ;; Parameters:    Size  Location     Type
  4649 ;;  time_flag       1   10[COMRAM] PTR unsigned char 
  4650 ;;		 -> time_flag(1), 
  4651 ;;  timer_val       1   11[COMRAM] PTR unsigned char 
  4652 ;;		 -> timer_val(1), 
  4653 ;; Auto vars:     Size  Location     Type
  4654 ;;  j               1   16[COMRAM] unsigned char 
  4655 ;;  temp            2   14[COMRAM] unsigned int 
  4656 ;;  i               1   17[COMRAM] unsigned char 
  4657 ;; Return value:  Size  Location     Type
  4658 ;;                  1    wreg      unsigned char 
  4659 ;; Registers used:
  4660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4661 ;; Tracked objects:
  4662 ;;		On entry : 0/0
  4663 ;;		On exit  : 0/0
  4664 ;;		Unchanged: 0/0
  4665 ;; Data sizes:     COMRAM   BANK0   BANK1
  4666 ;;      Params:         2       0       0
  4667 ;;      Locals:         4       0       0
  4668 ;;      Temps:          2       0       0
  4669 ;;      Totals:         8       0       0
  4670 ;;Total ram usage:        8 bytes
  4671 ;; Hardware stack levels used: 1
  4672 ;; Hardware stack levels required when called: 4
  4673 ;; This function calls:
  4674 ;;		_ds18b20_crc8
  4675 ;;		_ow_reset
  4676 ;;		_read_byte
  4677 ;;		_write_byte
  4678 ;; This function is called by:
  4679 ;;		_main
  4680 ;; This function uses a non-reentrant model
  4681 ;;
  4682                           
  4683                           	psect	text10
  4684  0012C0                     __ptext10:
  4685                           	callstack 0
  4686  0012C0                     _ds18b20_readTemp:
  4687                           	callstack 26
  4688                           
  4689                           ;ds18b20.c: 120: uint8_t i;;ds18b20.c: 122: switch (*time_flag) {
  4690                           
  4691                           ;incstack = 0
  4692  0012C0  D05D               	goto	l3195
  4693  0012C2                     l3117:
  4694                           
  4695                           ;ds18b20.c: 124: if (!ow_reset())
  4696  0012C2  ECE3  F00C         	call	_ow_reset	;wreg free
  4697  0012C6  0900               	iorlw	0
  4698  0012C8  A4D8               	btfss	status,2,c
  4699  0012CA  0C00               	retlw	0
  4700                           
  4701                           ;ds18b20.c: 125: {;ds18b20.c: 126: write_byte(0xCC);
  4702  0012CC  0ECC               	movlw	204
  4703  0012CE  EC95  F00C         	call	_write_byte
  4704                           
  4705                           ;ds18b20.c: 127: write_byte(0x44);
  4706  0012D2  0E44               	movlw	68
  4707  0012D4  EC95  F00C         	call	_write_byte
  4708                           
  4709                           ;ds18b20.c: 128: *timer_val = 0;
  4710  0012D8  504D               	movf	ds18b20_readTemp@timer_val^0,w,c
  4711  0012DA  6ED9               	movwf	fsr2l,c
  4712  0012DC  6ADA               	clrf	fsr2h,c
  4713  0012DE  6ADF               	clrf	indf2,c
  4714                           
  4715                           ;ds18b20.c: 129: *time_flag = 2;
  4716  0012E0  504C               	movf	ds18b20_readTemp@time_flag^0,w,c
  4717  0012E2  6ED9               	movwf	fsr2l,c
  4718  0012E4  6ADA               	clrf	fsr2h,c
  4719  0012E6  0E02               	movlw	2
  4720  0012E8  6EDF               	movwf	indf2,c
  4721                           
  4722                           ;ds18b20.c: 130: T1CONbits.TMR1ON = 1;
  4723  0012EA  80CD               	bsf	205,0,c	;volatile
  4724                           
  4725                           ;ds18b20.c: 132: return 0;
  4726  0012EC  0C00               	retlw	0
  4727  0012EE                     l421:
  4728                           
  4729                           ;ds18b20.c: 136: for (uint8_t j = 0; j < 2; j++) {
  4730  0012EE  6A52               	clrf	ds18b20_readTemp@j^0,c
  4731  0012F0                     l422:
  4732                           
  4733                           ;ds18b20.c: 137: (INTCONbits.GIE = 0);
  4734  0012F0  9EF2               	bcf	242,7,c	;volatile
  4735                           
  4736                           ;ds18b20.c: 138: ow_reset();
  4737  0012F2  ECE3  F00C         	call	_ow_reset	;wreg free
  4738                           
  4739                           ;ds18b20.c: 139: write_byte(0x55);
  4740  0012F6  0E55               	movlw	85
  4741  0012F8  EC95  F00C         	call	_write_byte
  4742                           
  4743                           ;ds18b20.c: 140: for (i = 0; i < 8; i++) {
  4744  0012FC  6A53               	clrf	ds18b20_readTemp@i^0,c
  4745  0012FE                     l3145:
  4746                           
  4747                           ;ds18b20.c: 141: write_byte(rom_dq[j][i]);
  4748  0012FE  5052               	movf	ds18b20_readTemp@j^0,w,c
  4749  001300  0D08               	mullw	8
  4750  001302  50F3               	movf	243,w,c
  4751  001304  0F11               	addlw	low _rom_dq
  4752  001306  2453               	addwf	ds18b20_readTemp@i^0,w,c
  4753  001308  6ED9               	movwf	fsr2l,c
  4754  00130A  6ADA               	clrf	fsr2h,c
  4755  00130C  50DF               	movf	indf2,w,c
  4756  00130E  EC95  F00C         	call	_write_byte
  4757  001312  2A53               	incf	ds18b20_readTemp@i^0,f,c
  4758  001314  0E07               	movlw	7
  4759  001316  6453               	cpfsgt	ds18b20_readTemp@i^0,c
  4760  001318  D7F2               	goto	l3145
  4761                           
  4762                           ;ds18b20.c: 142: };ds18b20.c: 143: write_byte(0xBE);
  4763  00131A  0EBE               	movlw	190
  4764  00131C  EC95  F00C         	call	_write_byte
  4765                           
  4766                           ;ds18b20.c: 145: for (i = 0; i < 9; i++)
  4767  001320  6A53               	clrf	ds18b20_readTemp@i^0,c
  4768  001322                     l3159:
  4769                           
  4770                           ;ds18b20.c: 146: {;ds18b20.c: 147: scratch[i] = read_byte();
  4771  001322  5053               	movf	ds18b20_readTemp@i^0,w,c
  4772  001324  0F37               	addlw	low _scratch
  4773  001326  6ED9               	movwf	fsr2l,c
  4774  001328  6ADA               	clrf	fsr2h,c
  4775  00132A  EC7A  F00C         	call	_read_byte	;wreg free
  4776  00132E  6EDF               	movwf	indf2,c
  4777  001330  2A53               	incf	ds18b20_readTemp@i^0,f,c
  4778  001332  0E08               	movlw	8
  4779  001334  6453               	cpfsgt	ds18b20_readTemp@i^0,c
  4780  001336  D7F5               	goto	l3159
  4781                           
  4782                           ;ds18b20.c: 148: };ds18b20.c: 150: if (!(ds18b20_crc8(scratch, 9))) {
  4783  001338  0E37               	movlw	low _scratch
  4784  00133A  6E45               	movwf	ds18b20_crc8@data_in^0,c
  4785  00133C  0E09               	movlw	9
  4786  00133E  6E46               	movwf	ds18b20_crc8@num_bytes^0,c
  4787  001340  ECF2  F00B         	call	_ds18b20_crc8	;wreg free
  4788  001344  0900               	iorlw	0
  4789  001346  E10C               	bnz	l3171
  4790                           
  4791                           ;ds18b20.c: 151: temp = (((uint16_t) scratch[1]) << 8) | ((uint16_t) scratch[0]);
  4792  001348  5038               	movf	(_scratch+1)^0,w,c
  4793  00134A  6E4E               	movwf	??_ds18b20_readTemp^0,c
  4794  00134C  5037               	movf	_scratch^0,w,c
  4795  00134E  6E50               	movwf	ds18b20_readTemp@temp^0,c
  4796  001350  C04E  F051         	movff	??_ds18b20_readTemp,ds18b20_readTemp@temp+1
  4797                           
  4798                           ;ds18b20.c: 152: temp_ready[j] = temp;
  4799  001354  D81C               	call	PL32	;call to abstracted procedure
  4800  001356  C050  FFDE         	movff	ds18b20_readTemp@temp,postinc2
  4801  00135A  C051  FFDD         	movff	ds18b20_readTemp@temp+1,postdec2
  4802                           
  4803                           ;ds18b20.c: 153: }else
  4804  00135E  D004               	goto	l3173
  4805  001360                     l3171:
  4806                           
  4807                           ;ds18b20.c: 154: temp_ready[j] = 32767;
  4808  001360  D816               	call	PL32	;call to abstracted procedure
  4809  001362  68DE               	setf	postinc2,c
  4810  001364  0E7F               	movlw	127
  4811  001366  6EDD               	movwf	postdec2,c
  4812  001368                     l3173:
  4813                           
  4814                           ;ds18b20.c: 155: (INTCONbits.GIE = 1);
  4815  001368  8EF2               	bsf	242,7,c	;volatile
  4816  00136A  2A52               	incf	ds18b20_readTemp@j^0,f,c
  4817  00136C  0E01               	movlw	1
  4818  00136E  6452               	cpfsgt	ds18b20_readTemp@j^0,c
  4819  001370  D7BF               	goto	l422
  4820                           
  4821                           ;ds18b20.c: 156: };ds18b20.c: 157: *time_flag = 0;
  4822  001372  504C               	movf	ds18b20_readTemp@time_flag^0,w,c
  4823  001374  6ED9               	movwf	fsr2l,c
  4824  001376  6ADA               	clrf	fsr2h,c
  4825  001378  6ADF               	clrf	indf2,c
  4826                           
  4827                           ;ds18b20.c: 158: return 1;
  4828  00137A  0C01               	retlw	1
  4829  00137C                     l3195:
  4830  00137C  504C               	movf	ds18b20_readTemp@time_flag^0,w,c
  4831  00137E  6ED9               	movwf	fsr2l,c
  4832  001380  6ADA               	clrf	fsr2h,c
  4833  001382  50DF               	movf	indf2,w,c
  4834                           
  4835                           ; Switch size 1, requested type "space"
  4836                           ; Number of cases is 3, Range of values is 0 to 2
  4837                           ; switch strategies available:
  4838                           ; Name         Instructions Cycles
  4839                           ; simple_byte           10     6 (average)
  4840                           ;	Chosen strategy is simple_byte
  4841  001384  E09E               	bz	l3117
  4842  001386  0A01               	xorlw	1	; case 1
  4843  001388  E0B2               	bz	l421
  4844  00138A  0A03               	xorlw	3	; case 2
  4845  00138C  0C00               	retlw	0
  4846  00138E                     __end_of_ds18b20_readTemp:
  4847                           	callstack 0
  4848  00138E                     PL32:
  4849                           	callstack 26
  4850  00138E  5052               	movf	ds18b20_readTemp@j^0,w,c
  4851  001390  0D02               	mullw	2
  4852  001392  50F3               	movf	243,w,c
  4853  001394  0F21               	addlw	low _temp_ready
  4854  001396  6ED9               	movwf	fsr2l,c
  4855  001398  6ADA               	clrf	fsr2h,c
  4856  00139A  0012               	return	
  4857  00139C                     __end_ofPL32:
  4858                           	callstack 0
  4859                           
  4860 ;; *************** function _read_byte *****************
  4861 ;; Defined at:
  4862 ;;		line 50 in file "onewire.c"
  4863 ;; Parameters:    Size  Location     Type
  4864 ;;		None
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;  i               1    6[COMRAM] unsigned char 
  4867 ;;  val             1    5[COMRAM] unsigned char 
  4868 ;; Return value:  Size  Location     Type
  4869 ;;                  1    wreg      unsigned char 
  4870 ;; Registers used:
  4871 ;;		wreg, status,2, status,0, cstack
  4872 ;; Tracked objects:
  4873 ;;		On entry : 0/0
  4874 ;;		On exit  : 0/0
  4875 ;;		Unchanged: 0/0
  4876 ;; Data sizes:     COMRAM   BANK0   BANK1
  4877 ;;      Params:         0       0       0
  4878 ;;      Locals:         2       0       0
  4879 ;;      Temps:          2       0       0
  4880 ;;      Totals:         4       0       0
  4881 ;;Total ram usage:        4 bytes
  4882 ;; Hardware stack levels used: 1
  4883 ;; Hardware stack levels required when called: 3
  4884 ;; This function calls:
  4885 ;;		_read_bit
  4886 ;; This function is called by:
  4887 ;;		_ds18b20_readTemp
  4888 ;;		_ds18b20_readrom
  4889 ;; This function uses a non-reentrant model
  4890 ;;
  4891                           
  4892                           	psect	text11
  4893  0018F4                     __ptext11:
  4894                           	callstack 0
  4895  0018F4                     _read_byte:
  4896                           	callstack 26
  4897                           
  4898                           ;onewire.c: 52: uint8_t i;;onewire.c: 53: uint8_t val = 0;
  4899                           
  4900                           ;incstack = 0
  4901  0018F4  6A47               	clrf	read_byte@val^0,c
  4902                           
  4903                           ;onewire.c: 55: for(i=0;i<8;i++)
  4904  0018F6  6A48               	clrf	read_byte@i^0,c
  4905  0018F8                     l2947:
  4906                           
  4907                           ;onewire.c: 56: {;onewire.c: 57: if(read_bit()) val |= (0x01 << i);
  4908  0018F8  ECB5  F00D         	call	_read_bit	;wreg free
  4909  0018FC  0900               	iorlw	0
  4910  0018FE  E00C               	bz	l2951
  4911  001900  C048  F045         	movff	read_byte@i,??_read_byte
  4912  001904  0E01               	movlw	1
  4913  001906  6E46               	movwf	(??_read_byte+1)^0,c
  4914  001908  2A45               	incf	??_read_byte^0,f,c
  4915  00190A  D002               	goto	u2004
  4916  00190C                     u2005:
  4917  00190C  90D8               	bcf	status,0,c
  4918  00190E  3646               	rlcf	(??_read_byte+1)^0,f,c
  4919  001910                     u2004:
  4920  001910  2E45               	decfsz	??_read_byte^0,f,c
  4921  001912  D7FC               	goto	u2005
  4922  001914  5046               	movf	(??_read_byte+1)^0,w,c
  4923  001916  1247               	iorwf	read_byte@val^0,f,c
  4924  001918                     l2951:
  4925                           
  4926                           ;onewire.c: 58: _delay((unsigned long)((120)*(8000000/4000000.0)));
  4927  001918  0E50               	movlw	80
  4928  00191A                     u3367:
  4929  00191A  2EE8               	decfsz	wreg,f,c
  4930  00191C  D7FE               	bra	u3367
  4931  00191E  2A48               	incf	read_byte@i^0,f,c
  4932  001920  0E07               	movlw	7
  4933  001922  6448               	cpfsgt	read_byte@i^0,c
  4934  001924  D7E9               	goto	l2947
  4935                           
  4936                           ;onewire.c: 59: };onewire.c: 61: return val;
  4937  001926  5047               	movf	read_byte@val^0,w,c
  4938  001928  0012               	return		;funcret
  4939  00192A                     __end_of_read_byte:
  4940                           	callstack 0
  4941                           
  4942 ;; *************** function _read_bit *****************
  4943 ;; Defined at:
  4944 ;;		line 22 in file "onewire.c"
  4945 ;; Parameters:    Size  Location     Type
  4946 ;;		None
  4947 ;; Auto vars:     Size  Location     Type
  4948 ;;		None
  4949 ;; Return value:  Size  Location     Type
  4950 ;;                  1    wreg      unsigned char 
  4951 ;; Registers used:
  4952 ;;		wreg
  4953 ;; Tracked objects:
  4954 ;;		On entry : 0/0
  4955 ;;		On exit  : 0/0
  4956 ;;		Unchanged: 0/0
  4957 ;; Data sizes:     COMRAM   BANK0   BANK1
  4958 ;;      Params:         0       0       0
  4959 ;;      Locals:         0       0       0
  4960 ;;      Temps:          0       0       0
  4961 ;;      Totals:         0       0       0
  4962 ;;Total ram usage:        0 bytes
  4963 ;; Hardware stack levels used: 1
  4964 ;; Hardware stack levels required when called: 2
  4965 ;; This function calls:
  4966 ;;		Nothing
  4967 ;; This function is called by:
  4968 ;;		_read_byte
  4969 ;; This function uses a non-reentrant model
  4970 ;;
  4971                           
  4972                           	psect	text12
  4973  001B6A                     __ptext12:
  4974                           	callstack 0
  4975  001B6A                     _read_bit:
  4976                           	callstack 26
  4977                           
  4978                           ;onewire.c: 24: PORTAbits.RA6 = 0;
  4979                           
  4980                           ;incstack = 0
  4981  001B6A  9C80               	bcf	128,6,c	;volatile
  4982                           
  4983                           ;onewire.c: 25: TRISAbits.TRISA6 = 0;
  4984  001B6C  9C92               	bcf	146,6,c	;volatile
  4985                           
  4986                           ;onewire.c: 26: _delay((unsigned long)((1)*(8000000/4000000.0)));
  4987  001B6E  D000               	nop2		;2 cycle nop
  4988                           
  4989                           ;onewire.c: 27: PORTAbits.RA6 = 1;
  4990  001B70  8C80               	bsf	128,6,c	;volatile
  4991                           
  4992                           ;onewire.c: 28: TRISAbits.TRISA6 = 1;
  4993  001B72  8C92               	bsf	146,6,c	;volatile
  4994                           
  4995                           ;onewire.c: 29: _delay((unsigned long)((6)*(8000000/4000000.0)));
  4996  001B74  0E04               	movlw	4
  4997  001B76                     u3377:
  4998  001B76  2EE8               	decfsz	wreg,f,c
  4999  001B78  D7FE               	bra	u3377
  5000                           
  5001                           ;onewire.c: 30: return(PORTAbits.RA6);
  5002  001B7A  BC80               	btfsc	128,6,c	;volatile
  5003  001B7C  0C01               	retlw	1
  5004  001B7E  0C00               	retlw	0	;funcret
  5005  001B80                     __end_of_read_bit:
  5006                           	callstack 0
  5007                           
  5008 ;; *************** function _ds18b20_crc8 *****************
  5009 ;; Defined at:
  5010 ;;		line 221 in file "ds18b20.c"
  5011 ;; Parameters:    Size  Location     Type
  5012 ;;  data_in         1    3[COMRAM] PTR unsigned char 
  5013 ;;		 -> ds18b20_readrom@temp_rom(8), scratch(9), 
  5014 ;;  num_bytes       1    4[COMRAM] unsigned char 
  5015 ;; Auto vars:     Size  Location     Type
  5016 ;;  crc             1    9[COMRAM] unsigned char 
  5017 ;;  loop_count      1    8[COMRAM] unsigned char 
  5018 ;;  feedback_bit    1    7[COMRAM] unsigned char 
  5019 ;;  data            1    6[COMRAM] unsigned char 
  5020 ;;  bit_counter     1    5[COMRAM] unsigned char 
  5021 ;; Return value:  Size  Location     Type
  5022 ;;                  1    wreg      unsigned char 
  5023 ;; Registers used:
  5024 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5025 ;; Tracked objects:
  5026 ;;		On entry : 0/0
  5027 ;;		On exit  : 0/0
  5028 ;;		Unchanged: 0/0
  5029 ;; Data sizes:     COMRAM   BANK0   BANK1
  5030 ;;      Params:         2       0       0
  5031 ;;      Locals:         5       0       0
  5032 ;;      Temps:          0       0       0
  5033 ;;      Totals:         7       0       0
  5034 ;;Total ram usage:        7 bytes
  5035 ;; Hardware stack levels used: 1
  5036 ;; Hardware stack levels required when called: 2
  5037 ;; This function calls:
  5038 ;;		Nothing
  5039 ;; This function is called by:
  5040 ;;		_ds18b20_readTemp
  5041 ;;		_ds18b20_readrom
  5042 ;; This function uses a non-reentrant model
  5043 ;;
  5044                           
  5045                           	psect	text13
  5046  0017E4                     __ptext13:
  5047                           	callstack 0
  5048  0017E4                     _ds18b20_crc8:
  5049                           	callstack 27
  5050                           
  5051                           ;ds18b20.c: 222: uint8_t crc;;ds18b20.c: 223: uint8_t loop_count;;ds18b20.c: 224: uint8_
      +                          t bit_counter;;ds18b20.c: 225: uint8_t data;;ds18b20.c: 226: uint8_t feedback_bit;;ds18b
      +                          20.c: 228: crc = 0x00;
  5052                           
  5053                           ;incstack = 0
  5054  0017E4  6A4B               	clrf	ds18b20_crc8@crc^0,c
  5055                           
  5056                           ;ds18b20.c: 230: for (loop_count = 0; loop_count != num_bytes; loop_count++) {
  5057  0017E6  6A4A               	clrf	ds18b20_crc8@loop_count^0,c
  5058  0017E8  D01D               	goto	l2981
  5059  0017EA                     l2961:
  5060                           
  5061                           ;ds18b20.c: 231: data = data_in[loop_count];
  5062  0017EA  5045               	movf	ds18b20_crc8@data_in^0,w,c
  5063  0017EC  244A               	addwf	ds18b20_crc8@loop_count^0,w,c
  5064  0017EE  6ED9               	movwf	fsr2l,c
  5065  0017F0  6ADA               	clrf	fsr2h,c
  5066  0017F2  50DF               	movf	indf2,w,c
  5067  0017F4  6E48               	movwf	ds18b20_crc8@data^0,c
  5068                           
  5069                           ;ds18b20.c: 233: bit_counter = 8;
  5070  0017F6  0E08               	movlw	8
  5071  0017F8  6E47               	movwf	ds18b20_crc8@bit_counter^0,c
  5072  0017FA                     l2965:
  5073                           
  5074                           ;ds18b20.c: 235: feedback_bit = (crc ^ data) & 0x01;
  5075  0017FA  504B               	movf	ds18b20_crc8@crc^0,w,c
  5076  0017FC  1848               	xorwf	ds18b20_crc8@data^0,w,c
  5077  0017FE  0B01               	andlw	1
  5078  001800  6E49               	movwf	ds18b20_crc8@feedback_bit^0,c
  5079                           
  5080                           ;ds18b20.c: 237: if (feedback_bit == 0x01) {
  5081  001802  0449               	decf	ds18b20_crc8@feedback_bit^0,w,c
  5082  001804  E102               	bnz	l450
  5083                           
  5084                           ;ds18b20.c: 238: crc = crc ^ 0x18;
  5085  001806  0E18               	movlw	24
  5086  001808  1A4B               	xorwf	ds18b20_crc8@crc^0,f,c
  5087  00180A                     l450:
  5088                           
  5089                           ;ds18b20.c: 239: };ds18b20.c: 240: crc = (crc >> 1) & 0x7F;
  5090  00180A  90D8               	bcf	status,0,c
  5091  00180C  304B               	rrcf	ds18b20_crc8@crc^0,w,c
  5092  00180E  0B7F               	andlw	127
  5093  001810  6E4B               	movwf	ds18b20_crc8@crc^0,c
  5094                           
  5095                           ;ds18b20.c: 241: if (feedback_bit == 0x01) {
  5096  001812  0449               	decf	ds18b20_crc8@feedback_bit^0,w,c
  5097  001814  E101               	bnz	l2973
  5098                           
  5099                           ;ds18b20.c: 242: crc = crc | 0x80;
  5100  001816  8E4B               	bsf	ds18b20_crc8@crc^0,7,c
  5101  001818                     l2973:
  5102                           
  5103                           ;ds18b20.c: 243: };ds18b20.c: 245: data = data >> 1;
  5104  001818  90D8               	bcf	status,0,c
  5105  00181A  3248               	rrcf	ds18b20_crc8@data^0,f,c
  5106                           
  5107                           ;ds18b20.c: 246: bit_counter--;
  5108  00181C  0647               	decf	ds18b20_crc8@bit_counter^0,f,c
  5109                           
  5110                           ;ds18b20.c: 248: } while (bit_counter > 0);
  5111  00181E  5047               	movf	ds18b20_crc8@bit_counter^0,w,c
  5112  001820  E1EC               	bnz	l2965
  5113  001822  2A4A               	incf	ds18b20_crc8@loop_count^0,f,c
  5114  001824                     l2981:
  5115  001824  5046               	movf	ds18b20_crc8@num_bytes^0,w,c
  5116  001826  184A               	xorwf	ds18b20_crc8@loop_count^0,w,c
  5117  001828  E1E0               	bnz	l2961
  5118                           
  5119                           ;ds18b20.c: 249: };ds18b20.c: 251: return crc;
  5120  00182A  504B               	movf	ds18b20_crc8@crc^0,w,c
  5121  00182C  0012               	return		;funcret
  5122  00182E                     __end_of_ds18b20_crc8:
  5123                           	callstack 0
  5124                           
  5125 ;; *************** function _ds18b20_get_temp *****************
  5126 ;; Defined at:
  5127 ;;		line 198 in file "ds18b20.c"
  5128 ;; Parameters:    Size  Location     Type
  5129 ;;  num_dq          1    wreg     unsigned char 
  5130 ;;  minus           1    3[COMRAM] PTR unsigned char 
  5131 ;;		 -> minus_2(1), minus_1(1), 
  5132 ;; Auto vars:     Size  Location     Type
  5133 ;;  num_dq          1    5[COMRAM] unsigned char 
  5134 ;;  temp            2    7[COMRAM] unsigned int 
  5135 ;;  tmp             1    6[COMRAM] unsigned char 
  5136 ;; Return value:  Size  Location     Type
  5137 ;;                  2    3[COMRAM] unsigned int 
  5138 ;; Registers used:
  5139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  5140 ;; Tracked objects:
  5141 ;;		On entry : 0/0
  5142 ;;		On exit  : 0/0
  5143 ;;		Unchanged: 0/0
  5144 ;; Data sizes:     COMRAM   BANK0   BANK1
  5145 ;;      Params:         2       0       0
  5146 ;;      Locals:         4       0       0
  5147 ;;      Temps:          0       0       0
  5148 ;;      Totals:         6       0       0
  5149 ;;Total ram usage:        6 bytes
  5150 ;; Hardware stack levels used: 1
  5151 ;; Hardware stack levels required when called: 2
  5152 ;; This function calls:
  5153 ;;		Nothing
  5154 ;; This function is called by:
  5155 ;;		_main
  5156 ;; This function uses a non-reentrant model
  5157 ;;
  5158                           
  5159                           	psect	text14
  5160  001444                     __ptext14:
  5161                           	callstack 0
  5162  001444                     _ds18b20_get_temp:
  5163                           	callstack 28
  5164                           
  5165                           ;incstack = 0
  5166                           ;ds18b20_get_temp@num_dq stored from wreg
  5167  001444  6E47               	movwf	ds18b20_get_temp@num_dq^0,c
  5168                           
  5169                           ;ds18b20.c: 199: uint16_t temp = temp_ready[num_dq-1];
  5170  001446  5047               	movf	ds18b20_get_temp@num_dq^0,w,c
  5171  001448  0D02               	mullw	2
  5172  00144A  50F3               	movf	243,w,c
  5173  00144C  0F1F               	addlw	low (_temp_ready+254)
  5174  00144E  6ED9               	movwf	fsr2l,c
  5175  001450  6ADA               	clrf	fsr2h,c
  5176  001452  CFDE F049          	movff	postinc2,ds18b20_get_temp@temp
  5177  001456  CFDD F04A          	movff	postdec2,ds18b20_get_temp@temp+1
  5178                           
  5179                           ;ds18b20.c: 200: uint8_t tmp;;ds18b20.c: 201: *minus = '+';
  5180  00145A  5045               	movf	ds18b20_get_temp@minus^0,w,c
  5181  00145C  6ED9               	movwf	fsr2l,c
  5182  00145E  6ADA               	clrf	fsr2h,c
  5183  001460  0E2B               	movlw	43
  5184  001462  6EDF               	movwf	indf2,c
  5185                           
  5186                           ;ds18b20.c: 202: if(temp == 32767)
  5187  001464  2849               	incf	ds18b20_get_temp@temp^0,w,c
  5188  001466  E108               	bnz	l442
  5189  001468  0E7F               	movlw	127
  5190  00146A  184A               	xorwf	(ds18b20_get_temp@temp+1)^0,w,c
  5191  00146C  E105               	bnz	l442
  5192  00146E                     u2200:
  5193                           
  5194                           ;ds18b20.c: 203: return temp;
  5195  00146E  C049  F045         	movff	ds18b20_get_temp@temp,?_ds18b20_get_temp
  5196  001472  C04A  F046         	movff	ds18b20_get_temp@temp+1,?_ds18b20_get_temp+1
  5197  001476  0012               	return	
  5198  001478                     l442:
  5199                           
  5200                           ;ds18b20.c: 204: if (temp & 0x8000) {
  5201  001478  AE4A               	btfss	(ds18b20_get_temp@temp+1)^0,7,c
  5202  00147A  D009               	goto	l3213
  5203                           
  5204                           ;ds18b20.c: 205: temp = -temp;
  5205  00147C  6C49               	negf	ds18b20_get_temp@temp^0,c
  5206  00147E  1E4A               	comf	(ds18b20_get_temp@temp+1)^0,f,c
  5207  001480  B0D8               	btfsc	status,0,c
  5208  001482  2A4A               	incf	(ds18b20_get_temp@temp+1)^0,f,c
  5209                           
  5210                           ;ds18b20.c: 206: *minus = '-';
  5211  001484  5045               	movf	ds18b20_get_temp@minus^0,w,c
  5212  001486  6ED9               	movwf	fsr2l,c
  5213  001488  6ADA               	clrf	fsr2h,c
  5214  00148A  0E2D               	movlw	45
  5215  00148C  6EDF               	movwf	indf2,c
  5216  00148E                     l3213:
  5217                           
  5218                           ;ds18b20.c: 207: };ds18b20.c: 209: tmp = temp & 0x0f;
  5219  00148E  5049               	movf	ds18b20_get_temp@temp^0,w,c
  5220  001490  0B0F               	andlw	15
  5221  001492  6E48               	movwf	ds18b20_get_temp@tmp^0,c
  5222                           
  5223                           ;ds18b20.c: 210: tmp = fract[tmp];
  5224  001494  0EAD               	movlw	low _fract
  5225  001496  2448               	addwf	ds18b20_get_temp@tmp^0,w,c
  5226  001498  6EF6               	movwf	tblptrl,c
  5227  00149A  6AF7               	clrf	tblptrh,c
  5228  00149C  0E1E               	movlw	high _fract
  5229  00149E  22F7               	addwfc	tblptrh,f,c
  5230  0014A0                     	if	0	;There are less than 3 active tblptr bytes
  5231  0014A0                     	endif
  5232  0014A0  0008               	tblrd		*
  5233  0014A2  CFF5 F048          	movff	tablat,ds18b20_get_temp@tmp
  5234                           
  5235                           ;ds18b20.c: 211: temp = temp >> 4;
  5236  0014A6  3A49               	swapf	ds18b20_get_temp@temp^0,f,c
  5237  0014A8  3A4A               	swapf	(ds18b20_get_temp@temp+1)^0,f,c
  5238  0014AA  0E0F               	movlw	15
  5239  0014AC  1649               	andwf	ds18b20_get_temp@temp^0,f,c
  5240  0014AE  504A               	movf	(ds18b20_get_temp@temp+1)^0,w,c
  5241  0014B0  0BF0               	andlw	240
  5242  0014B2  1249               	iorwf	ds18b20_get_temp@temp^0,f,c
  5243  0014B4  0E0F               	movlw	15
  5244  0014B6  164A               	andwf	(ds18b20_get_temp@temp+1)^0,f,c
  5245                           
  5246                           ;ds18b20.c: 212: temp = (temp & 0x00ff) * 10;
  5247  0014B8  5049               	movf	ds18b20_get_temp@temp^0,w,c
  5248  0014BA  0D0A               	mullw	10
  5249  0014BC  CFF3 F049          	movff	prodl,ds18b20_get_temp@temp
  5250  0014C0  CFF4 F04A          	movff	prodh,ds18b20_get_temp@temp+1
  5251                           
  5252                           ;ds18b20.c: 213: temp = temp + tmp;
  5253  0014C4  5048               	movf	ds18b20_get_temp@tmp^0,w,c
  5254  0014C6  2649               	addwf	ds18b20_get_temp@temp^0,f,c
  5255  0014C8  0E00               	movlw	0
  5256  0014CA  224A               	addwfc	(ds18b20_get_temp@temp+1)^0,f,c
  5257  0014CC  D7D0               	goto	u2200
  5258  0014CE                     __end_of_ds18b20_get_temp:
  5259                           	callstack 0
  5260                           
  5261 ;; *************** function ___lwmod *****************
  5262 ;; Defined at:
  5263 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwmod.c"
  5264 ;; Parameters:    Size  Location     Type
  5265 ;;  dividend        2   10[COMRAM] unsigned int 
  5266 ;;  divisor         2   12[COMRAM] unsigned int 
  5267 ;; Auto vars:     Size  Location     Type
  5268 ;;  counter         1   14[COMRAM] unsigned char 
  5269 ;; Return value:  Size  Location     Type
  5270 ;;                  2   10[COMRAM] unsigned int 
  5271 ;; Registers used:
  5272 ;;		wreg, status,2, status,0
  5273 ;; Tracked objects:
  5274 ;;		On entry : 0/0
  5275 ;;		On exit  : 0/0
  5276 ;;		Unchanged: 0/0
  5277 ;; Data sizes:     COMRAM   BANK0   BANK1
  5278 ;;      Params:         4       0       0
  5279 ;;      Locals:         1       0       0
  5280 ;;      Temps:          0       0       0
  5281 ;;      Totals:         5       0       0
  5282 ;;Total ram usage:        5 bytes
  5283 ;; Hardware stack levels used: 1
  5284 ;; Hardware stack levels required when called: 2
  5285 ;; This function calls:
  5286 ;;		Nothing
  5287 ;; This function is called by:
  5288 ;;		_main
  5289 ;; This function uses a non-reentrant model
  5290 ;;
  5291                           
  5292                           	psect	text15
  5293  0018B6                     __ptext15:
  5294                           	callstack 0
  5295  0018B6                     ___lwmod:
  5296                           	callstack 28
  5297                           
  5298                           ;incstack = 0
  5299  0018B6  504E               	movf	___lwmod@divisor^0,w,c
  5300  0018B8  104F               	iorwf	(___lwmod@divisor+1)^0,w,c
  5301  0018BA  E017               	bz	l1157
  5302  0018BC  0E01               	movlw	1
  5303  0018BE  6E50               	movwf	___lwmod@counter^0,c
  5304  0018C0  D004               	goto	l3451
  5305  0018C2                     l3449:
  5306  0018C2  90D8               	bcf	status,0,c
  5307  0018C4  364E               	rlcf	___lwmod@divisor^0,f,c
  5308  0018C6  364F               	rlcf	(___lwmod@divisor+1)^0,f,c
  5309  0018C8  2A50               	incf	___lwmod@counter^0,f,c
  5310  0018CA                     l3451:
  5311  0018CA  AE4F               	btfss	(___lwmod@divisor+1)^0,7,c
  5312  0018CC  D7FA               	goto	l3449
  5313  0018CE                     u2470:
  5314  0018CE  504E               	movf	___lwmod@divisor^0,w,c
  5315  0018D0  5C4C               	subwf	___lwmod@dividend^0,w,c
  5316  0018D2  504F               	movf	(___lwmod@divisor+1)^0,w,c
  5317  0018D4  584D               	subwfb	(___lwmod@dividend+1)^0,w,c
  5318  0018D6  E304               	bnc	l3457
  5319  0018D8  504E               	movf	___lwmod@divisor^0,w,c
  5320  0018DA  5E4C               	subwf	___lwmod@dividend^0,f,c
  5321  0018DC  504F               	movf	(___lwmod@divisor+1)^0,w,c
  5322  0018DE  5A4D               	subwfb	(___lwmod@dividend+1)^0,f,c
  5323  0018E0                     l3457:
  5324  0018E0  90D8               	bcf	status,0,c
  5325  0018E2  324F               	rrcf	(___lwmod@divisor+1)^0,f,c
  5326  0018E4  324E               	rrcf	___lwmod@divisor^0,f,c
  5327  0018E6  2E50               	decfsz	___lwmod@counter^0,f,c
  5328  0018E8  D7F2               	goto	u2470
  5329  0018EA                     l1157:
  5330  0018EA  C04C  F04C         	movff	___lwmod@dividend,?___lwmod
  5331  0018EE  C04D  F04D         	movff	___lwmod@dividend+1,?___lwmod+1
  5332  0018F2  0012               	return		;funcret
  5333  0018F4                     __end_of___lwmod:
  5334                           	callstack 0
  5335                           
  5336 ;; *************** function ___lwdiv *****************
  5337 ;; Defined at:
  5338 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwdiv.c"
  5339 ;; Parameters:    Size  Location     Type
  5340 ;;  dividend        2    3[COMRAM] unsigned int 
  5341 ;;  divisor         2    5[COMRAM] unsigned int 
  5342 ;; Auto vars:     Size  Location     Type
  5343 ;;  quotient        2    7[COMRAM] unsigned int 
  5344 ;;  counter         1    9[COMRAM] unsigned char 
  5345 ;; Return value:  Size  Location     Type
  5346 ;;                  2    3[COMRAM] unsigned int 
  5347 ;; Registers used:
  5348 ;;		wreg, status,2, status,0
  5349 ;; Tracked objects:
  5350 ;;		On entry : 0/0
  5351 ;;		On exit  : 0/0
  5352 ;;		Unchanged: 0/0
  5353 ;; Data sizes:     COMRAM   BANK0   BANK1
  5354 ;;      Params:         4       0       0
  5355 ;;      Locals:         3       0       0
  5356 ;;      Temps:          0       0       0
  5357 ;;      Totals:         7       0       0
  5358 ;;Total ram usage:        7 bytes
  5359 ;; Hardware stack levels used: 1
  5360 ;; Hardware stack levels required when called: 2
  5361 ;; This function calls:
  5362 ;;		Nothing
  5363 ;; This function is called by:
  5364 ;;		_main
  5365 ;; This function uses a non-reentrant model
  5366 ;;
  5367                           
  5368                           	psect	text16
  5369  00182E                     __ptext16:
  5370                           	callstack 0
  5371  00182E                     ___lwdiv:
  5372                           	callstack 28
  5373                           
  5374                           ;incstack = 0
  5375  00182E  6A49               	clrf	___lwdiv@quotient^0,c
  5376  001830  6A4A               	clrf	(___lwdiv@quotient+1)^0,c
  5377  001832  5047               	movf	___lwdiv@divisor^0,w,c
  5378  001834  1048               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5379  001836  E01B               	bz	l1147
  5380  001838  0E01               	movlw	1
  5381  00183A  6E4B               	movwf	___lwdiv@counter^0,c
  5382  00183C  D004               	goto	l3431
  5383  00183E                     l3429:
  5384  00183E  90D8               	bcf	status,0,c
  5385  001840  3647               	rlcf	___lwdiv@divisor^0,f,c
  5386  001842  3648               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5387  001844  2A4B               	incf	___lwdiv@counter^0,f,c
  5388  001846                     l3431:
  5389  001846  AE48               	btfss	(___lwdiv@divisor+1)^0,7,c
  5390  001848  D7FA               	goto	l3429
  5391  00184A                     u2440:
  5392  00184A  90D8               	bcf	status,0,c
  5393  00184C  3649               	rlcf	___lwdiv@quotient^0,f,c
  5394  00184E  364A               	rlcf	(___lwdiv@quotient+1)^0,f,c
  5395  001850  5047               	movf	___lwdiv@divisor^0,w,c
  5396  001852  5C45               	subwf	___lwdiv@dividend^0,w,c
  5397  001854  5048               	movf	(___lwdiv@divisor+1)^0,w,c
  5398  001856  5846               	subwfb	(___lwdiv@dividend+1)^0,w,c
  5399  001858  E305               	bnc	l3441
  5400  00185A  5047               	movf	___lwdiv@divisor^0,w,c
  5401  00185C  5E45               	subwf	___lwdiv@dividend^0,f,c
  5402  00185E  5048               	movf	(___lwdiv@divisor+1)^0,w,c
  5403  001860  5A46               	subwfb	(___lwdiv@dividend+1)^0,f,c
  5404  001862  8049               	bsf	___lwdiv@quotient^0,0,c
  5405  001864                     l3441:
  5406  001864  90D8               	bcf	status,0,c
  5407  001866  3248               	rrcf	(___lwdiv@divisor+1)^0,f,c
  5408  001868  3247               	rrcf	___lwdiv@divisor^0,f,c
  5409  00186A  2E4B               	decfsz	___lwdiv@counter^0,f,c
  5410  00186C  D7EE               	goto	u2440
  5411  00186E                     l1147:
  5412  00186E  C049  F045         	movff	___lwdiv@quotient,?___lwdiv
  5413  001872  C04A  F046         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5414  001876  0012               	return		;funcret
  5415  001878                     __end_of___lwdiv:
  5416                           	callstack 0
  5417                           
  5418 ;; *************** function ___lbmod *****************
  5419 ;; Defined at:
  5420 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lbmod.c"
  5421 ;; Parameters:    Size  Location     Type
  5422 ;;  dividend        1    wreg     unsigned char 
  5423 ;;  divisor         1    7[COMRAM] unsigned char 
  5424 ;; Auto vars:     Size  Location     Type
  5425 ;;  dividend        1    8[COMRAM] unsigned char 
  5426 ;;  rem             1   10[COMRAM] unsigned char 
  5427 ;;  counter         1    9[COMRAM] unsigned char 
  5428 ;; Return value:  Size  Location     Type
  5429 ;;                  1    wreg      unsigned char 
  5430 ;; Registers used:
  5431 ;;		wreg, status,2, status,0
  5432 ;; Tracked objects:
  5433 ;;		On entry : 0/0
  5434 ;;		On exit  : 0/0
  5435 ;;		Unchanged: 0/0
  5436 ;; Data sizes:     COMRAM   BANK0   BANK1
  5437 ;;      Params:         1       0       0
  5438 ;;      Locals:         3       0       0
  5439 ;;      Temps:          0       0       0
  5440 ;;      Totals:         4       0       0
  5441 ;;Total ram usage:        4 bytes
  5442 ;; Hardware stack levels used: 1
  5443 ;; Hardware stack levels required when called: 2
  5444 ;; This function calls:
  5445 ;;		Nothing
  5446 ;; This function is called by:
  5447 ;;		_main
  5448 ;; This function uses a non-reentrant model
  5449 ;;
  5450                           
  5451                           	psect	text17
  5452  001A26                     __ptext17:
  5453                           	callstack 0
  5454  001A26                     ___lbmod:
  5455                           	callstack 28
  5456                           
  5457                           ;incstack = 0
  5458                           ;___lbmod@dividend stored from wreg
  5459  001A26  6E4A               	movwf	___lbmod@dividend^0,c
  5460  001A28  0E08               	movlw	8
  5461  001A2A  6E4B               	movwf	___lbmod@counter^0,c
  5462  001A2C  6A4C               	clrf	___lbmod@rem^0,c
  5463  001A2E                     l3409:
  5464  001A2E  90D8               	bcf	status,0,c
  5465  001A30  344A               	rlcf	___lbmod@dividend^0,w,c
  5466  001A32  344C               	rlcf	___lbmod@rem^0,w,c
  5467  001A34  6E4C               	movwf	___lbmod@rem^0,c
  5468  001A36  90D8               	bcf	status,0,c
  5469  001A38  364A               	rlcf	___lbmod@dividend^0,f,c
  5470  001A3A  5049               	movf	___lbmod@divisor^0,w,c
  5471  001A3C  5C4C               	subwf	___lbmod@rem^0,w,c
  5472  001A3E  E302               	bnc	l3417
  5473  001A40  5049               	movf	___lbmod@divisor^0,w,c
  5474  001A42  5E4C               	subwf	___lbmod@rem^0,f,c
  5475  001A44                     l3417:
  5476  001A44  2E4B               	decfsz	___lbmod@counter^0,f,c
  5477  001A46  D7F3               	goto	l3409
  5478  001A48  504C               	movf	___lbmod@rem^0,w,c
  5479  001A4A  0012               	return		;funcret
  5480  001A4C                     __end_of___lbmod:
  5481                           	callstack 0
  5482                           
  5483 ;; *************** function ___lbdiv *****************
  5484 ;; Defined at:
  5485 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lbdiv.c"
  5486 ;; Parameters:    Size  Location     Type
  5487 ;;  dividend        1    wreg     unsigned char 
  5488 ;;  divisor         1    3[COMRAM] unsigned char 
  5489 ;; Auto vars:     Size  Location     Type
  5490 ;;  dividend        1    4[COMRAM] unsigned char 
  5491 ;;  quotient        1    6[COMRAM] unsigned char 
  5492 ;;  counter         1    5[COMRAM] unsigned char 
  5493 ;; Return value:  Size  Location     Type
  5494 ;;                  1    wreg      unsigned char 
  5495 ;; Registers used:
  5496 ;;		wreg, status,2, status,0
  5497 ;; Tracked objects:
  5498 ;;		On entry : 0/0
  5499 ;;		On exit  : 0/0
  5500 ;;		Unchanged: 0/0
  5501 ;; Data sizes:     COMRAM   BANK0   BANK1
  5502 ;;      Params:         1       0       0
  5503 ;;      Locals:         3       0       0
  5504 ;;      Temps:          0       0       0
  5505 ;;      Totals:         4       0       0
  5506 ;;Total ram usage:        4 bytes
  5507 ;; Hardware stack levels used: 1
  5508 ;; Hardware stack levels required when called: 2
  5509 ;; This function calls:
  5510 ;;		Nothing
  5511 ;; This function is called by:
  5512 ;;		_main
  5513 ;; This function uses a non-reentrant model
  5514 ;;
  5515                           
  5516                           	psect	text18
  5517  001960                     __ptext18:
  5518                           	callstack 0
  5519  001960                     ___lbdiv:
  5520                           	callstack 28
  5521                           
  5522                           ;incstack = 0
  5523                           ;___lbdiv@dividend stored from wreg
  5524  001960  6E46               	movwf	___lbdiv@dividend^0,c
  5525  001962  6A48               	clrf	___lbdiv@quotient^0,c
  5526  001964  5045               	movf	___lbdiv@divisor^0,w,c
  5527  001966  E014               	bz	l3401
  5528  001968  0E01               	movlw	1
  5529  00196A  6E47               	movwf	___lbdiv@counter^0,c
  5530  00196C  D003               	goto	l3389
  5531  00196E                     l3385:
  5532  00196E  90D8               	bcf	status,0,c
  5533  001970  3645               	rlcf	___lbdiv@divisor^0,f,c
  5534  001972  2A47               	incf	___lbdiv@counter^0,f,c
  5535  001974                     l3389:
  5536  001974  AE45               	btfss	___lbdiv@divisor^0,7,c
  5537  001976  D7FB               	goto	l3385
  5538  001978                     u2400:
  5539  001978  90D8               	bcf	status,0,c
  5540  00197A  3648               	rlcf	___lbdiv@quotient^0,f,c
  5541  00197C  5045               	movf	___lbdiv@divisor^0,w,c
  5542  00197E  5C46               	subwf	___lbdiv@dividend^0,w,c
  5543  001980  E303               	bnc	l3397
  5544  001982  5045               	movf	___lbdiv@divisor^0,w,c
  5545  001984  5E46               	subwf	___lbdiv@dividend^0,f,c
  5546  001986  8048               	bsf	___lbdiv@quotient^0,0,c
  5547  001988                     l3397:
  5548  001988  90D8               	bcf	status,0,c
  5549  00198A  3245               	rrcf	___lbdiv@divisor^0,f,c
  5550  00198C  2E47               	decfsz	___lbdiv@counter^0,f,c
  5551  00198E  D7F4               	goto	u2400
  5552  001990                     l3401:
  5553  001990  5048               	movf	___lbdiv@quotient^0,w,c
  5554  001992  0012               	return		;funcret
  5555  001994                     __end_of___lbdiv:
  5556                           	callstack 0
  5557                           
  5558 ;; *************** function ___awmod *****************
  5559 ;; Defined at:
  5560 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\awmod.c"
  5561 ;; Parameters:    Size  Location     Type
  5562 ;;  dividend        2   11[COMRAM] int 
  5563 ;;  divisor         2   13[COMRAM] int 
  5564 ;; Auto vars:     Size  Location     Type
  5565 ;;  sign            1   16[COMRAM] unsigned char 
  5566 ;;  counter         1   15[COMRAM] unsigned char 
  5567 ;; Return value:  Size  Location     Type
  5568 ;;                  2   11[COMRAM] int 
  5569 ;; Registers used:
  5570 ;;		wreg, status,2, status,0
  5571 ;; Tracked objects:
  5572 ;;		On entry : 0/0
  5573 ;;		On exit  : 0/0
  5574 ;;		Unchanged: 0/0
  5575 ;; Data sizes:     COMRAM   BANK0   BANK1
  5576 ;;      Params:         4       0       0
  5577 ;;      Locals:         2       0       0
  5578 ;;      Temps:          0       0       0
  5579 ;;      Totals:         6       0       0
  5580 ;;Total ram usage:        6 bytes
  5581 ;; Hardware stack levels used: 1
  5582 ;; Hardware stack levels required when called: 2
  5583 ;; This function calls:
  5584 ;;		Nothing
  5585 ;; This function is called by:
  5586 ;;		_main
  5587 ;; This function uses a non-reentrant model
  5588 ;;
  5589                           
  5590                           	psect	text19
  5591  0016BC                     __ptext19:
  5592                           	callstack 0
  5593  0016BC                     ___awmod:
  5594                           	callstack 28
  5595                           
  5596                           ;incstack = 0
  5597  0016BC  6A52               	clrf	___awmod@sign^0,c
  5598  0016BE  AE4E               	btfss	(___awmod@dividend+1)^0,7,c
  5599  0016C0  D006               	goto	l3351
  5600  0016C2  6C4D               	negf	___awmod@dividend^0,c
  5601  0016C4  1E4E               	comf	(___awmod@dividend+1)^0,f,c
  5602  0016C6  B0D8               	btfsc	status,0,c
  5603  0016C8  2A4E               	incf	(___awmod@dividend+1)^0,f,c
  5604  0016CA  0E01               	movlw	1
  5605  0016CC  6E52               	movwf	___awmod@sign^0,c
  5606  0016CE                     l3351:
  5607  0016CE  AE50               	btfss	(___awmod@divisor+1)^0,7,c
  5608  0016D0  D004               	goto	l3355
  5609  0016D2  6C4F               	negf	___awmod@divisor^0,c
  5610  0016D4  1E50               	comf	(___awmod@divisor+1)^0,f,c
  5611  0016D6  B0D8               	btfsc	status,0,c
  5612  0016D8  2A50               	incf	(___awmod@divisor+1)^0,f,c
  5613  0016DA                     l3355:
  5614  0016DA  504F               	movf	___awmod@divisor^0,w,c
  5615  0016DC  1050               	iorwf	(___awmod@divisor+1)^0,w,c
  5616  0016DE  E017               	bz	l3371
  5617  0016E0  0E01               	movlw	1
  5618  0016E2  6E51               	movwf	___awmod@counter^0,c
  5619  0016E4  D004               	goto	l3361
  5620  0016E6                     l3359:
  5621  0016E6  90D8               	bcf	status,0,c
  5622  0016E8  364F               	rlcf	___awmod@divisor^0,f,c
  5623  0016EA  3650               	rlcf	(___awmod@divisor+1)^0,f,c
  5624  0016EC  2A51               	incf	___awmod@counter^0,f,c
  5625  0016EE                     l3361:
  5626  0016EE  AE50               	btfss	(___awmod@divisor+1)^0,7,c
  5627  0016F0  D7FA               	goto	l3359
  5628  0016F2                     u2360:
  5629  0016F2  504F               	movf	___awmod@divisor^0,w,c
  5630  0016F4  5C4D               	subwf	___awmod@dividend^0,w,c
  5631  0016F6  5050               	movf	(___awmod@divisor+1)^0,w,c
  5632  0016F8  584E               	subwfb	(___awmod@dividend+1)^0,w,c
  5633  0016FA  E304               	bnc	l3367
  5634  0016FC  504F               	movf	___awmod@divisor^0,w,c
  5635  0016FE  5E4D               	subwf	___awmod@dividend^0,f,c
  5636  001700  5050               	movf	(___awmod@divisor+1)^0,w,c
  5637  001702  5A4E               	subwfb	(___awmod@dividend+1)^0,f,c
  5638  001704                     l3367:
  5639  001704  90D8               	bcf	status,0,c
  5640  001706  3250               	rrcf	(___awmod@divisor+1)^0,f,c
  5641  001708  324F               	rrcf	___awmod@divisor^0,f,c
  5642  00170A  2E51               	decfsz	___awmod@counter^0,f,c
  5643  00170C  D7F2               	goto	u2360
  5644  00170E                     l3371:
  5645  00170E  5052               	movf	___awmod@sign^0,w,c
  5646  001710  E004               	bz	l3375
  5647  001712  6C4D               	negf	___awmod@dividend^0,c
  5648  001714  1E4E               	comf	(___awmod@dividend+1)^0,f,c
  5649  001716  B0D8               	btfsc	status,0,c
  5650  001718  2A4E               	incf	(___awmod@dividend+1)^0,f,c
  5651  00171A                     l3375:
  5652  00171A  C04D  F04D         	movff	___awmod@dividend,?___awmod
  5653  00171E  C04E  F04E         	movff	___awmod@dividend+1,?___awmod+1
  5654  001722  0012               	return		;funcret
  5655  001724                     __end_of___awmod:
  5656                           	callstack 0
  5657                           
  5658 ;; *************** function ___awdiv *****************
  5659 ;; Defined at:
  5660 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\awdiv.c"
  5661 ;; Parameters:    Size  Location     Type
  5662 ;;  dividend        2    3[COMRAM] int 
  5663 ;;  divisor         2    5[COMRAM] int 
  5664 ;; Auto vars:     Size  Location     Type
  5665 ;;  quotient        2    9[COMRAM] int 
  5666 ;;  sign            1    8[COMRAM] unsigned char 
  5667 ;;  counter         1    7[COMRAM] unsigned char 
  5668 ;; Return value:  Size  Location     Type
  5669 ;;                  2    3[COMRAM] int 
  5670 ;; Registers used:
  5671 ;;		wreg, status,2, status,0
  5672 ;; Tracked objects:
  5673 ;;		On entry : 0/0
  5674 ;;		On exit  : 0/0
  5675 ;;		Unchanged: 0/0
  5676 ;; Data sizes:     COMRAM   BANK0   BANK1
  5677 ;;      Params:         4       0       0
  5678 ;;      Locals:         4       0       0
  5679 ;;      Temps:          0       0       0
  5680 ;;      Totals:         8       0       0
  5681 ;;Total ram usage:        8 bytes
  5682 ;; Hardware stack levels used: 1
  5683 ;; Hardware stack levels required when called: 2
  5684 ;; This function calls:
  5685 ;;		Nothing
  5686 ;; This function is called by:
  5687 ;;		_main
  5688 ;; This function uses a non-reentrant model
  5689 ;;
  5690                           
  5691                           	psect	text20
  5692  0015D0                     __ptext20:
  5693                           	callstack 0
  5694  0015D0                     ___awdiv:
  5695                           	callstack 28
  5696                           
  5697                           ;incstack = 0
  5698  0015D0  6A4A               	clrf	___awdiv@sign^0,c
  5699  0015D2  AE48               	btfss	(___awdiv@divisor+1)^0,7,c
  5700  0015D4  D006               	goto	l3307
  5701  0015D6  6C47               	negf	___awdiv@divisor^0,c
  5702  0015D8  1E48               	comf	(___awdiv@divisor+1)^0,f,c
  5703  0015DA  B0D8               	btfsc	status,0,c
  5704  0015DC  2A48               	incf	(___awdiv@divisor+1)^0,f,c
  5705  0015DE  0E01               	movlw	1
  5706  0015E0  6E4A               	movwf	___awdiv@sign^0,c
  5707  0015E2                     l3307:
  5708  0015E2  AE46               	btfss	(___awdiv@dividend+1)^0,7,c
  5709  0015E4  D006               	goto	l3313
  5710  0015E6  6C45               	negf	___awdiv@dividend^0,c
  5711  0015E8  1E46               	comf	(___awdiv@dividend+1)^0,f,c
  5712  0015EA  B0D8               	btfsc	status,0,c
  5713  0015EC  2A46               	incf	(___awdiv@dividend+1)^0,f,c
  5714  0015EE  0E01               	movlw	1
  5715  0015F0  1A4A               	xorwf	___awdiv@sign^0,f,c
  5716  0015F2                     l3313:
  5717  0015F2  6A4B               	clrf	___awdiv@quotient^0,c
  5718  0015F4  6A4C               	clrf	(___awdiv@quotient+1)^0,c
  5719  0015F6  5047               	movf	___awdiv@divisor^0,w,c
  5720  0015F8  1048               	iorwf	(___awdiv@divisor+1)^0,w,c
  5721  0015FA  E01B               	bz	l3335
  5722  0015FC  0E01               	movlw	1
  5723  0015FE  6E49               	movwf	___awdiv@counter^0,c
  5724  001600  D004               	goto	l3321
  5725  001602                     l3319:
  5726  001602  90D8               	bcf	status,0,c
  5727  001604  3647               	rlcf	___awdiv@divisor^0,f,c
  5728  001606  3648               	rlcf	(___awdiv@divisor+1)^0,f,c
  5729  001608  2A49               	incf	___awdiv@counter^0,f,c
  5730  00160A                     l3321:
  5731  00160A  AE48               	btfss	(___awdiv@divisor+1)^0,7,c
  5732  00160C  D7FA               	goto	l3319
  5733  00160E                     u2300:
  5734  00160E  90D8               	bcf	status,0,c
  5735  001610  364B               	rlcf	___awdiv@quotient^0,f,c
  5736  001612  364C               	rlcf	(___awdiv@quotient+1)^0,f,c
  5737  001614  5047               	movf	___awdiv@divisor^0,w,c
  5738  001616  5C45               	subwf	___awdiv@dividend^0,w,c
  5739  001618  5048               	movf	(___awdiv@divisor+1)^0,w,c
  5740  00161A  5846               	subwfb	(___awdiv@dividend+1)^0,w,c
  5741  00161C  E305               	bnc	l3331
  5742  00161E  5047               	movf	___awdiv@divisor^0,w,c
  5743  001620  5E45               	subwf	___awdiv@dividend^0,f,c
  5744  001622  5048               	movf	(___awdiv@divisor+1)^0,w,c
  5745  001624  5A46               	subwfb	(___awdiv@dividend+1)^0,f,c
  5746  001626  804B               	bsf	___awdiv@quotient^0,0,c
  5747  001628                     l3331:
  5748  001628  90D8               	bcf	status,0,c
  5749  00162A  3248               	rrcf	(___awdiv@divisor+1)^0,f,c
  5750  00162C  3247               	rrcf	___awdiv@divisor^0,f,c
  5751  00162E  2E49               	decfsz	___awdiv@counter^0,f,c
  5752  001630  D7EE               	goto	u2300
  5753  001632                     l3335:
  5754  001632  504A               	movf	___awdiv@sign^0,w,c
  5755  001634  E004               	bz	l3339
  5756  001636  6C4B               	negf	___awdiv@quotient^0,c
  5757  001638  1E4C               	comf	(___awdiv@quotient+1)^0,f,c
  5758  00163A  B0D8               	btfsc	status,0,c
  5759  00163C  2A4C               	incf	(___awdiv@quotient+1)^0,f,c
  5760  00163E                     l3339:
  5761  00163E  C04B  F045         	movff	___awdiv@quotient,?___awdiv
  5762  001642  C04C  F046         	movff	___awdiv@quotient+1,?___awdiv+1
  5763  001646  0012               	return		;funcret
  5764  001648                     __end_of___awdiv:
  5765                           	callstack 0
  5766                           
  5767 ;; *************** function _Main_init *****************
  5768 ;; Defined at:
  5769 ;;		line 664 in file "main.c"
  5770 ;; Parameters:    Size  Location     Type
  5771 ;;		None
  5772 ;; Auto vars:     Size  Location     Type
  5773 ;;		None
  5774 ;; Return value:  Size  Location     Type
  5775 ;;                  1    wreg      void 
  5776 ;; Registers used:
  5777 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5778 ;; Tracked objects:
  5779 ;;		On entry : 0/0
  5780 ;;		On exit  : 0/0
  5781 ;;		Unchanged: 0/0
  5782 ;; Data sizes:     COMRAM   BANK0   BANK1
  5783 ;;      Params:         0       0       0
  5784 ;;      Locals:         0       0       0
  5785 ;;      Temps:          0       0       0
  5786 ;;      Totals:         0       0       0
  5787 ;;Total ram usage:        0 bytes
  5788 ;; Hardware stack levels used: 1
  5789 ;; Hardware stack levels required when called: 6
  5790 ;; This function calls:
  5791 ;;		_cgrom_char
  5792 ;;		_initLCD
  5793 ;;		_init_ds18b20
  5794 ;;		_init_uart
  5795 ;; This function is called by:
  5796 ;;		_main
  5797 ;; This function uses a non-reentrant model
  5798 ;;
  5799                           
  5800                           	psect	text21
  5801  0014CE                     __ptext21:
  5802                           	callstack 0
  5803  0014CE                     _Main_init:
  5804                           	callstack 24
  5805                           
  5806                           ;main.c: 667: PORTA = 0;
  5807                           
  5808                           ;incstack = 0
  5809  0014CE  6A80               	clrf	128,c	;volatile
  5810                           
  5811                           ;main.c: 668: LATA = 0;
  5812  0014D0  6A89               	clrf	137,c	;volatile
  5813                           
  5814                           ;main.c: 669: TRISA = 0;
  5815  0014D2  6A92               	clrf	146,c	;volatile
  5816                           
  5817                           ;main.c: 670: PORTB = 0;
  5818  0014D4  6A81               	clrf	129,c	;volatile
  5819                           
  5820                           ;main.c: 671: LATB = 0;
  5821  0014D6  6A8A               	clrf	138,c	;volatile
  5822                           
  5823                           ;main.c: 672: TRISB = 0b00000110;
  5824  0014D8  0E06               	movlw	6
  5825  0014DA  6E93               	movwf	147,c	;volatile
  5826                           
  5827                           ;main.c: 673: PORTC = 0;
  5828  0014DC  6A82               	clrf	130,c	;volatile
  5829                           
  5830                           ;main.c: 674: LATC = 0;
  5831  0014DE  6A8B               	clrf	139,c	;volatile
  5832                           
  5833                           ;main.c: 675: TRISC = 0;
  5834  0014E0  6A94               	clrf	148,c	;volatile
  5835                           
  5836                           ;main.c: 676: OSCCONbits.SCS0 = 0;
  5837  0014E2  90D3               	bcf	211,0,c	;volatile
  5838                           
  5839                           ;main.c: 677: OSCCONbits.SCS1 = 1;
  5840  0014E4  82D3               	bsf	211,1,c	;volatile
  5841                           
  5842                           ;main.c: 678: OSCCONbits.IRCF = 0b111;
  5843  0014E6  0E70               	movlw	112
  5844  0014E8  12D3               	iorwf	211,f,c	;volatile
  5845                           
  5846                           ;main.c: 679: ADCON1bits.PCFG = 0b1111;
  5847  0014EA  0E0F               	movlw	15
  5848  0014EC  12C1               	iorwf	193,f,c	;volatile
  5849                           
  5850                           ;main.c: 681: PORTAbits.RA6 = 1;
  5851  0014EE  8C80               	bsf	128,6,c	;volatile
  5852                           
  5853                           ;main.c: 683: init_ds18b20();
  5854  0014F0  EC24  F00B         	call	_init_ds18b20	;wreg free
  5855                           
  5856                           ;main.c: 685: T1CON = 0b10000000;
  5857  0014F4  0E80               	movlw	128
  5858  0014F6  6ECD               	movwf	205,c	;volatile
  5859                           
  5860                           ;main.c: 687: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
  5861  0014F8  0E3C               	movlw	60
  5862  0014FA  6ECF               	movwf	207,c	;volatile
  5863                           
  5864                           ;main.c: 688: TMR1L = ((unsigned char)((15536)&0xFF));
  5865  0014FC  0EB0               	movlw	176
  5866  0014FE  6ECE               	movwf	206,c	;volatile
  5867                           
  5868                           ;main.c: 689: IPR1bits.TMR1IP = 1;
  5869  001500  809F               	bsf	159,0,c	;volatile
  5870                           
  5871                           ;main.c: 691: T0CONbits.T0PS = 0b000;
  5872  001502  0EF8               	movlw	-8
  5873  001504  16D5               	andwf	213,f,c	;volatile
  5874                           
  5875                           ;main.c: 692: T0CONbits.PSA = 1;
  5876  001506  86D5               	bsf	213,3,c	;volatile
  5877                           
  5878                           ;main.c: 693: T0CONbits.T08BIT = 0;
  5879  001508  9CD5               	bcf	213,6,c	;volatile
  5880                           
  5881                           ;main.c: 694: T0CONbits.T0CS = 0;
  5882  00150A  9AD5               	bcf	213,5,c	;volatile
  5883                           
  5884                           ;main.c: 695: T0CONbits.TMR0ON = 1;
  5885  00150C  8ED5               	bsf	213,7,c	;volatile
  5886                           
  5887                           ;main.c: 696: TMR0H = ((unsigned char)(((45536)>>8)&0xFF));
  5888  00150E  0EB1               	movlw	177
  5889  001510  6ED7               	movwf	215,c	;volatile
  5890                           
  5891                           ;main.c: 697: TMR0L = ((unsigned char)((45536)&0xFF));
  5892  001512  0EE0               	movlw	224
  5893  001514  6ED6               	movwf	214,c	;volatile
  5894                           
  5895                           ;main.c: 698: INTCONbits.T0IE = 1;
  5896  001516  8AF2               	bsf	242,5,c	;volatile
  5897                           
  5898                           ;main.c: 699: INTCON2bits.T0IP = 0;
  5899  001518  94F1               	bcf	241,2,c	;volatile
  5900                           
  5901                           ;main.c: 700: INTCON2bits.RBPU = 0;
  5902  00151A  9EF1               	bcf	241,7,c	;volatile
  5903                           
  5904                           ;main.c: 704: PIE1bits.TMR1IE = 1;
  5905  00151C  809D               	bsf	157,0,c	;volatile
  5906                           
  5907                           ;main.c: 705: RCONbits.IPEN = 1;
  5908  00151E  8ED0               	bsf	208,7,c	;volatile
  5909                           
  5910                           ;main.c: 706: INTCONbits.PEIE = 1;
  5911  001520  8CF2               	bsf	242,6,c	;volatile
  5912                           
  5913                           ;main.c: 707: INTCONbits.GIE = 1;
  5914  001522  8EF2               	bsf	242,7,c	;volatile
  5915                           
  5916                           ;main.c: 708: initLCD();
  5917  001524  ECE4  F008         	call	_initLCD	;wreg free
  5918                           
  5919                           ;main.c: 709: init_uart();
  5920  001528  EC9A  F00D         	call	_init_uart	;wreg free
  5921                           
  5922                           ;main.c: 710: cgrom_char(symbol_4, 1);
  5923  00152C  0EC5               	movlw	low _symbol_4
  5924  00152E  6E49               	movwf	cgrom_char@symbol^0,c
  5925  001530  0E1E               	movlw	high _symbol_4
  5926  001532  6E4A               	movwf	(cgrom_char@symbol+1)^0,c
  5927  001534  0E01               	movlw	1
  5928  001536  6E4B               	movwf	cgrom_char@address^0,c
  5929  001538  ECCA  F00C         	call	_cgrom_char	;wreg free
  5930                           
  5931                           ;main.c: 711: cgrom_char(symbol_5, 2);
  5932  00153C  0EBD               	movlw	low _symbol_5
  5933  00153E  6E49               	movwf	cgrom_char@symbol^0,c
  5934  001540  0E1E               	movlw	high _symbol_5
  5935  001542  6E4A               	movwf	(cgrom_char@symbol+1)^0,c
  5936  001544  0E02               	movlw	2
  5937  001546  6E4B               	movwf	cgrom_char@address^0,c
  5938  001548  ECCA  F00C         	call	_cgrom_char	;wreg free
  5939                           
  5940                           ;main.c: 712: LATCbits.LATC4 = 0;
  5941  00154C  988B               	bcf	139,4,c	;volatile
  5942                           
  5943                           ;main.c: 713: snd_k = 0;
  5944  00154E  9C65               	bcf	(_snd_k/(0+8))^0,_snd_k& (0+7),c
  5945                           
  5946                           ;main.c: 714: snd_b = 0;
  5947  001550  9A65               	bcf	(_snd_b/(0+8))^0,_snd_b& (0+7),c
  5948                           
  5949                           ;main.c: 715: snd_all = 0;
  5950  001552  9865               	bcf	(_snd_all/(0+8))^0,_snd_all& (0+7),c
  5951  001554  0012               	return		;funcret
  5952  001556                     __end_of_Main_init:
  5953                           	callstack 0
  5954                           
  5955 ;; *************** function _init_uart *****************
  5956 ;; Defined at:
  5957 ;;		line 28 in file "eusart.c"
  5958 ;; Parameters:    Size  Location     Type
  5959 ;;		None
  5960 ;; Auto vars:     Size  Location     Type
  5961 ;;		None
  5962 ;; Return value:  Size  Location     Type
  5963 ;;                  1    wreg      void 
  5964 ;; Registers used:
  5965 ;;		wreg, status,2
  5966 ;; Tracked objects:
  5967 ;;		On entry : 0/0
  5968 ;;		On exit  : 0/0
  5969 ;;		Unchanged: 0/0
  5970 ;; Data sizes:     COMRAM   BANK0   BANK1
  5971 ;;      Params:         0       0       0
  5972 ;;      Locals:         0       0       0
  5973 ;;      Temps:          0       0       0
  5974 ;;      Totals:         0       0       0
  5975 ;;Total ram usage:        0 bytes
  5976 ;; Hardware stack levels used: 1
  5977 ;; Hardware stack levels required when called: 2
  5978 ;; This function calls:
  5979 ;;		Nothing
  5980 ;; This function is called by:
  5981 ;;		_Main_init
  5982 ;; This function uses a non-reentrant model
  5983 ;;
  5984                           
  5985                           	psect	text22
  5986  001B34                     __ptext22:
  5987                           	callstack 0
  5988  001B34                     _init_uart:
  5989                           	callstack 27
  5990                           
  5991                           ;eusart.c: 30: TRISCbits.RC6 = 0;
  5992                           
  5993                           ;incstack = 0
  5994  001B34  9C94               	bcf	148,6,c	;volatile
  5995                           
  5996                           ;eusart.c: 31: TRISCbits.RC7 = 1;
  5997  001B36  8E94               	bsf	148,7,c	;volatile
  5998                           
  5999                           ;eusart.c: 32: TXSTAbits.SYNC = 0;
  6000  001B38  98AC               	bcf	172,4,c	;volatile
  6001                           
  6002                           ;eusart.c: 33: TXSTAbits.TXEN = 1;
  6003  001B3A  8AAC               	bsf	172,5,c	;volatile
  6004                           
  6005                           ;eusart.c: 34: RCSTAbits.CREN = 1;
  6006  001B3C  88AB               	bsf	171,4,c	;volatile
  6007                           
  6008                           ;eusart.c: 35: RCSTAbits.SPEN = 1;
  6009  001B3E  8EAB               	bsf	171,7,c	;volatile
  6010                           
  6011                           ;eusart.c: 38: TXSTAbits.BRGH = 1;
  6012  001B40  84AC               	bsf	172,2,c	;volatile
  6013                           
  6014                           ;eusart.c: 39: SPBRG = 0x33;
  6015  001B42  0E33               	movlw	51
  6016  001B44  6EAF               	movwf	175,c	;volatile
  6017                           
  6018                           ;eusart.c: 52: eusartTxHead = 0;
  6019  001B46  6A2D               	clrf	_eusartTxHead^0,c
  6020                           
  6021                           ;eusart.c: 57: eusartRxTail = 0;
  6022  001B48  0E10               	movlw	16
  6023  001B4A  6E2C               	movwf	_eusartTxBufferRemaining^0,c	;volatile
  6024                           
  6025                           ;eusart.c: 58: eusartRxCount = 0;
  6026  001B4C  6A2B               	clrf	_eusartRxCount^0,c	;volatile
  6027  001B4E  0012               	return		;funcret
  6028  001B50                     __end_of_init_uart:
  6029                           	callstack 0
  6030                           
  6031 ;; *************** function _init_ds18b20 *****************
  6032 ;; Defined at:
  6033 ;;		line 18 in file "ds18b20.c"
  6034 ;; Parameters:    Size  Location     Type
  6035 ;;		None
  6036 ;; Auto vars:     Size  Location     Type
  6037 ;;  i               1   12[COMRAM] unsigned char 
  6038 ;;  q               1   11[COMRAM] unsigned char 
  6039 ;; Return value:  Size  Location     Type
  6040 ;;                  1    wreg      void 
  6041 ;; Registers used:
  6042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6043 ;; Tracked objects:
  6044 ;;		On entry : 0/0
  6045 ;;		On exit  : 0/0
  6046 ;;		Unchanged: 0/0
  6047 ;; Data sizes:     COMRAM   BANK0   BANK1
  6048 ;;      Params:         0       0       0
  6049 ;;      Locals:         2       0       0
  6050 ;;      Temps:          2       0       0
  6051 ;;      Totals:         4       0       0
  6052 ;;Total ram usage:        4 bytes
  6053 ;; Hardware stack levels used: 1
  6054 ;; Hardware stack levels required when called: 4
  6055 ;; This function calls:
  6056 ;;		_ow_reset
  6057 ;;		_read_eep
  6058 ;;		_write_byte
  6059 ;; This function is called by:
  6060 ;;		_Main_init
  6061 ;; This function uses a non-reentrant model
  6062 ;;
  6063                           
  6064                           	psect	text23
  6065  001648                     __ptext23:
  6066                           	callstack 0
  6067  001648                     _init_ds18b20:
  6068                           	callstack 25
  6069                           
  6070                           ;ds18b20.c: 20: if (!ow_reset())
  6071                           
  6072                           ;incstack = 0
  6073  001648  ECE3  F00C         	call	_ow_reset	;wreg free
  6074  00164C  0900               	iorlw	0
  6075  00164E  E10F               	bnz	l2867
  6076                           
  6077                           ;ds18b20.c: 21: {;ds18b20.c: 23: write_byte(0xCC);
  6078  001650  0ECC               	movlw	204
  6079  001652  EC95  F00C         	call	_write_byte
  6080                           
  6081                           ;ds18b20.c: 24: write_byte(0x4E);
  6082  001656  0E4E               	movlw	78
  6083  001658  EC95  F00C         	call	_write_byte
  6084                           
  6085                           ;ds18b20.c: 25: write_byte(0x00);
  6086  00165C  0E00               	movlw	0
  6087  00165E  EC95  F00C         	call	_write_byte
  6088                           
  6089                           ;ds18b20.c: 26: write_byte(0x00);
  6090  001662  0E00               	movlw	0
  6091  001664  EC95  F00C         	call	_write_byte
  6092                           
  6093                           ;ds18b20.c: 27: write_byte(0x7F);
  6094  001668  0E7F               	movlw	127
  6095  00166A  EC95  F00C         	call	_write_byte
  6096  00166E                     l2867:
  6097                           
  6098                           ;ds18b20.c: 28: };ds18b20.c: 30: for (uint8_t q = 0; q < 2; q++) {
  6099  00166E  6A4D               	clrf	init_ds18b20@q^0,c
  6100  001670                     l409:
  6101                           
  6102                           ;ds18b20.c: 31: for (uint8_t i = 0; i < 8; i++) {
  6103  001670  6A4E               	clrf	init_ds18b20@i^0,c
  6104  001672                     l2877:
  6105                           
  6106                           ;ds18b20.c: 32: rom_dq[q][i] = read_eep((q*8) + i);
  6107  001672  504D               	movf	init_ds18b20@q^0,w,c
  6108  001674  0D08               	mullw	8
  6109  001676  50F3               	movf	243,w,c
  6110  001678  0F11               	addlw	low _rom_dq
  6111  00167A  244E               	addwf	init_ds18b20@i^0,w,c
  6112  00167C  6ED9               	movwf	fsr2l,c
  6113  00167E  6ADA               	clrf	fsr2h,c
  6114  001680  504D               	movf	init_ds18b20@q^0,w,c
  6115  001682  6E4B               	movwf	??_init_ds18b20^0,c
  6116  001684  6A4C               	clrf	(??_init_ds18b20+1)^0,c
  6117  001686  90D8               	bcf	status,0,c
  6118  001688  364B               	rlcf	??_init_ds18b20^0,f,c
  6119  00168A  364C               	rlcf	(??_init_ds18b20+1)^0,f,c
  6120  00168C  90D8               	bcf	status,0,c
  6121  00168E  364B               	rlcf	??_init_ds18b20^0,f,c
  6122  001690  364C               	rlcf	(??_init_ds18b20+1)^0,f,c
  6123  001692  90D8               	bcf	status,0,c
  6124  001694  364B               	rlcf	??_init_ds18b20^0,f,c
  6125  001696  364C               	rlcf	(??_init_ds18b20+1)^0,f,c
  6126  001698  504E               	movf	init_ds18b20@i^0,w,c
  6127  00169A  244B               	addwf	??_init_ds18b20^0,w,c
  6128  00169C  6E45               	movwf	read_eep@address^0,c
  6129  00169E  0E00               	movlw	0
  6130  0016A0  204C               	addwfc	(??_init_ds18b20+1)^0,w,c
  6131  0016A2  6E46               	movwf	(read_eep@address+1)^0,c
  6132  0016A4  ECC0  F00D         	call	_read_eep	;wreg free
  6133  0016A8  6EDF               	movwf	indf2,c
  6134  0016AA  2A4E               	incf	init_ds18b20@i^0,f,c
  6135  0016AC  0E07               	movlw	7
  6136  0016AE  644E               	cpfsgt	init_ds18b20@i^0,c
  6137  0016B0  D7E0               	goto	l2877
  6138  0016B2  2A4D               	incf	init_ds18b20@q^0,f,c
  6139  0016B4  0E01               	movlw	1
  6140  0016B6  644D               	cpfsgt	init_ds18b20@q^0,c
  6141  0016B8  D7DB               	goto	l409
  6142  0016BA  0C01               	retlw	1
  6143  0016BC                     __end_of_init_ds18b20:
  6144                           	callstack 0
  6145                           
  6146 ;; *************** function _write_byte *****************
  6147 ;; Defined at:
  6148 ;;		line 66 in file "onewire.c"
  6149 ;; Parameters:    Size  Location     Type
  6150 ;;  val             1    wreg     unsigned char 
  6151 ;; Auto vars:     Size  Location     Type
  6152 ;;  val             1    6[COMRAM] unsigned char 
  6153 ;;  i               1    8[COMRAM] unsigned char 
  6154 ;;  temp            1    7[COMRAM] unsigned char 
  6155 ;; Return value:  Size  Location     Type
  6156 ;;                  1    wreg      void 
  6157 ;; Registers used:
  6158 ;;		wreg, status,2, status,0, cstack
  6159 ;; Tracked objects:
  6160 ;;		On entry : 0/0
  6161 ;;		On exit  : 0/0
  6162 ;;		Unchanged: 0/0
  6163 ;; Data sizes:     COMRAM   BANK0   BANK1
  6164 ;;      Params:         0       0       0
  6165 ;;      Locals:         3       0       0
  6166 ;;      Temps:          2       0       0
  6167 ;;      Totals:         5       0       0
  6168 ;;Total ram usage:        5 bytes
  6169 ;; Hardware stack levels used: 1
  6170 ;; Hardware stack levels required when called: 3
  6171 ;; This function calls:
  6172 ;;		_write_bit
  6173 ;; This function is called by:
  6174 ;;		_init_ds18b20
  6175 ;;		_ds18b20_readTemp
  6176 ;;		_ds18b20_readrom
  6177 ;; This function uses a non-reentrant model
  6178 ;;
  6179                           
  6180                           	psect	text24
  6181  00192A                     __ptext24:
  6182                           	callstack 0
  6183  00192A                     _write_byte:
  6184                           	callstack 26
  6185                           
  6186                           ;incstack = 0
  6187                           ;write_byte@val stored from wreg
  6188  00192A  6E48               	movwf	write_byte@val^0,c
  6189                           
  6190                           ;onewire.c: 68: uint8_t i;;onewire.c: 69: uint8_t temp;;onewire.c: 71: for (i=0;i<8;i++)
  6191  00192C  6A4A               	clrf	write_byte@i^0,c
  6192  00192E                     l2793:
  6193                           
  6194                           ;onewire.c: 72: {;onewire.c: 73: temp = val >> i;
  6195  00192E  C04A  F046         	movff	write_byte@i,??_write_byte
  6196  001932  C048  F047         	movff	write_byte@val,??_write_byte+1
  6197  001936  2A46               	incf	??_write_byte^0,f,c
  6198  001938  D002               	goto	u1854
  6199  00193A                     u1855:
  6200  00193A  90D8               	bcf	status,0,c
  6201  00193C  3247               	rrcf	(??_write_byte+1)^0,f,c
  6202  00193E                     u1854:
  6203  00193E  2E46               	decfsz	??_write_byte^0,f,c
  6204  001940  D7FC               	goto	u1855
  6205  001942  5047               	movf	(??_write_byte+1)^0,w,c
  6206  001944  6E49               	movwf	write_byte@temp^0,c
  6207                           
  6208                           ;onewire.c: 74: temp &= 0x01;
  6209  001946  0E01               	movlw	1
  6210  001948  1649               	andwf	write_byte@temp^0,f,c
  6211                           
  6212                           ;onewire.c: 75: write_bit(temp);
  6213  00194A  5049               	movf	write_byte@temp^0,w,c
  6214  00194C  EC7D  F00D         	call	_write_bit
  6215  001950  2A4A               	incf	write_byte@i^0,f,c
  6216  001952  0E07               	movlw	7
  6217  001954  644A               	cpfsgt	write_byte@i^0,c
  6218  001956  D7EB               	goto	l2793
  6219                           
  6220                           ;onewire.c: 76: };onewire.c: 78: _delay((unsigned long)((105)*(8000000/4000000.0)));
  6221  001958  0E46               	movlw	70
  6222  00195A                     u3387:
  6223  00195A  2EE8               	decfsz	wreg,f,c
  6224  00195C  D7FE               	bra	u3387
  6225  00195E  0012               	return		;funcret
  6226  001960                     __end_of_write_byte:
  6227                           	callstack 0
  6228                           
  6229 ;; *************** function _write_bit *****************
  6230 ;; Defined at:
  6231 ;;		line 34 in file "onewire.c"
  6232 ;; Parameters:    Size  Location     Type
  6233 ;;  bitval          1    wreg     unsigned char 
  6234 ;; Auto vars:     Size  Location     Type
  6235 ;;  bitval          1    3[COMRAM] unsigned char 
  6236 ;; Return value:  Size  Location     Type
  6237 ;;                  1    wreg      void 
  6238 ;; Registers used:
  6239 ;;		wreg, status,2, status,0, cstack
  6240 ;; Tracked objects:
  6241 ;;		On entry : 0/0
  6242 ;;		On exit  : 0/0
  6243 ;;		Unchanged: 0/0
  6244 ;; Data sizes:     COMRAM   BANK0   BANK1
  6245 ;;      Params:         0       0       0
  6246 ;;      Locals:         1       0       0
  6247 ;;      Temps:          0       0       0
  6248 ;;      Totals:         1       0       0
  6249 ;;Total ram usage:        1 bytes
  6250 ;; Hardware stack levels used: 1
  6251 ;; Hardware stack levels required when called: 2
  6252 ;; This function calls:
  6253 ;;		Nothing
  6254 ;; This function is called by:
  6255 ;;		_write_byte
  6256 ;; This function uses a non-reentrant model
  6257 ;;
  6258                           
  6259                           	psect	text25
  6260  001AFA                     __ptext25:
  6261                           	callstack 0
  6262  001AFA                     _write_bit:
  6263                           	callstack 26
  6264                           
  6265                           ;incstack = 0
  6266                           ;write_bit@bitval stored from wreg
  6267  001AFA  6E45               	movwf	write_bit@bitval^0,c
  6268                           
  6269                           ;onewire.c: 36: PORTAbits.RA6 = 0;
  6270  001AFC  9C80               	bcf	128,6,c	;volatile
  6271                           
  6272                           ;onewire.c: 37: TRISAbits.TRISA6 = 0;
  6273  001AFE  9C92               	bcf	146,6,c	;volatile
  6274                           
  6275                           ;onewire.c: 38: if(bitval == 1) {
  6276  001B00  0445               	decf	write_bit@bitval^0,w,c
  6277  001B02  E104               	bnz	l2759
  6278                           
  6279                           ;onewire.c: 39: _delay((unsigned long)((2)*(8000000/4000000.0)));
  6280  001B04  D000               	nop2		;2 cycle nop
  6281  001B06  D000               	nop2		;2 cycle nop
  6282                           
  6283                           ;onewire.c: 40: PORTAbits.RA6 = 1;
  6284  001B08  8C80               	bsf	128,6,c	;volatile
  6285                           
  6286                           ;onewire.c: 41: TRISAbits.TRISA6 = 1;
  6287  001B0A  8C92               	bsf	146,6,c	;volatile
  6288  001B0C                     l2759:
  6289                           
  6290                           ;onewire.c: 42: };onewire.c: 43: _delay((unsigned long)((105)*(8000000/4000000.0)));
  6291  001B0C  0E46               	movlw	70
  6292  001B0E                     u3397:
  6293  001B0E  2EE8               	decfsz	wreg,f,c
  6294  001B10  D7FE               	bra	u3397
  6295                           
  6296                           ;onewire.c: 44: PORTAbits.RA6 = 1;
  6297  001B12  8C80               	bsf	128,6,c	;volatile
  6298                           
  6299                           ;onewire.c: 45: TRISAbits.TRISA6 = 1;
  6300  001B14  8C92               	bsf	146,6,c	;volatile
  6301  001B16  0012               	return		;funcret
  6302  001B18                     __end_of_write_bit:
  6303                           	callstack 0
  6304                           
  6305 ;; *************** function _read_eep *****************
  6306 ;; Defined at:
  6307 ;;		line 25 in file "eeprom.c"
  6308 ;; Parameters:    Size  Location     Type
  6309 ;;  address         2    3[COMRAM] unsigned short 
  6310 ;; Auto vars:     Size  Location     Type
  6311 ;;		None
  6312 ;; Return value:  Size  Location     Type
  6313 ;;                  1    wreg      unsigned char 
  6314 ;; Registers used:
  6315 ;;		wreg, status,2
  6316 ;; Tracked objects:
  6317 ;;		On entry : 0/0
  6318 ;;		On exit  : 0/0
  6319 ;;		Unchanged: 0/0
  6320 ;; Data sizes:     COMRAM   BANK0   BANK1
  6321 ;;      Params:         2       0       0
  6322 ;;      Locals:         0       0       0
  6323 ;;      Temps:          0       0       0
  6324 ;;      Totals:         2       0       0
  6325 ;;Total ram usage:        2 bytes
  6326 ;; Hardware stack levels used: 1
  6327 ;; Hardware stack levels required when called: 2
  6328 ;; This function calls:
  6329 ;;		Nothing
  6330 ;; This function is called by:
  6331 ;;		_main
  6332 ;;		_outValPreset
  6333 ;;		_init_ds18b20
  6334 ;; This function uses a non-reentrant model
  6335 ;;
  6336                           
  6337                           	psect	text26
  6338  001B80                     __ptext26:
  6339                           	callstack 0
  6340  001B80                     _read_eep:
  6341                           	callstack 28
  6342                           
  6343                           ;eeprom.c: 28: {}
  6344                           
  6345                           ;incstack = 0
  6346  001B80  B2A6               	btfsc	166,1,c	;volsfr
  6347  001B82  D7FE               	goto	__ptext26
  6348                           
  6349                           ;eeprom.c: 30: EEADR = address;
  6350  001B84  C045  FFA9         	movff	read_eep@address,4009	;volatile
  6351                           
  6352                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
  6353  001B88  9EA6               	bcf	166,7,c	;volsfr
  6354                           
  6355                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
  6356  001B8A  9CA6               	bcf	166,6,c	;volsfr
  6357                           
  6358                           ;eeprom.c: 33: EECON1bits.RD = 1;
  6359  001B8C  80A6               	bsf	166,0,c	;volsfr
  6360                           
  6361                           ;eeprom.c: 34: return( EEDATA );
  6362  001B8E  50A8               	movf	168,w,c	;volatile
  6363  001B90  0012               	return		;funcret
  6364  001B92                     __end_of_read_eep:
  6365                           	callstack 0
  6366                           
  6367 ;; *************** function _ow_reset *****************
  6368 ;; Defined at:
  6369 ;;		line 5 in file "onewire.c"
  6370 ;; Parameters:    Size  Location     Type
  6371 ;;		None
  6372 ;; Auto vars:     Size  Location     Type
  6373 ;;  presence        1    3[COMRAM] unsigned char 
  6374 ;; Return value:  Size  Location     Type
  6375 ;;                  1    wreg      unsigned char 
  6376 ;; Registers used:
  6377 ;;		wreg, status,2
  6378 ;; Tracked objects:
  6379 ;;		On entry : 0/0
  6380 ;;		On exit  : 0/0
  6381 ;;		Unchanged: 0/0
  6382 ;; Data sizes:     COMRAM   BANK0   BANK1
  6383 ;;      Params:         0       0       0
  6384 ;;      Locals:         1       0       0
  6385 ;;      Temps:          0       0       0
  6386 ;;      Totals:         1       0       0
  6387 ;;Total ram usage:        1 bytes
  6388 ;; Hardware stack levels used: 1
  6389 ;; Hardware stack levels required when called: 2
  6390 ;; This function calls:
  6391 ;;		Nothing
  6392 ;; This function is called by:
  6393 ;;		_init_ds18b20
  6394 ;;		_ds18b20_readTemp
  6395 ;;		_ds18b20_readrom
  6396 ;; This function uses a non-reentrant model
  6397 ;;
  6398                           
  6399                           	psect	text27
  6400  0019C6                     __ptext27:
  6401                           	callstack 0
  6402  0019C6                     _ow_reset:
  6403                           	callstack 27
  6404                           
  6405                           ;onewire.c: 7: uint8_t presence;;onewire.c: 8: PORTAbits.RA6 = 0;
  6406                           
  6407                           ;incstack = 0
  6408  0019C6  9C80               	bcf	128,6,c	;volatile
  6409                           
  6410                           ;onewire.c: 9: TRISAbits.TRISA6 = 0;
  6411  0019C8  9C92               	bcf	146,6,c	;volatile
  6412                           
  6413                           ;onewire.c: 10: _delay((unsigned long)((500)*(8000000/4000000.0)));
  6414  0019CA  0EC8               	movlw	200
  6415  0019CC                     u3407:
  6416  0019CC  D000               	nop2	
  6417  0019CE  2EE8               	decfsz	wreg,f,c
  6418  0019D0  D7FD               	bra	u3407
  6419                           
  6420                           ;onewire.c: 11: PORTAbits.RA6 = 1;
  6421  0019D2  8C80               	bsf	128,6,c	;volatile
  6422                           
  6423                           ;onewire.c: 12: TRISAbits.TRISA6 = 1;
  6424  0019D4  8C92               	bsf	146,6,c	;volatile
  6425                           
  6426                           ;onewire.c: 13: _delay((unsigned long)((100)*(8000000/4000000.0)));
  6427  0019D6  0E42               	movlw	66
  6428  0019D8                     u3417:
  6429  0019D8  2EE8               	decfsz	wreg,f,c
  6430  0019DA  D7FE               	bra	u3417
  6431  0019DC  D000               	nop2	
  6432                           
  6433                           ;onewire.c: 14: presence = PORTAbits.RA6;
  6434  0019DE  0E00               	movlw	0
  6435  0019E0  BC80               	btfsc	128,6,c	;volatile
  6436  0019E2  0E01               	movlw	1
  6437  0019E4  6E45               	movwf	ow_reset@presence^0,c
  6438                           
  6439                           ;onewire.c: 15: _delay((unsigned long)((424)*(8000000/4000000.0)));
  6440  0019E6  0EA9               	movlw	169
  6441  0019E8                     u3427:
  6442  0019E8  D000               	nop2	
  6443  0019EA  2EE8               	decfsz	wreg,f,c
  6444  0019EC  D7FD               	bra	u3427
  6445  0019EE  D000               	nop2	
  6446  0019F0  F000               	nop	
  6447                           
  6448                           ;onewire.c: 16: return(presence);
  6449  0019F2  5045               	movf	ow_reset@presence^0,w,c
  6450  0019F4  0012               	return		;funcret
  6451  0019F6                     __end_of_ow_reset:
  6452                           	callstack 0
  6453                           
  6454 ;; *************** function _initLCD *****************
  6455 ;; Defined at:
  6456 ;;		line 10 in file "hd44780.c"
  6457 ;; Parameters:    Size  Location     Type
  6458 ;;		None
  6459 ;; Auto vars:     Size  Location     Type
  6460 ;;		None
  6461 ;; Return value:  Size  Location     Type
  6462 ;;                  1    wreg      void 
  6463 ;; Registers used:
  6464 ;;		wreg, status,2, status,0, cstack
  6465 ;; Tracked objects:
  6466 ;;		On entry : 0/0
  6467 ;;		On exit  : 0/0
  6468 ;;		Unchanged: 0/0
  6469 ;; Data sizes:     COMRAM   BANK0   BANK1
  6470 ;;      Params:         0       0       0
  6471 ;;      Locals:         0       0       0
  6472 ;;      Temps:          1       0       0
  6473 ;;      Totals:         1       0       0
  6474 ;;Total ram usage:        1 bytes
  6475 ;; Hardware stack levels used: 1
  6476 ;; Hardware stack levels required when called: 5
  6477 ;; This function calls:
  6478 ;;		_clearLCD
  6479 ;;		_lcdNibble
  6480 ;;		_lcdWrite
  6481 ;; This function is called by:
  6482 ;;		_Main_init
  6483 ;; This function uses a non-reentrant model
  6484 ;;
  6485                           
  6486                           	psect	text28
  6487  0011C8                     __ptext28:
  6488                           	callstack 0
  6489  0011C8                     _initLCD:
  6490                           	callstack 24
  6491                           
  6492                           ;hd44780.c: 11: LATAbits.LATA2 = 0;
  6493                           
  6494                           ;incstack = 0
  6495  0011C8  9489               	bcf	137,2,c	;volatile
  6496                           
  6497                           ;hd44780.c: 12: LATAbits.LATA1 = 0;
  6498  0011CA  9289               	bcf	137,1,c	;volatile
  6499                           
  6500                           ;hd44780.c: 14: _delay((unsigned long)((10)*(8000000/4000.0)));
  6501  0011CC  0E1A               	movlw	26
  6502  0011CE  6E4A               	movwf	??_initLCD^0,c
  6503  0011D0  0EF8               	movlw	248
  6504  0011D2                     u3437:
  6505  0011D2  2EE8               	decfsz	wreg,f,c
  6506  0011D4  D7FE               	bra	u3437
  6507  0011D6  2E4A               	decfsz	??_initLCD^0,f,c
  6508  0011D8  D7FC               	bra	u3437
  6509  0011DA  D000               	nop2	
  6510                           
  6511                           ;hd44780.c: 15: _delay((unsigned long)((10)*(8000000/4000.0)));
  6512  0011DC  0E1A               	movlw	26
  6513  0011DE  6E4A               	movwf	??_initLCD^0,c
  6514  0011E0  0EF8               	movlw	248
  6515  0011E2                     u3447:
  6516  0011E2  2EE8               	decfsz	wreg,f,c
  6517  0011E4  D7FE               	bra	u3447
  6518  0011E6  2E4A               	decfsz	??_initLCD^0,f,c
  6519  0011E8  D7FC               	bra	u3447
  6520  0011EA  D000               	nop2	
  6521                           
  6522                           ;hd44780.c: 16: _delay((unsigned long)((10)*(8000000/4000.0)));
  6523  0011EC  0E1A               	movlw	26
  6524  0011EE  6E4A               	movwf	??_initLCD^0,c
  6525  0011F0  0EF8               	movlw	248
  6526  0011F2                     u3457:
  6527  0011F2  2EE8               	decfsz	wreg,f,c
  6528  0011F4  D7FE               	bra	u3457
  6529  0011F6  2E4A               	decfsz	??_initLCD^0,f,c
  6530  0011F8  D7FC               	bra	u3457
  6531  0011FA  D000               	nop2	
  6532                           
  6533                           ;hd44780.c: 17: _delay((unsigned long)((10)*(8000000/4000.0)));
  6534  0011FC  0E1A               	movlw	26
  6535  0011FE  6E4A               	movwf	??_initLCD^0,c
  6536  001200  0EF8               	movlw	248
  6537  001202                     u3467:
  6538  001202  2EE8               	decfsz	wreg,f,c
  6539  001204  D7FE               	bra	u3467
  6540  001206  2E4A               	decfsz	??_initLCD^0,f,c
  6541  001208  D7FC               	bra	u3467
  6542  00120A  D000               	nop2	
  6543                           
  6544                           ;hd44780.c: 21: lcdNibble(0b0011);
  6545  00120C  0E03               	movlw	3
  6546  00120E  ECAB  F00A         	call	_lcdNibble
  6547                           
  6548                           ;hd44780.c: 22: _delay((unsigned long)((5)*(8000000/4000.0)));
  6549  001212  0E0D               	movlw	13
  6550  001214  6E4A               	movwf	??_initLCD^0,c
  6551  001216  0EFC               	movlw	252
  6552  001218                     u3477:
  6553  001218  2EE8               	decfsz	wreg,f,c
  6554  00121A  D7FE               	bra	u3477
  6555  00121C  2E4A               	decfsz	??_initLCD^0,f,c
  6556  00121E  D7FC               	bra	u3477
  6557                           
  6558                           ;hd44780.c: 23: lcdNibble(0b0011);
  6559  001220  0E03               	movlw	3
  6560  001222  ECAB  F00A         	call	_lcdNibble
  6561                           
  6562                           ;hd44780.c: 24: _delay((unsigned long)((5)*(8000000/4000.0)));
  6563  001226  0E0D               	movlw	13
  6564  001228  6E4A               	movwf	??_initLCD^0,c
  6565  00122A  0EFC               	movlw	252
  6566  00122C                     u3487:
  6567  00122C  2EE8               	decfsz	wreg,f,c
  6568  00122E  D7FE               	bra	u3487
  6569  001230  2E4A               	decfsz	??_initLCD^0,f,c
  6570  001232  D7FC               	bra	u3487
  6571                           
  6572                           ;hd44780.c: 25: lcdNibble(0b0011);
  6573  001234  0E03               	movlw	3
  6574  001236  ECAB  F00A         	call	_lcdNibble
  6575                           
  6576                           ;hd44780.c: 26: _delay((unsigned long)((5)*(8000000/4000.0)));
  6577  00123A  0E0D               	movlw	13
  6578  00123C  6E4A               	movwf	??_initLCD^0,c
  6579  00123E  0EFC               	movlw	252
  6580  001240                     u3497:
  6581  001240  2EE8               	decfsz	wreg,f,c
  6582  001242  D7FE               	bra	u3497
  6583  001244  2E4A               	decfsz	??_initLCD^0,f,c
  6584  001246  D7FC               	bra	u3497
  6585                           
  6586                           ;hd44780.c: 27: lcdNibble(0b0010);
  6587  001248  0E02               	movlw	2
  6588  00124A  ECAB  F00A         	call	_lcdNibble
  6589                           
  6590                           ;hd44780.c: 28: _delay((unsigned long)((5)*(8000000/4000.0)));
  6591  00124E  0E0D               	movlw	13
  6592  001250  6E4A               	movwf	??_initLCD^0,c
  6593  001252  0EFC               	movlw	252
  6594  001254                     u3507:
  6595  001254  2EE8               	decfsz	wreg,f,c
  6596  001256  D7FE               	bra	u3507
  6597  001258  2E4A               	decfsz	??_initLCD^0,f,c
  6598  00125A  D7FC               	bra	u3507
  6599                           
  6600                           ;hd44780.c: 31: lcdWrite(((0b0010 << 4) | (1 << 3)), COMMAND);
  6601  00125C  0E00               	movlw	0
  6602  00125E  6E47               	movwf	lcdWrite@type^0,c
  6603  001260  0E28               	movlw	40
  6604  001262  EC4A  F00D         	call	_lcdWrite
  6605                           
  6606                           ;hd44780.c: 32: _delay((unsigned long)((5)*(8000000/4000.0)));
  6607  001266  0E0D               	movlw	13
  6608  001268  6E4A               	movwf	??_initLCD^0,c
  6609  00126A  0EFC               	movlw	252
  6610  00126C                     u3517:
  6611  00126C  2EE8               	decfsz	wreg,f,c
  6612  00126E  D7FE               	bra	u3517
  6613  001270  2E4A               	decfsz	??_initLCD^0,f,c
  6614  001272  D7FC               	bra	u3517
  6615                           
  6616                           ;hd44780.c: 33: lcdWrite(((0b1100) | (0 << 1) | (0 << 0)), COMMAND);
  6617  001274  0E00               	movlw	0
  6618  001276  6E47               	movwf	lcdWrite@type^0,c
  6619  001278  0E0C               	movlw	12
  6620  00127A  EC4A  F00D         	call	_lcdWrite
  6621                           
  6622                           ;hd44780.c: 34: _delay((unsigned long)((8)*(8000000/4000.0)));
  6623  00127E  0E15               	movlw	21
  6624  001280  6E4A               	movwf	??_initLCD^0,c
  6625  001282  0EC6               	movlw	198
  6626  001284                     u3527:
  6627  001284  2EE8               	decfsz	wreg,f,c
  6628  001286  D7FE               	bra	u3527
  6629  001288  2E4A               	decfsz	??_initLCD^0,f,c
  6630  00128A  D7FC               	bra	u3527
  6631  00128C  D000               	nop2	
  6632                           
  6633                           ;hd44780.c: 35: clearLCD();
  6634  00128E  ECA8  F00D         	call	_clearLCD	;wreg free
  6635                           
  6636                           ;hd44780.c: 36: _delay((unsigned long)((5)*(8000000/4000.0)));
  6637  001292  0E0D               	movlw	13
  6638  001294  6E4A               	movwf	??_initLCD^0,c
  6639  001296  0EFC               	movlw	252
  6640  001298                     u3537:
  6641  001298  2EE8               	decfsz	wreg,f,c
  6642  00129A  D7FE               	bra	u3537
  6643  00129C  2E4A               	decfsz	??_initLCD^0,f,c
  6644  00129E  D7FC               	bra	u3537
  6645                           
  6646                           ;hd44780.c: 37: lcdWrite(0x06, COMMAND);
  6647  0012A0  0E00               	movlw	0
  6648  0012A2  6E47               	movwf	lcdWrite@type^0,c
  6649  0012A4  0E06               	movlw	6
  6650  0012A6  EC4A  F00D         	call	_lcdWrite
  6651                           
  6652                           ;hd44780.c: 38: _delay((unsigned long)((5)*(8000000/4000.0)));
  6653  0012AA  0E0D               	movlw	13
  6654  0012AC  6E4A               	movwf	??_initLCD^0,c
  6655  0012AE  0EFC               	movlw	252
  6656  0012B0                     u3547:
  6657  0012B0  2EE8               	decfsz	wreg,f,c
  6658  0012B2  D7FE               	bra	u3547
  6659  0012B4  2E4A               	decfsz	??_initLCD^0,f,c
  6660  0012B6  D7FC               	bra	u3547
  6661                           
  6662                           ;hd44780.c: 39: clearLCD();
  6663  0012B8  ECA8  F00D         	call	_clearLCD	;wreg free
  6664                           
  6665                           ;hd44780.c: 41: LATAbits.LATA2 = 1;
  6666  0012BC  8489               	bsf	137,2,c	;volatile
  6667  0012BE  0012               	return		;funcret
  6668  0012C0                     __end_of_initLCD:
  6669                           	callstack 0
  6670                           
  6671 ;; *************** function _clearLCD *****************
  6672 ;; Defined at:
  6673 ;;		line 45 in file "hd44780.c"
  6674 ;; Parameters:    Size  Location     Type
  6675 ;;		None
  6676 ;; Auto vars:     Size  Location     Type
  6677 ;;		None
  6678 ;; Return value:  Size  Location     Type
  6679 ;;                  1    wreg      void 
  6680 ;; Registers used:
  6681 ;;		wreg, status,2, status,0, cstack
  6682 ;; Tracked objects:
  6683 ;;		On entry : 0/0
  6684 ;;		On exit  : 0/0
  6685 ;;		Unchanged: 0/0
  6686 ;; Data sizes:     COMRAM   BANK0   BANK1
  6687 ;;      Params:         0       0       0
  6688 ;;      Locals:         0       0       0
  6689 ;;      Temps:          1       0       0
  6690 ;;      Totals:         1       0       0
  6691 ;;Total ram usage:        1 bytes
  6692 ;; Hardware stack levels used: 1
  6693 ;; Hardware stack levels required when called: 4
  6694 ;; This function calls:
  6695 ;;		_lcdWrite
  6696 ;; This function is called by:
  6697 ;;		_main
  6698 ;;		_initLCD
  6699 ;; This function uses a non-reentrant model
  6700 ;;
  6701                           
  6702                           	psect	text29
  6703  001B50                     __ptext29:
  6704                           	callstack 0
  6705  001B50                     _clearLCD:
  6706                           	callstack 0
  6707                           
  6708                           ;hd44780.c: 46: lcdWrite(0x01, COMMAND);
  6709                           
  6710                           ;incstack = 0
  6711  001B50  EC1F  F00A         	call	PL80	;call to abstracted procedure
  6712  001B54  EC4A  F00D         	call	_lcdWrite
  6713                           
  6714                           ;hd44780.c: 47: _delay((unsigned long)((2)*(8000000/4000.0)));
  6715  001B58  0E06               	movlw	6
  6716  001B5A  6E49               	movwf	??_clearLCD^0,c
  6717  001B5C  0E30               	movlw	48
  6718  001B5E                     u3557:
  6719  001B5E  2EE8               	decfsz	wreg,f,c
  6720  001B60  D7FE               	bra	u3557
  6721  001B62  2E49               	decfsz	??_clearLCD^0,f,c
  6722  001B64  D7FC               	bra	u3557
  6723  001B66  D000               	nop2	
  6724  001B68  0012               	return		;funcret
  6725  001B6A                     __end_of_clearLCD:
  6726                           	callstack 0
  6727                           
  6728 ;; *************** function _cgrom_char *****************
  6729 ;; Defined at:
  6730 ;;		line 127 in file "hd44780.c"
  6731 ;; Parameters:    Size  Location     Type
  6732 ;;  symbol          2    7[COMRAM] PTR unsigned char 
  6733 ;;		 -> symbol_5(8), symbol_4(8), 
  6734 ;;  address         1    9[COMRAM] unsigned char 
  6735 ;; Auto vars:     Size  Location     Type
  6736 ;;  i               1   10[COMRAM] unsigned char 
  6737 ;; Return value:  Size  Location     Type
  6738 ;;                  1    wreg      void 
  6739 ;; Registers used:
  6740 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6741 ;; Tracked objects:
  6742 ;;		On entry : 0/0
  6743 ;;		On exit  : 0/0
  6744 ;;		Unchanged: 0/0
  6745 ;; Data sizes:     COMRAM   BANK0   BANK1
  6746 ;;      Params:         3       0       0
  6747 ;;      Locals:         1       0       0
  6748 ;;      Temps:          0       0       0
  6749 ;;      Totals:         4       0       0
  6750 ;;Total ram usage:        4 bytes
  6751 ;; Hardware stack levels used: 1
  6752 ;; Hardware stack levels required when called: 4
  6753 ;; This function calls:
  6754 ;;		_lcdWrite
  6755 ;; This function is called by:
  6756 ;;		_Main_init
  6757 ;; This function uses a non-reentrant model
  6758 ;;
  6759                           
  6760                           	psect	text30
  6761  001994                     __ptext30:
  6762                           	callstack 0
  6763  001994                     _cgrom_char:
  6764                           	callstack 25
  6765                           
  6766                           ;hd44780.c: 128: uint8_t i;;hd44780.c: 129: lcdWrite(0x40 | (address * 8), COMMAND);
  6767                           
  6768                           ;incstack = 0
  6769  001994  6A47               	clrf	lcdWrite@type^0,c
  6770  001996  504B               	movf	cgrom_char@address^0,w,c
  6771  001998  0D08               	mullw	8
  6772  00199A  50F3               	movf	243,w,c
  6773  00199C  0940               	iorlw	64
  6774  00199E  EC4A  F00D         	call	_lcdWrite
  6775                           
  6776                           ;hd44780.c: 130: for (i = 0; i < 8; i++)
  6777  0019A2  6A4C               	clrf	cgrom_char@i^0,c
  6778  0019A4                     l2933:
  6779                           
  6780                           ;hd44780.c: 131: lcdWrite(*symbol++, DATA);
  6781  0019A4  0E01               	movlw	1
  6782  0019A6  6E47               	movwf	lcdWrite@type^0,c
  6783  0019A8  C049  FFF6         	movff	cgrom_char@symbol,tblptrl
  6784  0019AC  C04A  FFF7         	movff	cgrom_char@symbol+1,tblptrh
  6785  0019B0                     	if	0	;tblptru may be non-zero
  6786  0019B0                     	endif
  6787  0019B0                     	if	0	;tblptru may be non-zero
  6788  0019B0                     	endif
  6789  0019B0  0008               	tblrd		*
  6790  0019B2  50F5               	movf	tablat,w,c
  6791  0019B4  EC4A  F00D         	call	_lcdWrite
  6792  0019B8  4A49               	infsnz	cgrom_char@symbol^0,f,c
  6793  0019BA  2A4A               	incf	(cgrom_char@symbol+1)^0,f,c
  6794  0019BC  2A4C               	incf	cgrom_char@i^0,f,c
  6795  0019BE  0E07               	movlw	7
  6796  0019C0  644C               	cpfsgt	cgrom_char@i^0,c
  6797  0019C2  D7F0               	goto	l2933
  6798  0019C4  0C07               	retlw	7
  6799  0019C6                     __end_of_cgrom_char:
  6800                           	callstack 0
  6801                           
  6802 ;; *************** function _lcdWrite *****************
  6803 ;; Defined at:
  6804 ;;		line 50 in file "hd44780.c"
  6805 ;; Parameters:    Size  Location     Type
  6806 ;;  byte            1    wreg     unsigned char 
  6807 ;;  type            1    5[COMRAM] enum E2035
  6808 ;; Auto vars:     Size  Location     Type
  6809 ;;  byte            1    6[COMRAM] unsigned char 
  6810 ;; Return value:  Size  Location     Type
  6811 ;;                  1    wreg      void 
  6812 ;; Registers used:
  6813 ;;		wreg, status,2, status,0, cstack
  6814 ;; Tracked objects:
  6815 ;;		On entry : 0/0
  6816 ;;		On exit  : 0/0
  6817 ;;		Unchanged: 0/0
  6818 ;; Data sizes:     COMRAM   BANK0   BANK1
  6819 ;;      Params:         1       0       0
  6820 ;;      Locals:         1       0       0
  6821 ;;      Temps:          0       0       0
  6822 ;;      Totals:         2       0       0
  6823 ;;Total ram usage:        2 bytes
  6824 ;; Hardware stack levels used: 1
  6825 ;; Hardware stack levels required when called: 3
  6826 ;; This function calls:
  6827 ;;		_lcdNibble
  6828 ;; This function is called by:
  6829 ;;		_initLCD
  6830 ;;		_clearLCD
  6831 ;;		_lcd_gotoxy
  6832 ;;		_lcd_putc
  6833 ;;		_lcdPrint
  6834 ;;		_cgrom_char
  6835 ;; This function uses a non-reentrant model
  6836 ;;
  6837                           
  6838                           	psect	text31
  6839  001A94                     __ptext31:
  6840                           	callstack 0
  6841  001A94                     _lcdWrite:
  6842                           	callstack 25
  6843                           
  6844                           ;incstack = 0
  6845                           ;lcdWrite@byte stored from wreg
  6846  001A94  6E48               	movwf	lcdWrite@byte^0,c
  6847                           
  6848                           ;hd44780.c: 51: if (type == COMMAND)
  6849  001A96  5047               	movf	lcdWrite@type^0,w,c
  6850  001A98  E102               	bnz	l479
  6851                           
  6852                           ;hd44780.c: 52: LATAbits.LATA2 = 0;
  6853  001A9A  9489               	bcf	137,2,c	;volatile
  6854  001A9C  D001               	goto	l2747
  6855  001A9E                     l479:
  6856                           
  6857                           ;hd44780.c: 53: else;hd44780.c: 54: LATAbits.LATA2 = 1;
  6858  001A9E  8489               	bsf	137,2,c	;volatile
  6859  001AA0                     l2747:
  6860                           
  6861                           ;hd44780.c: 56: _delay((unsigned long)((100)*(8000000/4000000.0)));
  6862  001AA0  0E42               	movlw	66
  6863  001AA2                     u3567:
  6864  001AA2  2EE8               	decfsz	wreg,f,c
  6865  001AA4  D7FE               	bra	u3567
  6866  001AA6  D000               	nop2	
  6867                           
  6868                           ;hd44780.c: 58: lcdNibble(byte >> 4);
  6869  001AA8  3848               	swapf	lcdWrite@byte^0,w,c
  6870  001AAA  0B0F               	andlw	15
  6871  001AAC  ECAB  F00A         	call	_lcdNibble
  6872                           
  6873                           ;hd44780.c: 59: lcdNibble(byte & 0x0F);
  6874  001AB0  5048               	movf	lcdWrite@byte^0,w,c
  6875  001AB2  0B0F               	andlw	15
  6876  001AB4  EFAB  F00A         	goto	_lcdNibble
  6877  001AB8                     __end_of_lcdWrite:
  6878                           	callstack 0
  6879                           
  6880 ;; *************** function _lcdNibble *****************
  6881 ;; Defined at:
  6882 ;;		line 63 in file "hd44780.c"
  6883 ;; Parameters:    Size  Location     Type
  6884 ;;  nibble          1    wreg     unsigned char 
  6885 ;; Auto vars:     Size  Location     Type
  6886 ;;  nibble          1    4[COMRAM] unsigned char 
  6887 ;; Return value:  Size  Location     Type
  6888 ;;                  1    wreg      void 
  6889 ;; Registers used:
  6890 ;;		wreg, status,2, status,0
  6891 ;; Tracked objects:
  6892 ;;		On entry : 0/0
  6893 ;;		On exit  : 0/0
  6894 ;;		Unchanged: 0/0
  6895 ;; Data sizes:     COMRAM   BANK0   BANK1
  6896 ;;      Params:         0       0       0
  6897 ;;      Locals:         1       0       0
  6898 ;;      Temps:          1       0       0
  6899 ;;      Totals:         2       0       0
  6900 ;;Total ram usage:        2 bytes
  6901 ;; Hardware stack levels used: 1
  6902 ;; Hardware stack levels required when called: 2
  6903 ;; This function calls:
  6904 ;;		Nothing
  6905 ;; This function is called by:
  6906 ;;		_initLCD
  6907 ;;		_lcdWrite
  6908 ;; This function uses a non-reentrant model
  6909 ;;
  6910                           
  6911                           	psect	text32
  6912  001556                     __ptext32:
  6913                           	callstack 0
  6914  001556                     _lcdNibble:
  6915                           	callstack 25
  6916                           
  6917                           ;incstack = 0
  6918                           ;lcdNibble@nibble stored from wreg
  6919  001556  6E46               	movwf	lcdNibble@nibble^0,c
  6920                           
  6921                           ;hd44780.c: 64: LATCbits.LATC0 = (nibble & 0x01) ? 1 : 0;
  6922  001558  A046               	btfss	lcdNibble@nibble^0,0,c
  6923  00155A  D003               	goto	u1740
  6924  00155C  6A45               	clrf	??_lcdNibble^0,c
  6925  00155E  2A45               	incf	??_lcdNibble^0,f,c
  6926  001560  D001               	goto	u1758
  6927  001562                     u1740:
  6928  001562  6A45               	clrf	??_lcdNibble^0,c
  6929  001564                     u1758:
  6930  001564  508B               	movf	139,w,c	;volatile
  6931  001566  1845               	xorwf	??_lcdNibble^0,w,c
  6932  001568  0BFE               	andlw	-2
  6933  00156A  1845               	xorwf	??_lcdNibble^0,w,c
  6934  00156C  6E8B               	movwf	139,c	;volatile
  6935                           
  6936                           ;hd44780.c: 65: LATCbits.LATC1 = (nibble & 0x02) ? 1 : 0;
  6937  00156E  A246               	btfss	lcdNibble@nibble^0,1,c
  6938  001570  D003               	goto	u1760
  6939  001572  6A45               	clrf	??_lcdNibble^0,c
  6940  001574  2A45               	incf	??_lcdNibble^0,f,c
  6941  001576  D001               	goto	u1778
  6942  001578                     u1760:
  6943  001578  6A45               	clrf	??_lcdNibble^0,c
  6944  00157A                     u1778:
  6945  00157A  4645               	rlncf	??_lcdNibble^0,f,c
  6946  00157C  508B               	movf	139,w,c	;volatile
  6947  00157E  1845               	xorwf	??_lcdNibble^0,w,c
  6948  001580  0BFD               	andlw	-3
  6949  001582  1845               	xorwf	??_lcdNibble^0,w,c
  6950  001584  6E8B               	movwf	139,c	;volatile
  6951                           
  6952                           ;hd44780.c: 66: LATCbits.LATC2 = (nibble & 0x04) ? 1 : 0;
  6953  001586  A446               	btfss	lcdNibble@nibble^0,2,c
  6954  001588  D003               	goto	u1780
  6955  00158A  6A45               	clrf	??_lcdNibble^0,c
  6956  00158C  2A45               	incf	??_lcdNibble^0,f,c
  6957  00158E  D001               	goto	u1798
  6958  001590                     u1780:
  6959  001590  6A45               	clrf	??_lcdNibble^0,c
  6960  001592                     u1798:
  6961  001592  D819               	call	PL42	;call to abstracted procedure
  6962  001594  0BFB               	andlw	-5
  6963  001596  1845               	xorwf	??_lcdNibble^0,w,c
  6964  001598  6E8B               	movwf	139,c	;volatile
  6965                           
  6966                           ;hd44780.c: 67: LATCbits.LATC3 = (nibble & 0x08) ? 1 : 0;
  6967  00159A  A646               	btfss	lcdNibble@nibble^0,3,c
  6968  00159C  D003               	goto	u1800
  6969  00159E  6A45               	clrf	??_lcdNibble^0,c
  6970  0015A0  2A45               	incf	??_lcdNibble^0,f,c
  6971  0015A2  D001               	goto	u1818
  6972  0015A4                     u1800:
  6973  0015A4  6A45               	clrf	??_lcdNibble^0,c
  6974  0015A6                     u1818:
  6975  0015A6  4645               	rlncf	??_lcdNibble^0,f,c
  6976  0015A8  D80E               	call	PL42	;call to abstracted procedure
  6977  0015AA  0BF7               	andlw	-9
  6978  0015AC  1845               	xorwf	??_lcdNibble^0,w,c
  6979  0015AE  6E8B               	movwf	139,c	;volatile
  6980                           
  6981                           ;hd44780.c: 70: LATAbits.LATA1 = 1;
  6982  0015B0  8289               	bsf	137,1,c	;volatile
  6983                           
  6984                           ;hd44780.c: 71: _delay((unsigned long)((100)*(8000000/4000000.0)));
  6985  0015B2  0E42               	movlw	66
  6986  0015B4                     u3577:
  6987  0015B4  2EE8               	decfsz	wreg,f,c
  6988  0015B6  D7FE               	bra	u3577
  6989  0015B8  D000               	nop2	
  6990                           
  6991                           ;hd44780.c: 72: LATAbits.LATA1 = 0;
  6992  0015BA  9289               	bcf	137,1,c	;volatile
  6993                           
  6994                           ;hd44780.c: 73: _delay((unsigned long)((100)*(8000000/4000000.0)));
  6995  0015BC  0E42               	movlw	66
  6996  0015BE                     u3587:
  6997  0015BE  2EE8               	decfsz	wreg,f,c
  6998  0015C0  D7FE               	bra	u3587
  6999  0015C2  D000               	nop2	
  7000  0015C4  0012               	return		;funcret
  7001  0015C6                     __end_of_lcdNibble:
  7002                           	callstack 0
  7003  0015C6                     PL42:
  7004                           	callstack 25
  7005  0015C6  4645               	rlncf	??_lcdNibble^0,f,c
  7006  0015C8  4645               	rlncf	??_lcdNibble^0,f,c
  7007  0015CA  508B               	movf	139,w,c	;volatile
  7008  0015CC  1845               	xorwf	??_lcdNibble^0,w,c
  7009  0015CE  0012               	return	
  7010  0015D0                     __end_ofPL42:
  7011                           	callstack 0
  7012                           
  7013 ;; *************** function _EUSART_Write_Str *****************
  7014 ;; Defined at:
  7015 ;;		line 106 in file "eusart.c"
  7016 ;; Parameters:    Size  Location     Type
  7017 ;;  t               2    4[COMRAM] PTR const unsigned char 
  7018 ;;		 -> STR_12(7), STR_11(4), STR_10(3), STR_9(4), 
  7019 ;;		 -> STR_8(5), STR_7(4), STR_6(4), 
  7020 ;; Auto vars:     Size  Location     Type
  7021 ;;		None
  7022 ;; Return value:  Size  Location     Type
  7023 ;;                  1    wreg      void 
  7024 ;; Registers used:
  7025 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7026 ;; Tracked objects:
  7027 ;;		On entry : 0/0
  7028 ;;		On exit  : 0/0
  7029 ;;		Unchanged: 0/0
  7030 ;; Data sizes:     COMRAM   BANK0   BANK1
  7031 ;;      Params:         2       0       0
  7032 ;;      Locals:         0       0       0
  7033 ;;      Temps:          0       0       0
  7034 ;;      Totals:         2       0       0
  7035 ;;Total ram usage:        2 bytes
  7036 ;; Hardware stack levels used: 1
  7037 ;; Hardware stack levels required when called: 3
  7038 ;; This function calls:
  7039 ;;		_EUSART_Write
  7040 ;; This function is called by:
  7041 ;;		_main
  7042 ;; This function uses a non-reentrant model
  7043 ;;
  7044                           
  7045                           	psect	text33
  7046  001ADA                     __ptext33:
  7047                           	callstack 0
  7048  001ADA                     _EUSART_Write_Str:
  7049                           	callstack 27
  7050                           
  7051                           ;eusart.c: 107: while (*t != '\0') {
  7052                           
  7053                           ;incstack = 0
  7054  001ADA  D005               	goto	l3233
  7055  001ADC                     l3229:
  7056                           
  7057                           ;eusart.c: 108: EUSART_Write(*t);
  7058  001ADC  D807               	call	PL30	;call to abstracted procedure
  7059  001ADE  ECFB  F00C         	call	_EUSART_Write
  7060                           
  7061                           ;eusart.c: 109: *t++;
  7062  001AE2  4A46               	infsnz	EUSART_Write_Str@t^0,f,c
  7063  001AE4  2A47               	incf	(EUSART_Write_Str@t+1)^0,f,c
  7064  001AE6                     l3233:
  7065  001AE6  D802               	call	PL30	;call to abstracted procedure
  7066  001AE8  E1F9               	bnz	l3229
  7067  001AEA  0012               	return		;funcret
  7068  001AEC                     __end_of_EUSART_Write_Str:
  7069                           	callstack 0
  7070  001AEC                     PL30:
  7071                           	callstack 27
  7072  001AEC  C046  FFF6         	movff	EUSART_Write_Str@t,tblptrl
  7073  001AF0  C047  FFF7         	movff	EUSART_Write_Str@t+1,tblptrh
  7074  001AF4                     	if	0	;tblptru may be non-zero
  7075  001AF4                     	endif
  7076  001AF4                     	if	0	;tblptru may be non-zero
  7077  001AF4                     	endif
  7078  001AF4  0008               	tblrd		*
  7079  001AF6  50F5               	movf	tablat,w,c
  7080  001AF8  0012               	return	
  7081  001AFA                     __end_ofPL30:
  7082                           	callstack 0
  7083                           
  7084 ;; *************** function _EUSART_Write *****************
  7085 ;; Defined at:
  7086 ;;		line 81 in file "eusart.c"
  7087 ;; Parameters:    Size  Location     Type
  7088 ;;  txData          1    wreg     unsigned char 
  7089 ;; Auto vars:     Size  Location     Type
  7090 ;;  txData          1    3[COMRAM] unsigned char 
  7091 ;; Return value:  Size  Location     Type
  7092 ;;                  1    wreg      void 
  7093 ;; Registers used:
  7094 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7095 ;; Tracked objects:
  7096 ;;		On entry : 0/0
  7097 ;;		On exit  : 0/0
  7098 ;;		Unchanged: 0/0
  7099 ;; Data sizes:     COMRAM   BANK0   BANK1
  7100 ;;      Params:         0       0       0
  7101 ;;      Locals:         1       0       0
  7102 ;;      Temps:          0       0       0
  7103 ;;      Totals:         1       0       0
  7104 ;;Total ram usage:        1 bytes
  7105 ;; Hardware stack levels used: 1
  7106 ;; Hardware stack levels required when called: 2
  7107 ;; This function calls:
  7108 ;;		Nothing
  7109 ;; This function is called by:
  7110 ;;		_main
  7111 ;;		_EUSART_Write_Str
  7112 ;; This function uses a non-reentrant model
  7113 ;;
  7114                           
  7115                           	psect	text34
  7116  0019F6                     __ptext34:
  7117                           	callstack 0
  7118  0019F6                     _EUSART_Write:
  7119                           	callstack 27
  7120                           
  7121                           ;incstack = 0
  7122                           ;EUSART_Write@txData stored from wreg
  7123  0019F6  6E45               	movwf	EUSART_Write@txData^0,c
  7124  0019F8                     
  7125                           ;eusart.c: 82: while (0 == eusartTxBufferRemaining) {
  7126  0019F8  502C               	movf	_eusartTxBufferRemaining^0,w,c	;volatile
  7127  0019FA  E0FE               	bz	l2823
  7128                           
  7129                           ;eusart.c: 83: };eusart.c: 85: if (0 == PIE1bits.TXIE) {
  7130  0019FC  B89D               	btfsc	157,4,c	;volatile
  7131  0019FE  D005               	goto	l650
  7132  001A00                     u1910:
  7133  001A00  A89E               	btfss	3998,4,c	;volatile
  7134  001A02  D7FE               	goto	u1910
  7135                           
  7136                           ;eusart.c: 88: TXREG = txData;
  7137  001A04  C045  FFAD         	movff	EUSART_Write@txData,4013	;volatile
  7138                           
  7139                           ;eusart.c: 90: } else {
  7140  001A08  0012               	return	
  7141  001A0A                     l650:
  7142                           
  7143                           ;eusart.c: 91: PIE1bits.TXIE = 0;
  7144  001A0A  989D               	bcf	157,4,c	;volatile
  7145                           
  7146                           ;eusart.c: 92: eusartTxBuffer[eusartTxHead++] = txData;
  7147  001A0C  502D               	movf	_eusartTxHead^0,w,c
  7148  001A0E  0F01               	addlw	low _eusartTxBuffer
  7149  001A10  6ED9               	movwf	fsr2l,c
  7150  001A12  6ADA               	clrf	fsr2h,c
  7151  001A14  C045  FFDF         	movff	EUSART_Write@txData,indf2
  7152  001A18  2A2D               	incf	_eusartTxHead^0,f,c
  7153                           
  7154                           ;eusart.c: 93: if (sizeof (eusartTxBuffer) <= eusartTxHead) {
  7155  001A1A  0E0F               	movlw	15
  7156  001A1C  642D               	cpfsgt	_eusartTxHead^0,c
  7157  001A1E  D001               	goto	l2837
  7158                           
  7159                           ;eusart.c: 94: eusartTxHead = 0;
  7160  001A20  6A2D               	clrf	_eusartTxHead^0,c
  7161  001A22                     l2837:
  7162                           
  7163                           ;eusart.c: 95: };eusart.c: 96: eusartTxBufferRemaining--;
  7164  001A22  062C               	decf	_eusartTxBufferRemaining^0,f,c	;volatile
  7165  001A24  0012               	return		;funcret
  7166  001A26                     __end_of_EUSART_Write:
  7167                           	callstack 0
  7168                           
  7169 ;; *************** function _myIntL *****************
  7170 ;; Defined at:
  7171 ;;		line 742 in file "main.c"
  7172 ;; Parameters:    Size  Location     Type
  7173 ;;		None
  7174 ;; Auto vars:     Size  Location     Type
  7175 ;;		None
  7176 ;; Return value:  Size  Location     Type
  7177 ;;                  1    wreg      void 
  7178 ;; Registers used:
  7179 ;;		wreg, status,2, status,0
  7180 ;; Tracked objects:
  7181 ;;		On entry : 0/0
  7182 ;;		On exit  : 0/0
  7183 ;;		Unchanged: 0/0
  7184 ;; Data sizes:     COMRAM   BANK0   BANK1
  7185 ;;      Params:         0       0       0
  7186 ;;      Locals:         0       0       0
  7187 ;;      Temps:          3       0       0
  7188 ;;      Totals:         3       0       0
  7189 ;;Total ram usage:        3 bytes
  7190 ;; Hardware stack levels used: 1
  7191 ;; Hardware stack levels required when called: 1
  7192 ;; This function calls:
  7193 ;;		Nothing
  7194 ;; This function is called by:
  7195 ;;		Interrupt level 1
  7196 ;; This function uses a non-reentrant model
  7197 ;;
  7198                           
  7199                           	psect	intcodelo
  7200  000018                     __pintcodelo:
  7201                           	callstack 0
  7202  000018                     _myIntL:
  7203                           	callstack 24
  7204                           
  7205                           ;incstack = 0
  7206  000018  8067               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  7207  00001A  CFD8 F042          	movff	status,??_myIntL
  7208  00001E  CFE8 F043          	movff	wreg,??_myIntL+1
  7209  000022  CFE0 F044          	movff	bsr,??_myIntL+2
  7210                           
  7211                           ;main.c: 743: static uint8_t snd_delay;;main.c: 745: if (INTCONbits.T0IF == 1) {
  7212  000026  A4F2               	btfss	242,2,c	;volatile
  7213  000028  D030               	goto	i1l362
  7214                           
  7215                           ;main.c: 746: INTCONbits.T0IF = 0;
  7216  00002A  94F2               	bcf	242,2,c	;volatile
  7217                           
  7218                           ;main.c: 747: TMR0H = ((unsigned char)(((45536)>>8)&0xFF));
  7219  00002C  0EB1               	movlw	177
  7220  00002E  6ED7               	movwf	215,c	;volatile
  7221                           
  7222                           ;main.c: 748: TMR0L = ((unsigned char)((45536)&0xFF));
  7223  000030  0EE0               	movlw	224
  7224  000032  6ED6               	movwf	214,c	;volatile
  7225                           
  7226                           ;main.c: 749: read_key = 1;
  7227  000034  8266               	bsf	(_read_key/(0+8))^0,_read_key& (0+7),c
  7228                           
  7229                           ;main.c: 751: tik_time_b++;
  7230  000036  2A35               	incf	_tik_time^0,f,c
  7231                           
  7232                           ;main.c: 752: if (en_sound) {
  7233  000038  A066               	btfss	(_en_sound/(0+8))^0,_en_sound& (0+7),c
  7234  00003A  D026               	goto	i1l349
  7235                           
  7236                           ;main.c: 753: snd_delay++;
  7237  00003C  2A2F               	incf	myIntL@snd_delay^0,f,c
  7238                           
  7239                           ;main.c: 754: if (snd_k) {
  7240  00003E  AC65               	btfss	(_snd_k/(0+8))^0,_snd_k& (0+7),c
  7241  000040  D00A               	goto	i1l350
  7242                           
  7243                           ;main.c: 755: if (snd_delay <= 10) {
  7244  000042  0E0B               	movlw	11
  7245  000044  602F               	cpfslt	myIntL@snd_delay^0,c
  7246  000046  D002               	goto	i1l351
  7247                           
  7248                           ;main.c: 756: LATCbits.LATC4 = 1;
  7249  000048  888B               	bsf	139,4,c	;volatile
  7250                           
  7251                           ;main.c: 757: } else
  7252  00004A  D001               	goto	i1l2713
  7253  00004C                     i1l351:
  7254                           
  7255                           ;main.c: 758: LATCbits.LATC4 = 0;
  7256  00004C  988B               	bcf	139,4,c	;volatile
  7257  00004E                     i1l2713:
  7258                           
  7259                           ;main.c: 759: if (snd_delay > 80)
  7260  00004E  0E50               	movlw	80
  7261  000050  642F               	cpfsgt	myIntL@snd_delay^0,c
  7262  000052  D001               	goto	i1l350
  7263                           
  7264                           ;main.c: 760: snd_delay = 0;
  7265  000054  6A2F               	clrf	myIntL@snd_delay^0,c
  7266  000056                     i1l350:
  7267                           
  7268                           ;main.c: 761: };main.c: 762: if (snd_b) {
  7269  000056  AA65               	btfss	(_snd_b/(0+8))^0,_snd_b& (0+7),c
  7270  000058  D00A               	goto	i1l354
  7271                           
  7272                           ;main.c: 763: if (snd_delay <= 15) {
  7273  00005A  0E10               	movlw	16
  7274  00005C  602F               	cpfslt	myIntL@snd_delay^0,c
  7275  00005E  D002               	goto	i1l355
  7276                           
  7277                           ;main.c: 764: LATCbits.LATC4 = 1;
  7278  000060  888B               	bsf	139,4,c	;volatile
  7279                           
  7280                           ;main.c: 765: } else
  7281  000062  D001               	goto	i1l2721
  7282  000064                     i1l355:
  7283                           
  7284                           ;main.c: 766: LATCbits.LATC4 = 0;
  7285  000064  988B               	bcf	139,4,c	;volatile
  7286  000066                     i1l2721:
  7287                           
  7288                           ;main.c: 767: if (snd_delay > 50)
  7289  000066  0E32               	movlw	50
  7290  000068  642F               	cpfsgt	myIntL@snd_delay^0,c
  7291  00006A  D001               	goto	i1l354
  7292                           
  7293                           ;main.c: 768: snd_delay = 0;
  7294  00006C  6A2F               	clrf	myIntL@snd_delay^0,c
  7295  00006E                     i1l354:
  7296                           
  7297                           ;main.c: 769: };main.c: 770: if (snd_all) {
  7298  00006E  A865               	btfss	(_snd_all/(0+8))^0,_snd_all& (0+7),c
  7299  000070  D00C               	goto	i1l362
  7300                           
  7301                           ;main.c: 771: if (snd_delay <= 10) {
  7302  000072  0E0B               	movlw	11
  7303  000074  602F               	cpfslt	myIntL@snd_delay^0,c
  7304  000076  D002               	goto	i1l359
  7305                           
  7306                           ;main.c: 772: LATCbits.LATC4 = 1;
  7307  000078  888B               	bsf	139,4,c	;volatile
  7308                           
  7309                           ;main.c: 773: } else
  7310  00007A  D001               	goto	i1l2729
  7311  00007C                     i1l359:
  7312                           
  7313                           ;main.c: 774: LATCbits.LATC4 = 0;
  7314  00007C  988B               	bcf	139,4,c	;volatile
  7315  00007E                     i1l2729:
  7316                           
  7317                           ;main.c: 775: if (snd_delay > 25)
  7318  00007E  0E19               	movlw	25
  7319  000080  642F               	cpfsgt	myIntL@snd_delay^0,c
  7320  000082  D003               	goto	i1l362
  7321                           
  7322                           ;main.c: 776: snd_delay = 0;
  7323  000084  6A2F               	clrf	myIntL@snd_delay^0,c
  7324  000086  D001               	goto	i1l362
  7325  000088                     i1l349:
  7326                           
  7327                           ;main.c: 779: LATCbits.LATC4 = 0;
  7328  000088  988B               	bcf	139,4,c	;volatile
  7329  00008A                     i1l362:
  7330  00008A  C044  FFE0         	movff	??_myIntL+2,bsr
  7331  00008E  C043  FFE8         	movff	??_myIntL+1,wreg
  7332  000092  C042  FFD8         	movff	??_myIntL,status
  7333  000096  9067               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  7334  000098  0010               	retfie	
  7335  00009A                     __end_of_myIntL:
  7336                           	callstack 0
  7337                           
  7338 ;; *************** function _myIntH *****************
  7339 ;; Defined at:
  7340 ;;		line 724 in file "main.c"
  7341 ;; Parameters:    Size  Location     Type
  7342 ;;		None
  7343 ;; Auto vars:     Size  Location     Type
  7344 ;;		None
  7345 ;; Return value:  Size  Location     Type
  7346 ;;                  1    wreg      void 
  7347 ;; Registers used:
  7348 ;;		wreg, status,2, status,0
  7349 ;; Tracked objects:
  7350 ;;		On entry : 0/0
  7351 ;;		On exit  : 0/0
  7352 ;;		Unchanged: 0/0
  7353 ;; Data sizes:     COMRAM   BANK0   BANK1
  7354 ;;      Params:         0       0       0
  7355 ;;      Locals:         0       0       0
  7356 ;;      Temps:          0       0       0
  7357 ;;      Totals:         0       0       0
  7358 ;;Total ram usage:        0 bytes
  7359 ;; Hardware stack levels used: 1
  7360 ;; This function calls:
  7361 ;;		Nothing
  7362 ;; This function is called by:
  7363 ;;		Interrupt level 2
  7364 ;; This function uses a non-reentrant model
  7365 ;;
  7366                           
  7367                           	psect	intcode
  7368  000008                     __pintcode:
  7369                           	callstack 0
  7370  000008                     _myIntH:
  7371                           	callstack 24
  7372                           
  7373                           ;incstack = 0
  7374  000008  8267               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7375  00000A  EF5C  F00D         	goto	int_func
  7376                           
  7377                           	psect	intcode_body
  7378  001AB8                     __pintcode_body:
  7379                           	callstack 24
  7380  001AB8                     int_func:
  7381                           	callstack 24
  7382                           
  7383                           ;main.c: 726: if (PIR1bits.TMR1IF == 1) {
  7384  001AB8  A09E               	btfss	158,0,c	;volatile
  7385  001ABA  D00D               	goto	i2l341
  7386                           
  7387                           ;main.c: 727: PIR1bits.TMR1IF = 0;
  7388  001ABC  909E               	bcf	158,0,c	;volatile
  7389                           
  7390                           ;main.c: 728: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
  7391  001ABE  0E3C               	movlw	60
  7392  001AC0  6ECF               	movwf	207,c	;volatile
  7393                           
  7394                           ;main.c: 729: TMR1L = ((unsigned char)((15536)&0xFF));
  7395  001AC2  0EB0               	movlw	176
  7396  001AC4  6ECE               	movwf	206,c	;volatile
  7397                           
  7398                           ;main.c: 730: if (++timer_val >= 30)
  7399  001AC6  2A41               	incf	_timer_val^0,f,c
  7400  001AC8  0E1D               	movlw	29
  7401  001ACA  6441               	cpfsgt	_timer_val^0,c
  7402  001ACC  D004               	goto	i2l341
  7403                           
  7404                           ;main.c: 731: {;main.c: 732: timer_val = 0;
  7405  001ACE  6A41               	clrf	_timer_val^0,c
  7406                           
  7407                           ;main.c: 733: time_flag = 1;
  7408  001AD0  0E01               	movlw	1
  7409  001AD2  6E40               	movwf	_time_flag^0,c
  7410                           
  7411                           ;main.c: 734: T1CONbits.TMR1ON = 0;
  7412  001AD4  90CD               	bcf	205,0,c	;volatile
  7413  001AD6                     i2l341:
  7414  001AD6  9267               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7415  001AD8  0011               	retfie		f
  7416  001ADA                     __end_of_myIntH:
  7417                           	callstack 0
  7418                           
  7419                           	psect	rparam
  7420  0000                     
  7421                           	psect	temp
  7422  000067                     btemp:
  7423                           	callstack 0
  7424  000067                     	ds	1
  7425  0000                     int$flags	set	btemp
  7426  0000                     wtemp8	set	btemp+1
  7427  0000                     ttemp5	set	btemp+1
  7428  0000                     ttemp6	set	btemp+4
  7429  0000                     ttemp7	set	btemp+8
  7430                           
  7431                           	psect	idloc
  7432                           
  7433                           ;Config register IDLOC0 @ 0x200000
  7434                           ;	unspecified, using default values
  7435  200000                     	org	2097152
  7436  200000  FF                 	db	255
  7437                           
  7438                           ;Config register IDLOC1 @ 0x200001
  7439                           ;	unspecified, using default values
  7440  200001                     	org	2097153
  7441  200001  FF                 	db	255
  7442                           
  7443                           ;Config register IDLOC2 @ 0x200002
  7444                           ;	unspecified, using default values
  7445  200002                     	org	2097154
  7446  200002  FF                 	db	255
  7447                           
  7448                           ;Config register IDLOC3 @ 0x200003
  7449                           ;	unspecified, using default values
  7450  200003                     	org	2097155
  7451  200003  FF                 	db	255
  7452                           
  7453                           ;Config register IDLOC4 @ 0x200004
  7454                           ;	unspecified, using default values
  7455  200004                     	org	2097156
  7456  200004  FF                 	db	255
  7457                           
  7458                           ;Config register IDLOC5 @ 0x200005
  7459                           ;	unspecified, using default values
  7460  200005                     	org	2097157
  7461  200005  FF                 	db	255
  7462                           
  7463                           ;Config register IDLOC6 @ 0x200006
  7464                           ;	unspecified, using default values
  7465  200006                     	org	2097158
  7466  200006  FF                 	db	255
  7467                           
  7468                           ;Config register IDLOC7 @ 0x200007
  7469                           ;	unspecified, using default values
  7470  200007                     	org	2097159
  7471  200007  FF                 	db	255
  7472                           
  7473                           	psect	config
  7474                           
  7475                           ; Padding undefined space
  7476  300000                     	org	3145728
  7477  300000  FF                 	db	255
  7478                           
  7479                           ;Config register CONFIG1H @ 0x300001
  7480                           ;	Oscillator Selection bits
  7481                           ;	OSC = INTIO2, Internal RC oscillator, port function on RA6 and port function on RA7
  7482                           ;	Fail-Safe Clock Monitor Enable bit
  7483                           ;	FSCM = OFF, Fail-Safe Clock Monitor disabled
  7484                           ;	Internal/External Switchover bit
  7485                           ;	IESO = OFF, Internal/External Switchover mode disabled
  7486  300001                     	org	3145729
  7487  300001  08                 	db	8
  7488                           
  7489                           ;Config register CONFIG2L @ 0x300002
  7490                           ;	Power-up Timer enable bit
  7491                           ;	PWRT = ON, PWRT enabled
  7492                           ;	Brown-out Reset enable bit
  7493                           ;	BOR = ON, Brown-out Reset enabled
  7494                           ;	Brown-out Reset Voltage bits
  7495                           ;	BORV = 27, VBOR set to 2.7V
  7496  300002                     	org	3145730
  7497  300002  0A                 	db	10
  7498                           
  7499                           ;Config register CONFIG2H @ 0x300003
  7500                           ;	Watchdog Timer Enable bit
  7501                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  7502                           ;	Watchdog Timer Postscale Select bits
  7503                           ;	WDTPS = 32768, 1:32768
  7504  300003                     	org	3145731
  7505  300003  1E                 	db	30
  7506                           
  7507                           ; Padding undefined space
  7508  300004                     	org	3145732
  7509  300004  FF                 	db	255
  7510                           
  7511                           ;Config register CONFIG3H @ 0x300005
  7512                           ;	CCP2 MUX bit
  7513                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  7514                           ;	PORTB A/D Enable bit
  7515                           ;	PBAD = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  7516                           ;	MCLR Pin Enable bit
  7517                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  7518  300005                     	org	3145733
  7519  300005  81                 	db	129
  7520                           
  7521                           ;Config register CONFIG4L @ 0x300006
  7522                           ;	Stack Full/Underflow Reset Enable bit
  7523                           ;	STVR = ON, Stack full/underflow will cause Reset
  7524                           ;	Single-Supply ICSP Enable bit
  7525                           ;	LVP = OFF, Single-Supply ICSP disabled
  7526                           ;	Background Debugger Enable bit
  7527                           ;	DEBUG = 0x1, unprogrammed default
  7528  300006                     	org	3145734
  7529  300006  81                 	db	129
  7530                           
  7531                           ; Padding undefined space
  7532  300007                     	org	3145735
  7533  300007  FF                 	db	255
  7534                           
  7535                           ;Config register CONFIG5L @ 0x300008
  7536                           ;	Code Protection bit
  7537                           ;	CP0 = OFF, Block 0 (000200-0007FFh) not code-protected
  7538                           ;	Code Protection bit
  7539                           ;	CP1 = OFF, Block 1 (000800-000FFFh) not code-protected
  7540                           ;	Code Protection bit
  7541                           ;	CP2 = OFF, Block 2 (001000-0017FFh) not code-protected
  7542                           ;	Code Protection bit
  7543                           ;	CP3 = OFF, Block 3 (001800-001FFFh) not code-protected
  7544  300008                     	org	3145736
  7545  300008  0F                 	db	15
  7546                           
  7547                           ;Config register CONFIG5H @ 0x300009
  7548                           ;	Boot Block Code Protection bit
  7549                           ;	CPB = OFF, Boot block (000000-0001FFh) is not code-protected
  7550                           ;	Data EEPROM Code Protection bit
  7551                           ;	CPD = OFF, Data EEPROM is not code-protected
  7552  300009                     	org	3145737
  7553  300009  C0                 	db	192
  7554                           
  7555                           ;Config register CONFIG6L @ 0x30000A
  7556                           ;	Write Protection bit
  7557                           ;	WRT0 = OFF, Block 0 (000200-0007FFh) not write-protected
  7558                           ;	Write Protection bit
  7559                           ;	WRT1 = OFF, Block 1 (000800-000FFFh) not write-protected
  7560                           ;	Write Protection bit
  7561                           ;	WRT2 = OFF, Block 2 (001000-0017FFh) not write-protected
  7562                           ;	Write Protection bit
  7563                           ;	WRT3 = OFF, Block 3 (001800-001FFFh) not write-protected
  7564  30000A                     	org	3145738
  7565  30000A  0F                 	db	15
  7566                           
  7567                           ;Config register CONFIG6H @ 0x30000B
  7568                           ;	Configuration Register Write Protection bit
  7569                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  7570                           ;	Boot Block Write Protection bit
  7571                           ;	WRTB = OFF, Boot block (000000-0001FFh) is not write-protected
  7572                           ;	Data EEPROM Write Protection bit
  7573                           ;	WRTD = OFF, Data EEPROM is not write-protected
  7574  30000B                     	org	3145739
  7575  30000B  E0                 	db	224
  7576                           
  7577                           ;Config register CONFIG7L @ 0x30000C
  7578                           ;	Table Read Protection bit
  7579                           ;	EBTR0 = OFF, Block 0 (000200-0007FFh) not protected from table reads executed in other
      +                           blocks
  7580                           ;	Table Read Protection bit
  7581                           ;	EBTR1 = OFF, Block 1 (000800-000FFFh) not protected from table reads executed in other
      +                           blocks
  7582                           ;	Table Read Protection bit
  7583                           ;	EBTR2 = OFF, Block 2 (001000-0017FFh) not protected from table reads executed in other
      +                           blocks
  7584                           ;	Table Read Protection bit
  7585                           ;	EBTR3 = OFF, Block 3 (001800-001FFFh) not protected from table reads executed in other
      +                           blocks
  7586  30000C                     	org	3145740
  7587  30000C  0F                 	db	15
  7588                           
  7589                           ;Config register CONFIG7H @ 0x30000D
  7590                           ;	Boot Block Table Read Protection bit
  7591                           ;	EBTRB = OFF, Boot block (000000-0001FFh) is not protected from table reads executed in
      +                           other blocks
  7592  30000D                     	org	3145741
  7593  30000D  40                 	db	64
  7594                           tosu	equ	0xFFF
  7595                           tosh	equ	0xFFE
  7596                           tosl	equ	0xFFD
  7597                           stkptr	equ	0xFFC
  7598                           pclatu	equ	0xFFB
  7599                           pclath	equ	0xFFA
  7600                           pcl	equ	0xFF9
  7601                           tblptru	equ	0xFF8
  7602                           tblptrh	equ	0xFF7
  7603                           tblptrl	equ	0xFF6
  7604                           tablat	equ	0xFF5
  7605                           prodh	equ	0xFF4
  7606                           prodl	equ	0xFF3
  7607                           indf0	equ	0xFEF
  7608                           postinc0	equ	0xFEE
  7609                           postdec0	equ	0xFED
  7610                           preinc0	equ	0xFEC
  7611                           plusw0	equ	0xFEB
  7612                           fsr0h	equ	0xFEA
  7613                           fsr0l	equ	0xFE9
  7614                           wreg	equ	0xFE8
  7615                           indf1	equ	0xFE7
  7616                           postinc1	equ	0xFE6
  7617                           postdec1	equ	0xFE5
  7618                           preinc1	equ	0xFE4
  7619                           plusw1	equ	0xFE3
  7620                           fsr1h	equ	0xFE2
  7621                           fsr1l	equ	0xFE1
  7622                           bsr	equ	0xFE0
  7623                           indf2	equ	0xFDF
  7624                           postinc2	equ	0xFDE
  7625                           postdec2	equ	0xFDD
  7626                           preinc2	equ	0xFDC
  7627                           plusw2	equ	0xFDB
  7628                           fsr2h	equ	0xFDA
  7629                           fsr2l	equ	0xFD9
  7630                           status	equ	0xFD8

Data Sizes:
    Strings     306
    Constant    96
    Data        12
    BSS         65
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     23     102
    BANK0           128      0       0
    BANK1           256      0       0

Pointer List with Targets:

    EUSART_Write_Str@t	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_12(CODE[7]), STR_11(CODE[4]), STR_10(CODE[3]), STR_9(CODE[4]), 
		 -> STR_8(CODE[5]), STR_7(CODE[4]), STR_6(CODE[4]), 

    cgrom_char@symbol	PTR unsigned char  size(2) Largest target is 8
		 -> symbol_5(CODE[8]), symbol_4(CODE[8]), 

    lcdPrint@t	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_36(CODE[3]), STR_35(CODE[3]), STR_34(CODE[3]), STR_33(CODE[3]), 
		 -> STR_32(CODE[3]), STR_31(CODE[3]), STR_30(CODE[3]), STR_29(CODE[3]), 
		 -> STR_28(CODE[3]), STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[15]), 
		 -> STR_24(CODE[9]), STR_23(CODE[13]), STR_22(CODE[11]), STR_21(CODE[13]), 
		 -> STR_20(CODE[15]), STR_19(CODE[16]), STR_18(CODE[14]), STR_17(CODE[16]), 
		 -> STR_16(CODE[16]), STR_15(CODE[16]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_5(CODE[2]), STR_4(CODE[13]), STR_3(CODE[16]), STR_2(CODE[16]), 
		 -> STR_1(CODE[16]), 

    ds18b20_crc8@data_in	PTR unsigned char  size(1) Largest target is 9
		 -> ds18b20_readrom@temp_rom(COMRAM[8]), scratch(COMRAM[9]), 

    ds18b20_get_temp@minus	PTR unsigned char  size(1) Largest target is 1
		 -> minus_2(COMRAM[1]), minus_1(COMRAM[1]), 

    ds18b20_readTemp@time_flag	PTR unsigned char  size(1) Largest target is 1
		 -> time_flag(COMRAM[1]), 

    ds18b20_readTemp@timer_val	PTR unsigned char  size(1) Largest target is 1
		 -> timer_val(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_ds18b20_readrom
    _outValPreset->_lcd_gotoxy
    _lcd_putc->_lcdWrite
    _lcdPrint->_lcd_gotoxy
    _lcd_gotoxy->_lcdWrite
    _ds18b20_readrom->_ds18b20_crc8
    _ds18b20_readTemp->_ds18b20_crc8
    ___lwmod->___lwdiv
    ___lbmod->___lbdiv
    ___awmod->___awdiv
    _Main_init->_init_ds18b20
    _init_ds18b20->_write_byte
    _write_byte->_write_bit
    _initLCD->_clearLCD
    _clearLCD->_lcdWrite
    _cgrom_char->_lcdWrite
    _lcdWrite->_lcdNibble
    _EUSART_Write_Str->_EUSART_Write

Critical Paths under _myIntL in COMRAM

    None.

Critical Paths under _myIntH in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _myIntL in BANK0

    None.

Critical Paths under _myIntH in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myIntL in BANK1

    None.

Critical Paths under _myIntH in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   51087
                                             20 COMRAM     3     3      0
                           _Delay_ms
                       _EUSART_Write
                   _EUSART_Write_Str
                          _Main_init
                            ___awdiv
                            ___awmod
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                           _clearLCD
                   _ds18b20_get_temp
                   _ds18b20_readTemp
                    _ds18b20_readrom
                         _key_GetKey
                          _key_press
                           _lcdPrint
                         _lcd_gotoxy
                           _lcd_putc
                       _outValPreset
                           _read_eep
                          _write_eep
 ---------------------------------------------------------------------------------
 (1) _outValPreset                                         3     3      0    7945
                                             10 COMRAM     3     3      0
                         _lcd_gotoxy
                           _lcd_putc
                           _read_eep
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0    1088
                                              7 COMRAM     1     1      0
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (1) _lcdPrint                                             6     4      2    6796
                                             10 COMRAM     6     4      2
                           _lcdWrite
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           3     2      1    3415
                                              7 COMRAM     3     2      1
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (1) _key_press                                            1     1      0      70
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _key_GetKey                                           1     1      0      23
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ds18b20_readrom                                     10    10      0    3276
                                             10 COMRAM    10    10      0
                           _Delay_ms
                       _ds18b20_crc8
                           _ow_reset
                          _read_byte
                         _write_byte
                          _write_eep
 ---------------------------------------------------------------------------------
 (1) _write_eep                                            2     1      1    1944
                                              3 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _Delay_ms                                             5     3      2     274
                                              3 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ds18b20_readTemp                                     8     6      2    1320
                                             10 COMRAM     8     6      2
                       _ds18b20_crc8
                           _ow_reset
                          _read_byte
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _read_byte                                            4     4      0      92
                                              3 COMRAM     4     4      0
                           _read_bit
 ---------------------------------------------------------------------------------
 (3) _read_bit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ds18b20_crc8                                         7     5      2     557
                                              3 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _ds18b20_get_temp                                     6     4      2     423
                                              3 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4    5175
                                             10 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4    3810
                                              3 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___lbmod                                              4     3      1     463
                                              7 COMRAM     4     3      1
                            ___lbdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lbdiv                                              4     3      1     314
                                              3 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4    1208
                                             11 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     908
                                              3 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Main_init                                            0     0      0    7462
                         _cgrom_char
                            _initLCD
                       _init_ds18b20
                          _init_uart
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_ds18b20                                         4     4      0    3781
                                              9 COMRAM     4     4      0
                           _ow_reset
                           _read_eep
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _write_byte                                           5     5      0     136
                                              4 COMRAM     5     5      0
                          _write_bit
 ---------------------------------------------------------------------------------
 (3) _write_bit                                            1     1      0      22
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_eep                                             2     0      2    3442
                                              3 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ow_reset                                             1     1      0      23
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0    2220
                                              8 COMRAM     1     1      0
                           _clearLCD
                          _lcdNibble
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (1) _clearLCD                                             1     1      0    1066
                                              7 COMRAM     1     1      0
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (2) _cgrom_char                                           4     1      3    1461
                                              7 COMRAM     4     1      3
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (3) _lcdWrite                                             2     1      1    1066
                                              5 COMRAM     2     1      1
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0      88
                                              3 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Write_Str                                     2     0      2     621
                                              4 COMRAM     2     0      2
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         1     1      0      44
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _myIntL                                               3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _myIntH                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay_ms
   _EUSART_Write
   _EUSART_Write_Str
     _EUSART_Write
   _Main_init
     _cgrom_char
       _lcdWrite
         _lcdNibble
     _initLCD
       _clearLCD
         _lcdWrite
       _lcdNibble
       _lcdWrite
     _init_ds18b20
       _ow_reset
       _read_eep
       _write_byte
         _write_bit
     _init_uart
   ___awdiv
   ___awmod
     ___awdiv (ARG)
   ___lbdiv
   ___lbmod
     ___lbdiv (ARG)
   ___lwdiv
   ___lwmod
     ___lwdiv (ARG)
   _clearLCD
   _ds18b20_get_temp
   _ds18b20_readTemp
     _ds18b20_crc8
     _ow_reset
     _read_byte
       _read_bit
     _write_byte
   _ds18b20_readrom
     _Delay_ms
     _ds18b20_crc8
     _ow_reset
     _read_byte
     _write_byte
     _write_eep
   _key_GetKey
   _key_press
   _lcdPrint
     _lcdWrite
     _lcd_gotoxy
       _lcdWrite
   _lcd_gotoxy
   _lcd_putc
     _lcdWrite
   _outValPreset
     _lcd_gotoxy
     _lcd_putc
     _read_eep
   _read_eep
   _write_eep

 _myIntL (ROOT)

 _myIntH (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       2       0        1.6%
COMRAM              7E     17      66       1       81.0%
BITBIGSFRhhhhhh     19      0       0       9        0.0%
BITBIGSFRhhhllh     11      0       0      13        0.0%
BITBIGSFRhhhhhh      D      0       0       8        0.0%
BITBIGSFRhhhlhl      B      0       0      12        0.0%
BITBIGSFRhhhlll      8      0       0      17        0.0%
BITBIGSFRhhhllh      6      0       0      16        0.0%
BITBIGSFRhhl         6      0       0      18        0.0%
BITBIGSFRhll         6      0       0      19        0.0%
BITBIGSFRhhhlhh      2      0       0      11        0.0%
BITBIGSFRhhhllh      1      0       0      14        0.0%
BITBIGSFRhhhllh      1      0       0      15        0.0%
BITBIGSFRhhhhl       1      0       0      10        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      66      20        0.0%
DATA                 0      0      66       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Fri Sep 16 13:30:07 2022

                       PL2 0F6A                         PL4 0F7A                         PL6 0F86  
                       PL8 113C               ___awdiv@sign 004A                         bsr 000FE0  
             lcdWrite@byte 0048                        PL10 0F92                        PL20 1430  
                      PL12 0F9A                        PL30 1AEC                        PL22 0FC4  
                      PL14 0FA4                        PL40 100C                        PL32 138E  
                      PL24 0FD0                        PL16 0FAE                        PL50 102A  
                      PL42 15C6                        PL34 0FF2                        PL26 0FDC  
                      PL18 0FBE                        PL60 1032                        PL52 1148  
                      PL44 1780                        PL36 0FFE                        PL28 0FEC  
                      PL70 1188                        PL62 1168                        PL54 1150  
                      PL46 1016                        PL38 1004                        PL80 143E  
                      PL72 1190                        PL64 1170                        PL56 1158  
                      PL48 1020                        PL82 11A8                        PL74 1198  
                      PL66 1178                        PL58 1160                        PL84 11B0  
                      PL76 1038                        PL68 1180                        PL86 11B8  
                      PL78 11A0                        PL88 11C0               lcdWrite@type 0047  
                      l202 04F8                        l212 0708                        l206 0570  
                      l231 085A                        l223 07BA                        l225 07D6  
                      l217 089A                        l331 1A88                        l227 07D8  
                      l219 07B8                        l260 09EC                        l228 081A  
                      l421 12EE                        l422 12F0                        l182 018E  
                      l191 0214                        l409 1670                        l442 1478  
                      l450 180A                        l268 0A3A                        l188 0216  
                      l650 1A0A                        l582 1794                        l479 1A9E  
                      l487 1B24                        l584 179C                        l586 17A6  
                      l588 17DE               ___awmod@sign 0052   __end_of_EUSART_Write_Str 1AEC  
                      wreg 000FE8            lcdNibble@nibble 0046              write_eep@data 0045  
              lcd_gotoxy@x 004A                lcd_gotoxy@y 0049                       l1147 186E  
                     l1157 18EA                       l3103 17C8                       l3213 148E  
                     l3117 12C2                       l3071 13E8                       l3063 13B6  
                     l3233 1AE6                       l3321 160A                       l3313 15F2  
                     l3401 1990                       l3145 12FE                       l3065 13C0  
                     l3241 107C                       l3331 1628                       l3307 15E2  
                     l3171 1360                       l3091 17A8                       l3075 1416  
                     l3067 13CC                       l3059 139E                       l3251 10EA  
                     l3243 1092                       l3229 1ADC                       l3173 1368  
                     l3077 1426                       l3253 1100                       l3245 10A8  
                     l3237 104A                       l3319 1602                       l3335 1632  
                     l3351 16CE                       l3431 1846                       l3159 1322  
                     l3079 142A                       l3247 10BE                       l3239 1066  
                     l3511 01A4                       l3361 16EE                       l3417 1A44  
                     l3409 1A2E                       l3441 1864                       l3249 10D4  
                     l3257 1116                       l3339 163E                       l3371 170E  
                     l3355 16DA                       l3451 18CA                       l3195 137C  
                     l3283 1758                       l3603 0770                       l3507 0190  
                     l3429 183E                       l3269 1736                       l2813 1B26  
                     l3701 092A                       l3605 0776                       l3517 01AE  
                     l2823 19F8                       l3375 171A                       l3367 1704  
                     l3359 16E6                       l3295 177E                       l3711 0954  
                     l3543 0298                       l3519 01B8                       l3385 196E  
                     l3457 18E0                       l3449 18C2                       l2841 1A4E  
                     l3545 02AC                       l2747 1AA0                       l2819 1A76  
                     l3811 0ADC                       l3571 03EC                       l2837 1A22  
                     l2933 19A4                       l3397 1988                       l3389 1974  
                     l3901 0C96                       l3821 0B22                       l3741 09C8  
                     l3725 0982                       l3709 094E                       l3581 056A  
                     l3573 0452                       l3557 0334                       l2759 1B0C  
                     l2951 1918                       l3903 0CA4                       l3911 0CE4  
                     l3743 09D0                       l3735 09A0                       l3575 04CE  
                     l3559 0348                       l2793 192E                       l2961 17EA  
                     l3921 0D44                       l3905 0CB2                       l3657 08AC  
                     l3649 089E                       l3593 060E                       l3489 010C  
                     l2867 166E                       l2947 18F8                       l3931 0D6E  
                     l3755 0A02                       l3739 09C4                       l3683 08F8  
                     l3667 08C0                       l3659 08B0                       l3595 066E  
                     l2877 1672                       l2973 1818                       l2965 17FA  
                     l2981 1824                       l3941 0D92                       l3933 0D74  
                     l3925 0D5A                       l3909 0CC0                       l3837 0B58  
                     l3829 0B32                       l3773 0A3C                       l3757 0A08  
                     l3749 09E6                       l3693 091A                       l3669 08C4  
                     l3597 06E4                       l3919 0D40                       l3871 0BFA  
                     l3855 0BAE                       l3847 0B9E                       l3961 0E5A  
                     l3953 0E0A                       l3945 0DBA                       l3937 0D86  
                     l3793 0A90                       l3891 0C50                       l3779 0A5A  
                     l3973 0ED4                       l3965 0E82                       l3957 0E32  
                     l3949 0DE2                       l3893 0C5E                       l3885 0C26  
                     l3895 0C6C                       l3887 0C3A                       l3969 0EAA  
                     l3977 0EEA                       l3897 0C7A                       l3889 0C42  
                     l3993 0F30                       l3979 0F14                       l3899 0C88  
                     l3989 0F26                       STR_1 1F0F                       STR_2 1F3F  
                     STR_3 1F1F                       STR_4 1FA5                       STR_5 1FFD  
                     STR_6 1FDE                       STR_7 1FDE                       STR_8 1FCD  
                     STR_9 1FDA           ow_reset@presence 0045                       u2004 1910  
                     u2005 190C            _ds18b20_readrom 1724                       u2200 146E  
                     u3000 09B4                       u2300 160E                       _LATA 000F89  
                     _LATB 000F8A                       _LATC 000F8B                       u2400 1978  
                     u2240 1746                       u3050 0A14                       u3018 09B6  
                     u2500 016C                       u3310 0D80                       u1800 15A4  
                     u2360 16F2                       u2440 184A                       u3080 0A24  
                     u2520 0182                       u3065 0A16                       u2610 0226  
                     u2515 016E                       u1740 1562                       u2620 02B6  
                     u1910 1A00                       u2470 18CE                       u2630 0368  
                     u3407 19CC                       u3095 0A26                       u2535 0184  
                     u1760 1578                       u3417 19D8                       u1818 15A6  
                     u3507 1254                       u3427 19E8                       u3347 13AA  
                     u1780 1590                       u2740 07AA                       u3517 126C  
                     u3437 11D2                       u3357 1A7C                       u1758 1564  
                     u1854 193E                       u2750 07B4                       u2670 0590  
                     u2590 0214                       u3527 1284                       u3447 11E2  
                     u1855 193A                       u3367 191A                       u3537 1298  
                     u3457 11F2                       u3377 1B76                       u1778 157A  
                     u3547 12B0                       u3467 1202                       u3387 195A  
                     u2780 07D2                       u3557 1B5E                       u3477 1218  
                     u3397 1B0E                       u1798 1592                       u3567 1AA2  
                     u3487 122C                       u3577 15B4                       u3497 1240  
                     u3587 15BE                       _TXIF 007CF4                       _main 009E  
                     fsr2h 000FDA                       indf2 000FDF                       fsr1l 000FE1  
                     fsr2l 000FD9                       btemp 0067              write_byte@val 0048  
                     prodh 000FF4                       prodl 000FF3                       start 009A  
             ___param_bank 000000           _ds18b20_get_temp 1444              ?_EUSART_Write 0042  
         _ds18b20_readTemp 12C0                      ?_main 0042            __end_of___awdiv 1648  
          __end_of___lbdiv 1994                      _EEADR 000FA9                      STR_10 1FCA  
                    STR_11 1FDA                      STR_12 1FC6                      STR_20 1F5F  
                    STR_13 1FD6                      STR_21 1F98                      STR_30 1FE8  
                    STR_14 1FD2                      STR_22 1FB2                      STR_31 1FEB  
                    STR_23 1F8B                      STR_15 1F4F                      STR_32 1FEE  
                    STR_24 1FBD                      STR_16 1F2F                      STR_33 1FF1  
                    STR_25 1F6E                      STR_17 1EEF                      STR_34 1FF4  
                    STR_18 1F7D                      STR_26 1EDE                      STR_35 1FF7  
                    STR_19 1EFF                      STR_27 1ECD                      STR_36 1FFA  
                    STR_28 1FE2            __end_of___awmod 1724                      STR_29 1FE5  
          __end_of___lbmod 1A4C            ___awdiv@divisor 0047                      _T1CON 000FCD  
          __end_of___lwdiv 1878                      i1l350 0056                      i1l351 004C  
          __end_of___lwmod 18F4                      i1l362 008A                      i1l354 006E  
                    i1l355 0064                      i1l349 0088                      i1l359 007C  
                    i2l341 1AD6            ___awdiv@counter 0049                      _TMR0H 000FD7  
                    _TMR1H 000FCF                      _TMR0L 000FD6                      _TMR1L 000FCE  
                    _SPBRG 000FAF                      _PORTA 000F80                      _PORTB 000F81  
                    _PORTC 000F82                      _TRISA 000F92                      _TRISB 000F93  
                    _TRISC 000F94                      _TXREG 000FAD            __end_of_initLCD 12C0  
                    _fract 1EAD                      _snd_b 032D                      _snd_k 032E  
           write_byte@temp 0049             __pbitbssCOMRAM 0328                      tablat 000FF5  
                    ttemp5 0068                      ttemp6 006B                      ttemp7 006F  
                    status 000FD8                      wtemp8 0068            ___lbdiv@divisor 0045  
          ___lbdiv@counter 0047           __end_of_Delay_ms 1A94            write_bit@bitval 0045  
          __initialization 1878            ds18b20_crc8@crc 004B               __end_of_main 0F6A  
      ds18b20_crc8@data_in 0045             ??_EUSART_Write 0045                     ??_main 0056  
            __activetblptr 000002              ?_init_ds18b20 0042    __end_of_ds18b20_readrom 1780  
        _temperature_1_old 005B          _temperature_2_old 0059                     _EEDATA 000FA8  
                   _EECON2 000FA7           ___awdiv@dividend 0045                     i1l2721 0066  
                   i1l2713 004E                     i1l2729 007E           __end_of_clearLCD 1B6A  
         __end_of_lcdPrint 1430           __end_of_lcdWrite 1AB8           __end_of_lcd_putc 1BAA  
                ??___awdiv 0049                  ??___lbdiv 0046                  ??___awmod 0051  
                ??___lbmod 004A                  ??___lwdiv 0049                  ??___lwmod 0050  
                   _dq_num 0061              Delay_ms@delay 0045                     _myIntH 0008  
                   _myIntL 0018           __end_of_read_eep 1B92           __end_of_read_bit 1B80  
                   clear_0 18A2           ___awdiv@quotient 004B            ___awmod@divisor 004F  
                   _select 0062                     isa$std 000001                     _rom_dq 0011  
          ___awmod@counter 0051             ??_init_ds18b20 004B                  ??_initLCD 004A  
             __pdataCOMRAM 0059               __mediumconst 1E6C           __end_of_ow_reset 19F6  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
         ___lbdiv@dividend 0046           __end_of_symbol_4 1ECD           __end_of_symbol_5 1EC5  
          ___lbmod@divisor 0049                 __accesstop 0080    __end_of__initialization 18A8  
          ___lbmod@counter 004B              ___rparam_used 000001           write_eep@address 0046  
         ds18b20_crc8@data 0048             __pcstackCOMRAM 0042              __end_of_fract 1EBD  
        __end_of_Main_init 1556     ds18b20_crc8@loop_count 004A                 __end_ofPL2 0F7A  
               __end_ofPL4 0F86                 __end_ofPL6 0F92                 __end_ofPL8 1148  
         ___lbdiv@quotient 0048              ?_ds18b20_crc8 0045       ds18b20_readTemp@temp 0050  
         ?_ds18b20_readrom 0042                  ?_Delay_ms 0045          ?_EUSART_Write_Str 0046  
        lcd_gotoxy@address 004B         ??_EUSART_Write_Str 0048   __end_of_ds18b20_get_temp 14CE  
     __end_of_EUSART_Write 1A26   __end_of_ds18b20_readTemp 138E    ds18b20_crc8@bit_counter 0047  
         ds18b20_readrom@i 0055        __end_of_HD44780_CYR 1EAD                    ?_myIntH 0042  
                  ?_myIntL 0042             ??_ds18b20_crc8 0047                 _cgrom_char 1994  
            _eusartRxCount 002B                  ?_clearLCD 0042                 ??_Delay_ms 0047  
               _lcd_gotoxy 1B18                  ?_lcdPrint 004C                  ?_lcdWrite 0047  
                ?_lcd_putc 0042                  ?_read_eep 0045                  ?_read_bit 0042  
               _key_GetKey 1BAA       __end_of_init_ds18b20 16BC          __end_of_lcdNibble 15C6  
                  __Hparam 0000                    __Lparam 0000                  ?_ow_reset 0042  
                  ___awdiv 15D0                    ___lbdiv 1960                    ___awmod 16BC  
                  ___lbmod 1A26                    ___lwdiv 182E                    ___lwmod 18B6  
                  __pcinit 1878    ds18b20_readrom@temp_rom 004C                    __ramtop 0200  
                  __ptext0 009E                    __ptext1 1040                    __ptext2 1B9E  
                  __ptext3 139C                    __ptext4 1B18                    __ptext5 178A  
                  __ptext6 1BAA                    __ptext7 1724                    __ptext8 1A4C  
                  __ptext9 1A70                  _T0CONbits 000FD5                    _initLCD 11C8  
                _T1CONbits 000FCD                    _keyLong 0036          __end_of_key_press 17E4  
        __end_of_init_uart 1B50           ___awmod@dividend 004D          __end_of_read_byte 192A  
               ??_clearLCD 0049                    _minus_1 0064                    _minus_2 0063  
                  _scratch 0037                    _snd_b_b 032A                    _snd_all 032C  
                  _snd_k_b 032B                    _sub_sel 0033                 ??_lcdPrint 004E  
               ??_lcdWrite 0048             __pintcode_body 1AB8                 ??_lcd_putc 0049  
     end_of_initialization 18A8                  Delay_ms@i 0048               key_press@key 0045  
            __Lmediumconst 1E6C                    int_func 1AB8                 ??_read_eep 0047  
               ??_read_bit 0045                _HD44780_CYR 1E6D              ?_outValPreset 0042  
                _RCSTAbits 000FAB                 ??_ow_reset 0045                    postdec1 000FE5  
                  postdec2 000FDD                    postinc0 000FEE                    postinc2 000FDE  
               _temp_ready 0021               read_byte@val 0047        ds18b20_get_temp@tmp 0048  
              ?_cgrom_char 0049                  _PORTAbits 000F80              key_GetKey@key 0045  
        __end_of_write_bit 1B18          __end_of_write_eep 1A70           ___lbmod@dividend 004A  
        EUSART_Write_Str@t 0046                  _TRISAbits 000F92                  _TRISCbits 000F94  
              ?_lcd_gotoxy 0049                ___lbmod@rem 004C       __end_of_ds18b20_crc8 182E  
              ?_key_GetKey 0042                  _TXSTAbits 000FAC             ??_outValPreset 004C  
            __pidataCOMRAM 1B92                 _write_byte 192A               _EUSART_Write 19F6  
           __end_of_myIntH 1ADA             __end_of_myIntL 009A                  _Main_init 14CE  
              __end_ofPL10 0F9A                __end_ofPL20 143E                __end_ofPL12 0FA4  
              __end_ofPL30 1AFA                __end_ofPL22 0FD0                __end_ofPL14 0FAE  
              __end_ofPL40 1016                __end_ofPL32 139C                __end_ofPL24 0FDC  
              __end_ofPL16 0FBE                __end_ofPL50 1032                __end_ofPL42 15D0  
              __end_ofPL34 0FFE                __end_ofPL26 0FEC                __end_ofPL18 0FC4  
              __end_ofPL60 1038                __end_ofPL52 1150                __end_ofPL44 178A  
              __end_ofPL36 1004                __end_ofPL28 0FF2                __end_ofPL70 1190  
              __end_ofPL62 1170                __end_ofPL54 1158                __end_ofPL46 1020  
              __end_ofPL38 100C                __end_ofPL80 1444                __end_ofPL72 1198  
              __end_ofPL64 1178                __end_ofPL56 1160                __end_ofPL48 102A  
              __end_ofPL82 11B0                __end_ofPL74 11A0                __end_ofPL66 1180  
              __end_ofPL58 1168                __end_ofPL84 11B8                __end_ofPL76 1040  
              __end_ofPL68 1188                __end_ofPL86 11C0                __end_ofPL78 11A8  
              __end_ofPL88 11C8        start_initialization 1878          ?_ds18b20_get_temp 0045  
       ??_ds18b20_get_temp 0047          ?_ds18b20_readTemp 004C         ??_ds18b20_readTemp 004E  
 ds18b20_crc8@feedback_bit 0049                   ??_myIntH 0042                   ??_myIntL 0042  
          read_eep@address 0045                 read_byte@i 0048                 ?_Main_init 0042  
             _init_ds18b20 1648                __pbssCOMRAM 0001      ds18b20_crc8@num_bytes 0046  
        ds18b20_readTemp@i 0053          ds18b20_readTemp@j 0052           ___lwdiv@dividend 0045  
                __pintcode 0008              __pmediumconst 1E6C                  _lcdNibble 1556  
                 ?___awdiv 0045                   ?___lbdiv 0045                   ?___awmod 004D  
                 ?___lbmod 0049                   ?___lwdiv 0045                   ?___lwmod 004C  
             _eusartTxHead 002D                __pintcodelo 0018                ?_write_byte 0042  
  _eusartTxBufferRemaining 002C                   ?_initLCD 0042       __end_of_outValPreset 113C  
         ___lwdiv@quotient 0049                  _key_press 178A                  _init_uart 1B34  
                _read_byte 18F4             _eusartTxBuffer 0001                   _LATAbits 000F89  
                 _LATCbits 000F8B                  _temp1_fix 0027                   _IPR1bits 000F9F  
                 _PIE1bits 000F9D                   _PIR1bits 000F9E                  _set_t_dq2 0029  
            _set_t_dq1_dwn 0030                   _RCONbits 000FD0                 ?_lcdNibble 0042  
                _time_flag 0040                  _timer_val 0041                  lcdPrint@t 004C  
             ??_cgrom_char 004C                 _ADCON1bits 000FC1               _ds18b20_crc8 17E4  
              ??_Main_init 004F                  _sound_yes 032F                  lcd_putc@c 0049  
              write_byte@i 004A                   _Delay_ms 1A70               ??_lcd_gotoxy 004A  
               ?_key_press 0042                  _write_bit 1AFA                  _write_eep 1A4C  
               ?_init_uart 0042                _INTCON2bits 000FF1                 ?_read_byte 0042  
                copy_data0 188C              init_ds18b20@i 004E              init_ds18b20@q 004D  
             ??_key_GetKey 0045                 _EECON1bits 000FA6         __end_of_cgrom_char 19C6  
         _EUSART_Write_Str 1ADA                   __Hrparam 0000                   __Lrparam 0000  
        ??_ds18b20_readrom 004C         __end_of_lcd_gotoxy 1B34             key_press@count 0025  
            _temperature_1 005F              _temperature_2 005D                   _clearLCD 1B50  
              _key_pressed 002E         __end_of_key_GetKey 1BB4            ___lwdiv@divisor 0047  
          myIntL@snd_delay 002F            ___lwdiv@counter 004B                   __ptext10 12C0  
                 __ptext11 18F4                   __ptext20 15D0                   __ptext12 1B6A  
                 __ptext21 14CE                   __ptext13 17E4                   __ptext30 1994  
                 __ptext22 1B34                   __ptext14 1444                   __ptext31 1A94  
                 __ptext23 1648                   __ptext15 18B6                   __ptext32 1556  
                 __ptext24 192A                   __ptext16 182E                   __ptext33 1ADA  
                 __ptext25 1AFA                   __ptext17 1A26                   __ptext34 19F6  
                 __ptext26 1B80                   __ptext18 1960                   __ptext27 19C6  
                 __ptext19 16BC                   __ptext28 11C8                   __ptext29 1B50  
                 _lcdPrint 139C                   _en_snd_b 0328                   _lcdWrite 1A94  
                 _en_snd_k 0329                 ?_write_eep 0045                 ?_write_bit 0042  
                 _en_sound 0330                   _lcd_putc 1B9E     ds18b20_get_temp@num_dq 0047  
                 _read_bit 1B6A                   _read_eep 1B80      ds18b20_readrom@num_dq 0054  
                 _read_key 0331          cgrom_char@address 004B               _set_t_dq1_up 0031  
                 _tik_time 0035                   isa$xinst 000000                ??_lcdNibble 0045  
                 _ow_reset 19C6                   int$flags 0067                   _symbol_4 1EC5  
                 _symbol_5 1EBD              _en_send_usart 0332                 _INTCONbits 000FF2  
              ??_key_press 0045                ??_init_uart 0045                ??_read_byte 0045  
                 intlevel1 0000                   intlevel2 0000           ___lwmod@dividend 004C  
    ds18b20_get_temp@minus 0045                 _OSCCONbits 000FD3               _outValPreset 1040  
ds18b20_readTemp@time_flag 004C  ds18b20_readTemp@timer_val 004D           cgrom_char@symbol 0049  
             ??_write_byte 0046            ___lwmod@divisor 004E       ds18b20_get_temp@temp 0049  
          ___lwmod@counter 0050                cgrom_char@i 004C                ??_write_eep 0046  
              ??_write_bit 0045                _pressed_key 0034         EUSART_Write@txData 0045  
       __end_of_write_byte 1960                _sub_sel_kol 0032  
