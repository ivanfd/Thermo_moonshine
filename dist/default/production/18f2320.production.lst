

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Wed Dec 02 14:55:06 2020

Microchip MPLAB XC8 C Compiler v2.31 (Pro license) build 20201012212115 Og9s 
     1                           	processor	18F2320
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    43                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    44                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    45                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    46                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    47                           	psect	pa_nodes0,global,class=CODE,delta=1
    48  0000                     
    49                           ; Version 2.20
    50                           ; Generated 12/02/2020 GMT
    51                           ; 
    52                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC18F2320 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     
    84                           	psect	idataCOMRAM
    85  000F86                     __pidataCOMRAM:
    86                           	callstack 0
    87                           
    88                           ;initializer for _dq_num
    89  000F86  01                 	db	1
    90                           
    91                           ;initializer for _select
    92  000F87  01                 	db	1
    93                           
    94                           ;initializer for _minus_2
    95  000F88  2B                 	db	43
    96                           
    97                           ;initializer for _minus_1
    98  000F89  2B                 	db	43
    99                           
   100                           	psect	mediumconst
   101  001EF6                     __pmediumconst:
   102                           	callstack 0
   103  001EF6  00                 	db	0
   104  001EF7                     _HD44780_CYR:
   105                           	callstack 0
   106  001EF7  41                 	db	65
   107  001EF8  A0                 	db	160
   108  001EF9  42                 	db	66
   109  001EFA  A1                 	db	161
   110  001EFB  E0                 	db	224
   111  001EFC  45                 	db	69
   112  001EFD  A3                 	db	163
   113  001EFE  A4                 	db	164
   114  001EFF  A5                 	db	165
   115  001F00  A6                 	db	166
   116  001F01  4B                 	db	75
   117  001F02  A7                 	db	167
   118  001F03  4D                 	db	77
   119  001F04  48                 	db	72
   120  001F05  4F                 	db	79
   121  001F06  A8                 	db	168
   122  001F07  50                 	db	80
   123  001F08  43                 	db	67
   124  001F09  54                 	db	84
   125  001F0A  A9                 	db	169
   126  001F0B  AA                 	db	170
   127  001F0C  58                 	db	88
   128  001F0D  E1                 	db	225
   129  001F0E  AB                 	db	171
   130  001F0F  AC                 	db	172
   131  001F10  E2                 	db	226
   132  001F11  AD                 	db	173
   133  001F12  AE                 	db	174
   134  001F13  62                 	db	98
   135  001F14  AF                 	db	175
   136  001F15  B0                 	db	176
   137  001F16  B1                 	db	177
   138  001F17  61                 	db	97
   139  001F18  B2                 	db	178
   140  001F19  B3                 	db	179
   141  001F1A  B4                 	db	180
   142  001F1B  E3                 	db	227
   143  001F1C  65                 	db	101
   144  001F1D  B6                 	db	182
   145  001F1E  B7                 	db	183
   146  001F1F  B8                 	db	184
   147  001F20  B9                 	db	185
   148  001F21  BA                 	db	186
   149  001F22  BB                 	db	187
   150  001F23  BC                 	db	188
   151  001F24  BD                 	db	189
   152  001F25  6F                 	db	111
   153  001F26  BE                 	db	190
   154  001F27  70                 	db	112
   155  001F28  63                 	db	99
   156  001F29  BF                 	db	191
   157  001F2A  79                 	db	121
   158  001F2B  E4                 	db	228
   159  001F2C  78                 	db	120
   160  001F2D  E5                 	db	229
   161  001F2E  C0                 	db	192
   162  001F2F  C1                 	db	193
   163  001F30  E6                 	db	230
   164  001F31  C2                 	db	194
   165  001F32  C3                 	db	195
   166  001F33  C4                 	db	196
   167  001F34  C5                 	db	197
   168  001F35  C6                 	db	198
   169  001F36  C7                 	db	199
   170  001F37                     __end_of_HD44780_CYR:
   171                           	callstack 0
   172  001F37                     _fract:
   173                           	callstack 0
   174  001F37  00                 	db	0
   175  001F38  01                 	db	1
   176  001F39  01                 	db	1
   177  001F3A  02                 	db	2
   178  001F3B  02                 	db	2
   179  001F3C  03                 	db	3
   180  001F3D  04                 	db	4
   181  001F3E  04                 	db	4
   182  001F3F  05                 	db	5
   183  001F40  06                 	db	6
   184  001F41  06                 	db	6
   185  001F42  07                 	db	7
   186  001F43  07                 	db	7
   187  001F44  08                 	db	8
   188  001F45  09                 	db	9
   189  001F46  09                 	db	9
   190  001F47                     __end_of_fract:
   191                           	callstack 0
   192  001F47                     _symbol_4:
   193                           	callstack 0
   194  001F47  06                 	db	6
   195  001F48  09                 	db	9
   196  001F49  09                 	db	9
   197  001F4A  06                 	db	6
   198  001F4B  00                 	db	0
   199  001F4C  00                 	db	0
   200  001F4D  00                 	db	0
   201  001F4E  00                 	db	0
   202  001F4F                     __end_of_symbol_4:
   203                           	callstack 0
   204  0000                     _EECON2	set	4007
   205  0000                     _EEDATA	set	4008
   206  0000                     _EEADR	set	4009
   207  0000                     _EECON1bits	set	4006
   208  0000                     _TRISAbits	set	3986
   209  0000                     _PORTCbits	set	3970
   210  0000                     _T1CONbits	set	4045
   211  0000                     _PIR1bits	set	3998
   212  0000                     _LATCbits	set	3979
   213  0000                     _PIE1bits	set	3997
   214  0000                     _INTCON2bits	set	4081
   215  0000                     _INTCONbits	set	4082
   216  0000                     _TMR0L	set	4054
   217  0000                     _TMR0H	set	4055
   218  0000                     _T0CONbits	set	4053
   219  0000                     _TMR1L	set	4046
   220  0000                     _TMR1H	set	4047
   221  0000                     _T1CON	set	4045
   222  0000                     _PORTAbits	set	3968
   223  0000                     _ADCON1bits	set	4033
   224  0000                     _OSCCONbits	set	4051
   225  0000                     _TRISC	set	3988
   226  0000                     _LATC	set	3979
   227  0000                     _PORTC	set	3970
   228  0000                     _TRISB	set	3987
   229  0000                     _LATB	set	3978
   230  0000                     _TRISA	set	3986
   231  0000                     _LATA	set	3977
   232  0000                     _PORTA	set	3968
   233  0000                     _PORTB	set	3969
   234  001F4F                     STR_9:
   235  001F4F  20                 	db	32
   236  001F50  CA                 	db	-54
   237  001F51  EE                 	db	-18
   238  001F52  E4                 	db	-28
   239  001F53  20                 	db	32
   240  001F54  EF                 	db	-17
   241  001F55  F0                 	db	-16
   242  001F56  EE                 	db	-18
   243  001F57  F7                 	db	-9
   244  001F58  E8                 	db	-24
   245  001F59  F2                 	db	-14
   246  001F5A  E0                 	db	-32
   247  001F5B  ED                 	db	-19
   248  001F5C  EE                 	db	-18
   249  001F5D  20                 	db	32
   250  001F5E  00                 	db	0
   251  001F5F                     STR_1:
   252  001F5F  2D                 	db	45
   253  001F60  2D                 	db	45
   254  001F61  2D                 	db	45
   255  001F62  D2                 	db	-46
   256  001F63  C5                 	db	-59
   257  001F64  D0                 	db	-48
   258  001F65  CC                 	db	-52
   259  001F66  CE                 	db	-50
   260  001F67  CC                 	db	-52
   261  001F68  C5                 	db	-59
   262  001F69  D2                 	db	-46
   263  001F6A  D0                 	db	-48
   264  001F6B  2D                 	db	45
   265  001F6C  2D                 	db	45
   266  001F6D  2D                 	db	45
   267  001F6E  00                 	db	0
   268  001F6F                     STR_2:
   269  001F6F  28                 	db	40
   270  001F70  63                 	db	99	;'c'
   271  001F71  29                 	db	41
   272  001F72  49                 	db	73	;'I'
   273  001F73  76                 	db	118	;'v'
   274  001F74  61                 	db	97	;'a'
   275  001F75  6E                 	db	110	;'n'
   276  001F76  5F                 	db	95	;'_'
   277  001F77  66                 	db	102	;'f'
   278  001F78  64                 	db	100	;'d'
   279  001F79  20                 	db	32
   280  001F7A  76                 	db	118	;'v'
   281  001F7B  31                 	db	49	;'1'
   282  001F7C  2E                 	db	46
   283  001F7D  30                 	db	48	;'0'
   284  001F7E  00                 	db	0
   285  001F7F                     STR_3:
   286  001F7F  C4                 	db	-60
   287  001F80  E0                 	db	-32
   288  001F81  F2                 	db	-14
   289  001F82  F7                 	db	-9
   290  001F83  E8                 	db	-24
   291  001F84  EA                 	db	-22
   292  001F85  20                 	db	32
   293  001F86  31                 	db	49	;'1'
   294  001F87  2C                 	db	44
   295  001F88  20                 	db	32
   296  001F89  E0                 	db	-32
   297  001F8A  E1                 	db	-31
   298  001F8B  EE                 	db	-18
   299  001F8C  20                 	db	32
   300  001F8D  32                 	db	50	;'2'
   301  001F8E  00                 	db	0
   302  001F8F                     STR_7:
   303  001F8F  20                 	db	32
   304  001F90  20                 	db	32
   305  001F91  C3                 	db	-61
   306  001F92  69                 	db	105	;'i'
   307  001F93  F1                 	db	-15
   308  001F94  F2                 	db	-14
   309  001F95  E5                 	db	-27
   310  001F96  F0                 	db	-16
   311  001F97  E5                 	db	-27
   312  001F98  E7                 	db	-25
   313  001F99  E8                 	db	-24
   314  001F9A  F1                 	db	-15
   315  001F9B  20                 	db	32
   316  001F9C  20                 	db	32
   317  001F9D  00                 	db	0
   318  001F9E                     STR_14:
   319  001F9E  D2                 	db	-46
   320  001F9F  E5                 	db	-27
   321  001FA0  EC                 	db	-20
   322  001FA1  EF                 	db	-17
   323  001FA2  20                 	db	32
   324  001FA3  CD                 	db	-51
   325  001FA4  E8                 	db	-24
   326  001FA5  E7                 	db	-25
   327  001FA6  3A                 	db	58	;':'
   328  001FA7  20                 	db	32
   329  001FA8  20                 	db	32
   330  001FA9  20                 	db	32
   331  001FAA  20                 	db	32
   332  001FAB  20                 	db	32
   333  001FAC  00                 	db	0
   334  001FAD                     STR_8:
   335  001FAD  CA                 	db	-54
   336  001FAE  EE                 	db	-18
   337  001FAF  EB                 	db	-21
   338  001FB0  28                 	db	40
   339  001FB1  31                 	db	49	;'1'
   340  001FB2  29                 	db	41
   341  001FB3  2F                 	db	47
   342  001FB4  C3                 	db	-61
   343  001FB5  EE                 	db	-18
   344  001FB6  EB                 	db	-21
   345  001FB7  28                 	db	40
   346  001FB8  32                 	db	50	;'2'
   347  001FB9  29                 	db	41
   348  001FBA  3A                 	db	58	;':'
   349  001FBB  00                 	db	0
   350  001FBC                     STR_12:
   351  001FBC  20                 	db	32
   352  001FBD  20                 	db	32
   353  001FBE  20                 	db	32
   354  001FBF  20                 	db	32
   355  001FC0  C3                 	db	-61
   356  001FC1  EE                 	db	-18
   357  001FC2  EB                 	db	-21
   358  001FC3  EE                 	db	-18
   359  001FC4  E2                 	db	-30
   360  001FC5  E0                 	db	-32
   361  001FC6  20                 	db	32
   362  001FC7  20                 	db	32
   363  001FC8  00                 	db	0
   364  001FC9                     STR_10:
   365  001FC9  20                 	db	32
   366  001FCA  20                 	db	32
   367  001FCB  20                 	db	32
   368  001FCC  20                 	db	32
   369  001FCD  CA                 	db	-54
   370  001FCE  EE                 	db	-18
   371  001FCF  EB                 	db	-21
   372  001FD0  EE                 	db	-18
   373  001FD1  ED                 	db	-19
   374  001FD2  E0                 	db	-32
   375  001FD3  20                 	db	32
   376  001FD4  20                 	db	32
   377  001FD5  00                 	db	0
   378  001FD6                     STR_4:
   379  001FD6  C2                 	db	-62
   380  001FD7  E8                 	db	-24
   381  001FD8  E1                 	db	-31
   382  001FD9  69                 	db	105	;'i'
   383  001FDA  F0                 	db	-16
   384  001FDB  20                 	db	32
   385  001FDC  31                 	db	49	;'1'
   386  001FDD  38                 	db	56	;'8'
   387  001FDE  42                 	db	66	;'B'
   388  001FDF  32                 	db	50	;'2'
   389  001FE0  30                 	db	48	;'0'
   390  001FE1  3A                 	db	58	;':'
   391  001FE2  00                 	db	0
   392  001FE3                     STR_11:
   393  001FE3  D2                 	db	-46
   394  001FE4  E5                 	db	-27
   395  001FE5  EC                 	db	-20
   396  001FE6  EF                 	db	-17
   397  001FE7  20                 	db	32
   398  001FE8  C2                 	db	-62
   399  001FE9  E5                 	db	-27
   400  001FEA  F0                 	db	-16
   401  001FEB  F5                 	db	-11
   402  001FEC  3A                 	db	58	;':'
   403  001FED  00                 	db	0
   404  001FEE                     STR_6:
   405  001FEE  C3                 	db	-61
   406  001FEF  EE                 	db	-18
   407  001FF0  EB                 	db	-21
   408  001FF1  EE                 	db	-18
   409  001FF2  E2                 	db	-30
   410  001FF3  E0                 	db	-32
   411  001FF4  3A                 	db	58	;':'
   412  001FF5  00                 	db	0
   413  001FF6                     STR_5:
   414  001FF6  CA                 	db	-54
   415  001FF7  EE                 	db	-18
   416  001FF8  EB                 	db	-21
   417  001FF9  EE                 	db	-18
   418  001FFA  ED                 	db	-19
   419  001FFB  E0                 	db	-32
   420  001FFC  3A                 	db	58	;':'
   421  001FFD  00                 	db	0
   422  001FFE  00                 	db	0	; dummy byte at the end
   423  0000                     
   424                           ; #config settings
   425                           
   426                           	psect	cinit
   427  000D24                     __pcinit:
   428                           	callstack 0
   429  000D24                     start_initialization:
   430                           	callstack 0
   431  000D24                     __initialization:
   432                           	callstack 0
   433                           
   434                           ; Initialize objects allocated to COMRAM (4 bytes)
   435                           ; load TBLPTR registers with __pidataCOMRAM
   436  000D24  0E86               	movlw	low __pidataCOMRAM
   437  000D26  6EF6               	movwf	tblptrl,c
   438  000D28  0E0F               	movlw	high __pidataCOMRAM
   439  000D2A  6EF7               	movwf	tblptrh,c
   440  000D2C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   441  000D2E  6EF8               	movwf	tblptru,c
   442  000D30  EE00  F043         	lfsr	0,__pdataCOMRAM
   443  000D34  EE10 F004          	lfsr	1,4
   444  000D38                     copy_data0:
   445  000D38  0009               	tblrd		*+
   446  000D3A  CFF5 FFEE          	movff	tablat,postinc0
   447  000D3E  50E5               	movf	postdec1,w,c
   448  000D40  50E1               	movf	fsr1l,w,c
   449  000D42  E1FA               	bnz	copy_data0
   450                           
   451                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   452  000D44  6A47               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   453                           
   454                           ; Clear objects allocated to COMRAM (47 bytes)
   455  000D46  EE00  F001         	lfsr	0,__pbssCOMRAM
   456  000D4A  0E2F               	movlw	47
   457  000D4C                     clear_0:
   458  000D4C  6AEE               	clrf	postinc0,c
   459  000D4E  06E8               	decf	wreg,f,c
   460  000D50  E1FD               	bnz	clear_0
   461  000D52                     end_of_initialization:
   462                           	callstack 0
   463  000D52                     __end_of__initialization:
   464                           	callstack 0
   465  000D52  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   466  000D54  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   467  000D56  0E00               	movlw	low (__Lmediumconst shr (0+16))
   468  000D58  6EF8               	movwf	tblptru,c
   469  000D5A  0100               	movlb	0
   470  000D5C  EF2D  F000         	goto	_main	;jump to C main() function
   471                           
   472                           	psect	bitbssCOMRAM
   473  000238                     __pbitbssCOMRAM:
   474                           	callstack 0
   475  000238                     _en_sound:
   476                           	callstack 0
   477  000238                     	ds	1
   478  000239                     _read_key:
   479                           	callstack 0
   480  000239                     	ds	1
   481                           
   482                           	psect	bssCOMRAM
   483  000001                     __pbssCOMRAM:
   484                           	callstack 0
   485  000001                     _rom_dq:
   486                           	callstack 0
   487  000001                     	ds	16
   488  000011                     _temp_ready:
   489                           	callstack 0
   490  000011                     	ds	4
   491  000015                     key_press@count:
   492                           	callstack 0
   493  000015                     	ds	2
   494  000017                     _temp1_fix:
   495                           	callstack 0
   496  000017                     	ds	2
   497  000019                     _temperature_2:
   498                           	callstack 0
   499  000019                     	ds	2
   500  00001B                     _temperature_1:
   501                           	callstack 0
   502  00001B                     	ds	2
   503  00001D                     _key_pressed:
   504                           	callstack 0
   505  00001D                     	ds	1
   506  00001E                     myInt@snd_delay:
   507                           	callstack 0
   508  00001E                     	ds	1
   509  00001F                     _set_t_dq2_dwn:
   510                           	callstack 0
   511  00001F                     	ds	1
   512  000020                     _set_t_dq2_up:
   513                           	callstack 0
   514  000020                     	ds	1
   515  000021                     _set_t_dq1_dwn:
   516                           	callstack 0
   517  000021                     	ds	1
   518  000022                     _set_t_dq1_up:
   519                           	callstack 0
   520  000022                     	ds	1
   521  000023                     _sub_sel:
   522                           	callstack 0
   523  000023                     	ds	1
   524  000024                     _pressed_key:
   525                           	callstack 0
   526  000024                     	ds	1
   527  000025                     _scratch:
   528                           	callstack 0
   529  000025                     	ds	9
   530  00002E                     _time_flag:
   531                           	callstack 0
   532  00002E                     	ds	1
   533  00002F                     _timer_val:
   534                           	callstack 0
   535  00002F                     	ds	1
   536                           
   537                           	psect	dataCOMRAM
   538  000043                     __pdataCOMRAM:
   539                           	callstack 0
   540  000043                     _dq_num:
   541                           	callstack 0
   542  000043                     	ds	1
   543  000044                     _select:
   544                           	callstack 0
   545  000044                     	ds	1
   546  000045                     _minus_2:
   547                           	callstack 0
   548  000045                     	ds	1
   549  000046                     _minus_1:
   550                           	callstack 0
   551  000046                     	ds	1
   552                           
   553                           	psect	cstackCOMRAM
   554  000030                     __pcstackCOMRAM:
   555                           	callstack 0
   556  000030                     ??_read_byte:
   557  000030                     ??_lcdNibble:
   558  000030                     ?_ds18b20_get_temp:
   559                           	callstack 0
   560  000030                     ?___lwdiv:
   561                           	callstack 0
   562  000030                     ds18b20_get_temp@minus:
   563                           	callstack 0
   564  000030                     ds18b20_crc8@data_in:
   565                           	callstack 0
   566  000030                     ow_reset@presence:
   567                           	callstack 0
   568  000030                     write_bit@bitval:
   569                           	callstack 0
   570  000030                     write_eep@data:
   571                           	callstack 0
   572  000030                     key_press@key:
   573                           	callstack 0
   574  000030                     key_GetKey@key:
   575                           	callstack 0
   576  000030                     ___lbdiv@divisor:
   577                           	callstack 0
   578  000030                     Delay_ms@delay:
   579                           	callstack 0
   580  000030                     read_eep@address:
   581                           	callstack 0
   582  000030                     ___lwdiv@dividend:
   583                           	callstack 0
   584                           
   585                           ; 2 bytes @ 0x0
   586  000030                     	ds	1
   587  000031                     ??_write_byte:
   588  000031                     ds18b20_crc8@num_bytes:
   589                           	callstack 0
   590  000031                     lcdNibble@nibble:
   591                           	callstack 0
   592  000031                     write_eep@address:
   593                           	callstack 0
   594  000031                     ___lbdiv@dividend:
   595                           	callstack 0
   596                           
   597                           ; 1 bytes @ 0x1
   598  000031                     	ds	1
   599  000032                     ??_Delay_ms:
   600  000032                     ds18b20_get_temp@num_dq:
   601                           	callstack 0
   602  000032                     ds18b20_crc8@bit_counter:
   603                           	callstack 0
   604  000032                     lcdWrite@type:
   605                           	callstack 0
   606  000032                     read_byte@val:
   607                           	callstack 0
   608  000032                     ___lbdiv@counter:
   609                           	callstack 0
   610  000032                     ___lwdiv@divisor:
   611                           	callstack 0
   612                           
   613                           ; 2 bytes @ 0x2
   614  000032                     	ds	1
   615  000033                     ds18b20_get_temp@tmp:
   616                           	callstack 0
   617  000033                     ds18b20_crc8@data:
   618                           	callstack 0
   619  000033                     lcdWrite@byte:
   620                           	callstack 0
   621  000033                     read_byte@i:
   622                           	callstack 0
   623  000033                     write_byte@val:
   624                           	callstack 0
   625  000033                     ___lbdiv@quotient:
   626                           	callstack 0
   627  000033                     Delay_ms@i:
   628                           	callstack 0
   629                           
   630                           ; 2 bytes @ 0x3
   631  000033                     	ds	1
   632  000034                     ??_clearLCD:
   633  000034                     ds18b20_crc8@feedback_bit:
   634                           	callstack 0
   635  000034                     lcd_gotoxy@y:
   636                           	callstack 0
   637  000034                     lcd_putc@c:
   638                           	callstack 0
   639  000034                     write_byte@temp:
   640                           	callstack 0
   641  000034                     ___lbmod@divisor:
   642                           	callstack 0
   643  000034                     ds18b20_get_temp@temp:
   644                           	callstack 0
   645  000034                     cgrom_char@symbol:
   646                           	callstack 0
   647  000034                     ___lwdiv@quotient:
   648                           	callstack 0
   649                           
   650                           ; 2 bytes @ 0x4
   651  000034                     	ds	1
   652  000035                     ??_initLCD:
   653  000035                     ds18b20_crc8@loop_count:
   654                           	callstack 0
   655  000035                     lcd_gotoxy@x:
   656                           	callstack 0
   657  000035                     write_byte@i:
   658                           	callstack 0
   659  000035                     ___lbmod@dividend:
   660                           	callstack 0
   661                           
   662                           ; 1 bytes @ 0x5
   663  000035                     	ds	1
   664  000036                     ??_init_ds18b20:
   665  000036                     ds18b20_crc8@crc:
   666                           	callstack 0
   667  000036                     lcd_gotoxy@address:
   668                           	callstack 0
   669  000036                     cgrom_char@address:
   670                           	callstack 0
   671  000036                     ___lbmod@counter:
   672                           	callstack 0
   673  000036                     ___lwdiv@counter:
   674                           	callstack 0
   675                           
   676                           ; 1 bytes @ 0x6
   677  000036                     	ds	1
   678  000037                     ?___lwmod:
   679                           	callstack 0
   680  000037                     ds18b20_readTemp@time_flag:
   681                           	callstack 0
   682  000037                     cgrom_char@i:
   683                           	callstack 0
   684  000037                     ___lbmod@rem:
   685                           	callstack 0
   686  000037                     lcdPrint@t:
   687                           	callstack 0
   688  000037                     ___lwmod@dividend:
   689                           	callstack 0
   690  000037                     ds18b20_readrom@temp_rom:
   691                           	callstack 0
   692                           
   693                           ; 8 bytes @ 0x7
   694  000037                     	ds	1
   695  000038                     init_ds18b20@q:
   696                           	callstack 0
   697  000038                     ds18b20_readTemp@timer_val:
   698                           	callstack 0
   699                           
   700                           ; 1 bytes @ 0x8
   701  000038                     	ds	1
   702  000039                     ??_lcdPrint:
   703  000039                     ??_ds18b20_readTemp:
   704  000039                     init_ds18b20@i:
   705                           	callstack 0
   706  000039                     ___lwmod@divisor:
   707                           	callstack 0
   708                           
   709                           ; 2 bytes @ 0x9
   710  000039                     	ds	1
   711  00003A                     
   712                           ; 1 bytes @ 0xA
   713  00003A                     	ds	1
   714  00003B                     ___lwmod@counter:
   715                           	callstack 0
   716  00003B                     ds18b20_readTemp@temp:
   717                           	callstack 0
   718                           
   719                           ; 2 bytes @ 0xB
   720  00003B                     	ds	2
   721  00003D                     ds18b20_readTemp@j:
   722                           	callstack 0
   723                           
   724                           ; 1 bytes @ 0xD
   725  00003D                     	ds	1
   726  00003E                     ds18b20_readTemp@i:
   727                           	callstack 0
   728                           
   729                           ; 1 bytes @ 0xE
   730  00003E                     	ds	1
   731  00003F                     ds18b20_readrom@num_dq:
   732                           	callstack 0
   733                           
   734                           ; 1 bytes @ 0xF
   735  00003F                     	ds	1
   736  000040                     ds18b20_readrom@i:
   737                           	callstack 0
   738                           
   739                           ; 1 bytes @ 0x10
   740  000040                     	ds	1
   741  000041                     ??_main:
   742                           
   743                           ; 1 bytes @ 0x11
   744  000041                     	ds	2
   745                           
   746 ;;
   747 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   748 ;;
   749 ;; *************** function _main *****************
   750 ;; Defined at:
   751 ;;		line 29 in file "main.c"
   752 ;; Parameters:    Size  Location     Type
   753 ;;		None
   754 ;; Auto vars:     Size  Location     Type
   755 ;;		None
   756 ;; Return value:  Size  Location     Type
   757 ;;                  1    wreg      void 
   758 ;; Registers used:
   759 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   760 ;; Tracked objects:
   761 ;;		On entry : 0/0
   762 ;;		On exit  : 0/0
   763 ;;		Unchanged: 0/0
   764 ;; Data sizes:     COMRAM   BANK0   BANK1
   765 ;;      Params:         0       0       0
   766 ;;      Locals:         0       0       0
   767 ;;      Temps:          2       0       0
   768 ;;      Totals:         2       0       0
   769 ;;Total ram usage:        2 bytes
   770 ;; Hardware stack levels required when called:    6
   771 ;; This function calls:
   772 ;;		_Delay_ms
   773 ;;		_Main_init
   774 ;;		___lbdiv
   775 ;;		___lbmod
   776 ;;		___lwdiv
   777 ;;		___lwmod
   778 ;;		_clearLCD
   779 ;;		_ds18b20_get_temp
   780 ;;		_ds18b20_readTemp
   781 ;;		_ds18b20_readrom
   782 ;;		_key_GetKey
   783 ;;		_key_press
   784 ;;		_lcdPrint
   785 ;;		_lcd_gotoxy
   786 ;;		_lcd_putc
   787 ;;		_read_eep
   788 ;;		_write_eep
   789 ;; This function is called by:
   790 ;;		Startup code after reset
   791 ;; This function uses a non-reentrant model
   792 ;;
   793                           
   794                           	psect	text0
   795  00005A                     __ptext0:
   796                           	callstack 0
   797  00005A                     _main:
   798                           	callstack 25
   799                           
   800                           ;main.c: 30: Main_init();
   801                           
   802                           ;incstack = 0
   803  00005A  ECCE  F005         	call	_Main_init	;wreg free
   804                           
   805                           ;main.c: 32: lcd_gotoxy(1, 1);
   806  00005E  0E01               	movlw	1
   807  000060  6E34               	movwf	lcd_gotoxy@y^0,c
   808  000062  EC89  F007         	call	_lcd_gotoxy
   809                           
   810                           ;main.c: 33: lcdPrint("---ÒÅÐÌÎÌÅÒÐ---");
   811  000066  0E5F               	movlw	low STR_1
   812  000068  6E37               	movwf	lcdPrint@t^0,c
   813  00006A  0E1F               	movlw	high STR_1
   814  00006C  6E38               	movwf	(lcdPrint@t+1)^0,c
   815  00006E  EC8A  F004         	call	_lcdPrint	;wreg free
   816                           
   817                           ;main.c: 34: lcd_gotoxy(1, 2);
   818  000072  DB47               	call	PL16	;call to abstracted procedure
   819  000074  EC89  F007         	call	_lcd_gotoxy
   820                           
   821                           ;main.c: 35: lcdPrint("(c)Ivan_fd v1.0");
   822  000078  0E6F               	movlw	low STR_2
   823  00007A  6E37               	movwf	lcdPrint@t^0,c
   824  00007C  0E1F               	movlw	high STR_2
   825  00007E  6E38               	movwf	(lcdPrint@t+1)^0,c
   826  000080  EC8A  F004         	call	_lcdPrint	;wreg free
   827                           
   828                           ;main.c: 36: Delay_ms(2000);
   829  000084  0E07               	movlw	7
   830  000086  6E31               	movwf	(Delay_ms@delay+1)^0,c
   831  000088  0ED0               	movlw	208
   832  00008A  6E30               	movwf	Delay_ms@delay^0,c
   833  00008C  EC56  F007         	call	_Delay_ms	;wreg free
   834                           
   835                           ;main.c: 37: clearLCD();
   836  000090  EC97  F007         	call	_clearLCD	;wreg free
   837                           
   838                           ;main.c: 38: if ((PORTB & (1 << 1)) == 0) {
   839  000094  B281               	btfsc	129,1,c	;volatile
   840  000096  D015               	goto	l2573
   841                           
   842                           ;main.c: 39: clearLCD();
   843  000098  EC97  F007         	call	_clearLCD	;wreg free
   844                           
   845                           ;main.c: 40: select = 2;
   846  00009C  0E02               	movlw	2
   847                           
   848                           ;main.c: 41: lcd_gotoxy(1, 1);
   849  00009E  DB42               	call	PL30	;call to abstracted procedure
   850  0000A0  EC89  F007         	call	_lcd_gotoxy
   851                           
   852                           ;main.c: 42: lcdPrint("Äàò÷èê 1, àáî 2");
   853  0000A4  0E7F               	movlw	low STR_3
   854  0000A6  6E37               	movwf	lcdPrint@t^0,c
   855  0000A8  0E1F               	movlw	high STR_3
   856  0000AA  6E38               	movwf	(lcdPrint@t+1)^0,c
   857  0000AC  EC8A  F004         	call	_lcdPrint	;wreg free
   858                           
   859                           ;main.c: 43: lcd_gotoxy(1, 2);
   860  0000B0  DB28               	call	PL16	;call to abstracted procedure
   861  0000B2  EC89  F007         	call	_lcd_gotoxy
   862                           
   863                           ;main.c: 44: lcdPrint("Âèáið 18B20:");
   864  0000B6  0ED6               	movlw	low STR_4
   865  0000B8  6E37               	movwf	lcdPrint@t^0,c
   866  0000BA  0E1F               	movlw	high STR_4
   867  0000BC  6E38               	movwf	(lcdPrint@t+1)^0,c
   868  0000BE  EC8A  F004         	call	_lcdPrint	;wreg free
   869  0000C2                     l2573:
   870                           
   871                           ;main.c: 46: };main.c: 48: set_t_dq1_up = read_eep(16);
   872  0000C2  6A31               	clrf	(read_eep@address+1)^0,c
   873  0000C4  0E10               	movlw	16
   874  0000C6  6E30               	movwf	read_eep@address^0,c
   875  0000C8  ECAF  F007         	call	_read_eep	;wreg free
   876  0000CC  6E22               	movwf	_set_t_dq1_up^0,c
   877                           
   878                           ;main.c: 49: set_t_dq1_dwn = read_eep(17);
   879  0000CE  6A31               	clrf	(read_eep@address+1)^0,c
   880  0000D0  0E11               	movlw	17
   881  0000D2  6E30               	movwf	read_eep@address^0,c
   882  0000D4  ECAF  F007         	call	_read_eep	;wreg free
   883  0000D8  6E21               	movwf	_set_t_dq1_dwn^0,c
   884                           
   885                           ;main.c: 50: set_t_dq2_up = read_eep(18);
   886  0000DA  6A31               	clrf	(read_eep@address+1)^0,c
   887  0000DC  0E12               	movlw	18
   888  0000DE  6E30               	movwf	read_eep@address^0,c
   889  0000E0  ECAF  F007         	call	_read_eep	;wreg free
   890  0000E4  6E20               	movwf	_set_t_dq2_up^0,c
   891                           
   892                           ;main.c: 51: set_t_dq2_dwn = read_eep(19);
   893  0000E6  6A31               	clrf	(read_eep@address+1)^0,c
   894  0000E8  0E13               	movlw	19
   895  0000EA  6E30               	movwf	read_eep@address^0,c
   896  0000EC  ECAF  F007         	call	_read_eep	;wreg free
   897  0000F0  6E1F               	movwf	_set_t_dq2_dwn^0,c
   898  0000F2                     l2581:
   899                           
   900                           ;main.c: 56: if (read_key) {
   901  0000F2  A247               	btfss	(_read_key/(0+8))^0,_read_key& (0+7),c
   902  0000F4  D003               	goto	l2587
   903                           
   904                           ;main.c: 57: key_press();
   905  0000F6  EC02  F006         	call	_key_press	;wreg free
   906                           
   907                           ;main.c: 58: read_key = 0;
   908  0000FA  9247               	bcf	(_read_key/(0+8))^0,_read_key& (0+7),c
   909  0000FC                     l2587:
   910                           
   911                           ;main.c: 59: };main.c: 60: pressed_key = key_GetKey();
   912  0000FC  ECBE  F007         	call	_key_GetKey	;wreg free
   913  000100  6E24               	movwf	_pressed_key^0,c
   914                           
   915                           ;main.c: 62: switch (select) {
   916  000102  D2CA               	goto	l2835
   917  000104                     l2589:
   918                           
   919                           ;main.c: 64: if (ds18b20_readTemp(&time_flag, &timer_val)) {
   920  000104  0E2E               	movlw	low _time_flag
   921  000106  6E37               	movwf	ds18b20_readTemp@time_flag^0,c
   922  000108  0E2F               	movlw	low _timer_val
   923  00010A  6E38               	movwf	ds18b20_readTemp@timer_val^0,c
   924  00010C  EC1C  F004         	call	_ds18b20_readTemp	;wreg free
   925  000110  0900               	iorlw	0
   926  000112  E012               	bz	l2593
   927                           
   928                           ;main.c: 65: temperature_1 = ds18b20_get_temp(1, &minus_1);
   929  000114  0E46               	movlw	low _minus_1
   930  000116  6E30               	movwf	ds18b20_get_temp@minus^0,c
   931  000118  0E01               	movlw	1
   932  00011A  ECDE  F004         	call	_ds18b20_get_temp
   933  00011E  C030  F01B         	movff	?_ds18b20_get_temp,_temperature_1
   934  000122  C031  F01C         	movff	?_ds18b20_get_temp+1,_temperature_1+1
   935                           
   936                           ;main.c: 66: temperature_2 = ds18b20_get_temp(2, &minus_2);
   937  000126  0E45               	movlw	low _minus_2
   938  000128  6E30               	movwf	ds18b20_get_temp@minus^0,c
   939  00012A  0E02               	movlw	2
   940  00012C  ECDE  F004         	call	_ds18b20_get_temp
   941  000130  C030  F019         	movff	?_ds18b20_get_temp,_temperature_2
   942  000134  C031  F01A         	movff	?_ds18b20_get_temp+1,_temperature_2+1
   943  000138                     l2593:
   944                           
   945                           ;main.c: 67: };main.c: 69: if ((temperature_1 >= (temp1_fix + set_t_dq1_up)))
   946  000138  5022               	movf	_set_t_dq1_up^0,w,c
   947  00013A  2417               	addwf	_temp1_fix^0,w,c
   948  00013C  6E41               	movwf	??_main^0,c
   949  00013E  0E00               	movlw	0
   950  000140  2018               	addwfc	(_temp1_fix+1)^0,w,c
   951  000142  6E42               	movwf	(??_main+1)^0,c
   952  000144  5041               	movf	??_main^0,w,c
   953  000146  5C1B               	subwf	_temperature_1^0,w,c
   954  000148  5042               	movf	(??_main+1)^0,w,c
   955  00014A  581C               	subwfb	(_temperature_1+1)^0,w,c
   956  00014C  E302               	bnc	l139
   957                           
   958                           ;main.c: 70: en_sound = 1;
   959  00014E  8047               	bsf	(_en_sound/(0+8))^0,_en_sound& (0+7),c
   960  000150  D001               	goto	l2597
   961  000152                     l139:
   962                           
   963                           ;main.c: 71: else;main.c: 72: en_sound = 0;
   964  000152  9047               	bcf	(_en_sound/(0+8))^0,_en_sound& (0+7),c
   965  000154                     l2597:
   966                           
   967                           ;main.c: 77: lcd_gotoxy(1, 1);
   968  000154  0E01               	movlw	1
   969  000156  6E34               	movwf	lcd_gotoxy@y^0,c
   970  000158  EC89  F007         	call	_lcd_gotoxy
   971                           
   972                           ;main.c: 78: lcdPrint("Êîëîíà:");
   973  00015C  0EF6               	movlw	low STR_5
   974  00015E  6E37               	movwf	lcdPrint@t^0,c
   975  000160  0E1F               	movlw	high STR_5
   976  000162  6E38               	movwf	(lcdPrint@t+1)^0,c
   977  000164  EC8A  F004         	call	_lcdPrint	;wreg free
   978                           
   979                           ;main.c: 79: lcd_gotoxy(8, 1);
   980  000168  0E01               	movlw	1
   981  00016A  6E34               	movwf	lcd_gotoxy@y^0,c
   982  00016C  0E08               	movlw	8
   983  00016E  EC89  F007         	call	_lcd_gotoxy
   984                           
   985                           ;main.c: 80: if (!(temperature_1 == 32767)) {
   986  000172  281B               	incf	_temperature_1^0,w,c
   987  000174  E103               	bnz	u1470
   988  000176  0E7F               	movlw	127
   989  000178  181C               	xorwf	(_temperature_1+1)^0,w,c
   990  00017A  E065               	bz	l2611
   991  00017C                     u1470:
   992                           
   993                           ;main.c: 81: if (((temperature_1 / 100) % 10) == 0) {
   994  00017C  6A33               	clrf	(___lwdiv@divisor+1)^0,c
   995  00017E  0E64               	movlw	100
   996  000180  DAAC               	call	PL8	;call to abstracted procedure
   997  000182  EC4E  F006         	call	___lwdiv	;wreg free
   998  000186  DA9B               	call	PL2	;call to abstracted procedure
   999  000188  EC73  F006         	call	___lwmod	;wreg free
  1000  00018C  5037               	movf	?___lwmod^0,w,c
  1001  00018E  1038               	iorwf	(?___lwmod+1)^0,w,c
  1002  000190  E127               	bnz	l2609
  1003                           
  1004                           ;main.c: 82: lcd_putc(minus_1);
  1005  000192  5046               	movf	_minus_1^0,w,c
  1006  000194  ECB8  F007         	call	_lcd_putc
  1007                           
  1008                           ;main.c: 84: lcd_putc(((temperature_1 / 10) % 10) + 48);
  1009  000198  6A33               	clrf	(___lwdiv@divisor+1)^0,c
  1010  00019A  0E0A               	movlw	10
  1011  00019C  DA9E               	call	PL8	;call to abstracted procedure
  1012  00019E  EC4E  F006         	call	___lwdiv	;wreg free
  1013  0001A2  DA8D               	call	PL2	;call to abstracted procedure
  1014  0001A4  EC73  F006         	call	___lwmod	;wreg free
  1015  0001A8  5037               	movf	?___lwmod^0,w,c
  1016  0001AA  0F30               	addlw	48
  1017  0001AC  ECB8  F007         	call	_lcd_putc
  1018                           
  1019                           ;main.c: 85: lcd_putc('.');
  1020  0001B0  0E2E               	movlw	46
  1021  0001B2  ECB8  F007         	call	_lcd_putc
  1022                           
  1023                           ;main.c: 86: lcd_putc(((temperature_1 % 10) + 48));
  1024  0001B6  DA9B               	call	PL12	;call to abstracted procedure
  1025  0001B8  DA96               	call	PL10	;call to abstracted procedure
  1026  0001BA  EC73  F006         	call	___lwmod	;wreg free
  1027  0001BE  5037               	movf	?___lwmod^0,w,c
  1028  0001C0  0F30               	addlw	48
  1029  0001C2  ECB8  F007         	call	_lcd_putc
  1030                           
  1031                           ;main.c: 87: lcd_putc(0x01);
  1032  0001C6  0E01               	movlw	1
  1033  0001C8  ECB8  F007         	call	_lcd_putc
  1034                           
  1035                           ;main.c: 88: lcd_putc('C');
  1036  0001CC  0E43               	movlw	67
  1037  0001CE  ECB8  F007         	call	_lcd_putc
  1038                           
  1039                           ;main.c: 89: lcd_putc(' ');
  1040  0001D2  0E20               	movlw	32
  1041  0001D4  ECB8  F007         	call	_lcd_putc
  1042                           
  1043                           ;main.c: 90: lcd_putc(' ');
  1044  0001D8  0E20               	movlw	32
  1045  0001DA  ECB8  F007         	call	_lcd_putc
  1046                           
  1047                           ;main.c: 91: } else {
  1048  0001DE  D048               	goto	l144
  1049  0001E0                     l2609:
  1050                           
  1051                           ;main.c: 92: lcd_putc(minus_1);
  1052  0001E0  5046               	movf	_minus_1^0,w,c
  1053  0001E2  ECB8  F007         	call	_lcd_putc
  1054                           
  1055                           ;main.c: 93: lcd_putc(((temperature_1 / 100) % 10) + 48);
  1056  0001E6  6A33               	clrf	(___lwdiv@divisor+1)^0,c
  1057  0001E8  0E64               	movlw	100
  1058  0001EA  DA77               	call	PL8	;call to abstracted procedure
  1059  0001EC  EC4E  F006         	call	___lwdiv	;wreg free
  1060  0001F0  DA66               	call	PL2	;call to abstracted procedure
  1061  0001F2  EC73  F006         	call	___lwmod	;wreg free
  1062  0001F6  5037               	movf	?___lwmod^0,w,c
  1063  0001F8  0F30               	addlw	48
  1064  0001FA  ECB8  F007         	call	_lcd_putc
  1065                           
  1066                           ;main.c: 94: lcd_putc(((temperature_1 / 10) % 10) + 48);
  1067  0001FE  6A33               	clrf	(___lwdiv@divisor+1)^0,c
  1068  000200  0E0A               	movlw	10
  1069  000202  DA6B               	call	PL8	;call to abstracted procedure
  1070  000204  EC4E  F006         	call	___lwdiv	;wreg free
  1071  000208  DA5A               	call	PL2	;call to abstracted procedure
  1072  00020A  EC73  F006         	call	___lwmod	;wreg free
  1073  00020E  5037               	movf	?___lwmod^0,w,c
  1074  000210  0F30               	addlw	48
  1075  000212  ECB8  F007         	call	_lcd_putc
  1076                           
  1077                           ;main.c: 95: lcd_putc('.');
  1078  000216  0E2E               	movlw	46
  1079  000218  ECB8  F007         	call	_lcd_putc
  1080                           
  1081                           ;main.c: 96: lcd_putc(((temperature_1 % 10) + 48));
  1082  00021C  DA68               	call	PL12	;call to abstracted procedure
  1083  00021E  DA63               	call	PL10	;call to abstracted procedure
  1084  000220  EC73  F006         	call	___lwmod	;wreg free
  1085  000224  5037               	movf	?___lwmod^0,w,c
  1086  000226  0F30               	addlw	48
  1087  000228  ECB8  F007         	call	_lcd_putc
  1088                           
  1089                           ;main.c: 97: lcd_putc(0x01);
  1090  00022C  0E01               	movlw	1
  1091  00022E  ECB8  F007         	call	_lcd_putc
  1092                           
  1093                           ;main.c: 98: lcd_putc('C');
  1094  000232  0E43               	movlw	67
  1095  000234  ECB8  F007         	call	_lcd_putc
  1096                           
  1097                           ;main.c: 99: lcd_putc(' ');
  1098  000238  0E20               	movlw	32
  1099  00023A  ECB8  F007         	call	_lcd_putc
  1100                           
  1101                           ;main.c: 100: lcd_putc(' ');
  1102  00023E  0E20               	movlw	32
  1103  000240  ECB8  F007         	call	_lcd_putc
  1104  000244  D015               	goto	l144
  1105  000246                     l2611:
  1106                           
  1107                           ;main.c: 103: lcd_putc('-');
  1108  000246  0E2D               	movlw	45
  1109  000248  ECB8  F007         	call	_lcd_putc
  1110                           
  1111                           ;main.c: 104: lcd_putc('-');
  1112  00024C  0E2D               	movlw	45
  1113  00024E  ECB8  F007         	call	_lcd_putc
  1114                           
  1115                           ;main.c: 105: lcd_putc('-');
  1116  000252  0E2D               	movlw	45
  1117  000254  ECB8  F007         	call	_lcd_putc
  1118                           
  1119                           ;main.c: 106: lcd_putc(' ');
  1120  000258  0E20               	movlw	32
  1121  00025A  ECB8  F007         	call	_lcd_putc
  1122                           
  1123                           ;main.c: 107: lcd_putc(' ');
  1124  00025E  0E20               	movlw	32
  1125  000260  ECB8  F007         	call	_lcd_putc
  1126                           
  1127                           ;main.c: 108: lcd_putc(' ');
  1128  000264  0E20               	movlw	32
  1129  000266  ECB8  F007         	call	_lcd_putc
  1130                           
  1131                           ;main.c: 109: lcd_putc(' ');
  1132  00026A  0E20               	movlw	32
  1133  00026C  ECB8  F007         	call	_lcd_putc
  1134  000270                     l144:
  1135                           
  1136                           ;main.c: 110: };main.c: 112: lcd_gotoxy(1, 2);
  1137  000270  DA48               	call	PL16	;call to abstracted procedure
  1138  000272  EC89  F007         	call	_lcd_gotoxy
  1139                           
  1140                           ;main.c: 113: lcdPrint("Ãîëîâà:");
  1141  000276  0EEE               	movlw	low STR_6
  1142  000278  6E37               	movwf	lcdPrint@t^0,c
  1143  00027A  0E1F               	movlw	high STR_6
  1144  00027C  6E38               	movwf	(lcdPrint@t+1)^0,c
  1145  00027E  EC8A  F004         	call	_lcdPrint	;wreg free
  1146                           
  1147                           ;main.c: 114: lcd_gotoxy(8, 2);
  1148  000282  0E02               	movlw	2
  1149  000284  6E34               	movwf	lcd_gotoxy@y^0,c
  1150  000286  0E08               	movlw	8
  1151  000288  EC89  F007         	call	_lcd_gotoxy
  1152                           
  1153                           ;main.c: 115: if (!(temperature_2 == 32767)) {
  1154  00028C  2819               	incf	_temperature_2^0,w,c
  1155  00028E  E103               	bnz	u1490
  1156  000290  0E7F               	movlw	127
  1157  000292  181A               	xorwf	(_temperature_2+1)^0,w,c
  1158  000294  E065               	bz	l2625
  1159  000296                     u1490:
  1160                           
  1161                           ;main.c: 116: if (((temperature_2 / 100) % 10) == 0) {
  1162  000296  6A33               	clrf	(___lwdiv@divisor+1)^0,c
  1163  000298  0E64               	movlw	100
  1164  00029A  DA19               	call	PL6	;call to abstracted procedure
  1165  00029C  EC4E  F006         	call	___lwdiv	;wreg free
  1166  0002A0  DA0E               	call	PL2	;call to abstracted procedure
  1167  0002A2  EC73  F006         	call	___lwmod	;wreg free
  1168  0002A6  5037               	movf	?___lwmod^0,w,c
  1169  0002A8  1038               	iorwf	(?___lwmod+1)^0,w,c
  1170  0002AA  E127               	bnz	l2623
  1171                           
  1172                           ;main.c: 117: lcd_putc(minus_2);
  1173  0002AC  5045               	movf	_minus_2^0,w,c
  1174  0002AE  ECB8  F007         	call	_lcd_putc
  1175                           
  1176                           ;main.c: 119: lcd_putc(((temperature_2 / 10) % 10) + 48);
  1177  0002B2  6A33               	clrf	(___lwdiv@divisor+1)^0,c
  1178  0002B4  0E0A               	movlw	10
  1179  0002B6  DA0B               	call	PL6	;call to abstracted procedure
  1180  0002B8  EC4E  F006         	call	___lwdiv	;wreg free
  1181  0002BC  DA00               	call	PL2	;call to abstracted procedure
  1182  0002BE  EC73  F006         	call	___lwmod	;wreg free
  1183  0002C2  5037               	movf	?___lwmod^0,w,c
  1184  0002C4  0F30               	addlw	48
  1185  0002C6  ECB8  F007         	call	_lcd_putc
  1186                           
  1187                           ;main.c: 120: lcd_putc('.');
  1188  0002CA  0E2E               	movlw	46
  1189  0002CC  ECB8  F007         	call	_lcd_putc
  1190                           
  1191                           ;main.c: 121: lcd_putc(((temperature_2 % 10) + 48));
  1192  0002D0  DA13               	call	PL14	;call to abstracted procedure
  1193  0002D2  DA09               	call	PL10	;call to abstracted procedure
  1194  0002D4  EC73  F006         	call	___lwmod	;wreg free
  1195  0002D8  5037               	movf	?___lwmod^0,w,c
  1196  0002DA  0F30               	addlw	48
  1197  0002DC  ECB8  F007         	call	_lcd_putc
  1198                           
  1199                           ;main.c: 122: lcd_putc(0x01);
  1200  0002E0  0E01               	movlw	1
  1201  0002E2  ECB8  F007         	call	_lcd_putc
  1202                           
  1203                           ;main.c: 123: lcd_putc('C');
  1204  0002E6  0E43               	movlw	67
  1205  0002E8  ECB8  F007         	call	_lcd_putc
  1206                           
  1207                           ;main.c: 124: lcd_putc(' ');
  1208  0002EC  0E20               	movlw	32
  1209  0002EE  ECB8  F007         	call	_lcd_putc
  1210                           
  1211                           ;main.c: 125: lcd_putc(' ');
  1212  0002F2  0E20               	movlw	32
  1213  0002F4  ECB8  F007         	call	_lcd_putc
  1214                           
  1215                           ;main.c: 126: } else {
  1216  0002F8  D048               	goto	l2627
  1217  0002FA                     l2623:
  1218                           
  1219                           ;main.c: 127: lcd_putc(minus_2);
  1220  0002FA  5045               	movf	_minus_2^0,w,c
  1221  0002FC  ECB8  F007         	call	_lcd_putc
  1222                           
  1223                           ;main.c: 128: lcd_putc(((temperature_2 / 100) % 10) + 48);
  1224  000300  6A33               	clrf	(___lwdiv@divisor+1)^0,c
  1225  000302  0E64               	movlw	100
  1226  000304  D9E4               	call	PL6	;call to abstracted procedure
  1227  000306  EC4E  F006         	call	___lwdiv	;wreg free
  1228  00030A  D9D9               	call	PL2	;call to abstracted procedure
  1229  00030C  EC73  F006         	call	___lwmod	;wreg free
  1230  000310  5037               	movf	?___lwmod^0,w,c
  1231  000312  0F30               	addlw	48
  1232  000314  ECB8  F007         	call	_lcd_putc
  1233                           
  1234                           ;main.c: 129: lcd_putc(((temperature_2 / 10) % 10) + 48);
  1235  000318  6A33               	clrf	(___lwdiv@divisor+1)^0,c
  1236  00031A  0E0A               	movlw	10
  1237  00031C  D9D8               	call	PL6	;call to abstracted procedure
  1238  00031E  EC4E  F006         	call	___lwdiv	;wreg free
  1239  000322  D9CD               	call	PL2	;call to abstracted procedure
  1240  000324  EC73  F006         	call	___lwmod	;wreg free
  1241  000328  5037               	movf	?___lwmod^0,w,c
  1242  00032A  0F30               	addlw	48
  1243  00032C  ECB8  F007         	call	_lcd_putc
  1244                           
  1245                           ;main.c: 130: lcd_putc('.');
  1246  000330  0E2E               	movlw	46
  1247  000332  ECB8  F007         	call	_lcd_putc
  1248                           
  1249                           ;main.c: 131: lcd_putc(((temperature_2 % 10) + 48));
  1250  000336  D9E0               	call	PL14	;call to abstracted procedure
  1251  000338  D9D6               	call	PL10	;call to abstracted procedure
  1252  00033A  EC73  F006         	call	___lwmod	;wreg free
  1253  00033E  5037               	movf	?___lwmod^0,w,c
  1254  000340  0F30               	addlw	48
  1255  000342  ECB8  F007         	call	_lcd_putc
  1256                           
  1257                           ;main.c: 132: lcd_putc(0x01);
  1258  000346  0E01               	movlw	1
  1259  000348  ECB8  F007         	call	_lcd_putc
  1260                           
  1261                           ;main.c: 133: lcd_putc('C');
  1262  00034C  0E43               	movlw	67
  1263  00034E  ECB8  F007         	call	_lcd_putc
  1264                           
  1265                           ;main.c: 134: lcd_putc(' ');
  1266  000352  0E20               	movlw	32
  1267  000354  ECB8  F007         	call	_lcd_putc
  1268                           
  1269                           ;main.c: 135: lcd_putc(' ');
  1270  000358  0E20               	movlw	32
  1271  00035A  ECB8  F007         	call	_lcd_putc
  1272  00035E  D015               	goto	l2627
  1273  000360                     l2625:
  1274                           
  1275                           ;main.c: 138: lcd_putc('-');
  1276  000360  0E2D               	movlw	45
  1277  000362  ECB8  F007         	call	_lcd_putc
  1278                           
  1279                           ;main.c: 139: lcd_putc('-');
  1280  000366  0E2D               	movlw	45
  1281  000368  ECB8  F007         	call	_lcd_putc
  1282                           
  1283                           ;main.c: 140: lcd_putc('-');
  1284  00036C  0E2D               	movlw	45
  1285  00036E  ECB8  F007         	call	_lcd_putc
  1286                           
  1287                           ;main.c: 141: lcd_putc(' ');
  1288  000372  0E20               	movlw	32
  1289  000374  ECB8  F007         	call	_lcd_putc
  1290                           
  1291                           ;main.c: 142: lcd_putc(' ');
  1292  000378  0E20               	movlw	32
  1293  00037A  ECB8  F007         	call	_lcd_putc
  1294                           
  1295                           ;main.c: 143: lcd_putc(' ');
  1296  00037E  0E20               	movlw	32
  1297  000380  ECB8  F007         	call	_lcd_putc
  1298                           
  1299                           ;main.c: 144: lcd_putc(' ');
  1300  000384  0E20               	movlw	32
  1301  000386  ECB8  F007         	call	_lcd_putc
  1302  00038A                     l2627:
  1303                           
  1304                           ;main.c: 145: };main.c: 146: if (pressed_key == 1) {
  1305  00038A  0424               	decf	_pressed_key^0,w,c
  1306  00038C  E115               	bnz	l2643
  1307                           
  1308                           ;main.c: 147: clearLCD();
  1309  00038E  EC97  F007         	call	_clearLCD	;wreg free
  1310                           
  1311                           ;main.c: 148: select = 4;
  1312  000392  0E04               	movlw	4
  1313                           
  1314                           ;main.c: 149: lcd_gotoxy(1, 1);
  1315  000394  D9C7               	call	PL30	;call to abstracted procedure
  1316  000396  EC89  F007         	call	_lcd_gotoxy
  1317                           
  1318                           ;main.c: 150: lcdPrint("  Ãiñòåðåçèñ  ");
  1319  00039A  0E8F               	movlw	low STR_7
  1320  00039C  6E37               	movwf	lcdPrint@t^0,c
  1321  00039E  0E1F               	movlw	high STR_7
  1322  0003A0  6E38               	movwf	(lcdPrint@t+1)^0,c
  1323  0003A2  EC8A  F004         	call	_lcdPrint	;wreg free
  1324                           
  1325                           ;main.c: 151: lcd_gotoxy(1, 2);
  1326  0003A6  D9AD               	call	PL16	;call to abstracted procedure
  1327  0003A8  EC89  F007         	call	_lcd_gotoxy
  1328                           
  1329                           ;main.c: 152: lcdPrint("Êîë(1)/Ãîë(2):");
  1330  0003AC  0EAD               	movlw	low STR_8
  1331  0003AE  6E37               	movwf	lcdPrint@t^0,c
  1332  0003B0  0E1F               	movlw	high STR_8
  1333  0003B2  6E38               	movwf	(lcdPrint@t+1)^0,c
  1334  0003B4  EC8A  F004         	call	_lcdPrint	;wreg free
  1335  0003B8                     l2643:
  1336                           
  1337                           ;main.c: 156: };main.c: 157: if (pressed_key == 3) {
  1338  0003B8  0E03               	movlw	3
  1339  0003BA  1824               	xorwf	_pressed_key^0,w,c
  1340  0003BC  E001 D699          	bnz	l2581
  1341                           
  1342                           ;main.c: 159: temp2_fix = temperature_2;
  1343  0003C0  C01B  F017         	movff	_temperature_1,_temp1_fix
  1344  0003C4  C01C  F018         	movff	_temperature_1+1,_temp1_fix+1
  1345  0003C8  D694               	goto	l2581
  1346  0003CA                     l2647:
  1347                           
  1348                           ;main.c: 165: lcd_gotoxy(14, 2);
  1349  0003CA  0E02               	movlw	2
  1350  0003CC  6E34               	movwf	lcd_gotoxy@y^0,c
  1351  0003CE  0E0E               	movlw	14
  1352  0003D0  EC89  F007         	call	_lcd_gotoxy
  1353                           
  1354                           ;main.c: 166: lcd_putc(dq_num + 48);
  1355  0003D4  5043               	movf	_dq_num^0,w,c
  1356  0003D6  0F30               	addlw	48
  1357  0003D8  ECB8  F007         	call	_lcd_putc
  1358                           
  1359                           ;main.c: 167: if (pressed_key == 1) {
  1360  0003DC  0424               	decf	_pressed_key^0,w,c
  1361  0003DE  E106               	bnz	l2657
  1362                           
  1363                           ;main.c: 168: dq_num++;
  1364  0003E0  2A43               	incf	_dq_num^0,f,c
  1365                           
  1366                           ;main.c: 169: if (dq_num == 3)
  1367  0003E2  0E03               	movlw	3
  1368  0003E4  1843               	xorwf	_dq_num^0,w,c
  1369  0003E6  E102               	bnz	l2657
  1370                           
  1371                           ;main.c: 170: dq_num = 1;
  1372  0003E8  0E01               	movlw	1
  1373  0003EA  6E43               	movwf	_dq_num^0,c
  1374  0003EC                     l2657:
  1375                           
  1376                           ;main.c: 171: };main.c: 172: if (pressed_key == 2) {
  1377  0003EC  0E02               	movlw	2
  1378  0003EE  1824               	xorwf	_pressed_key^0,w,c
  1379  0003F0  E105               	bnz	l2665
  1380                           
  1381                           ;main.c: 173: dq_num--;
  1382  0003F2  0643               	decf	_dq_num^0,f,c
  1383                           
  1384                           ;main.c: 174: if (dq_num == 0)
  1385  0003F4  5043               	movf	_dq_num^0,w,c
  1386  0003F6  E102               	bnz	l2665
  1387                           
  1388                           ;main.c: 175: dq_num = 2;
  1389  0003F8  0E02               	movlw	2
  1390  0003FA  6E43               	movwf	_dq_num^0,c
  1391  0003FC                     l2665:
  1392                           
  1393                           ;main.c: 176: };main.c: 177: if (pressed_key == 3) {
  1394  0003FC  0E03               	movlw	3
  1395  0003FE  1824               	xorwf	_pressed_key^0,w,c
  1396  000400  E001 D677          	bnz	l2581
  1397                           
  1398                           ;main.c: 178: if (ds18b20_readrom(dq_num)) {
  1399  000404  5043               	movf	_dq_num^0,w,c
  1400  000406  EC9A  F005         	call	_ds18b20_readrom
  1401  00040A  0900               	iorlw	0
  1402  00040C  E009               	bz	l2673
  1403                           
  1404                           ;main.c: 179: lcd_gotoxy(1, 2);
  1405  00040E  D979               	call	PL16	;call to abstracted procedure
  1406  000410  EC89  F007         	call	_lcd_gotoxy
  1407                           
  1408                           ;main.c: 180: lcdPrint(" Êîä ïðî÷èòàíî ");
  1409  000414  0E4F               	movlw	low STR_9
  1410  000416  6E37               	movwf	lcdPrint@t^0,c
  1411  000418  0E1F               	movlw	high STR_9
  1412  00041A  6E38               	movwf	(lcdPrint@t+1)^0,c
  1413  00041C  EC8A  F004         	call	_lcdPrint	;wreg free
  1414  000420                     l2673:
  1415                           
  1416                           ;main.c: 181: };main.c: 183: select = 3;
  1417  000420  0E03               	movlw	3
  1418  000422  6E44               	movwf	_select^0,c
  1419  000424  D666               	goto	l2581
  1420  000426                     l2675:
  1421                           
  1422                           ;main.c: 189: lcd_gotoxy(16, 2);
  1423  000426  0E02               	movlw	2
  1424  000428  6E34               	movwf	lcd_gotoxy@y^0,c
  1425  00042A  0E10               	movlw	16
  1426  00042C  EC89  F007         	call	_lcd_gotoxy
  1427                           
  1428                           ;main.c: 190: lcd_putc(dq_num + 48);
  1429  000430  5043               	movf	_dq_num^0,w,c
  1430  000432  0F30               	addlw	48
  1431  000434  ECB8  F007         	call	_lcd_putc
  1432                           
  1433                           ;main.c: 191: if (pressed_key == 1) {
  1434  000438  0424               	decf	_pressed_key^0,w,c
  1435  00043A  E106               	bnz	l2685
  1436                           
  1437                           ;main.c: 192: dq_num++;
  1438  00043C  2A43               	incf	_dq_num^0,f,c
  1439                           
  1440                           ;main.c: 193: if (dq_num == 3)
  1441  00043E  0E03               	movlw	3
  1442  000440  1843               	xorwf	_dq_num^0,w,c
  1443  000442  E102               	bnz	l2685
  1444                           
  1445                           ;main.c: 194: dq_num = 1;
  1446  000444  0E01               	movlw	1
  1447  000446  6E43               	movwf	_dq_num^0,c
  1448  000448                     l2685:
  1449                           
  1450                           ;main.c: 195: };main.c: 196: if (pressed_key == 2) {
  1451  000448  0E02               	movlw	2
  1452  00044A  1824               	xorwf	_pressed_key^0,w,c
  1453  00044C  E105               	bnz	l2693
  1454                           
  1455                           ;main.c: 197: dq_num--;
  1456  00044E  0643               	decf	_dq_num^0,f,c
  1457                           
  1458                           ;main.c: 198: if (dq_num == 0)
  1459  000450  5043               	movf	_dq_num^0,w,c
  1460  000452  E102               	bnz	l2693
  1461                           
  1462                           ;main.c: 199: dq_num = 2;
  1463  000454  0E02               	movlw	2
  1464  000456  6E43               	movwf	_dq_num^0,c
  1465  000458                     l2693:
  1466                           
  1467                           ;main.c: 200: };main.c: 201: if (pressed_key == 3) {
  1468  000458  0E03               	movlw	3
  1469  00045A  1824               	xorwf	_pressed_key^0,w,c
  1470  00045C  E001 D649          	bnz	l2581
  1471                           
  1472                           ;main.c: 202: if (dq_num == 1) {
  1473  000460  0443               	decf	_dq_num^0,w,c
  1474  000462  E115               	bnz	l2709
  1475                           
  1476                           ;main.c: 203: select = 5;
  1477  000464  0E05               	movlw	5
  1478                           
  1479                           ;main.c: 204: sub_sel = 1;
  1480  000466  D968               	call	PL38	;call to abstracted procedure
  1481                           
  1482                           ;main.c: 205: clearLCD();
  1483  000468  EC97  F007         	call	_clearLCD	;wreg free
  1484                           
  1485                           ;main.c: 206: lcd_gotoxy(1, 1);
  1486  00046C  0E01               	movlw	1
  1487  00046E  6E34               	movwf	lcd_gotoxy@y^0,c
  1488  000470  EC89  F007         	call	_lcd_gotoxy
  1489                           
  1490                           ;main.c: 207: lcdPrint("    Êîëîíà  ");
  1491  000474  0EC9               	movlw	low STR_10
  1492  000476  6E37               	movwf	lcdPrint@t^0,c
  1493  000478  0E1F               	movlw	high STR_10
  1494  00047A  6E38               	movwf	(lcdPrint@t+1)^0,c
  1495  00047C  EC8A  F004         	call	_lcdPrint	;wreg free
  1496                           
  1497                           ;main.c: 208: lcd_gotoxy(1, 2);
  1498  000480  D940               	call	PL16	;call to abstracted procedure
  1499  000482  EC89  F007         	call	_lcd_gotoxy
  1500                           
  1501                           ;main.c: 209: lcdPrint("Òåìï Âåðõ:");
  1502  000486  D945               	call	PL24	;call to abstracted procedure
  1503  000488  EC8A  F004         	call	_lcdPrint	;wreg free
  1504                           
  1505                           ;main.c: 210: } else {
  1506  00048C  D632               	goto	l2581
  1507  00048E                     l2709:
  1508                           
  1509                           ;main.c: 211: select = 6;
  1510  00048E  0E06               	movlw	6
  1511                           
  1512                           ;main.c: 212: sub_sel = 1;
  1513  000490  D953               	call	PL38	;call to abstracted procedure
  1514                           
  1515                           ;main.c: 213: clearLCD();
  1516  000492  EC97  F007         	call	_clearLCD	;wreg free
  1517                           
  1518                           ;main.c: 214: lcd_gotoxy(1, 1);
  1519  000496  0E01               	movlw	1
  1520  000498  6E34               	movwf	lcd_gotoxy@y^0,c
  1521  00049A  EC89  F007         	call	_lcd_gotoxy
  1522                           
  1523                           ;main.c: 215: lcdPrint("    Ãîëîâà  ");
  1524  00049E  0EBC               	movlw	low STR_12
  1525  0004A0  6E37               	movwf	lcdPrint@t^0,c
  1526  0004A2  0E1F               	movlw	high STR_12
  1527  0004A4  6E38               	movwf	(lcdPrint@t+1)^0,c
  1528  0004A6  EC8A  F004         	call	_lcdPrint	;wreg free
  1529                           
  1530                           ;main.c: 216: lcd_gotoxy(1, 2);
  1531  0004AA  D92B               	call	PL16	;call to abstracted procedure
  1532  0004AC  EC89  F007         	call	_lcd_gotoxy
  1533                           
  1534                           ;main.c: 217: lcdPrint("Òåìï Âåðõ:");
  1535  0004B0  D930               	call	PL24	;call to abstracted procedure
  1536  0004B2  EC8A  F004         	call	_lcdPrint	;wreg free
  1537  0004B6  D61D               	goto	l2581
  1538  0004B8                     l2721:
  1539                           
  1540                           ;main.c: 225: lcd_gotoxy(11, 2);
  1541  0004B8  D93C               	call	PL36	;call to abstracted procedure
  1542  0004BA  EC89  F007         	call	_lcd_gotoxy
  1543                           
  1544                           ;main.c: 226: lcd_putc('+');
  1545  0004BE  0E2B               	movlw	43
  1546  0004C0  ECB8  F007         	call	_lcd_putc
  1547                           
  1548                           ;main.c: 227: lcd_putc(((set_t_dq1_up / 10) % 10) + 48);
  1549  0004C4  0E0A               	movlw	10
  1550  0004C6  6E34               	movwf	___lbmod@divisor^0,c
  1551  0004C8  6E30               	movwf	___lbdiv@divisor^0,c
  1552  0004CA  5022               	movf	_set_t_dq1_up^0,w,c
  1553  0004CC  ECE6  F006         	call	___lbdiv
  1554  0004D0  EC31  F007         	call	___lbmod
  1555  0004D4  0F30               	addlw	48
  1556  0004D6  ECB8  F007         	call	_lcd_putc
  1557                           
  1558                           ;main.c: 228: lcd_putc('.');
  1559  0004DA  0E2E               	movlw	46
  1560  0004DC  ECB8  F007         	call	_lcd_putc
  1561                           
  1562                           ;main.c: 229: lcd_putc(((set_t_dq1_up % 10) + 48));
  1563  0004E0  0E0A               	movlw	10
  1564  0004E2  6E34               	movwf	___lbmod@divisor^0,c
  1565  0004E4  5022               	movf	_set_t_dq1_up^0,w,c
  1566  0004E6  EC31  F007         	call	___lbmod
  1567  0004EA  0F30               	addlw	48
  1568  0004EC  ECB8  F007         	call	_lcd_putc
  1569                           
  1570                           ;main.c: 231: if (pressed_key == 1) {
  1571  0004F0  0424               	decf	_pressed_key^0,w,c
  1572  0004F2  E105               	bnz	l2731
  1573                           
  1574                           ;main.c: 232: set_t_dq1_up++;
  1575  0004F4  2A22               	incf	_set_t_dq1_up^0,f,c
  1576                           
  1577                           ;main.c: 233: if (set_t_dq1_up == 11)
  1578  0004F6  0E0B               	movlw	11
  1579  0004F8  1822               	xorwf	_set_t_dq1_up^0,w,c
  1580  0004FA  E101               	bnz	l2731
  1581                           
  1582                           ;main.c: 234: set_t_dq1_up = 0;
  1583  0004FC  6A22               	clrf	_set_t_dq1_up^0,c
  1584  0004FE                     l2731:
  1585                           
  1586                           ;main.c: 235: };main.c: 236: if (pressed_key == 2) {
  1587  0004FE  0E02               	movlw	2
  1588  000500  1824               	xorwf	_pressed_key^0,w,c
  1589  000502  E105               	bnz	l2739
  1590                           
  1591                           ;main.c: 237: set_t_dq1_up--;
  1592  000504  0622               	decf	_set_t_dq1_up^0,f,c
  1593                           
  1594                           ;main.c: 238: if (set_t_dq1_up == 255)
  1595  000506  2822               	incf	_set_t_dq1_up^0,w,c
  1596  000508  E102               	bnz	l2739
  1597                           
  1598                           ;main.c: 239: set_t_dq1_up = 10;
  1599  00050A  0E0A               	movlw	10
  1600  00050C  6E22               	movwf	_set_t_dq1_up^0,c
  1601  00050E                     l2739:
  1602                           
  1603                           ;main.c: 240: };main.c: 241: if (pressed_key == 3) {
  1604  00050E  0E03               	movlw	3
  1605  000510  1824               	xorwf	_pressed_key^0,w,c
  1606  000512  E001 D5EE          	bnz	l2581
  1607                           
  1608                           ;main.c: 242: sub_sel = 2;
  1609                           
  1610                           ;main.c: 243: lcd_gotoxy(1, 2);
  1611  000516  D902               	call	PL26	;call to abstracted procedure
  1612  000518  EC89  F007         	call	_lcd_gotoxy
  1613                           
  1614                           ;main.c: 244: lcdPrint("Òåìï Íèç:     ");
  1615  00051C  D8F5               	call	PL22	;call to abstracted procedure
  1616  00051E  EC8A  F004         	call	_lcdPrint	;wreg free
  1617  000522  D5E7               	goto	l2581
  1618  000524                     l2747:
  1619                           
  1620                           ;main.c: 248: lcd_gotoxy(10, 2);
  1621  000524  D903               	call	PL34	;call to abstracted procedure
  1622  000526  EC89  F007         	call	_lcd_gotoxy
  1623                           
  1624                           ;main.c: 249: lcd_putc('-');
  1625  00052A  0E2D               	movlw	45
  1626  00052C  ECB8  F007         	call	_lcd_putc
  1627                           
  1628                           ;main.c: 250: lcd_putc(((set_t_dq1_dwn / 10) % 10) + 48);
  1629  000530  0E0A               	movlw	10
  1630  000532  6E34               	movwf	___lbmod@divisor^0,c
  1631  000534  6E30               	movwf	___lbdiv@divisor^0,c
  1632  000536  5021               	movf	_set_t_dq1_dwn^0,w,c
  1633  000538  ECE6  F006         	call	___lbdiv
  1634  00053C  EC31  F007         	call	___lbmod
  1635  000540  0F30               	addlw	48
  1636  000542  ECB8  F007         	call	_lcd_putc
  1637                           
  1638                           ;main.c: 251: lcd_putc('.');
  1639  000546  0E2E               	movlw	46
  1640  000548  ECB8  F007         	call	_lcd_putc
  1641                           
  1642                           ;main.c: 252: lcd_putc(((set_t_dq1_dwn % 10) + 48));
  1643  00054C  0E0A               	movlw	10
  1644  00054E  6E34               	movwf	___lbmod@divisor^0,c
  1645  000550  5021               	movf	_set_t_dq1_dwn^0,w,c
  1646  000552  EC31  F007         	call	___lbmod
  1647  000556  0F30               	addlw	48
  1648  000558  ECB8  F007         	call	_lcd_putc
  1649                           
  1650                           ;main.c: 254: if (pressed_key == 1) {
  1651  00055C  0424               	decf	_pressed_key^0,w,c
  1652  00055E  E105               	bnz	l2757
  1653                           
  1654                           ;main.c: 255: set_t_dq1_dwn++;
  1655  000560  2A21               	incf	_set_t_dq1_dwn^0,f,c
  1656                           
  1657                           ;main.c: 256: if (set_t_dq1_dwn == 11)
  1658  000562  0E0B               	movlw	11
  1659  000564  1821               	xorwf	_set_t_dq1_dwn^0,w,c
  1660  000566  E101               	bnz	l2757
  1661                           
  1662                           ;main.c: 257: set_t_dq1_dwn = 0;
  1663  000568  6A21               	clrf	_set_t_dq1_dwn^0,c
  1664  00056A                     l2757:
  1665                           
  1666                           ;main.c: 258: };main.c: 259: if (pressed_key == 2) {
  1667  00056A  0E02               	movlw	2
  1668  00056C  1824               	xorwf	_pressed_key^0,w,c
  1669  00056E  E105               	bnz	l2765
  1670                           
  1671                           ;main.c: 260: set_t_dq1_dwn--;
  1672  000570  0621               	decf	_set_t_dq1_dwn^0,f,c
  1673                           
  1674                           ;main.c: 261: if (set_t_dq1_dwn == 255)
  1675  000572  2821               	incf	_set_t_dq1_dwn^0,w,c
  1676  000574  E102               	bnz	l2765
  1677                           
  1678                           ;main.c: 262: set_t_dq1_dwn = 10;
  1679  000576  0E0A               	movlw	10
  1680  000578  6E21               	movwf	_set_t_dq1_dwn^0,c
  1681  00057A                     l2765:
  1682                           
  1683                           ;main.c: 263: };main.c: 264: if (pressed_key == 3) {
  1684  00057A  0E03               	movlw	3
  1685  00057C  1824               	xorwf	_pressed_key^0,w,c
  1686  00057E  E001 D5B8          	bnz	l2581
  1687                           
  1688                           ;main.c: 265: select = 1;
  1689  000582  0E01               	movlw	1
  1690  000584  6E44               	movwf	_select^0,c
  1691                           
  1692                           ;main.c: 266: write_eep(16, set_t_dq1_up);
  1693  000586  C022  F030         	movff	_set_t_dq1_up,write_eep@data
  1694  00058A  0E10               	movlw	16
  1695  00058C  EC44  F007         	call	_write_eep
  1696                           
  1697                           ;main.c: 267: write_eep(17, set_t_dq1_dwn);
  1698  000590  C021  F030         	movff	_set_t_dq1_dwn,write_eep@data
  1699  000594  0E11               	movlw	17
  1700  000596  EC44  F007         	call	_write_eep
  1701  00059A  D5AB               	goto	l2581
  1702  00059C                     l2775:
  1703  00059C  5023               	movf	_sub_sel^0,w,c
  1704                           
  1705                           ; Switch size 1, requested type "space"
  1706                           ; Number of cases is 2, Range of values is 1 to 2
  1707                           ; switch strategies available:
  1708                           ; Name         Instructions Cycles
  1709                           ; simple_byte            7     4 (average)
  1710                           ;	Chosen strategy is simple_byte
  1711  00059E  0A01               	xorlw	1	; case 1
  1712  0005A0  E08B               	bz	l2721
  1713  0005A2  0A03               	xorlw	3	; case 2
  1714  0005A4  E0BF               	bz	l2747
  1715  0005A6  D5A5               	goto	l2581
  1716  0005A8                     l2777:
  1717                           
  1718                           ;main.c: 276: lcd_gotoxy(11, 2);
  1719  0005A8  D8C4               	call	PL36	;call to abstracted procedure
  1720  0005AA  EC89  F007         	call	_lcd_gotoxy
  1721                           
  1722                           ;main.c: 277: lcd_putc('+');
  1723  0005AE  0E2B               	movlw	43
  1724  0005B0  ECB8  F007         	call	_lcd_putc
  1725                           
  1726                           ;main.c: 278: lcd_putc(((set_t_dq2_up / 10) % 10) + 48);
  1727  0005B4  0E0A               	movlw	10
  1728  0005B6  6E34               	movwf	___lbmod@divisor^0,c
  1729  0005B8  6E30               	movwf	___lbdiv@divisor^0,c
  1730  0005BA  5020               	movf	_set_t_dq2_up^0,w,c
  1731  0005BC  ECE6  F006         	call	___lbdiv
  1732  0005C0  EC31  F007         	call	___lbmod
  1733  0005C4  0F30               	addlw	48
  1734  0005C6  ECB8  F007         	call	_lcd_putc
  1735                           
  1736                           ;main.c: 279: lcd_putc('.');
  1737  0005CA  0E2E               	movlw	46
  1738  0005CC  ECB8  F007         	call	_lcd_putc
  1739                           
  1740                           ;main.c: 280: lcd_putc(((set_t_dq2_up % 10) + 48));
  1741  0005D0  0E0A               	movlw	10
  1742  0005D2  6E34               	movwf	___lbmod@divisor^0,c
  1743  0005D4  5020               	movf	_set_t_dq2_up^0,w,c
  1744  0005D6  EC31  F007         	call	___lbmod
  1745  0005DA  0F30               	addlw	48
  1746  0005DC  ECB8  F007         	call	_lcd_putc
  1747                           
  1748                           ;main.c: 282: if (pressed_key == 1) {
  1749  0005E0  0424               	decf	_pressed_key^0,w,c
  1750  0005E2  E105               	bnz	l2787
  1751                           
  1752                           ;main.c: 283: set_t_dq2_up++;
  1753  0005E4  2A20               	incf	_set_t_dq2_up^0,f,c
  1754                           
  1755                           ;main.c: 284: if (set_t_dq2_up == 11)
  1756  0005E6  0E0B               	movlw	11
  1757  0005E8  1820               	xorwf	_set_t_dq2_up^0,w,c
  1758  0005EA  E101               	bnz	l2787
  1759                           
  1760                           ;main.c: 285: set_t_dq2_up = 0;
  1761  0005EC  6A20               	clrf	_set_t_dq2_up^0,c
  1762  0005EE                     l2787:
  1763                           
  1764                           ;main.c: 286: };main.c: 287: if (pressed_key == 2) {
  1765  0005EE  0E02               	movlw	2
  1766  0005F0  1824               	xorwf	_pressed_key^0,w,c
  1767  0005F2  E105               	bnz	l2795
  1768                           
  1769                           ;main.c: 288: set_t_dq2_up--;
  1770  0005F4  0620               	decf	_set_t_dq2_up^0,f,c
  1771                           
  1772                           ;main.c: 289: if (set_t_dq2_up == 255)
  1773  0005F6  2820               	incf	_set_t_dq2_up^0,w,c
  1774  0005F8  E102               	bnz	l2795
  1775                           
  1776                           ;main.c: 290: set_t_dq2_up = 10;
  1777  0005FA  0E0A               	movlw	10
  1778  0005FC  6E20               	movwf	_set_t_dq2_up^0,c
  1779  0005FE                     l2795:
  1780                           
  1781                           ;main.c: 291: };main.c: 292: if (pressed_key == 3) {
  1782  0005FE  0E03               	movlw	3
  1783  000600  1824               	xorwf	_pressed_key^0,w,c
  1784  000602  E001 D576          	bnz	l2581
  1785                           
  1786                           ;main.c: 293: sub_sel = 2;
  1787                           
  1788                           ;main.c: 294: lcd_gotoxy(1, 2);
  1789  000606  D88A               	call	PL26	;call to abstracted procedure
  1790  000608  EC89  F007         	call	_lcd_gotoxy
  1791                           
  1792                           ;main.c: 295: lcdPrint("Òåìï Íèç:     ");
  1793  00060C  D87D               	call	PL22	;call to abstracted procedure
  1794  00060E  EC8A  F004         	call	_lcdPrint	;wreg free
  1795  000612  D56F               	goto	l2581
  1796  000614                     l2803:
  1797                           
  1798                           ;main.c: 299: lcd_gotoxy(10, 2);
  1799  000614  D88B               	call	PL34	;call to abstracted procedure
  1800  000616  EC89  F007         	call	_lcd_gotoxy
  1801                           
  1802                           ;main.c: 300: lcd_putc('-');
  1803  00061A  0E2D               	movlw	45
  1804  00061C  ECB8  F007         	call	_lcd_putc
  1805                           
  1806                           ;main.c: 301: lcd_putc(((set_t_dq2_dwn / 10) % 10) + 48);
  1807  000620  0E0A               	movlw	10
  1808  000622  6E34               	movwf	___lbmod@divisor^0,c
  1809  000624  6E30               	movwf	___lbdiv@divisor^0,c
  1810  000626  501F               	movf	_set_t_dq2_dwn^0,w,c
  1811  000628  ECE6  F006         	call	___lbdiv
  1812  00062C  EC31  F007         	call	___lbmod
  1813  000630  0F30               	addlw	48
  1814  000632  ECB8  F007         	call	_lcd_putc
  1815                           
  1816                           ;main.c: 302: lcd_putc('.');
  1817  000636  0E2E               	movlw	46
  1818  000638  ECB8  F007         	call	_lcd_putc
  1819                           
  1820                           ;main.c: 303: lcd_putc(((set_t_dq2_dwn % 10) + 48));
  1821  00063C  0E0A               	movlw	10
  1822  00063E  6E34               	movwf	___lbmod@divisor^0,c
  1823  000640  501F               	movf	_set_t_dq2_dwn^0,w,c
  1824  000642  EC31  F007         	call	___lbmod
  1825  000646  0F30               	addlw	48
  1826  000648  ECB8  F007         	call	_lcd_putc
  1827                           
  1828                           ;main.c: 305: if (pressed_key == 1) {
  1829  00064C  0424               	decf	_pressed_key^0,w,c
  1830  00064E  E105               	bnz	l2813
  1831                           
  1832                           ;main.c: 306: set_t_dq2_dwn++;
  1833  000650  2A1F               	incf	_set_t_dq2_dwn^0,f,c
  1834                           
  1835                           ;main.c: 307: if (set_t_dq2_dwn == 11)
  1836  000652  0E0B               	movlw	11
  1837  000654  181F               	xorwf	_set_t_dq2_dwn^0,w,c
  1838  000656  E101               	bnz	l2813
  1839                           
  1840                           ;main.c: 308: set_t_dq2_dwn = 0;
  1841  000658  6A1F               	clrf	_set_t_dq2_dwn^0,c
  1842  00065A                     l2813:
  1843                           
  1844                           ;main.c: 309: };main.c: 310: if (pressed_key == 2) {
  1845  00065A  0E02               	movlw	2
  1846  00065C  1824               	xorwf	_pressed_key^0,w,c
  1847  00065E  E105               	bnz	l2821
  1848                           
  1849                           ;main.c: 311: set_t_dq2_dwn--;
  1850  000660  061F               	decf	_set_t_dq2_dwn^0,f,c
  1851                           
  1852                           ;main.c: 312: if (set_t_dq2_dwn == 255)
  1853  000662  281F               	incf	_set_t_dq2_dwn^0,w,c
  1854  000664  E102               	bnz	l2821
  1855                           
  1856                           ;main.c: 313: set_t_dq2_dwn = 10;
  1857  000666  0E0A               	movlw	10
  1858  000668  6E1F               	movwf	_set_t_dq2_dwn^0,c
  1859  00066A                     l2821:
  1860                           
  1861                           ;main.c: 314: };main.c: 315: if (pressed_key == 3) {
  1862  00066A  0E03               	movlw	3
  1863  00066C  1824               	xorwf	_pressed_key^0,w,c
  1864  00066E  E001 D540          	bnz	l2581
  1865                           
  1866                           ;main.c: 316: select = 1;
  1867  000672  0E01               	movlw	1
  1868  000674  6E44               	movwf	_select^0,c
  1869                           
  1870                           ;main.c: 317: write_eep(18, set_t_dq2_up);
  1871  000676  C020  F030         	movff	_set_t_dq2_up,write_eep@data
  1872  00067A  0E12               	movlw	18
  1873  00067C  EC44  F007         	call	_write_eep
  1874                           
  1875                           ;main.c: 318: write_eep(19, set_t_dq2_dwn);
  1876  000680  C01F  F030         	movff	_set_t_dq2_dwn,write_eep@data
  1877  000684  0E13               	movlw	19
  1878  000686  EC44  F007         	call	_write_eep
  1879  00068A  D533               	goto	l2581
  1880  00068C                     l2831:
  1881  00068C  5023               	movf	_sub_sel^0,w,c
  1882                           
  1883                           ; Switch size 1, requested type "space"
  1884                           ; Number of cases is 2, Range of values is 1 to 2
  1885                           ; switch strategies available:
  1886                           ; Name         Instructions Cycles
  1887                           ; simple_byte            7     4 (average)
  1888                           ;	Chosen strategy is simple_byte
  1889  00068E  0A01               	xorlw	1	; case 1
  1890  000690  E08B               	bz	l2777
  1891  000692  0A03               	xorlw	3	; case 2
  1892  000694  E0BF               	bz	l2803
  1893  000696  D52D               	goto	l2581
  1894  000698                     l2835:
  1895  000698  5044               	movf	_select^0,w,c
  1896                           
  1897                           ; Switch size 1, requested type "space"
  1898                           ; Number of cases is 6, Range of values is 1 to 6
  1899                           ; switch strategies available:
  1900                           ; Name         Instructions Cycles
  1901                           ; simple_byte           19    10 (average)
  1902                           ;	Chosen strategy is simple_byte
  1903  00069A  0A01               	xorlw	1	; case 1
  1904  00069C  E101 D532          	bz	l2589
  1905  0006A0  0A03               	xorlw	3	; case 2
  1906  0006A2  E101 D692          	bz	l2647
  1907  0006A6  0A01               	xorlw	1	; case 3
  1908  0006A8  E101 D523          	bz	l2581
  1909  0006AC  0A07               	xorlw	7	; case 4
  1910  0006AE  E101 D6BA          	bz	l2675
  1911  0006B2  0A01               	xorlw	1	; case 5
  1912  0006B4  E101 D772          	bz	l2775
  1913  0006B8  0A03               	xorlw	3	; case 6
  1914  0006BA  E0E8               	bz	l2831
  1915  0006BC  D51A               	goto	l2581
  1916  0006BE                     __end_of_main:
  1917                           	callstack 0
  1918  0006BE                     PL2:
  1919                           	callstack 25
  1920  0006BE  C030  F037         	movff	?___lwdiv,___lwmod@dividend
  1921  0006C2  C031  F038         	movff	?___lwdiv+1,___lwmod@dividend+1
  1922  0006C6  6A3A               	clrf	(___lwmod@divisor+1)^0,c
  1923  0006C8  0E0A               	movlw	10
  1924  0006CA  6E39               	movwf	___lwmod@divisor^0,c
  1925  0006CC  0C0A               	retlw	10
  1926  0006CE                     __end_ofPL2:
  1927                           	callstack 0
  1928  0006CE                     PL6:
  1929                           	callstack 25
  1930  0006CE  6E32               	movwf	___lwdiv@divisor^0,c
  1931  0006D0  C019  F030         	movff	_temperature_2,___lwdiv@dividend
  1932  0006D4  C01A  F031         	movff	_temperature_2+1,___lwdiv@dividend+1
  1933  0006D8  0012               	return	
  1934  0006DA                     __end_ofPL6:
  1935                           	callstack 0
  1936  0006DA                     PL8:
  1937                           	callstack 25
  1938  0006DA  6E32               	movwf	___lwdiv@divisor^0,c
  1939  0006DC  C01B  F030         	movff	_temperature_1,___lwdiv@dividend
  1940  0006E0  C01C  F031         	movff	_temperature_1+1,___lwdiv@dividend+1
  1941  0006E4  0012               	return	
  1942  0006E6                     __end_ofPL8:
  1943                           	callstack 0
  1944  0006E6                     PL10:
  1945                           	callstack 25
  1946  0006E6  6A3A               	clrf	(___lwmod@divisor+1)^0,c
  1947  0006E8  0E0A               	movlw	10
  1948  0006EA  6E39               	movwf	___lwmod@divisor^0,c
  1949  0006EC  0C0A               	retlw	10
  1950  0006EE                     __end_ofPL10:
  1951                           	callstack 0
  1952  0006EE                     PL12:
  1953                           	callstack 25
  1954  0006EE  C01B  F037         	movff	_temperature_1,___lwmod@dividend
  1955  0006F2  C01C  F038         	movff	_temperature_1+1,___lwmod@dividend+1
  1956  0006F6  0012               	return	
  1957  0006F8                     __end_ofPL12:
  1958                           	callstack 0
  1959  0006F8                     PL14:
  1960                           	callstack 25
  1961  0006F8  C019  F037         	movff	_temperature_2,___lwmod@dividend
  1962  0006FC  C01A  F038         	movff	_temperature_2+1,___lwmod@dividend+1
  1963  000700  0012               	return	
  1964  000702                     __end_ofPL14:
  1965                           	callstack 0
  1966  000702                     PL16:
  1967                           	callstack 25
  1968  000702  0E02               	movlw	2
  1969  000704  6E34               	movwf	lcd_gotoxy@y^0,c
  1970  000706  0C01               	retlw	1
  1971  000708                     __end_ofPL16:
  1972                           	callstack 0
  1973  000708                     PL22:
  1974                           	callstack 25
  1975  000708  0E9E               	movlw	low STR_14
  1976  00070A  6E37               	movwf	lcdPrint@t^0,c
  1977  00070C  0E1F               	movlw	high STR_14
  1978  00070E  6E38               	movwf	(lcdPrint@t+1)^0,c
  1979  000710  0012               	return	
  1980  000712                     __end_ofPL22:
  1981                           	callstack 0
  1982  000712                     PL24:
  1983                           	callstack 25
  1984  000712  0EE3               	movlw	low STR_11
  1985  000714  6E37               	movwf	lcdPrint@t^0,c
  1986  000716  0E1F               	movlw	high STR_11
  1987  000718  6E38               	movwf	(lcdPrint@t+1)^0,c
  1988  00071A  0012               	return	
  1989  00071C                     __end_ofPL24:
  1990                           	callstack 0
  1991  00071C                     PL26:
  1992                           	callstack 25
  1993  00071C  0E02               	movlw	2
  1994  00071E  6E23               	movwf	_sub_sel^0,c
  1995  000720  6E34               	movwf	lcd_gotoxy@y^0,c
  1996  000722  0C01               	retlw	1
  1997  000724                     __end_ofPL26:
  1998                           	callstack 0
  1999  000724                     PL30:
  2000                           	callstack 25
  2001  000724  6E44               	movwf	_select^0,c
  2002  000726  0E01               	movlw	1
  2003  000728  6E34               	movwf	lcd_gotoxy@y^0,c
  2004  00072A  0C01               	retlw	1
  2005  00072C                     __end_ofPL30:
  2006                           	callstack 0
  2007  00072C                     PL34:
  2008                           	callstack 25
  2009  00072C  0E02               	movlw	2
  2010  00072E  6E34               	movwf	lcd_gotoxy@y^0,c
  2011  000730  0C0A               	retlw	10
  2012  000732                     __end_ofPL34:
  2013                           	callstack 0
  2014  000732                     PL36:
  2015                           	callstack 25
  2016  000732  0E02               	movlw	2
  2017  000734  6E34               	movwf	lcd_gotoxy@y^0,c
  2018  000736  0C0B               	retlw	11
  2019  000738                     __end_ofPL36:
  2020                           	callstack 0
  2021  000738                     PL38:
  2022                           	callstack 25
  2023  000738  6E44               	movwf	_select^0,c
  2024  00073A  0E01               	movlw	1
  2025  00073C  6E23               	movwf	_sub_sel^0,c
  2026  00073E  0C01               	retlw	1
  2027  000740                     __end_ofPL38:
  2028                           	callstack 0
  2029                           
  2030 ;; *************** function _lcd_putc *****************
  2031 ;; Defined at:
  2032 ;;		line 90 in file "hd44780.c"
  2033 ;; Parameters:    Size  Location     Type
  2034 ;;  c               1    wreg     unsigned char 
  2035 ;; Auto vars:     Size  Location     Type
  2036 ;;  c               1    4[COMRAM] unsigned char 
  2037 ;; Return value:  Size  Location     Type
  2038 ;;                  1    wreg      void 
  2039 ;; Registers used:
  2040 ;;		wreg, status,2, status,0, cstack
  2041 ;; Tracked objects:
  2042 ;;		On entry : 0/0
  2043 ;;		On exit  : 0/0
  2044 ;;		Unchanged: 0/0
  2045 ;; Data sizes:     COMRAM   BANK0   BANK1
  2046 ;;      Params:         0       0       0
  2047 ;;      Locals:         1       0       0
  2048 ;;      Temps:          0       0       0
  2049 ;;      Totals:         1       0       0
  2050 ;;Total ram usage:        1 bytes
  2051 ;; Hardware stack levels used:    1
  2052 ;; Hardware stack levels required when called:    3
  2053 ;; This function calls:
  2054 ;;		_lcdWrite
  2055 ;; This function is called by:
  2056 ;;		_main
  2057 ;; This function uses a non-reentrant model
  2058 ;;
  2059                           
  2060                           	psect	text1
  2061  000F70                     __ptext1:
  2062                           	callstack 0
  2063  000F70                     _lcd_putc:
  2064                           	callstack 27
  2065                           
  2066                           ;incstack = 0
  2067                           ;lcd_putc@c stored from wreg
  2068  000F70  6E34               	movwf	lcd_putc@c^0,c
  2069                           
  2070                           ;hd44780.c: 92: lcdWrite(c, DATA);
  2071  000F72  0E01               	movlw	1
  2072  000F74  6E32               	movwf	lcdWrite@type^0,c
  2073  000F76  5034               	movf	lcd_putc@c^0,w,c
  2074  000F78  EF68  F007         	goto	_lcdWrite
  2075  000F7C                     __end_of_lcd_putc:
  2076                           	callstack 0
  2077                           
  2078 ;; *************** function _lcdPrint *****************
  2079 ;; Defined at:
  2080 ;;		line 96 in file "hd44780.c"
  2081 ;; Parameters:    Size  Location     Type
  2082 ;;  t               2    7[COMRAM] PTR const unsigned char 
  2083 ;;		 -> STR_15(15), STR_14(15), STR_13(11), STR_12(13), 
  2084 ;;		 -> STR_11(11), STR_10(13), STR_9(16), STR_8(15), 
  2085 ;;		 -> STR_7(15), STR_6(8), STR_5(8), STR_4(13), 
  2086 ;;		 -> STR_3(16), STR_2(16), STR_1(16), 
  2087 ;; Auto vars:     Size  Location     Type
  2088 ;;		None
  2089 ;; Return value:  Size  Location     Type
  2090 ;;                  1    wreg      void 
  2091 ;; Registers used:
  2092 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2093 ;; Tracked objects:
  2094 ;;		On entry : 0/0
  2095 ;;		On exit  : 0/0
  2096 ;;		Unchanged: 0/0
  2097 ;; Data sizes:     COMRAM   BANK0   BANK1
  2098 ;;      Params:         2       0       0
  2099 ;;      Locals:         0       0       0
  2100 ;;      Temps:          4       0       0
  2101 ;;      Totals:         6       0       0
  2102 ;;Total ram usage:        6 bytes
  2103 ;; Hardware stack levels used:    1
  2104 ;; Hardware stack levels required when called:    4
  2105 ;; This function calls:
  2106 ;;		_lcdWrite
  2107 ;;		_lcd_gotoxy
  2108 ;; This function is called by:
  2109 ;;		_main
  2110 ;; This function uses a non-reentrant model
  2111 ;;
  2112                           
  2113                           	psect	text2
  2114  000914                     __ptext2:
  2115                           	callstack 0
  2116  000914                     _lcdPrint:
  2117                           	callstack 26
  2118                           
  2119                           ;hd44780.c: 97: while(*t != '\0'){
  2120                           
  2121                           ;incstack = 0
  2122  000914  D046               	goto	l2313
  2123  000916                     l2293:
  2124                           
  2125                           ;hd44780.c: 100: lcdWrite(1, COMMAND);
  2126  000916  D84F               	call	PL32	;call to abstracted procedure
  2127  000918  EC68  F007         	call	_lcdWrite
  2128                           
  2129                           ;hd44780.c: 101: _delay((unsigned long)((2)*(8000000/4000.0)));
  2130  00091C  0E06               	movlw	6
  2131  00091E  6E39               	movwf	??_lcdPrint^0,c
  2132  000920  0E30               	movlw	48
  2133  000922                     u1857:
  2134  000922  2EE8               	decfsz	wreg,f,c
  2135  000924  D7FE               	bra	u1857
  2136  000926  2E39               	decfsz	??_lcdPrint^0,f,c
  2137  000928  D7FC               	bra	u1857
  2138  00092A  D000               	nop2	
  2139                           
  2140                           ;hd44780.c: 102: break;
  2141  00092C  D038               	goto	l2311
  2142  00092E                     l2297:
  2143                           
  2144                           ;hd44780.c: 105: lcd_gotoxy(1, 2);
  2145  00092E  EC81  F003         	call	PL16	;call to abstracted procedure
  2146  000932  EC89  F007         	call	_lcd_gotoxy
  2147                           
  2148                           ;hd44780.c: 106: break;
  2149  000936  D033               	goto	l2311
  2150  000938                     l2299:
  2151                           
  2152                           ;hd44780.c: 109: lcdWrite(0x10, COMMAND);
  2153  000938  0E00               	movlw	0
  2154  00093A  6E32               	movwf	lcdWrite@type^0,c
  2155  00093C  0E10               	movlw	16
  2156  00093E  EC68  F007         	call	_lcdWrite
  2157                           
  2158                           ;hd44780.c: 110: break;
  2159  000942  D02D               	goto	l2311
  2160  000944                     l2301:
  2161                           
  2162                           ;hd44780.c: 113: if (*t < 0xC0) {
  2163  000944  C037  FFF6         	movff	lcdPrint@t,tblptrl
  2164  000948  C038  FFF7         	movff	lcdPrint@t+1,tblptrh
  2165  00094C                     	if	0	;tblptru may be non-zero
  2166  00094C                     	endif
  2167  00094C                     	if	0	;tblptru may be non-zero
  2168  00094C                     	endif
  2169  00094C  0EC0               	movlw	192
  2170  00094E  0008               	tblrd		*
  2171  000950  60F5               	cpfslt	tablat,c
  2172  000952  D006               	goto	l2305
  2173                           
  2174                           ;hd44780.c: 114: lcdWrite(*t, DATA);
  2175  000954  0E01               	movlw	1
  2176  000956  6E32               	movwf	lcdWrite@type^0,c
  2177  000958  D827               	call	PL4	;call to abstracted procedure
  2178  00095A  EC68  F007         	call	_lcdWrite
  2179                           
  2180                           ;hd44780.c: 115: } else {
  2181  00095E  D01F               	goto	l2311
  2182  000960                     l2305:
  2183                           
  2184                           ;hd44780.c: 116: lcdWrite(HD44780_CYR[(unsigned char) (*t) - 0xC0], DATA);
  2185  000960  0E01               	movlw	1
  2186  000962  6E32               	movwf	lcdWrite@type^0,c
  2187  000964  0E40               	movlw	64
  2188  000966  6E39               	movwf	??_lcdPrint^0,c
  2189  000968  683A               	setf	(??_lcdPrint+1)^0,c
  2190  00096A  D81E               	call	PL4	;call to abstracted procedure
  2191  00096C  6E3B               	movwf	(??_lcdPrint+2)^0,c
  2192  00096E  6A3C               	clrf	(??_lcdPrint+3)^0,c
  2193  000970  5039               	movf	??_lcdPrint^0,w,c
  2194  000972  263B               	addwf	(??_lcdPrint+2)^0,f,c
  2195  000974  503A               	movf	(??_lcdPrint+1)^0,w,c
  2196  000976  223C               	addwfc	(??_lcdPrint+3)^0,f,c
  2197  000978  0EF7               	movlw	low _HD44780_CYR
  2198  00097A  243B               	addwf	(??_lcdPrint+2)^0,w,c
  2199  00097C  6EF6               	movwf	tblptrl,c
  2200  00097E  0E1E               	movlw	high _HD44780_CYR
  2201  000980  203C               	addwfc	(??_lcdPrint+3)^0,w,c
  2202  000982  6EF7               	movwf	tblptrh,c
  2203  000984                     	if	0	;There are less than 3 active tblptr bytes
  2204  000984                     	endif
  2205  000984  0008               	tblrd		*
  2206  000986  50F5               	movf	tablat,w,c
  2207  000988  EC68  F007         	call	_lcdWrite
  2208  00098C  D008               	goto	l2311
  2209  00098E                     l2309:
  2210  00098E  D80C               	call	PL4	;call to abstracted procedure
  2211                           
  2212                           ; Switch size 1, requested type "space"
  2213                           ; Number of cases is 3, Range of values is 8 to 12
  2214                           ; switch strategies available:
  2215                           ; Name         Instructions Cycles
  2216                           ; simple_byte           10     6 (average)
  2217                           ;	Chosen strategy is simple_byte
  2218  000990  0A08               	xorlw	8	; case 8
  2219  000992  E0D2               	bz	l2299
  2220  000994  0A02               	xorlw	2	; case 10
  2221  000996  E0CB               	bz	l2297
  2222  000998  0A06               	xorlw	6	; case 12
  2223  00099A  E0BD               	bz	l2293
  2224  00099C  D7D3               	goto	l2301
  2225  00099E                     l2311:
  2226                           
  2227                           ;hd44780.c: 121: *t++;
  2228  00099E  4A37               	infsnz	lcdPrint@t^0,f,c
  2229  0009A0  2A38               	incf	(lcdPrint@t+1)^0,f,c
  2230  0009A2                     l2313:
  2231  0009A2  D802               	call	PL4	;call to abstracted procedure
  2232  0009A4  E1F4               	bnz	l2309
  2233  0009A6  0012               	return		;funcret
  2234  0009A8                     __end_of_lcdPrint:
  2235                           	callstack 0
  2236  0009A8                     PL4:
  2237                           	callstack 26
  2238  0009A8  C037  FFF6         	movff	lcdPrint@t,tblptrl
  2239  0009AC  C038  FFF7         	movff	lcdPrint@t+1,tblptrh
  2240  0009B0                     	if	0	;tblptru may be non-zero
  2241  0009B0                     	endif
  2242  0009B0                     	if	0	;tblptru may be non-zero
  2243  0009B0                     	endif
  2244  0009B0  0008               	tblrd		*
  2245  0009B2  50F5               	movf	tablat,w,c
  2246  0009B4  0012               	return	
  2247  0009B6                     __end_ofPL4:
  2248                           	callstack 0
  2249  0009B6                     PL32:
  2250                           	callstack 27
  2251  0009B6  0E00               	movlw	0
  2252  0009B8  6E32               	movwf	lcdWrite@type^0,c
  2253  0009BA  0C01               	retlw	1
  2254  0009BC                     __end_ofPL32:
  2255                           	callstack 0
  2256                           
  2257 ;; *************** function _lcd_gotoxy *****************
  2258 ;; Defined at:
  2259 ;;		line 76 in file "hd44780.c"
  2260 ;; Parameters:    Size  Location     Type
  2261 ;;  x               1    wreg     unsigned char 
  2262 ;;  y               1    4[COMRAM] unsigned char 
  2263 ;; Auto vars:     Size  Location     Type
  2264 ;;  x               1    5[COMRAM] unsigned char 
  2265 ;;  address         1    6[COMRAM] unsigned char 
  2266 ;; Return value:  Size  Location     Type
  2267 ;;                  1    wreg      void 
  2268 ;; Registers used:
  2269 ;;		wreg, status,2, status,0, cstack
  2270 ;; Tracked objects:
  2271 ;;		On entry : 0/0
  2272 ;;		On exit  : 0/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMRAM   BANK0   BANK1
  2275 ;;      Params:         1       0       0
  2276 ;;      Locals:         2       0       0
  2277 ;;      Temps:          0       0       0
  2278 ;;      Totals:         3       0       0
  2279 ;;Total ram usage:        3 bytes
  2280 ;; Hardware stack levels used:    1
  2281 ;; Hardware stack levels required when called:    3
  2282 ;; This function calls:
  2283 ;;		_lcdWrite
  2284 ;; This function is called by:
  2285 ;;		_main
  2286 ;;		_lcdPrint
  2287 ;; This function uses a non-reentrant model
  2288 ;;
  2289                           
  2290                           	psect	text3
  2291  000F12                     __ptext3:
  2292                           	callstack 0
  2293  000F12                     _lcd_gotoxy:
  2294                           	callstack 27
  2295                           
  2296                           ;incstack = 0
  2297                           ;lcd_gotoxy@x stored from wreg
  2298  000F12  6E35               	movwf	lcd_gotoxy@x^0,c
  2299                           
  2300                           ;hd44780.c: 77: uint8_t address;;hd44780.c: 79: if (y != 1)
  2301  000F14  0434               	decf	lcd_gotoxy@y^0,w,c
  2302  000F16  E003               	bz	l332
  2303                           
  2304                           ;hd44780.c: 80: address = 0x40;
  2305  000F18  0E40               	movlw	64
  2306  000F1A  6E36               	movwf	lcd_gotoxy@address^0,c
  2307  000F1C  D001               	goto	l2107
  2308  000F1E                     l332:
  2309                           
  2310                           ;hd44780.c: 81: else;hd44780.c: 82: address = 0;
  2311  000F1E  6A36               	clrf	lcd_gotoxy@address^0,c
  2312  000F20                     l2107:
  2313                           
  2314                           ;hd44780.c: 84: address += x - 1;
  2315  000F20  0435               	decf	lcd_gotoxy@x^0,w,c
  2316  000F22  2636               	addwf	lcd_gotoxy@address^0,f,c
  2317                           
  2318                           ;hd44780.c: 85: lcdWrite(0x80 | address, COMMAND);
  2319  000F24  6A32               	clrf	lcdWrite@type^0,c
  2320  000F26  5036               	movf	lcd_gotoxy@address^0,w,c
  2321  000F28  0980               	iorlw	128
  2322  000F2A  EF68  F007         	goto	_lcdWrite
  2323  000F2E                     __end_of_lcd_gotoxy:
  2324                           	callstack 0
  2325                           
  2326 ;; *************** function _key_press *****************
  2327 ;; Defined at:
  2328 ;;		line 5 in file "key.c"
  2329 ;; Parameters:    Size  Location     Type
  2330 ;;		None
  2331 ;; Auto vars:     Size  Location     Type
  2332 ;;  key             1    0[COMRAM] unsigned char 
  2333 ;; Return value:  Size  Location     Type
  2334 ;;                  1    wreg      void 
  2335 ;; Registers used:
  2336 ;;		wreg, status,2, status,0
  2337 ;; Tracked objects:
  2338 ;;		On entry : 0/0
  2339 ;;		On exit  : 0/0
  2340 ;;		Unchanged: 0/0
  2341 ;; Data sizes:     COMRAM   BANK0   BANK1
  2342 ;;      Params:         0       0       0
  2343 ;;      Locals:         1       0       0
  2344 ;;      Temps:          0       0       0
  2345 ;;      Totals:         1       0       0
  2346 ;;Total ram usage:        1 bytes
  2347 ;; Hardware stack levels used:    1
  2348 ;; Hardware stack levels required when called:    1
  2349 ;; This function calls:
  2350 ;;		Nothing
  2351 ;; This function is called by:
  2352 ;;		_main
  2353 ;; This function uses a non-reentrant model
  2354 ;;
  2355                           
  2356                           	psect	text4
  2357  000C04                     __ptext4:
  2358                           	callstack 0
  2359  000C04                     _key_press:
  2360                           	callstack 29
  2361                           
  2362                           ;key.c: 7: static uint16_t count = 0;;key.c: 8: uint8_t key;;key.c: 9: if (((PORTB & (1 
      +                          << 1)) == 0) && ((PORTB & (1 << 2)) == 0))
  2363                           
  2364                           ;incstack = 0
  2365  000C04  A281               	btfss	129,1,c	;volatile
  2366  000C06  B481               	btfsc	129,2,c	;volatile
  2367  000C08  D002               	goto	l425
  2368                           
  2369                           ;key.c: 10: key = 3;
  2370  000C0A  0E03               	movlw	3
  2371  000C0C  D007               	goto	L2
  2372  000C0E                     l425:
  2373                           
  2374                           ;key.c: 11: else if ((PORTB & (1 << 1)) == 0)
  2375  000C0E  B281               	btfsc	129,1,c	;volatile
  2376  000C10  D002               	goto	l427
  2377                           
  2378                           ;key.c: 12: key = 1;
  2379  000C12  0E01               	movlw	1
  2380  000C14  D003               	goto	L2
  2381  000C16                     l427:
  2382                           
  2383                           ;key.c: 13: else if ((PORTB & (1 << 2)) == 0)
  2384  000C16  B481               	btfsc	129,2,c	;volatile
  2385  000C18  D003               	goto	l429
  2386                           
  2387                           ;key.c: 14: key = 2;
  2388  000C1A  0E02               	movlw	2
  2389  000C1C                     L2:
  2390  000C1C  6E30               	movwf	key_press@key^0,c
  2391  000C1E  D001               	goto	l1503
  2392  000C20                     l429:
  2393                           
  2394                           ;key.c: 15: else;key.c: 16: key = 0;
  2395  000C20  6A30               	clrf	key_press@key^0,c
  2396  000C22                     l1503:
  2397                           
  2398                           ;key.c: 19: if (key) {
  2399  000C22  5030               	movf	key_press@key^0,w,c
  2400  000C24  E013               	bz	l431
  2401                           
  2402                           ;key.c: 20: if (count > 300) {
  2403  000C26  0E2D               	movlw	45
  2404  000C28  5C15               	subwf	key_press@count^0,w,c
  2405  000C2A  0E01               	movlw	1
  2406  000C2C  5816               	subwfb	(key_press@count+1)^0,w,c
  2407  000C2E  E307               	bnc	l1515
  2408                           
  2409                           ;key.c: 21: count = 300 - 10;
  2410  000C30  0E01               	movlw	1
  2411  000C32  6E16               	movwf	(key_press@count+1)^0,c
  2412  000C34  0E22               	movlw	34
  2413  000C36  6E15               	movwf	key_press@count^0,c
  2414  000C38                     l1509:
  2415                           
  2416                           ;key.c: 22: key_pressed = key;
  2417  000C38  C030  F01D         	movff	key_press@key,_key_pressed	;volatile
  2418  000C3C  0012               	return	
  2419  000C3E                     l1515:
  2420  000C3E  4A15               	infsnz	key_press@count^0,f,c
  2421  000C40  2A16               	incf	(key_press@count+1)^0,f,c
  2422                           
  2423                           ;key.c: 26: if (count == 15) {
  2424  000C42  0E0F               	movlw	15
  2425  000C44  1815               	xorwf	key_press@count^0,w,c
  2426  000C46  1016               	iorwf	(key_press@count+1)^0,w,c
  2427  000C48  E0F7               	bz	l1509
  2428  000C4A  0012               	return	
  2429  000C4C                     l431:
  2430  000C4C  6A15               	clrf	key_press@count^0,c
  2431  000C4E  6A16               	clrf	(key_press@count+1)^0,c
  2432  000C50  0012               	return		;funcret
  2433  000C52                     __end_of_key_press:
  2434                           	callstack 0
  2435                           
  2436 ;; *************** function _key_GetKey *****************
  2437 ;; Defined at:
  2438 ;;		line 48 in file "key.c"
  2439 ;; Parameters:    Size  Location     Type
  2440 ;;		None
  2441 ;; Auto vars:     Size  Location     Type
  2442 ;;  key             1    0[COMRAM] unsigned char 
  2443 ;; Return value:  Size  Location     Type
  2444 ;;                  1    wreg      unsigned char 
  2445 ;; Registers used:
  2446 ;;		wreg, status,2
  2447 ;; Tracked objects:
  2448 ;;		On entry : 0/0
  2449 ;;		On exit  : 0/0
  2450 ;;		Unchanged: 0/0
  2451 ;; Data sizes:     COMRAM   BANK0   BANK1
  2452 ;;      Params:         0       0       0
  2453 ;;      Locals:         1       0       0
  2454 ;;      Temps:          0       0       0
  2455 ;;      Totals:         1       0       0
  2456 ;;Total ram usage:        1 bytes
  2457 ;; Hardware stack levels used:    1
  2458 ;; Hardware stack levels required when called:    1
  2459 ;; This function calls:
  2460 ;;		Nothing
  2461 ;; This function is called by:
  2462 ;;		_main
  2463 ;; This function uses a non-reentrant model
  2464 ;;
  2465                           
  2466                           	psect	text5
  2467  000F7C                     __ptext5:
  2468                           	callstack 0
  2469  000F7C                     _key_GetKey:
  2470                           	callstack 29
  2471                           
  2472                           ;key.c: 50: uint8_t key = key_pressed;
  2473                           
  2474                           ;incstack = 0
  2475  000F7C  C01D  F030         	movff	_key_pressed,key_GetKey@key	;volatile
  2476                           
  2477                           ;key.c: 52: key_pressed = 0;
  2478  000F80  6A1D               	clrf	_key_pressed^0,c	;volatile
  2479                           
  2480                           ;key.c: 53: return key;
  2481  000F82  5030               	movf	key_GetKey@key^0,w,c
  2482  000F84  0012               	return		;funcret
  2483  000F86                     __end_of_key_GetKey:
  2484                           	callstack 0
  2485                           
  2486 ;; *************** function _ds18b20_readrom *****************
  2487 ;; Defined at:
  2488 ;;		line 170 in file "ds18b20.c"
  2489 ;; Parameters:    Size  Location     Type
  2490 ;;  num_dq          1    wreg     unsigned char 
  2491 ;; Auto vars:     Size  Location     Type
  2492 ;;  num_dq          1   15[COMRAM] unsigned char 
  2493 ;;  temp_rom        8    7[COMRAM] unsigned char [8]
  2494 ;;  i               1   16[COMRAM] unsigned char 
  2495 ;; Return value:  Size  Location     Type
  2496 ;;                  1    wreg      unsigned char 
  2497 ;; Registers used:
  2498 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2499 ;; Tracked objects:
  2500 ;;		On entry : 0/0
  2501 ;;		On exit  : 0/0
  2502 ;;		Unchanged: 0/0
  2503 ;; Data sizes:     COMRAM   BANK0   BANK1
  2504 ;;      Params:         0       0       0
  2505 ;;      Locals:        10       0       0
  2506 ;;      Temps:          0       0       0
  2507 ;;      Totals:        10       0       0
  2508 ;;Total ram usage:       10 bytes
  2509 ;; Hardware stack levels used:    1
  2510 ;; Hardware stack levels required when called:    3
  2511 ;; This function calls:
  2512 ;;		_Delay_ms
  2513 ;;		_ds18b20_crc8
  2514 ;;		_ow_reset
  2515 ;;		_read_byte
  2516 ;;		_write_byte
  2517 ;;		_write_eep
  2518 ;; This function is called by:
  2519 ;;		_main
  2520 ;; This function uses a non-reentrant model
  2521 ;;
  2522                           
  2523                           	psect	text6
  2524  000B34                     __ptext6:
  2525                           	callstack 0
  2526  000B34                     _ds18b20_readrom:
  2527                           	callstack 27
  2528                           
  2529                           ;incstack = 0
  2530                           ;ds18b20_readrom@num_dq stored from wreg
  2531  000B34  6E3F               	movwf	ds18b20_readrom@num_dq^0,c
  2532                           
  2533                           ;ds18b20.c: 171: uint8_t i;;ds18b20.c: 172: uint8_t temp_rom[8];;ds18b20.c: 174: if (!ow
      +                          _reset())
  2534  000B36  EC19  F007         	call	_ow_reset	;wreg free
  2535  000B3A  0900               	iorlw	0
  2536  000B3C  E10C               	bnz	u1300
  2537                           
  2538                           ;ds18b20.c: 175: {;ds18b20.c: 176: write_byte(0x33);
  2539  000B3E  0E33               	movlw	51
  2540  000B40  ECCB  F006         	call	_write_byte
  2541                           
  2542                           ;ds18b20.c: 177: for (i = 0; i < 8; i++) {
  2543  000B44  6A40               	clrf	ds18b20_readrom@i^0,c
  2544  000B46                     l2433:
  2545                           
  2546                           ;ds18b20.c: 178: temp_rom[i] = read_byte();
  2547  000B46  D825               	call	PL20	;call to abstracted procedure
  2548  000B48  ECB0  F006         	call	_read_byte	;wreg free
  2549  000B4C  6EDF               	movwf	indf2,c
  2550  000B4E  2A40               	incf	ds18b20_readrom@i^0,f,c
  2551  000B50  0E07               	movlw	7
  2552  000B52  6440               	cpfsgt	ds18b20_readrom@i^0,c
  2553  000B54  D7F8               	goto	l2433
  2554  000B56                     u1300:
  2555                           
  2556                           ;ds18b20.c: 179: };ds18b20.c: 180: };ds18b20.c: 181: if (!(ds18b20_crc8(temp_rom, 8))) {
  2557  000B56  0E37               	movlw	low ds18b20_readrom@temp_rom
  2558  000B58  6E30               	movwf	ds18b20_crc8@data_in^0,c
  2559  000B5A  0E08               	movlw	8
  2560  000B5C  6E31               	movwf	ds18b20_crc8@num_bytes^0,c
  2561  000B5E  EC29  F006         	call	_ds18b20_crc8	;wreg free
  2562  000B62  0900               	iorlw	0
  2563  000B64  E115               	bnz	l2459
  2564                           
  2565                           ;ds18b20.c: 182: for (i = 0; i < 8; i++) {
  2566  000B66  6A40               	clrf	ds18b20_readrom@i^0,c
  2567  000B68                     l2447:
  2568                           
  2569                           ;ds18b20.c: 183: write_eep(((num_dq - 1)*8) + i, temp_rom[i]);
  2570  000B68  D814               	call	PL20	;call to abstracted procedure
  2571  000B6A  50DF               	movf	indf2,w,c
  2572  000B6C  6E30               	movwf	write_eep@data^0,c
  2573  000B6E  503F               	movf	ds18b20_readrom@num_dq^0,w,c
  2574  000B70  0D08               	mullw	8
  2575  000B72  50F3               	movf	243,w,c
  2576  000B74  2440               	addwf	ds18b20_readrom@i^0,w,c
  2577  000B76  0FF8               	addlw	248
  2578  000B78  EC44  F007         	call	_write_eep
  2579  000B7C  2A40               	incf	ds18b20_readrom@i^0,f,c
  2580  000B7E  0E07               	movlw	7
  2581  000B80  6440               	cpfsgt	ds18b20_readrom@i^0,c
  2582  000B82  D7F2               	goto	l2447
  2583                           
  2584                           ;ds18b20.c: 184: };ds18b20.c: 185: Delay_ms(10);
  2585  000B84  6A31               	clrf	(Delay_ms@delay+1)^0,c
  2586  000B86  0E0A               	movlw	10
  2587  000B88  6E30               	movwf	Delay_ms@delay^0,c
  2588  000B8A  EC56  F007         	call	_Delay_ms	;wreg free
  2589                           
  2590                           ;ds18b20.c: 186: return 1;
  2591  000B8E  0C01               	retlw	1
  2592  000B90                     l2459:
  2593                           
  2594                           ;ds18b20.c: 187: };ds18b20.c: 188: return 0;
  2595  000B90  0C00               	retlw	0	;funcret
  2596  000B92                     __end_of_ds18b20_readrom:
  2597                           	callstack 0
  2598  000B92                     PL20:
  2599                           	callstack 27
  2600  000B92  5040               	movf	ds18b20_readrom@i^0,w,c
  2601  000B94  0F37               	addlw	low ds18b20_readrom@temp_rom
  2602  000B96  6ED9               	movwf	fsr2l,c
  2603  000B98  6ADA               	clrf	fsr2h,c
  2604  000B9A  0012               	return	
  2605  000B9C                     __end_ofPL20:
  2606                           	callstack 0
  2607                           
  2608 ;; *************** function _write_eep *****************
  2609 ;; Defined at:
  2610 ;;		line 5 in file "eeprom.c"
  2611 ;; Parameters:    Size  Location     Type
  2612 ;;  address         1    wreg     unsigned char 
  2613 ;;  data            1    0[COMRAM] unsigned char 
  2614 ;; Auto vars:     Size  Location     Type
  2615 ;;  address         1    1[COMRAM] unsigned char 
  2616 ;; Return value:  Size  Location     Type
  2617 ;;                  1    wreg      void 
  2618 ;; Registers used:
  2619 ;;		wreg, status,2
  2620 ;; Tracked objects:
  2621 ;;		On entry : 0/0
  2622 ;;		On exit  : 0/0
  2623 ;;		Unchanged: 0/0
  2624 ;; Data sizes:     COMRAM   BANK0   BANK1
  2625 ;;      Params:         1       0       0
  2626 ;;      Locals:         1       0       0
  2627 ;;      Temps:          0       0       0
  2628 ;;      Totals:         2       0       0
  2629 ;;Total ram usage:        2 bytes
  2630 ;; Hardware stack levels used:    1
  2631 ;; Hardware stack levels required when called:    1
  2632 ;; This function calls:
  2633 ;;		Nothing
  2634 ;; This function is called by:
  2635 ;;		_main
  2636 ;;		_ds18b20_readrom
  2637 ;; This function uses a non-reentrant model
  2638 ;;
  2639                           
  2640                           	psect	text7
  2641  000E88                     __ptext7:
  2642                           	callstack 0
  2643  000E88                     _write_eep:
  2644                           	callstack 29
  2645                           
  2646                           ;incstack = 0
  2647                           ;write_eep@address stored from wreg
  2648  000E88  6E31               	movwf	write_eep@address^0,c
  2649  000E8A                     
  2650                           ;eeprom.c: 8: {}
  2651  000E8A  B2A6               	btfsc	166,1,c	;volsfr
  2652  000E8C  D7FE               	goto	l2117
  2653                           
  2654                           ;eeprom.c: 11: EEADR = address;
  2655  000E8E  C031  FFA9         	movff	write_eep@address,4009	;volatile
  2656                           
  2657                           ;eeprom.c: 12: EEDATA = data;
  2658  000E92  C030  FFA8         	movff	write_eep@data,4008	;volatile
  2659                           
  2660                           ;eeprom.c: 13: EECON1bits.EEPGD = 0;
  2661  000E96  9EA6               	bcf	166,7,c	;volsfr
  2662                           
  2663                           ;eeprom.c: 14: EECON1bits.CFGS = 0;
  2664  000E98  9CA6               	bcf	166,6,c	;volsfr
  2665                           
  2666                           ;eeprom.c: 15: EECON1bits.WREN = 1;
  2667  000E9A  84A6               	bsf	166,2,c	;volsfr
  2668                           
  2669                           ;eeprom.c: 16: INTCONbits.GIE = 0;
  2670  000E9C  9EF2               	bcf	242,7,c	;volatile
  2671                           
  2672                           ;eeprom.c: 18: EECON2 = 0x55;
  2673  000E9E  0E55               	movlw	85
  2674  000EA0  6EA7               	movwf	167,c	;volsfr
  2675                           
  2676                           ;eeprom.c: 19: EECON2 = 0xAA;
  2677  000EA2  0EAA               	movlw	170
  2678  000EA4  6EA7               	movwf	167,c	;volsfr
  2679                           
  2680                           ;eeprom.c: 20: EECON1bits.WR = 1;
  2681  000EA6  82A6               	bsf	166,1,c	;volsfr
  2682                           
  2683                           ;eeprom.c: 22: INTCONbits.GIE = 1;
  2684  000EA8  8EF2               	bsf	242,7,c	;volatile
  2685  000EAA  0CAA               	retlw	170	;funcret
  2686  000EAC                     __end_of_write_eep:
  2687                           	callstack 0
  2688                           
  2689 ;; *************** function _Delay_ms *****************
  2690 ;; Defined at:
  2691 ;;		line 378 in file "main.c"
  2692 ;; Parameters:    Size  Location     Type
  2693 ;;  delay           2    0[COMRAM] unsigned int 
  2694 ;; Auto vars:     Size  Location     Type
  2695 ;;  i               2    3[COMRAM] unsigned int 
  2696 ;; Return value:  Size  Location     Type
  2697 ;;                  1    wreg      void 
  2698 ;; Registers used:
  2699 ;;		wreg, status,2, status,0
  2700 ;; Tracked objects:
  2701 ;;		On entry : 0/0
  2702 ;;		On exit  : 0/0
  2703 ;;		Unchanged: 0/0
  2704 ;; Data sizes:     COMRAM   BANK0   BANK1
  2705 ;;      Params:         2       0       0
  2706 ;;      Locals:         2       0       0
  2707 ;;      Temps:          1       0       0
  2708 ;;      Totals:         5       0       0
  2709 ;;Total ram usage:        5 bytes
  2710 ;; Hardware stack levels used:    1
  2711 ;; Hardware stack levels required when called:    1
  2712 ;; This function calls:
  2713 ;;		Nothing
  2714 ;; This function is called by:
  2715 ;;		_main
  2716 ;;		_ds18b20_readrom
  2717 ;; This function uses a non-reentrant model
  2718 ;;
  2719                           
  2720                           	psect	text8
  2721  000EAC                     __ptext8:
  2722                           	callstack 0
  2723  000EAC                     _Delay_ms:
  2724                           	callstack 28
  2725                           
  2726                           ;main.c: 379: for (uint16_t i = 0; i <= delay; i++)
  2727                           
  2728                           ;incstack = 0
  2729  000EAC  6A33               	clrf	Delay_ms@i^0,c
  2730  000EAE  6A34               	clrf	(Delay_ms@i+1)^0,c
  2731  000EB0  D009               	goto	l207
  2732  000EB2                     l2113:
  2733                           
  2734                           ;main.c: 380: _delay((unsigned long)((1)*(8000000/4000.0)));
  2735  000EB2  0E03               	movlw	3
  2736  000EB4  6E32               	movwf	??_Delay_ms^0,c
  2737  000EB6  0E98               	movlw	152
  2738  000EB8                     u1867:
  2739  000EB8  2EE8               	decfsz	wreg,f,c
  2740  000EBA  D7FE               	bra	u1867
  2741  000EBC  2E32               	decfsz	??_Delay_ms^0,f,c
  2742  000EBE  D7FC               	bra	u1867
  2743  000EC0  4A33               	infsnz	Delay_ms@i^0,f,c
  2744  000EC2  2A34               	incf	(Delay_ms@i+1)^0,f,c
  2745  000EC4                     l207:
  2746  000EC4  5033               	movf	Delay_ms@i^0,w,c
  2747  000EC6  5C30               	subwf	Delay_ms@delay^0,w,c
  2748  000EC8  5034               	movf	(Delay_ms@i+1)^0,w,c
  2749  000ECA  5831               	subwfb	(Delay_ms@delay+1)^0,w,c
  2750  000ECC  E2F2               	bc	l2113
  2751  000ECE  0012               	return		;funcret
  2752  000ED0                     __end_of_Delay_ms:
  2753                           	callstack 0
  2754                           
  2755 ;; *************** function _ds18b20_readTemp *****************
  2756 ;; Defined at:
  2757 ;;		line 117 in file "ds18b20.c"
  2758 ;; Parameters:    Size  Location     Type
  2759 ;;  time_flag       1    7[COMRAM] PTR unsigned char 
  2760 ;;		 -> time_flag(1), 
  2761 ;;  timer_val       1    8[COMRAM] PTR unsigned char 
  2762 ;;		 -> timer_val(1), 
  2763 ;; Auto vars:     Size  Location     Type
  2764 ;;  j               1   13[COMRAM] unsigned char 
  2765 ;;  temp            2   11[COMRAM] unsigned int 
  2766 ;;  i               1   14[COMRAM] unsigned char 
  2767 ;; Return value:  Size  Location     Type
  2768 ;;                  1    wreg      unsigned char 
  2769 ;; Registers used:
  2770 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2771 ;; Tracked objects:
  2772 ;;		On entry : 0/0
  2773 ;;		On exit  : 0/0
  2774 ;;		Unchanged: 0/0
  2775 ;; Data sizes:     COMRAM   BANK0   BANK1
  2776 ;;      Params:         2       0       0
  2777 ;;      Locals:         4       0       0
  2778 ;;      Temps:          2       0       0
  2779 ;;      Totals:         8       0       0
  2780 ;;Total ram usage:        8 bytes
  2781 ;; Hardware stack levels used:    1
  2782 ;; Hardware stack levels required when called:    3
  2783 ;; This function calls:
  2784 ;;		_ds18b20_crc8
  2785 ;;		_ow_reset
  2786 ;;		_read_byte
  2787 ;;		_write_byte
  2788 ;; This function is called by:
  2789 ;;		_main
  2790 ;; This function uses a non-reentrant model
  2791 ;;
  2792                           
  2793                           	psect	text9
  2794  000838                     __ptext9:
  2795                           	callstack 0
  2796  000838                     _ds18b20_readTemp:
  2797                           	callstack 27
  2798                           
  2799                           ;ds18b20.c: 120: uint8_t i;;ds18b20.c: 122: switch (*time_flag) {
  2800                           
  2801                           ;incstack = 0
  2802  000838  D05B               	goto	l2393
  2803  00083A                     l2317:
  2804                           
  2805                           ;ds18b20.c: 124: if (!ow_reset())
  2806  00083A  EC19  F007         	call	_ow_reset	;wreg free
  2807  00083E  0900               	iorlw	0
  2808  000840  A4D8               	btfss	status,2,c
  2809  000842  0012               	return	
  2810                           
  2811                           ;ds18b20.c: 125: {;ds18b20.c: 126: write_byte(0xCC);
  2812  000844  0ECC               	movlw	204
  2813  000846  ECCB  F006         	call	_write_byte
  2814                           
  2815                           ;ds18b20.c: 127: write_byte(0x44);
  2816  00084A  0E44               	movlw	68
  2817  00084C  ECCB  F006         	call	_write_byte
  2818                           
  2819                           ;ds18b20.c: 128: *timer_val = 0;
  2820  000850  5038               	movf	ds18b20_readTemp@timer_val^0,w,c
  2821  000852  6ED9               	movwf	fsr2l,c
  2822  000854  6ADA               	clrf	fsr2h,c
  2823  000856  6ADF               	clrf	indf2,c
  2824                           
  2825                           ;ds18b20.c: 129: *time_flag = 2;
  2826  000858  5037               	movf	ds18b20_readTemp@time_flag^0,w,c
  2827  00085A  6ED9               	movwf	fsr2l,c
  2828  00085C  6ADA               	clrf	fsr2h,c
  2829  00085E  0E02               	movlw	2
  2830  000860  6EDF               	movwf	indf2,c
  2831                           
  2832                           ;ds18b20.c: 130: T1CONbits.TMR1ON = 1;
  2833  000862  80CD               	bsf	205,0,c	;volatile
  2834                           
  2835                           ;ds18b20.c: 132: return 0;
  2836  000864  0C00               	retlw	0
  2837  000866                     l266:
  2838                           
  2839                           ;ds18b20.c: 136: for (uint8_t j = 0; j < 2; j++) {
  2840  000866  6A3D               	clrf	ds18b20_readTemp@j^0,c
  2841  000868                     l2335:
  2842                           
  2843                           ;ds18b20.c: 137: ow_reset();
  2844  000868  EC19  F007         	call	_ow_reset	;wreg free
  2845                           
  2846                           ;ds18b20.c: 138: write_byte(0x55);
  2847  00086C  0E55               	movlw	85
  2848  00086E  ECCB  F006         	call	_write_byte
  2849                           
  2850                           ;ds18b20.c: 139: for (i = 0; i < 8; i++) {
  2851  000872  6A3E               	clrf	ds18b20_readTemp@i^0,c
  2852  000874                     l2345:
  2853                           
  2854                           ;ds18b20.c: 140: write_byte(rom_dq[j][i]);
  2855  000874  503D               	movf	ds18b20_readTemp@j^0,w,c
  2856  000876  0D08               	mullw	8
  2857  000878  50F3               	movf	243,w,c
  2858  00087A  0F01               	addlw	low _rom_dq
  2859  00087C  243E               	addwf	ds18b20_readTemp@i^0,w,c
  2860  00087E  6ED9               	movwf	fsr2l,c
  2861  000880  6ADA               	clrf	fsr2h,c
  2862  000882  50DF               	movf	indf2,w,c
  2863  000884  ECCB  F006         	call	_write_byte
  2864  000888  2A3E               	incf	ds18b20_readTemp@i^0,f,c
  2865  00088A  0E07               	movlw	7
  2866  00088C  643E               	cpfsgt	ds18b20_readTemp@i^0,c
  2867  00088E  D7F2               	goto	l2345
  2868                           
  2869                           ;ds18b20.c: 141: };ds18b20.c: 142: write_byte(0xBE);
  2870  000890  0EBE               	movlw	190
  2871  000892  ECCB  F006         	call	_write_byte
  2872                           
  2873                           ;ds18b20.c: 143: for (i = 0; i < 9; i++)
  2874  000896  6A3E               	clrf	ds18b20_readTemp@i^0,c
  2875  000898                     l2359:
  2876                           
  2877                           ;ds18b20.c: 144: {;ds18b20.c: 145: scratch[i] = read_byte();
  2878  000898  503E               	movf	ds18b20_readTemp@i^0,w,c
  2879  00089A  0F25               	addlw	low _scratch
  2880  00089C  6ED9               	movwf	fsr2l,c
  2881  00089E  6ADA               	clrf	fsr2h,c
  2882  0008A0  ECB0  F006         	call	_read_byte	;wreg free
  2883  0008A4  6EDF               	movwf	indf2,c
  2884  0008A6  2A3E               	incf	ds18b20_readTemp@i^0,f,c
  2885  0008A8  0E08               	movlw	8
  2886  0008AA  643E               	cpfsgt	ds18b20_readTemp@i^0,c
  2887  0008AC  D7F5               	goto	l2359
  2888                           
  2889                           ;ds18b20.c: 146: };ds18b20.c: 148: if (!(ds18b20_crc8(scratch, 9))) {
  2890  0008AE  0E25               	movlw	low _scratch
  2891  0008B0  6E30               	movwf	ds18b20_crc8@data_in^0,c
  2892  0008B2  0E09               	movlw	9
  2893  0008B4  6E31               	movwf	ds18b20_crc8@num_bytes^0,c
  2894  0008B6  EC29  F006         	call	_ds18b20_crc8	;wreg free
  2895  0008BA  0900               	iorlw	0
  2896  0008BC  E10C               	bnz	l2371
  2897                           
  2898                           ;ds18b20.c: 149: temp = (((uint16_t) scratch[1]) << 8) | ((uint16_t) scratch[0]);
  2899  0008BE  5026               	movf	(_scratch+1)^0,w,c
  2900  0008C0  6E39               	movwf	??_ds18b20_readTemp^0,c
  2901  0008C2  5025               	movf	_scratch^0,w,c
  2902  0008C4  6E3B               	movwf	ds18b20_readTemp@temp^0,c
  2903  0008C6  C039  F03C         	movff	??_ds18b20_readTemp,ds18b20_readTemp@temp+1
  2904                           
  2905                           ;ds18b20.c: 150: temp_ready[j] = temp;
  2906  0008CA  D81D               	call	PL18	;call to abstracted procedure
  2907  0008CC  C03B  FFDE         	movff	ds18b20_readTemp@temp,postinc2
  2908  0008D0  C03C  FFDD         	movff	ds18b20_readTemp@temp+1,postdec2
  2909                           
  2910                           ;ds18b20.c: 151: }else
  2911  0008D4  D004               	goto	l2373
  2912  0008D6                     l2371:
  2913                           
  2914                           ;ds18b20.c: 152: temp_ready[j] = 32767;
  2915  0008D6  D817               	call	PL18	;call to abstracted procedure
  2916  0008D8  68DE               	setf	postinc2,c
  2917  0008DA  0E7F               	movlw	127
  2918  0008DC  6EDD               	movwf	postdec2,c
  2919  0008DE                     l2373:
  2920  0008DE  2A3D               	incf	ds18b20_readTemp@j^0,f,c
  2921  0008E0  0E01               	movlw	1
  2922  0008E2  643D               	cpfsgt	ds18b20_readTemp@j^0,c
  2923  0008E4  D7C1               	goto	l2335
  2924                           
  2925                           ;ds18b20.c: 154: };ds18b20.c: 155: *time_flag = 0;
  2926  0008E6  5037               	movf	ds18b20_readTemp@time_flag^0,w,c
  2927  0008E8  6ED9               	movwf	fsr2l,c
  2928  0008EA  6ADA               	clrf	fsr2h,c
  2929  0008EC  6ADF               	clrf	indf2,c
  2930                           
  2931                           ;ds18b20.c: 156: return 1;
  2932  0008EE  0C01               	retlw	1
  2933  0008F0                     l2393:
  2934  0008F0  5037               	movf	ds18b20_readTemp@time_flag^0,w,c
  2935  0008F2  6ED9               	movwf	fsr2l,c
  2936  0008F4  6ADA               	clrf	fsr2h,c
  2937  0008F6  50DF               	movf	indf2,w,c
  2938                           
  2939                           ; Switch size 1, requested type "space"
  2940                           ; Number of cases is 3, Range of values is 0 to 2
  2941                           ; switch strategies available:
  2942                           ; Name         Instructions Cycles
  2943                           ; simple_byte           10     6 (average)
  2944                           ;	Chosen strategy is simple_byte
  2945  0008F8  E0A0               	bz	l2317
  2946  0008FA  0A01               	xorlw	1	; case 1
  2947  0008FC  E0B4               	bz	l266
  2948  0008FE  0A03               	xorlw	3	; case 2
  2949  000900  B4D8               	btfsc	status,2,c
  2950  000902  0C00               	retlw	0
  2951  000904  0012               	return		;funcret
  2952  000906                     __end_of_ds18b20_readTemp:
  2953                           	callstack 0
  2954  000906                     PL18:
  2955                           	callstack 27
  2956  000906  503D               	movf	ds18b20_readTemp@j^0,w,c
  2957  000908  0D02               	mullw	2
  2958  00090A  50F3               	movf	243,w,c
  2959  00090C  0F11               	addlw	low _temp_ready
  2960  00090E  6ED9               	movwf	fsr2l,c
  2961  000910  6ADA               	clrf	fsr2h,c
  2962  000912  0012               	return	
  2963  000914                     __end_ofPL18:
  2964                           	callstack 0
  2965                           
  2966 ;; *************** function _read_byte *****************
  2967 ;; Defined at:
  2968 ;;		line 50 in file "onewire.c"
  2969 ;; Parameters:    Size  Location     Type
  2970 ;;		None
  2971 ;; Auto vars:     Size  Location     Type
  2972 ;;  i               1    3[COMRAM] unsigned char 
  2973 ;;  val             1    2[COMRAM] unsigned char 
  2974 ;; Return value:  Size  Location     Type
  2975 ;;                  1    wreg      unsigned char 
  2976 ;; Registers used:
  2977 ;;		wreg, status,2, status,0, cstack
  2978 ;; Tracked objects:
  2979 ;;		On entry : 0/0
  2980 ;;		On exit  : 0/0
  2981 ;;		Unchanged: 0/0
  2982 ;; Data sizes:     COMRAM   BANK0   BANK1
  2983 ;;      Params:         0       0       0
  2984 ;;      Locals:         2       0       0
  2985 ;;      Temps:          2       0       0
  2986 ;;      Totals:         4       0       0
  2987 ;;Total ram usage:        4 bytes
  2988 ;; Hardware stack levels used:    1
  2989 ;; Hardware stack levels required when called:    2
  2990 ;; This function calls:
  2991 ;;		_read_bit
  2992 ;; This function is called by:
  2993 ;;		_ds18b20_readTemp
  2994 ;;		_ds18b20_readrom
  2995 ;; This function uses a non-reentrant model
  2996 ;;
  2997                           
  2998                           	psect	text10
  2999  000D60                     __ptext10:
  3000                           	callstack 0
  3001  000D60                     _read_byte:
  3002                           	callstack 27
  3003                           
  3004                           ;onewire.c: 52: uint8_t i;;onewire.c: 53: uint8_t val = 0;
  3005                           
  3006                           ;incstack = 0
  3007  000D60  6A32               	clrf	read_byte@val^0,c
  3008                           
  3009                           ;onewire.c: 55: for(i=0;i<8;i++)
  3010  000D62  6A33               	clrf	read_byte@i^0,c
  3011  000D64                     l1375:
  3012                           
  3013                           ;onewire.c: 56: {;onewire.c: 57: if(read_bit()) val |= (0x01 << i);
  3014  000D64  ECA4  F007         	call	_read_bit	;wreg free
  3015  000D68  0900               	iorlw	0
  3016  000D6A  E00C               	bz	l1379
  3017  000D6C  C033  F030         	movff	read_byte@i,??_read_byte
  3018  000D70  0E01               	movlw	1
  3019  000D72  6E31               	movwf	(??_read_byte+1)^0,c
  3020  000D74  2A30               	incf	??_read_byte^0,f,c
  3021  000D76  D002               	goto	u234
  3022  000D78                     u235:
  3023  000D78  90D8               	bcf	status,0,c
  3024  000D7A  3631               	rlcf	(??_read_byte+1)^0,f,c
  3025  000D7C                     u234:
  3026  000D7C  2E30               	decfsz	??_read_byte^0,f,c
  3027  000D7E  D7FC               	goto	u235
  3028  000D80  5031               	movf	(??_read_byte+1)^0,w,c
  3029  000D82  1232               	iorwf	read_byte@val^0,f,c
  3030  000D84                     l1379:
  3031                           
  3032                           ;onewire.c: 58: _delay((unsigned long)((120)*(8000000/4000000.0)));
  3033  000D84  0E50               	movlw	80
  3034  000D86                     u1877:
  3035  000D86  2EE8               	decfsz	wreg,f,c
  3036  000D88  D7FE               	bra	u1877
  3037  000D8A  2A33               	incf	read_byte@i^0,f,c
  3038  000D8C  0E07               	movlw	7
  3039  000D8E  6433               	cpfsgt	read_byte@i^0,c
  3040  000D90  D7E9               	goto	l1375
  3041                           
  3042                           ;onewire.c: 59: };onewire.c: 61: return val;
  3043  000D92  5032               	movf	read_byte@val^0,w,c
  3044  000D94  0012               	return		;funcret
  3045  000D96                     __end_of_read_byte:
  3046                           	callstack 0
  3047                           
  3048 ;; *************** function _read_bit *****************
  3049 ;; Defined at:
  3050 ;;		line 22 in file "onewire.c"
  3051 ;; Parameters:    Size  Location     Type
  3052 ;;		None
  3053 ;; Auto vars:     Size  Location     Type
  3054 ;;		None
  3055 ;; Return value:  Size  Location     Type
  3056 ;;                  1    wreg      unsigned char 
  3057 ;; Registers used:
  3058 ;;		wreg
  3059 ;; Tracked objects:
  3060 ;;		On entry : 0/0
  3061 ;;		On exit  : 0/0
  3062 ;;		Unchanged: 0/0
  3063 ;; Data sizes:     COMRAM   BANK0   BANK1
  3064 ;;      Params:         0       0       0
  3065 ;;      Locals:         0       0       0
  3066 ;;      Temps:          0       0       0
  3067 ;;      Totals:         0       0       0
  3068 ;;Total ram usage:        0 bytes
  3069 ;; Hardware stack levels used:    1
  3070 ;; Hardware stack levels required when called:    1
  3071 ;; This function calls:
  3072 ;;		Nothing
  3073 ;; This function is called by:
  3074 ;;		_read_byte
  3075 ;; This function uses a non-reentrant model
  3076 ;;
  3077                           
  3078                           	psect	text11
  3079  000F48                     __ptext11:
  3080                           	callstack 0
  3081  000F48                     _read_bit:
  3082                           	callstack 27
  3083                           
  3084                           ;onewire.c: 24: PORTAbits.RA6 = 0;
  3085                           
  3086                           ;incstack = 0
  3087  000F48  9C80               	bcf	128,6,c	;volatile
  3088                           
  3089                           ;onewire.c: 25: TRISAbits.TRISA6 = 0;
  3090  000F4A  9C92               	bcf	146,6,c	;volatile
  3091                           
  3092                           ;onewire.c: 26: _delay((unsigned long)((1)*(8000000/4000000.0)));
  3093  000F4C  D000               	nop2		;2 cycle nop
  3094                           
  3095                           ;onewire.c: 27: PORTAbits.RA6 = 1;
  3096  000F4E  8C80               	bsf	128,6,c	;volatile
  3097                           
  3098                           ;onewire.c: 28: TRISAbits.TRISA6 = 1;
  3099  000F50  8C92               	bsf	146,6,c	;volatile
  3100                           
  3101                           ;onewire.c: 29: _delay((unsigned long)((6)*(8000000/4000000.0)));
  3102  000F52  0E04               	movlw	4
  3103  000F54                     u1887:
  3104  000F54  2EE8               	decfsz	wreg,f,c
  3105  000F56  D7FE               	bra	u1887
  3106                           
  3107                           ;onewire.c: 30: return(PORTAbits.RA6);
  3108  000F58  BC80               	btfsc	128,6,c	;volatile
  3109  000F5A  0C01               	retlw	1
  3110  000F5C  0C00               	retlw	0	;funcret
  3111  000F5E                     __end_of_read_bit:
  3112                           	callstack 0
  3113                           
  3114 ;; *************** function _ds18b20_crc8 *****************
  3115 ;; Defined at:
  3116 ;;		line 219 in file "ds18b20.c"
  3117 ;; Parameters:    Size  Location     Type
  3118 ;;  data_in         1    0[COMRAM] PTR unsigned char 
  3119 ;;		 -> ds18b20_readrom@temp_rom(8), scratch(9), 
  3120 ;;  num_bytes       1    1[COMRAM] unsigned char 
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;  crc             1    6[COMRAM] unsigned char 
  3123 ;;  loop_count      1    5[COMRAM] unsigned char 
  3124 ;;  feedback_bit    1    4[COMRAM] unsigned char 
  3125 ;;  data            1    3[COMRAM] unsigned char 
  3126 ;;  bit_counter     1    2[COMRAM] unsigned char 
  3127 ;; Return value:  Size  Location     Type
  3128 ;;                  1    wreg      unsigned char 
  3129 ;; Registers used:
  3130 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3131 ;; Tracked objects:
  3132 ;;		On entry : 0/0
  3133 ;;		On exit  : 0/0
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMRAM   BANK0   BANK1
  3136 ;;      Params:         2       0       0
  3137 ;;      Locals:         5       0       0
  3138 ;;      Temps:          0       0       0
  3139 ;;      Totals:         7       0       0
  3140 ;;Total ram usage:        7 bytes
  3141 ;; Hardware stack levels used:    1
  3142 ;; Hardware stack levels required when called:    1
  3143 ;; This function calls:
  3144 ;;		Nothing
  3145 ;; This function is called by:
  3146 ;;		_ds18b20_readTemp
  3147 ;;		_ds18b20_readrom
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           	psect	text12
  3152  000C52                     __ptext12:
  3153                           	callstack 0
  3154  000C52                     _ds18b20_crc8:
  3155                           	callstack 28
  3156                           
  3157                           ;ds18b20.c: 220: uint8_t crc;;ds18b20.c: 221: uint8_t loop_count;;ds18b20.c: 222: uint8_
      +                          t bit_counter;;ds18b20.c: 223: uint8_t data;;ds18b20.c: 224: uint8_t feedback_bit;;ds18b
      +                          20.c: 226: crc = 0x00;
  3158                           
  3159                           ;incstack = 0
  3160  000C52  6A36               	clrf	ds18b20_crc8@crc^0,c
  3161                           
  3162                           ;ds18b20.c: 228: for (loop_count = 0; loop_count != num_bytes; loop_count++) {
  3163  000C54  6A35               	clrf	ds18b20_crc8@loop_count^0,c
  3164  000C56  D01D               	goto	l2231
  3165  000C58                     l2211:
  3166                           
  3167                           ;ds18b20.c: 229: data = data_in[loop_count];
  3168  000C58  5030               	movf	ds18b20_crc8@data_in^0,w,c
  3169  000C5A  2435               	addwf	ds18b20_crc8@loop_count^0,w,c
  3170  000C5C  6ED9               	movwf	fsr2l,c
  3171  000C5E  6ADA               	clrf	fsr2h,c
  3172  000C60  50DF               	movf	indf2,w,c
  3173  000C62  6E33               	movwf	ds18b20_crc8@data^0,c
  3174                           
  3175                           ;ds18b20.c: 231: bit_counter = 8;
  3176  000C64  0E08               	movlw	8
  3177  000C66  6E32               	movwf	ds18b20_crc8@bit_counter^0,c
  3178  000C68                     l2215:
  3179                           
  3180                           ;ds18b20.c: 233: feedback_bit = (crc ^ data) & 0x01;
  3181  000C68  5036               	movf	ds18b20_crc8@crc^0,w,c
  3182  000C6A  1833               	xorwf	ds18b20_crc8@data^0,w,c
  3183  000C6C  0B01               	andlw	1
  3184  000C6E  6E34               	movwf	ds18b20_crc8@feedback_bit^0,c
  3185                           
  3186                           ;ds18b20.c: 235: if (feedback_bit == 0x01) {
  3187  000C70  0434               	decf	ds18b20_crc8@feedback_bit^0,w,c
  3188  000C72  E102               	bnz	l295
  3189                           
  3190                           ;ds18b20.c: 236: crc = crc ^ 0x18;
  3191  000C74  0E18               	movlw	24
  3192  000C76  1A36               	xorwf	ds18b20_crc8@crc^0,f,c
  3193  000C78                     l295:
  3194                           
  3195                           ;ds18b20.c: 237: };ds18b20.c: 238: crc = (crc >> 1) & 0x7F;
  3196  000C78  90D8               	bcf	status,0,c
  3197  000C7A  3036               	rrcf	ds18b20_crc8@crc^0,w,c
  3198  000C7C  0B7F               	andlw	127
  3199  000C7E  6E36               	movwf	ds18b20_crc8@crc^0,c
  3200                           
  3201                           ;ds18b20.c: 239: if (feedback_bit == 0x01) {
  3202  000C80  0434               	decf	ds18b20_crc8@feedback_bit^0,w,c
  3203  000C82  E101               	bnz	l2223
  3204                           
  3205                           ;ds18b20.c: 240: crc = crc | 0x80;
  3206  000C84  8E36               	bsf	ds18b20_crc8@crc^0,7,c
  3207  000C86                     l2223:
  3208                           
  3209                           ;ds18b20.c: 241: };ds18b20.c: 243: data = data >> 1;
  3210  000C86  90D8               	bcf	status,0,c
  3211  000C88  3233               	rrcf	ds18b20_crc8@data^0,f,c
  3212                           
  3213                           ;ds18b20.c: 244: bit_counter--;
  3214  000C8A  0632               	decf	ds18b20_crc8@bit_counter^0,f,c
  3215                           
  3216                           ;ds18b20.c: 246: } while (bit_counter > 0);
  3217  000C8C  5032               	movf	ds18b20_crc8@bit_counter^0,w,c
  3218  000C8E  E1EC               	bnz	l2215
  3219  000C90  2A35               	incf	ds18b20_crc8@loop_count^0,f,c
  3220  000C92                     l2231:
  3221  000C92  5031               	movf	ds18b20_crc8@num_bytes^0,w,c
  3222  000C94  1835               	xorwf	ds18b20_crc8@loop_count^0,w,c
  3223  000C96  E1E0               	bnz	l2211
  3224                           
  3225                           ;ds18b20.c: 247: };ds18b20.c: 249: return crc;
  3226  000C98  5036               	movf	ds18b20_crc8@crc^0,w,c
  3227  000C9A  0012               	return		;funcret
  3228  000C9C                     __end_of_ds18b20_crc8:
  3229                           	callstack 0
  3230                           
  3231 ;; *************** function _ds18b20_get_temp *****************
  3232 ;; Defined at:
  3233 ;;		line 196 in file "ds18b20.c"
  3234 ;; Parameters:    Size  Location     Type
  3235 ;;  num_dq          1    wreg     unsigned char 
  3236 ;;  minus           1    0[COMRAM] PTR unsigned char 
  3237 ;;		 -> minus_2(1), minus_1(1), 
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;  num_dq          1    2[COMRAM] unsigned char 
  3240 ;;  temp            2    4[COMRAM] unsigned int 
  3241 ;;  tmp             1    3[COMRAM] unsigned char 
  3242 ;; Return value:  Size  Location     Type
  3243 ;;                  2    0[COMRAM] unsigned int 
  3244 ;; Registers used:
  3245 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  3246 ;; Tracked objects:
  3247 ;;		On entry : 0/0
  3248 ;;		On exit  : 0/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMRAM   BANK0   BANK1
  3251 ;;      Params:         2       0       0
  3252 ;;      Locals:         4       0       0
  3253 ;;      Temps:          0       0       0
  3254 ;;      Totals:         6       0       0
  3255 ;;Total ram usage:        6 bytes
  3256 ;; Hardware stack levels used:    1
  3257 ;; Hardware stack levels required when called:    1
  3258 ;; This function calls:
  3259 ;;		Nothing
  3260 ;; This function is called by:
  3261 ;;		_main
  3262 ;; This function uses a non-reentrant model
  3263 ;;
  3264                           
  3265                           	psect	text13
  3266  0009BC                     __ptext13:
  3267                           	callstack 0
  3268  0009BC                     _ds18b20_get_temp:
  3269                           	callstack 29
  3270                           
  3271                           ;incstack = 0
  3272                           ;ds18b20_get_temp@num_dq stored from wreg
  3273  0009BC  6E32               	movwf	ds18b20_get_temp@num_dq^0,c
  3274                           
  3275                           ;ds18b20.c: 197: uint16_t temp = temp_ready[num_dq-1];
  3276  0009BE  5032               	movf	ds18b20_get_temp@num_dq^0,w,c
  3277  0009C0  0D02               	mullw	2
  3278  0009C2  50F3               	movf	243,w,c
  3279  0009C4  0F0F               	addlw	low (_temp_ready+254)
  3280  0009C6  6ED9               	movwf	fsr2l,c
  3281  0009C8  6ADA               	clrf	fsr2h,c
  3282  0009CA  CFDE F034          	movff	postinc2,ds18b20_get_temp@temp
  3283  0009CE  CFDD F035          	movff	postdec2,ds18b20_get_temp@temp+1
  3284                           
  3285                           ;ds18b20.c: 198: uint8_t tmp;;ds18b20.c: 199: *minus = '+';
  3286  0009D2  5030               	movf	ds18b20_get_temp@minus^0,w,c
  3287  0009D4  6ED9               	movwf	fsr2l,c
  3288  0009D6  6ADA               	clrf	fsr2h,c
  3289  0009D8  0E2B               	movlw	43
  3290  0009DA  6EDF               	movwf	indf2,c
  3291                           
  3292                           ;ds18b20.c: 200: if(temp == 32767)
  3293  0009DC  2834               	incf	ds18b20_get_temp@temp^0,w,c
  3294  0009DE  E108               	bnz	l287
  3295  0009E0  0E7F               	movlw	127
  3296  0009E2  1835               	xorwf	(ds18b20_get_temp@temp+1)^0,w,c
  3297  0009E4  E105               	bnz	l287
  3298  0009E6                     u1270:
  3299                           
  3300                           ;ds18b20.c: 201: return temp;
  3301  0009E6  C034  F030         	movff	ds18b20_get_temp@temp,?_ds18b20_get_temp
  3302  0009EA  C035  F031         	movff	ds18b20_get_temp@temp+1,?_ds18b20_get_temp+1
  3303  0009EE  0012               	return	
  3304  0009F0                     l287:
  3305                           
  3306                           ;ds18b20.c: 202: if (temp & 0x8000) {
  3307  0009F0  AE35               	btfss	(ds18b20_get_temp@temp+1)^0,7,c
  3308  0009F2  D009               	goto	l2407
  3309                           
  3310                           ;ds18b20.c: 203: temp = -temp;
  3311  0009F4  6C34               	negf	ds18b20_get_temp@temp^0,c
  3312  0009F6  1E35               	comf	(ds18b20_get_temp@temp+1)^0,f,c
  3313  0009F8  B0D8               	btfsc	status,0,c
  3314  0009FA  2A35               	incf	(ds18b20_get_temp@temp+1)^0,f,c
  3315                           
  3316                           ;ds18b20.c: 204: *minus = '-';
  3317  0009FC  5030               	movf	ds18b20_get_temp@minus^0,w,c
  3318  0009FE  6ED9               	movwf	fsr2l,c
  3319  000A00  6ADA               	clrf	fsr2h,c
  3320  000A02  0E2D               	movlw	45
  3321  000A04  6EDF               	movwf	indf2,c
  3322  000A06                     l2407:
  3323                           
  3324                           ;ds18b20.c: 205: };ds18b20.c: 207: tmp = temp & 0x0f;
  3325  000A06  5034               	movf	ds18b20_get_temp@temp^0,w,c
  3326  000A08  0B0F               	andlw	15
  3327  000A0A  6E33               	movwf	ds18b20_get_temp@tmp^0,c
  3328                           
  3329                           ;ds18b20.c: 208: tmp = fract[tmp];
  3330  000A0C  0E37               	movlw	low _fract
  3331  000A0E  2433               	addwf	ds18b20_get_temp@tmp^0,w,c
  3332  000A10  6EF6               	movwf	tblptrl,c
  3333  000A12  6AF7               	clrf	tblptrh,c
  3334  000A14  0E1F               	movlw	high _fract
  3335  000A16  22F7               	addwfc	tblptrh,f,c
  3336  000A18                     	if	0	;There are less than 3 active tblptr bytes
  3337  000A18                     	endif
  3338  000A18  0008               	tblrd		*
  3339  000A1A  CFF5 F033          	movff	tablat,ds18b20_get_temp@tmp
  3340                           
  3341                           ;ds18b20.c: 209: temp = temp >> 4;
  3342  000A1E  3A34               	swapf	ds18b20_get_temp@temp^0,f,c
  3343  000A20  3A35               	swapf	(ds18b20_get_temp@temp+1)^0,f,c
  3344  000A22  0E0F               	movlw	15
  3345  000A24  1634               	andwf	ds18b20_get_temp@temp^0,f,c
  3346  000A26  5035               	movf	(ds18b20_get_temp@temp+1)^0,w,c
  3347  000A28  0BF0               	andlw	240
  3348  000A2A  1234               	iorwf	ds18b20_get_temp@temp^0,f,c
  3349  000A2C  0E0F               	movlw	15
  3350  000A2E  1635               	andwf	(ds18b20_get_temp@temp+1)^0,f,c
  3351                           
  3352                           ;ds18b20.c: 210: temp = (temp & 0x00ff) * 10;
  3353  000A30  5034               	movf	ds18b20_get_temp@temp^0,w,c
  3354  000A32  0D0A               	mullw	10
  3355  000A34  CFF3 F034          	movff	prodl,ds18b20_get_temp@temp
  3356  000A38  CFF4 F035          	movff	prodh,ds18b20_get_temp@temp+1
  3357                           
  3358                           ;ds18b20.c: 211: temp = temp + tmp;
  3359  000A3C  5033               	movf	ds18b20_get_temp@tmp^0,w,c
  3360  000A3E  2634               	addwf	ds18b20_get_temp@temp^0,f,c
  3361  000A40  0E00               	movlw	0
  3362  000A42  2235               	addwfc	(ds18b20_get_temp@temp+1)^0,f,c
  3363  000A44  D7D0               	goto	u1270
  3364  000A46                     __end_of_ds18b20_get_temp:
  3365                           	callstack 0
  3366                           
  3367 ;; *************** function ___lwmod *****************
  3368 ;; Defined at:
  3369 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  3370 ;; Parameters:    Size  Location     Type
  3371 ;;  dividend        2    7[COMRAM] unsigned int 
  3372 ;;  divisor         2    9[COMRAM] unsigned int 
  3373 ;; Auto vars:     Size  Location     Type
  3374 ;;  counter         1   11[COMRAM] unsigned char 
  3375 ;; Return value:  Size  Location     Type
  3376 ;;                  2    7[COMRAM] unsigned int 
  3377 ;; Registers used:
  3378 ;;		wreg, status,2, status,0
  3379 ;; Tracked objects:
  3380 ;;		On entry : 0/0
  3381 ;;		On exit  : 0/0
  3382 ;;		Unchanged: 0/0
  3383 ;; Data sizes:     COMRAM   BANK0   BANK1
  3384 ;;      Params:         4       0       0
  3385 ;;      Locals:         1       0       0
  3386 ;;      Temps:          0       0       0
  3387 ;;      Totals:         5       0       0
  3388 ;;Total ram usage:        5 bytes
  3389 ;; Hardware stack levels used:    1
  3390 ;; Hardware stack levels required when called:    1
  3391 ;; This function calls:
  3392 ;;		Nothing
  3393 ;; This function is called by:
  3394 ;;		_main
  3395 ;; This function uses a non-reentrant model
  3396 ;;
  3397                           
  3398                           	psect	text14
  3399  000CE6                     __ptext14:
  3400                           	callstack 0
  3401  000CE6                     ___lwmod:
  3402                           	callstack 29
  3403                           
  3404                           ;incstack = 0
  3405  000CE6  5039               	movf	___lwmod@divisor^0,w,c
  3406  000CE8  103A               	iorwf	(___lwmod@divisor+1)^0,w,c
  3407  000CEA  E017               	bz	l931
  3408  000CEC  0E01               	movlw	1
  3409  000CEE  6E3B               	movwf	___lwmod@counter^0,c
  3410  000CF0  D004               	goto	l2535
  3411  000CF2                     l2533:
  3412  000CF2  90D8               	bcf	status,0,c
  3413  000CF4  3639               	rlcf	___lwmod@divisor^0,f,c
  3414  000CF6  363A               	rlcf	(___lwmod@divisor+1)^0,f,c
  3415  000CF8  2A3B               	incf	___lwmod@counter^0,f,c
  3416  000CFA                     l2535:
  3417  000CFA  AE3A               	btfss	(___lwmod@divisor+1)^0,7,c
  3418  000CFC  D7FA               	goto	l2533
  3419  000CFE                     u1410:
  3420  000CFE  5039               	movf	___lwmod@divisor^0,w,c
  3421  000D00  5C37               	subwf	___lwmod@dividend^0,w,c
  3422  000D02  503A               	movf	(___lwmod@divisor+1)^0,w,c
  3423  000D04  5838               	subwfb	(___lwmod@dividend+1)^0,w,c
  3424  000D06  E304               	bnc	l2541
  3425  000D08  5039               	movf	___lwmod@divisor^0,w,c
  3426  000D0A  5E37               	subwf	___lwmod@dividend^0,f,c
  3427  000D0C  503A               	movf	(___lwmod@divisor+1)^0,w,c
  3428  000D0E  5A38               	subwfb	(___lwmod@dividend+1)^0,f,c
  3429  000D10                     l2541:
  3430  000D10  90D8               	bcf	status,0,c
  3431  000D12  323A               	rrcf	(___lwmod@divisor+1)^0,f,c
  3432  000D14  3239               	rrcf	___lwmod@divisor^0,f,c
  3433  000D16  2E3B               	decfsz	___lwmod@counter^0,f,c
  3434  000D18  D7F2               	goto	u1410
  3435  000D1A                     l931:
  3436  000D1A  C037  F037         	movff	___lwmod@dividend,?___lwmod
  3437  000D1E  C038  F038         	movff	___lwmod@dividend+1,?___lwmod+1
  3438  000D22  0012               	return		;funcret
  3439  000D24                     __end_of___lwmod:
  3440                           	callstack 0
  3441                           
  3442 ;; *************** function ___lwdiv *****************
  3443 ;; Defined at:
  3444 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  3445 ;; Parameters:    Size  Location     Type
  3446 ;;  dividend        2    0[COMRAM] unsigned int 
  3447 ;;  divisor         2    2[COMRAM] unsigned int 
  3448 ;; Auto vars:     Size  Location     Type
  3449 ;;  quotient        2    4[COMRAM] unsigned int 
  3450 ;;  counter         1    6[COMRAM] unsigned char 
  3451 ;; Return value:  Size  Location     Type
  3452 ;;                  2    0[COMRAM] unsigned int 
  3453 ;; Registers used:
  3454 ;;		wreg, status,2, status,0
  3455 ;; Tracked objects:
  3456 ;;		On entry : 0/0
  3457 ;;		On exit  : 0/0
  3458 ;;		Unchanged: 0/0
  3459 ;; Data sizes:     COMRAM   BANK0   BANK1
  3460 ;;      Params:         4       0       0
  3461 ;;      Locals:         3       0       0
  3462 ;;      Temps:          0       0       0
  3463 ;;      Totals:         7       0       0
  3464 ;;Total ram usage:        7 bytes
  3465 ;; Hardware stack levels used:    1
  3466 ;; Hardware stack levels required when called:    1
  3467 ;; This function calls:
  3468 ;;		Nothing
  3469 ;; This function is called by:
  3470 ;;		_main
  3471 ;; This function uses a non-reentrant model
  3472 ;;
  3473                           
  3474                           	psect	text15
  3475  000C9C                     __ptext15:
  3476                           	callstack 0
  3477  000C9C                     ___lwdiv:
  3478                           	callstack 29
  3479                           
  3480                           ;incstack = 0
  3481  000C9C  6A34               	clrf	___lwdiv@quotient^0,c
  3482  000C9E  6A35               	clrf	(___lwdiv@quotient+1)^0,c
  3483  000CA0  5032               	movf	___lwdiv@divisor^0,w,c
  3484  000CA2  1033               	iorwf	(___lwdiv@divisor+1)^0,w,c
  3485  000CA4  E01B               	bz	l921
  3486  000CA6  0E01               	movlw	1
  3487  000CA8  6E36               	movwf	___lwdiv@counter^0,c
  3488  000CAA  D004               	goto	l2515
  3489  000CAC                     l2513:
  3490  000CAC  90D8               	bcf	status,0,c
  3491  000CAE  3632               	rlcf	___lwdiv@divisor^0,f,c
  3492  000CB0  3633               	rlcf	(___lwdiv@divisor+1)^0,f,c
  3493  000CB2  2A36               	incf	___lwdiv@counter^0,f,c
  3494  000CB4                     l2515:
  3495  000CB4  AE33               	btfss	(___lwdiv@divisor+1)^0,7,c
  3496  000CB6  D7FA               	goto	l2513
  3497  000CB8                     u1380:
  3498  000CB8  90D8               	bcf	status,0,c
  3499  000CBA  3634               	rlcf	___lwdiv@quotient^0,f,c
  3500  000CBC  3635               	rlcf	(___lwdiv@quotient+1)^0,f,c
  3501  000CBE  5032               	movf	___lwdiv@divisor^0,w,c
  3502  000CC0  5C30               	subwf	___lwdiv@dividend^0,w,c
  3503  000CC2  5033               	movf	(___lwdiv@divisor+1)^0,w,c
  3504  000CC4  5831               	subwfb	(___lwdiv@dividend+1)^0,w,c
  3505  000CC6  E305               	bnc	l2525
  3506  000CC8  5032               	movf	___lwdiv@divisor^0,w,c
  3507  000CCA  5E30               	subwf	___lwdiv@dividend^0,f,c
  3508  000CCC  5033               	movf	(___lwdiv@divisor+1)^0,w,c
  3509  000CCE  5A31               	subwfb	(___lwdiv@dividend+1)^0,f,c
  3510  000CD0  8034               	bsf	___lwdiv@quotient^0,0,c
  3511  000CD2                     l2525:
  3512  000CD2  90D8               	bcf	status,0,c
  3513  000CD4  3233               	rrcf	(___lwdiv@divisor+1)^0,f,c
  3514  000CD6  3232               	rrcf	___lwdiv@divisor^0,f,c
  3515  000CD8  2E36               	decfsz	___lwdiv@counter^0,f,c
  3516  000CDA  D7EE               	goto	u1380
  3517  000CDC                     l921:
  3518  000CDC  C034  F030         	movff	___lwdiv@quotient,?___lwdiv
  3519  000CE0  C035  F031         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3520  000CE4  0012               	return		;funcret
  3521  000CE6                     __end_of___lwdiv:
  3522                           	callstack 0
  3523                           
  3524 ;; *************** function ___lbmod *****************
  3525 ;; Defined at:
  3526 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.31\pic\sources\c90\common\lbmod.c"
  3527 ;; Parameters:    Size  Location     Type
  3528 ;;  dividend        1    wreg     unsigned char 
  3529 ;;  divisor         1    4[COMRAM] unsigned char 
  3530 ;; Auto vars:     Size  Location     Type
  3531 ;;  dividend        1    5[COMRAM] unsigned char 
  3532 ;;  rem             1    7[COMRAM] unsigned char 
  3533 ;;  counter         1    6[COMRAM] unsigned char 
  3534 ;; Return value:  Size  Location     Type
  3535 ;;                  1    wreg      unsigned char 
  3536 ;; Registers used:
  3537 ;;		wreg, status,2, status,0
  3538 ;; Tracked objects:
  3539 ;;		On entry : 0/0
  3540 ;;		On exit  : 0/0
  3541 ;;		Unchanged: 0/0
  3542 ;; Data sizes:     COMRAM   BANK0   BANK1
  3543 ;;      Params:         1       0       0
  3544 ;;      Locals:         3       0       0
  3545 ;;      Temps:          0       0       0
  3546 ;;      Totals:         4       0       0
  3547 ;;Total ram usage:        4 bytes
  3548 ;; Hardware stack levels used:    1
  3549 ;; Hardware stack levels required when called:    1
  3550 ;; This function calls:
  3551 ;;		Nothing
  3552 ;; This function is called by:
  3553 ;;		_main
  3554 ;; This function uses a non-reentrant model
  3555 ;;
  3556                           
  3557                           	psect	text16
  3558  000E62                     __ptext16:
  3559                           	callstack 0
  3560  000E62                     ___lbmod:
  3561                           	callstack 29
  3562                           
  3563                           ;incstack = 0
  3564                           ;___lbmod@dividend stored from wreg
  3565  000E62  6E35               	movwf	___lbmod@dividend^0,c
  3566  000E64  0E08               	movlw	8
  3567  000E66  6E36               	movwf	___lbmod@counter^0,c
  3568  000E68  6A37               	clrf	___lbmod@rem^0,c
  3569  000E6A                     l2493:
  3570  000E6A  90D8               	bcf	status,0,c
  3571  000E6C  3435               	rlcf	___lbmod@dividend^0,w,c
  3572  000E6E  3437               	rlcf	___lbmod@rem^0,w,c
  3573  000E70  6E37               	movwf	___lbmod@rem^0,c
  3574  000E72  90D8               	bcf	status,0,c
  3575  000E74  3635               	rlcf	___lbmod@dividend^0,f,c
  3576  000E76  5034               	movf	___lbmod@divisor^0,w,c
  3577  000E78  5C37               	subwf	___lbmod@rem^0,w,c
  3578  000E7A  E302               	bnc	l2501
  3579  000E7C  5034               	movf	___lbmod@divisor^0,w,c
  3580  000E7E  5E37               	subwf	___lbmod@rem^0,f,c
  3581  000E80                     l2501:
  3582  000E80  2E36               	decfsz	___lbmod@counter^0,f,c
  3583  000E82  D7F3               	goto	l2493
  3584  000E84  5037               	movf	___lbmod@rem^0,w,c
  3585  000E86  0012               	return		;funcret
  3586  000E88                     __end_of___lbmod:
  3587                           	callstack 0
  3588                           
  3589 ;; *************** function ___lbdiv *****************
  3590 ;; Defined at:
  3591 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.31\pic\sources\c90\common\lbdiv.c"
  3592 ;; Parameters:    Size  Location     Type
  3593 ;;  dividend        1    wreg     unsigned char 
  3594 ;;  divisor         1    0[COMRAM] unsigned char 
  3595 ;; Auto vars:     Size  Location     Type
  3596 ;;  dividend        1    1[COMRAM] unsigned char 
  3597 ;;  quotient        1    3[COMRAM] unsigned char 
  3598 ;;  counter         1    2[COMRAM] unsigned char 
  3599 ;; Return value:  Size  Location     Type
  3600 ;;                  1    wreg      unsigned char 
  3601 ;; Registers used:
  3602 ;;		wreg, status,2, status,0
  3603 ;; Tracked objects:
  3604 ;;		On entry : 0/0
  3605 ;;		On exit  : 0/0
  3606 ;;		Unchanged: 0/0
  3607 ;; Data sizes:     COMRAM   BANK0   BANK1
  3608 ;;      Params:         1       0       0
  3609 ;;      Locals:         3       0       0
  3610 ;;      Temps:          0       0       0
  3611 ;;      Totals:         4       0       0
  3612 ;;Total ram usage:        4 bytes
  3613 ;; Hardware stack levels used:    1
  3614 ;; Hardware stack levels required when called:    1
  3615 ;; This function calls:
  3616 ;;		Nothing
  3617 ;; This function is called by:
  3618 ;;		_main
  3619 ;; This function uses a non-reentrant model
  3620 ;;
  3621                           
  3622                           	psect	text17
  3623  000DCC                     __ptext17:
  3624                           	callstack 0
  3625  000DCC                     ___lbdiv:
  3626                           	callstack 29
  3627                           
  3628                           ;incstack = 0
  3629                           ;___lbdiv@dividend stored from wreg
  3630  000DCC  6E31               	movwf	___lbdiv@dividend^0,c
  3631  000DCE  6A33               	clrf	___lbdiv@quotient^0,c
  3632  000DD0  5030               	movf	___lbdiv@divisor^0,w,c
  3633  000DD2  E014               	bz	l2485
  3634  000DD4  0E01               	movlw	1
  3635  000DD6  6E32               	movwf	___lbdiv@counter^0,c
  3636  000DD8  D003               	goto	l2473
  3637  000DDA                     l2469:
  3638  000DDA  90D8               	bcf	status,0,c
  3639  000DDC  3630               	rlcf	___lbdiv@divisor^0,f,c
  3640  000DDE  2A32               	incf	___lbdiv@counter^0,f,c
  3641  000DE0                     l2473:
  3642  000DE0  AE30               	btfss	___lbdiv@divisor^0,7,c
  3643  000DE2  D7FB               	goto	l2469
  3644  000DE4                     u1340:
  3645  000DE4  90D8               	bcf	status,0,c
  3646  000DE6  3633               	rlcf	___lbdiv@quotient^0,f,c
  3647  000DE8  5030               	movf	___lbdiv@divisor^0,w,c
  3648  000DEA  5C31               	subwf	___lbdiv@dividend^0,w,c
  3649  000DEC  E303               	bnc	l2481
  3650  000DEE  5030               	movf	___lbdiv@divisor^0,w,c
  3651  000DF0  5E31               	subwf	___lbdiv@dividend^0,f,c
  3652  000DF2  8033               	bsf	___lbdiv@quotient^0,0,c
  3653  000DF4                     l2481:
  3654  000DF4  90D8               	bcf	status,0,c
  3655  000DF6  3230               	rrcf	___lbdiv@divisor^0,f,c
  3656  000DF8  2E32               	decfsz	___lbdiv@counter^0,f,c
  3657  000DFA  D7F4               	goto	u1340
  3658  000DFC                     l2485:
  3659  000DFC  5033               	movf	___lbdiv@quotient^0,w,c
  3660  000DFE  0012               	return		;funcret
  3661  000E00                     __end_of___lbdiv:
  3662                           	callstack 0
  3663                           
  3664 ;; *************** function _Main_init *****************
  3665 ;; Defined at:
  3666 ;;		line 331 in file "main.c"
  3667 ;; Parameters:    Size  Location     Type
  3668 ;;		None
  3669 ;; Auto vars:     Size  Location     Type
  3670 ;;		None
  3671 ;; Return value:  Size  Location     Type
  3672 ;;                  1    wreg      void 
  3673 ;; Registers used:
  3674 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3675 ;; Tracked objects:
  3676 ;;		On entry : 0/0
  3677 ;;		On exit  : 0/0
  3678 ;;		Unchanged: 0/0
  3679 ;; Data sizes:     COMRAM   BANK0   BANK1
  3680 ;;      Params:         0       0       0
  3681 ;;      Locals:         0       0       0
  3682 ;;      Temps:          0       0       0
  3683 ;;      Totals:         0       0       0
  3684 ;;Total ram usage:        0 bytes
  3685 ;; Hardware stack levels used:    1
  3686 ;; Hardware stack levels required when called:    5
  3687 ;; This function calls:
  3688 ;;		_cgrom_char
  3689 ;;		_initLCD
  3690 ;;		_init_ds18b20
  3691 ;; This function is called by:
  3692 ;;		_main
  3693 ;; This function uses a non-reentrant model
  3694 ;;
  3695                           
  3696                           	psect	text18
  3697  000B9C                     __ptext18:
  3698                           	callstack 0
  3699  000B9C                     _Main_init:
  3700                           	callstack 25
  3701                           
  3702                           ;main.c: 334: PORTA = 0;
  3703                           
  3704                           ;incstack = 0
  3705  000B9C  6A80               	clrf	128,c	;volatile
  3706                           
  3707                           ;main.c: 335: LATA = 0;
  3708  000B9E  6A89               	clrf	137,c	;volatile
  3709                           
  3710                           ;main.c: 336: TRISA = 0;
  3711  000BA0  6A92               	clrf	146,c	;volatile
  3712                           
  3713                           ;main.c: 337: PORTB = 0;
  3714  000BA2  6A81               	clrf	129,c	;volatile
  3715                           
  3716                           ;main.c: 338: LATB = 0;
  3717  000BA4  6A8A               	clrf	138,c	;volatile
  3718                           
  3719                           ;main.c: 339: TRISB = 0b00000110;
  3720  000BA6  0E06               	movlw	6
  3721  000BA8  6E93               	movwf	147,c	;volatile
  3722                           
  3723                           ;main.c: 340: PORTC = 0;
  3724  000BAA  6A82               	clrf	130,c	;volatile
  3725                           
  3726                           ;main.c: 341: LATC = 0;
  3727  000BAC  6A8B               	clrf	139,c	;volatile
  3728                           
  3729                           ;main.c: 342: TRISC = 0;
  3730  000BAE  6A94               	clrf	148,c	;volatile
  3731                           
  3732                           ;main.c: 343: OSCCONbits.SCS0 = 0;
  3733  000BB0  90D3               	bcf	211,0,c	;volatile
  3734                           
  3735                           ;main.c: 344: OSCCONbits.SCS1 = 1;
  3736  000BB2  82D3               	bsf	211,1,c	;volatile
  3737                           
  3738                           ;main.c: 345: OSCCONbits.IRCF = 0b111;
  3739  000BB4  0E70               	movlw	112
  3740  000BB6  12D3               	iorwf	211,f,c	;volatile
  3741                           
  3742                           ;main.c: 346: ADCON1bits.PCFG = 0b1111;
  3743  000BB8  0E0F               	movlw	15
  3744  000BBA  12C1               	iorwf	193,f,c	;volatile
  3745                           
  3746                           ;main.c: 348: PORTAbits.RA6 = 1;
  3747  000BBC  8C80               	bsf	128,6,c	;volatile
  3748                           
  3749                           ;main.c: 350: init_ds18b20();
  3750  000BBE  EC60  F005         	call	_init_ds18b20	;wreg free
  3751                           
  3752                           ;main.c: 352: T1CON = 0b10000000;
  3753  000BC2  0E80               	movlw	128
  3754  000BC4  6ECD               	movwf	205,c	;volatile
  3755                           
  3756                           ;main.c: 354: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
  3757  000BC6  0E3C               	movlw	60
  3758  000BC8  6ECF               	movwf	207,c	;volatile
  3759                           
  3760                           ;main.c: 355: TMR1L = ((unsigned char)((15536)&0xFF));
  3761  000BCA  0EB0               	movlw	176
  3762  000BCC  6ECE               	movwf	206,c	;volatile
  3763                           
  3764                           ;main.c: 357: T0CONbits.T0PS = 0b000;
  3765  000BCE  0EF8               	movlw	-8
  3766  000BD0  16D5               	andwf	213,f,c	;volatile
  3767                           
  3768                           ;main.c: 358: T0CONbits.PSA = 1;
  3769  000BD2  86D5               	bsf	213,3,c	;volatile
  3770                           
  3771                           ;main.c: 359: T0CONbits.T08BIT = 0;
  3772  000BD4  9CD5               	bcf	213,6,c	;volatile
  3773                           
  3774                           ;main.c: 360: T0CONbits.T0CS = 0;
  3775  000BD6  9AD5               	bcf	213,5,c	;volatile
  3776                           
  3777                           ;main.c: 361: T0CONbits.TMR0ON = 1;
  3778  000BD8  8ED5               	bsf	213,7,c	;volatile
  3779                           
  3780                           ;main.c: 362: TMR0H = ((unsigned char)(((45536)>>8)&0xFF));
  3781  000BDA  0EB1               	movlw	177
  3782  000BDC  6ED7               	movwf	215,c	;volatile
  3783                           
  3784                           ;main.c: 363: TMR0L = ((unsigned char)((45536)&0xFF));
  3785  000BDE  0EE0               	movlw	224
  3786  000BE0  6ED6               	movwf	214,c	;volatile
  3787                           
  3788                           ;main.c: 364: INTCONbits.T0IE = 1;
  3789  000BE2  8AF2               	bsf	242,5,c	;volatile
  3790                           
  3791                           ;main.c: 365: INTCON2bits.RBPU = 0;
  3792  000BE4  9EF1               	bcf	241,7,c	;volatile
  3793                           
  3794                           ;main.c: 369: PIE1bits.TMR1IE = 1;
  3795  000BE6  809D               	bsf	157,0,c	;volatile
  3796                           
  3797                           ;main.c: 370: INTCONbits.PEIE = 1;
  3798  000BE8  8CF2               	bsf	242,6,c	;volatile
  3799                           
  3800                           ;main.c: 371: INTCONbits.GIE = 1;
  3801  000BEA  8EF2               	bsf	242,7,c	;volatile
  3802                           
  3803                           ;main.c: 372: initLCD();
  3804  000BEC  ECA0  F003         	call	_initLCD	;wreg free
  3805                           
  3806                           ;main.c: 373: cgrom_char(&symbol_4, 1);
  3807  000BF0  0E47               	movlw	low _symbol_4
  3808  000BF2  6E34               	movwf	cgrom_char@symbol^0,c
  3809  000BF4  0E1F               	movlw	high _symbol_4
  3810  000BF6  6E35               	movwf	(cgrom_char@symbol+1)^0,c
  3811  000BF8  0E01               	movlw	1
  3812  000BFA  6E36               	movwf	cgrom_char@address^0,c
  3813  000BFC  EC00  F007         	call	_cgrom_char	;wreg free
  3814                           
  3815                           ;main.c: 374: LATCbits.LATC4 = 0;
  3816  000C00  988B               	bcf	139,4,c	;volatile
  3817  000C02  0012               	return		;funcret
  3818  000C04                     __end_of_Main_init:
  3819                           	callstack 0
  3820                           
  3821 ;; *************** function _init_ds18b20 *****************
  3822 ;; Defined at:
  3823 ;;		line 18 in file "ds18b20.c"
  3824 ;; Parameters:    Size  Location     Type
  3825 ;;		None
  3826 ;; Auto vars:     Size  Location     Type
  3827 ;;  i               1    9[COMRAM] unsigned char 
  3828 ;;  q               1    8[COMRAM] unsigned char 
  3829 ;; Return value:  Size  Location     Type
  3830 ;;                  1    wreg      void 
  3831 ;; Registers used:
  3832 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3833 ;; Tracked objects:
  3834 ;;		On entry : 0/0
  3835 ;;		On exit  : 0/0
  3836 ;;		Unchanged: 0/0
  3837 ;; Data sizes:     COMRAM   BANK0   BANK1
  3838 ;;      Params:         0       0       0
  3839 ;;      Locals:         2       0       0
  3840 ;;      Temps:          2       0       0
  3841 ;;      Totals:         4       0       0
  3842 ;;Total ram usage:        4 bytes
  3843 ;; Hardware stack levels used:    1
  3844 ;; Hardware stack levels required when called:    3
  3845 ;; This function calls:
  3846 ;;		_ow_reset
  3847 ;;		_read_eep
  3848 ;;		_write_byte
  3849 ;; This function is called by:
  3850 ;;		_Main_init
  3851 ;; This function uses a non-reentrant model
  3852 ;;
  3853                           
  3854                           	psect	text19
  3855  000AC0                     __ptext19:
  3856                           	callstack 0
  3857  000AC0                     _init_ds18b20:
  3858                           	callstack 26
  3859                           
  3860                           ;ds18b20.c: 20: if (!ow_reset())
  3861                           
  3862                           ;incstack = 0
  3863  000AC0  EC19  F007         	call	_ow_reset	;wreg free
  3864  000AC4  0900               	iorlw	0
  3865  000AC6  E10F               	bnz	l2143
  3866                           
  3867                           ;ds18b20.c: 21: {;ds18b20.c: 23: write_byte(0xCC);
  3868  000AC8  0ECC               	movlw	204
  3869  000ACA  ECCB  F006         	call	_write_byte
  3870                           
  3871                           ;ds18b20.c: 24: write_byte(0x4E);
  3872  000ACE  0E4E               	movlw	78
  3873  000AD0  ECCB  F006         	call	_write_byte
  3874                           
  3875                           ;ds18b20.c: 25: write_byte(0x00);
  3876  000AD4  0E00               	movlw	0
  3877  000AD6  ECCB  F006         	call	_write_byte
  3878                           
  3879                           ;ds18b20.c: 26: write_byte(0x00);
  3880  000ADA  0E00               	movlw	0
  3881  000ADC  ECCB  F006         	call	_write_byte
  3882                           
  3883                           ;ds18b20.c: 27: write_byte(0x7F);
  3884  000AE0  0E7F               	movlw	127
  3885  000AE2  ECCB  F006         	call	_write_byte
  3886  000AE6                     l2143:
  3887                           
  3888                           ;ds18b20.c: 28: };ds18b20.c: 30: for (uint8_t q = 0; q < 2; q++) {
  3889  000AE6  6A38               	clrf	init_ds18b20@q^0,c
  3890  000AE8                     l254:
  3891                           
  3892                           ;ds18b20.c: 31: for (uint8_t i = 0; i < 8; i++) {
  3893  000AE8  6A39               	clrf	init_ds18b20@i^0,c
  3894  000AEA                     l2153:
  3895                           
  3896                           ;ds18b20.c: 32: rom_dq[q][i] = read_eep((q*8) + i);
  3897  000AEA  5038               	movf	init_ds18b20@q^0,w,c
  3898  000AEC  0D08               	mullw	8
  3899  000AEE  50F3               	movf	243,w,c
  3900  000AF0  0F01               	addlw	low _rom_dq
  3901  000AF2  2439               	addwf	init_ds18b20@i^0,w,c
  3902  000AF4  6ED9               	movwf	fsr2l,c
  3903  000AF6  6ADA               	clrf	fsr2h,c
  3904  000AF8  5038               	movf	init_ds18b20@q^0,w,c
  3905  000AFA  6E36               	movwf	??_init_ds18b20^0,c
  3906  000AFC  6A37               	clrf	(??_init_ds18b20+1)^0,c
  3907  000AFE  90D8               	bcf	status,0,c
  3908  000B00  3636               	rlcf	??_init_ds18b20^0,f,c
  3909  000B02  3637               	rlcf	(??_init_ds18b20+1)^0,f,c
  3910  000B04  90D8               	bcf	status,0,c
  3911  000B06  3636               	rlcf	??_init_ds18b20^0,f,c
  3912  000B08  3637               	rlcf	(??_init_ds18b20+1)^0,f,c
  3913  000B0A  90D8               	bcf	status,0,c
  3914  000B0C  3636               	rlcf	??_init_ds18b20^0,f,c
  3915  000B0E  3637               	rlcf	(??_init_ds18b20+1)^0,f,c
  3916  000B10  5039               	movf	init_ds18b20@i^0,w,c
  3917  000B12  2436               	addwf	??_init_ds18b20^0,w,c
  3918  000B14  6E30               	movwf	read_eep@address^0,c
  3919  000B16  0E00               	movlw	0
  3920  000B18  2037               	addwfc	(??_init_ds18b20+1)^0,w,c
  3921  000B1A  6E31               	movwf	(read_eep@address+1)^0,c
  3922  000B1C  ECAF  F007         	call	_read_eep	;wreg free
  3923  000B20  6EDF               	movwf	indf2,c
  3924  000B22  2A39               	incf	init_ds18b20@i^0,f,c
  3925  000B24  0E07               	movlw	7
  3926  000B26  6439               	cpfsgt	init_ds18b20@i^0,c
  3927  000B28  D7E0               	goto	l2153
  3928  000B2A  2A38               	incf	init_ds18b20@q^0,f,c
  3929  000B2C  0E01               	movlw	1
  3930  000B2E  6438               	cpfsgt	init_ds18b20@q^0,c
  3931  000B30  D7DB               	goto	l254
  3932  000B32  0C01               	retlw	1
  3933  000B34                     __end_of_init_ds18b20:
  3934                           	callstack 0
  3935                           
  3936 ;; *************** function _write_byte *****************
  3937 ;; Defined at:
  3938 ;;		line 66 in file "onewire.c"
  3939 ;; Parameters:    Size  Location     Type
  3940 ;;  val             1    wreg     unsigned char 
  3941 ;; Auto vars:     Size  Location     Type
  3942 ;;  val             1    3[COMRAM] unsigned char 
  3943 ;;  i               1    5[COMRAM] unsigned char 
  3944 ;;  temp            1    4[COMRAM] unsigned char 
  3945 ;; Return value:  Size  Location     Type
  3946 ;;                  1    wreg      void 
  3947 ;; Registers used:
  3948 ;;		wreg, status,2, status,0, cstack
  3949 ;; Tracked objects:
  3950 ;;		On entry : 0/0
  3951 ;;		On exit  : 0/0
  3952 ;;		Unchanged: 0/0
  3953 ;; Data sizes:     COMRAM   BANK0   BANK1
  3954 ;;      Params:         0       0       0
  3955 ;;      Locals:         3       0       0
  3956 ;;      Temps:          2       0       0
  3957 ;;      Totals:         5       0       0
  3958 ;;Total ram usage:        5 bytes
  3959 ;; Hardware stack levels used:    1
  3960 ;; Hardware stack levels required when called:    2
  3961 ;; This function calls:
  3962 ;;		_write_bit
  3963 ;; This function is called by:
  3964 ;;		_init_ds18b20
  3965 ;;		_ds18b20_readTemp
  3966 ;;		_ds18b20_readrom
  3967 ;; This function uses a non-reentrant model
  3968 ;;
  3969                           
  3970                           	psect	text20
  3971  000D96                     __ptext20:
  3972                           	callstack 0
  3973  000D96                     _write_byte:
  3974                           	callstack 27
  3975                           
  3976                           ;incstack = 0
  3977                           ;write_byte@val stored from wreg
  3978  000D96  6E33               	movwf	write_byte@val^0,c
  3979                           
  3980                           ;onewire.c: 68: uint8_t i;;onewire.c: 69: uint8_t temp;;onewire.c: 71: for (i=0;i<8;i++)
  3981  000D98  6A35               	clrf	write_byte@i^0,c
  3982  000D9A                     l1247:
  3983                           
  3984                           ;onewire.c: 72: {;onewire.c: 73: temp = val >> i;
  3985  000D9A  C035  F031         	movff	write_byte@i,??_write_byte
  3986  000D9E  C033  F032         	movff	write_byte@val,??_write_byte+1
  3987  000DA2  2A31               	incf	??_write_byte^0,f,c
  3988  000DA4  D002               	goto	u124
  3989  000DA6                     u125:
  3990  000DA6  90D8               	bcf	status,0,c
  3991  000DA8  3232               	rrcf	(??_write_byte+1)^0,f,c
  3992  000DAA                     u124:
  3993  000DAA  2E31               	decfsz	??_write_byte^0,f,c
  3994  000DAC  D7FC               	goto	u125
  3995  000DAE  5032               	movf	(??_write_byte+1)^0,w,c
  3996  000DB0  6E34               	movwf	write_byte@temp^0,c
  3997                           
  3998                           ;onewire.c: 74: temp &= 0x01;
  3999  000DB2  0E01               	movlw	1
  4000  000DB4  1634               	andwf	write_byte@temp^0,f,c
  4001                           
  4002                           ;onewire.c: 75: write_bit(temp);
  4003  000DB6  5034               	movf	write_byte@temp^0,w,c
  4004  000DB8  EC7A  F007         	call	_write_bit
  4005  000DBC  2A35               	incf	write_byte@i^0,f,c
  4006  000DBE  0E07               	movlw	7
  4007  000DC0  6435               	cpfsgt	write_byte@i^0,c
  4008  000DC2  D7EB               	goto	l1247
  4009                           
  4010                           ;onewire.c: 76: };onewire.c: 78: _delay((unsigned long)((105)*(8000000/4000000.0)));
  4011  000DC4  0E46               	movlw	70
  4012  000DC6                     u1897:
  4013  000DC6  2EE8               	decfsz	wreg,f,c
  4014  000DC8  D7FE               	bra	u1897
  4015  000DCA  0012               	return		;funcret
  4016  000DCC                     __end_of_write_byte:
  4017                           	callstack 0
  4018                           
  4019 ;; *************** function _write_bit *****************
  4020 ;; Defined at:
  4021 ;;		line 34 in file "onewire.c"
  4022 ;; Parameters:    Size  Location     Type
  4023 ;;  bitval          1    wreg     unsigned char 
  4024 ;; Auto vars:     Size  Location     Type
  4025 ;;  bitval          1    0[COMRAM] unsigned char 
  4026 ;; Return value:  Size  Location     Type
  4027 ;;                  1    wreg      void 
  4028 ;; Registers used:
  4029 ;;		wreg, status,2, status,0, cstack
  4030 ;; Tracked objects:
  4031 ;;		On entry : 0/0
  4032 ;;		On exit  : 0/0
  4033 ;;		Unchanged: 0/0
  4034 ;; Data sizes:     COMRAM   BANK0   BANK1
  4035 ;;      Params:         0       0       0
  4036 ;;      Locals:         1       0       0
  4037 ;;      Temps:          0       0       0
  4038 ;;      Totals:         1       0       0
  4039 ;;Total ram usage:        1 bytes
  4040 ;; Hardware stack levels used:    1
  4041 ;; Hardware stack levels required when called:    1
  4042 ;; This function calls:
  4043 ;;		Nothing
  4044 ;; This function is called by:
  4045 ;;		_write_byte
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           	psect	text21
  4050  000EF4                     __ptext21:
  4051                           	callstack 0
  4052  000EF4                     _write_bit:
  4053                           	callstack 27
  4054                           
  4055                           ;incstack = 0
  4056                           ;write_bit@bitval stored from wreg
  4057  000EF4  6E30               	movwf	write_bit@bitval^0,c
  4058                           
  4059                           ;onewire.c: 36: PORTAbits.RA6 = 0;
  4060  000EF6  9C80               	bcf	128,6,c	;volatile
  4061                           
  4062                           ;onewire.c: 37: TRISAbits.TRISA6 = 0;
  4063  000EF8  9C92               	bcf	146,6,c	;volatile
  4064                           
  4065                           ;onewire.c: 38: if(bitval == 1) {
  4066  000EFA  0430               	decf	write_bit@bitval^0,w,c
  4067  000EFC  E104               	bnz	l1213
  4068                           
  4069                           ;onewire.c: 39: _delay((unsigned long)((2)*(8000000/4000000.0)));
  4070  000EFE  D000               	nop2		;2 cycle nop
  4071  000F00  D000               	nop2		;2 cycle nop
  4072                           
  4073                           ;onewire.c: 40: PORTAbits.RA6 = 1;
  4074  000F02  8C80               	bsf	128,6,c	;volatile
  4075                           
  4076                           ;onewire.c: 41: TRISAbits.TRISA6 = 1;
  4077  000F04  8C92               	bsf	146,6,c	;volatile
  4078  000F06                     l1213:
  4079                           
  4080                           ;onewire.c: 42: };onewire.c: 43: _delay((unsigned long)((105)*(8000000/4000000.0)));
  4081  000F06  0E46               	movlw	70
  4082  000F08                     u1907:
  4083  000F08  2EE8               	decfsz	wreg,f,c
  4084  000F0A  D7FE               	bra	u1907
  4085                           
  4086                           ;onewire.c: 44: PORTAbits.RA6 = 1;
  4087  000F0C  8C80               	bsf	128,6,c	;volatile
  4088                           
  4089                           ;onewire.c: 45: TRISAbits.TRISA6 = 1;
  4090  000F0E  8C92               	bsf	146,6,c	;volatile
  4091  000F10  0012               	return		;funcret
  4092  000F12                     __end_of_write_bit:
  4093                           	callstack 0
  4094                           
  4095 ;; *************** function _read_eep *****************
  4096 ;; Defined at:
  4097 ;;		line 25 in file "eeprom.c"
  4098 ;; Parameters:    Size  Location     Type
  4099 ;;  address         2    0[COMRAM] unsigned short 
  4100 ;; Auto vars:     Size  Location     Type
  4101 ;;		None
  4102 ;; Return value:  Size  Location     Type
  4103 ;;                  1    wreg      unsigned char 
  4104 ;; Registers used:
  4105 ;;		wreg, status,2
  4106 ;; Tracked objects:
  4107 ;;		On entry : 0/0
  4108 ;;		On exit  : 0/0
  4109 ;;		Unchanged: 0/0
  4110 ;; Data sizes:     COMRAM   BANK0   BANK1
  4111 ;;      Params:         2       0       0
  4112 ;;      Locals:         0       0       0
  4113 ;;      Temps:          0       0       0
  4114 ;;      Totals:         2       0       0
  4115 ;;Total ram usage:        2 bytes
  4116 ;; Hardware stack levels used:    1
  4117 ;; Hardware stack levels required when called:    1
  4118 ;; This function calls:
  4119 ;;		Nothing
  4120 ;; This function is called by:
  4121 ;;		_main
  4122 ;;		_init_ds18b20
  4123 ;; This function uses a non-reentrant model
  4124 ;;
  4125                           
  4126                           	psect	text22
  4127  000F5E                     __ptext22:
  4128                           	callstack 0
  4129  000F5E                     _read_eep:
  4130                           	callstack 29
  4131                           
  4132                           ;eeprom.c: 28: {}
  4133                           
  4134                           ;incstack = 0
  4135  000F5E  B2A6               	btfsc	166,1,c	;volsfr
  4136  000F60  D7FE               	goto	_read_eep
  4137                           
  4138                           ;eeprom.c: 30: EEADR = address;
  4139  000F62  C030  FFA9         	movff	read_eep@address,4009	;volatile
  4140                           
  4141                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
  4142  000F66  9EA6               	bcf	166,7,c	;volsfr
  4143                           
  4144                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
  4145  000F68  9CA6               	bcf	166,6,c	;volsfr
  4146                           
  4147                           ;eeprom.c: 33: EECON1bits.RD = 1;
  4148  000F6A  80A6               	bsf	166,0,c	;volsfr
  4149                           
  4150                           ;eeprom.c: 34: return( EEDATA );
  4151  000F6C  50A8               	movf	168,w,c	;volatile
  4152  000F6E  0012               	return		;funcret
  4153  000F70                     __end_of_read_eep:
  4154                           	callstack 0
  4155                           
  4156 ;; *************** function _ow_reset *****************
  4157 ;; Defined at:
  4158 ;;		line 5 in file "onewire.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;		None
  4161 ;; Auto vars:     Size  Location     Type
  4162 ;;  presence        1    0[COMRAM] unsigned char 
  4163 ;; Return value:  Size  Location     Type
  4164 ;;                  1    wreg      unsigned char 
  4165 ;; Registers used:
  4166 ;;		wreg, status,2
  4167 ;; Tracked objects:
  4168 ;;		On entry : 0/0
  4169 ;;		On exit  : 0/0
  4170 ;;		Unchanged: 0/0
  4171 ;; Data sizes:     COMRAM   BANK0   BANK1
  4172 ;;      Params:         0       0       0
  4173 ;;      Locals:         1       0       0
  4174 ;;      Temps:          0       0       0
  4175 ;;      Totals:         1       0       0
  4176 ;;Total ram usage:        1 bytes
  4177 ;; Hardware stack levels used:    1
  4178 ;; Hardware stack levels required when called:    1
  4179 ;; This function calls:
  4180 ;;		Nothing
  4181 ;; This function is called by:
  4182 ;;		_init_ds18b20
  4183 ;;		_ds18b20_readTemp
  4184 ;;		_ds18b20_readrom
  4185 ;; This function uses a non-reentrant model
  4186 ;;
  4187                           
  4188                           	psect	text23
  4189  000E32                     __ptext23:
  4190                           	callstack 0
  4191  000E32                     _ow_reset:
  4192                           	callstack 28
  4193                           
  4194                           ;onewire.c: 7: uint8_t presence;;onewire.c: 8: PORTAbits.RA6 = 0;
  4195                           
  4196                           ;incstack = 0
  4197  000E32  9C80               	bcf	128,6,c	;volatile
  4198                           
  4199                           ;onewire.c: 9: TRISAbits.TRISA6 = 0;
  4200  000E34  9C92               	bcf	146,6,c	;volatile
  4201                           
  4202                           ;onewire.c: 10: _delay((unsigned long)((500)*(8000000/4000000.0)));
  4203  000E36  0EC8               	movlw	200
  4204  000E38                     u1917:
  4205  000E38  D000               	nop2	
  4206  000E3A  2EE8               	decfsz	wreg,f,c
  4207  000E3C  D7FD               	bra	u1917
  4208                           
  4209                           ;onewire.c: 11: PORTAbits.RA6 = 1;
  4210  000E3E  8C80               	bsf	128,6,c	;volatile
  4211                           
  4212                           ;onewire.c: 12: TRISAbits.TRISA6 = 1;
  4213  000E40  8C92               	bsf	146,6,c	;volatile
  4214                           
  4215                           ;onewire.c: 13: _delay((unsigned long)((100)*(8000000/4000000.0)));
  4216  000E42  0E42               	movlw	66
  4217  000E44                     u1927:
  4218  000E44  2EE8               	decfsz	wreg,f,c
  4219  000E46  D7FE               	bra	u1927
  4220  000E48  D000               	nop2	
  4221                           
  4222                           ;onewire.c: 14: presence = PORTAbits.RA6;
  4223  000E4A  0E00               	movlw	0
  4224  000E4C  BC80               	btfsc	128,6,c	;volatile
  4225  000E4E  0E01               	movlw	1
  4226  000E50  6E30               	movwf	ow_reset@presence^0,c
  4227                           
  4228                           ;onewire.c: 15: _delay((unsigned long)((424)*(8000000/4000000.0)));
  4229  000E52  0EA9               	movlw	169
  4230  000E54                     u1937:
  4231  000E54  D000               	nop2	
  4232  000E56  2EE8               	decfsz	wreg,f,c
  4233  000E58  D7FD               	bra	u1937
  4234  000E5A  D000               	nop2	
  4235  000E5C  F000               	nop	
  4236                           
  4237                           ;onewire.c: 16: return(presence);
  4238  000E5E  5030               	movf	ow_reset@presence^0,w,c
  4239  000E60  0012               	return		;funcret
  4240  000E62                     __end_of_ow_reset:
  4241                           	callstack 0
  4242                           
  4243 ;; *************** function _initLCD *****************
  4244 ;; Defined at:
  4245 ;;		line 10 in file "hd44780.c"
  4246 ;; Parameters:    Size  Location     Type
  4247 ;;		None
  4248 ;; Auto vars:     Size  Location     Type
  4249 ;;		None
  4250 ;; Return value:  Size  Location     Type
  4251 ;;                  1    wreg      void 
  4252 ;; Registers used:
  4253 ;;		wreg, status,2, status,0, cstack
  4254 ;; Tracked objects:
  4255 ;;		On entry : 0/0
  4256 ;;		On exit  : 0/0
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMRAM   BANK0   BANK1
  4259 ;;      Params:         0       0       0
  4260 ;;      Locals:         0       0       0
  4261 ;;      Temps:          1       0       0
  4262 ;;      Totals:         1       0       0
  4263 ;;Total ram usage:        1 bytes
  4264 ;; Hardware stack levels used:    1
  4265 ;; Hardware stack levels required when called:    4
  4266 ;; This function calls:
  4267 ;;		_clearLCD
  4268 ;;		_lcdNibble
  4269 ;;		_lcdWrite
  4270 ;; This function is called by:
  4271 ;;		_Main_init
  4272 ;; This function uses a non-reentrant model
  4273 ;;
  4274                           
  4275                           	psect	text24
  4276  000740                     __ptext24:
  4277                           	callstack 0
  4278  000740                     _initLCD:
  4279                           	callstack 25
  4280                           
  4281                           ;hd44780.c: 11: PORTAbits.RA2 = 0;
  4282                           
  4283                           ;incstack = 0
  4284  000740  9480               	bcf	128,2,c	;volatile
  4285                           
  4286                           ;hd44780.c: 12: PORTAbits.RA1 = 0;
  4287  000742  9280               	bcf	128,1,c	;volatile
  4288                           
  4289                           ;hd44780.c: 14: _delay((unsigned long)((10)*(8000000/4000.0)));
  4290  000744  0E1A               	movlw	26
  4291  000746  6E35               	movwf	??_initLCD^0,c
  4292  000748  0EF8               	movlw	248
  4293  00074A                     u1947:
  4294  00074A  2EE8               	decfsz	wreg,f,c
  4295  00074C  D7FE               	bra	u1947
  4296  00074E  2E35               	decfsz	??_initLCD^0,f,c
  4297  000750  D7FC               	bra	u1947
  4298  000752  D000               	nop2	
  4299                           
  4300                           ;hd44780.c: 15: _delay((unsigned long)((10)*(8000000/4000.0)));
  4301  000754  0E1A               	movlw	26
  4302  000756  6E35               	movwf	??_initLCD^0,c
  4303  000758  0EF8               	movlw	248
  4304  00075A                     u1957:
  4305  00075A  2EE8               	decfsz	wreg,f,c
  4306  00075C  D7FE               	bra	u1957
  4307  00075E  2E35               	decfsz	??_initLCD^0,f,c
  4308  000760  D7FC               	bra	u1957
  4309  000762  D000               	nop2	
  4310                           
  4311                           ;hd44780.c: 16: _delay((unsigned long)((10)*(8000000/4000.0)));
  4312  000764  0E1A               	movlw	26
  4313  000766  6E35               	movwf	??_initLCD^0,c
  4314  000768  0EF8               	movlw	248
  4315  00076A                     u1967:
  4316  00076A  2EE8               	decfsz	wreg,f,c
  4317  00076C  D7FE               	bra	u1967
  4318  00076E  2E35               	decfsz	??_initLCD^0,f,c
  4319  000770  D7FC               	bra	u1967
  4320  000772  D000               	nop2	
  4321                           
  4322                           ;hd44780.c: 17: _delay((unsigned long)((10)*(8000000/4000.0)));
  4323  000774  0E1A               	movlw	26
  4324  000776  6E35               	movwf	??_initLCD^0,c
  4325  000778  0EF8               	movlw	248
  4326  00077A                     u1977:
  4327  00077A  2EE8               	decfsz	wreg,f,c
  4328  00077C  D7FE               	bra	u1977
  4329  00077E  2E35               	decfsz	??_initLCD^0,f,c
  4330  000780  D7FC               	bra	u1977
  4331  000782  D000               	nop2	
  4332                           
  4333                           ;hd44780.c: 21: lcdNibble(0b0011);
  4334  000784  0E03               	movlw	3
  4335  000786  EC23  F005         	call	_lcdNibble
  4336                           
  4337                           ;hd44780.c: 22: _delay((unsigned long)((5)*(8000000/4000.0)));
  4338  00078A  0E0D               	movlw	13
  4339  00078C  6E35               	movwf	??_initLCD^0,c
  4340  00078E  0EFC               	movlw	252
  4341  000790                     u1987:
  4342  000790  2EE8               	decfsz	wreg,f,c
  4343  000792  D7FE               	bra	u1987
  4344  000794  2E35               	decfsz	??_initLCD^0,f,c
  4345  000796  D7FC               	bra	u1987
  4346                           
  4347                           ;hd44780.c: 23: lcdNibble(0b0011);
  4348  000798  0E03               	movlw	3
  4349  00079A  EC23  F005         	call	_lcdNibble
  4350                           
  4351                           ;hd44780.c: 24: _delay((unsigned long)((5)*(8000000/4000.0)));
  4352  00079E  0E0D               	movlw	13
  4353  0007A0  6E35               	movwf	??_initLCD^0,c
  4354  0007A2  0EFC               	movlw	252
  4355  0007A4                     u1997:
  4356  0007A4  2EE8               	decfsz	wreg,f,c
  4357  0007A6  D7FE               	bra	u1997
  4358  0007A8  2E35               	decfsz	??_initLCD^0,f,c
  4359  0007AA  D7FC               	bra	u1997
  4360                           
  4361                           ;hd44780.c: 25: lcdNibble(0b0011);
  4362  0007AC  0E03               	movlw	3
  4363  0007AE  EC23  F005         	call	_lcdNibble
  4364                           
  4365                           ;hd44780.c: 26: _delay((unsigned long)((5)*(8000000/4000.0)));
  4366  0007B2  0E0D               	movlw	13
  4367  0007B4  6E35               	movwf	??_initLCD^0,c
  4368  0007B6  0EFC               	movlw	252
  4369  0007B8                     u2007:
  4370  0007B8  2EE8               	decfsz	wreg,f,c
  4371  0007BA  D7FE               	bra	u2007
  4372  0007BC  2E35               	decfsz	??_initLCD^0,f,c
  4373  0007BE  D7FC               	bra	u2007
  4374                           
  4375                           ;hd44780.c: 27: lcdNibble(0b0010);
  4376  0007C0  0E02               	movlw	2
  4377  0007C2  EC23  F005         	call	_lcdNibble
  4378                           
  4379                           ;hd44780.c: 28: _delay((unsigned long)((5)*(8000000/4000.0)));
  4380  0007C6  0E0D               	movlw	13
  4381  0007C8  6E35               	movwf	??_initLCD^0,c
  4382  0007CA  0EFC               	movlw	252
  4383  0007CC                     u2017:
  4384  0007CC  2EE8               	decfsz	wreg,f,c
  4385  0007CE  D7FE               	bra	u2017
  4386  0007D0  2E35               	decfsz	??_initLCD^0,f,c
  4387  0007D2  D7FC               	bra	u2017
  4388                           
  4389                           ;hd44780.c: 31: lcdWrite(((0b0010 << 4) | (1 << 3)), COMMAND);
  4390  0007D4  0E00               	movlw	0
  4391  0007D6  6E32               	movwf	lcdWrite@type^0,c
  4392  0007D8  0E28               	movlw	40
  4393  0007DA  EC68  F007         	call	_lcdWrite
  4394                           
  4395                           ;hd44780.c: 32: _delay((unsigned long)((5)*(8000000/4000.0)));
  4396  0007DE  0E0D               	movlw	13
  4397  0007E0  6E35               	movwf	??_initLCD^0,c
  4398  0007E2  0EFC               	movlw	252
  4399  0007E4                     u2027:
  4400  0007E4  2EE8               	decfsz	wreg,f,c
  4401  0007E6  D7FE               	bra	u2027
  4402  0007E8  2E35               	decfsz	??_initLCD^0,f,c
  4403  0007EA  D7FC               	bra	u2027
  4404                           
  4405                           ;hd44780.c: 33: lcdWrite(((0b1100) | (0 << 1) | (0 << 0)), COMMAND);
  4406  0007EC  0E00               	movlw	0
  4407  0007EE  6E32               	movwf	lcdWrite@type^0,c
  4408  0007F0  0E0C               	movlw	12
  4409  0007F2  EC68  F007         	call	_lcdWrite
  4410                           
  4411                           ;hd44780.c: 34: _delay((unsigned long)((8)*(8000000/4000.0)));
  4412  0007F6  0E15               	movlw	21
  4413  0007F8  6E35               	movwf	??_initLCD^0,c
  4414  0007FA  0EC6               	movlw	198
  4415  0007FC                     u2037:
  4416  0007FC  2EE8               	decfsz	wreg,f,c
  4417  0007FE  D7FE               	bra	u2037
  4418  000800  2E35               	decfsz	??_initLCD^0,f,c
  4419  000802  D7FC               	bra	u2037
  4420  000804  D000               	nop2	
  4421                           
  4422                           ;hd44780.c: 35: clearLCD();
  4423  000806  EC97  F007         	call	_clearLCD	;wreg free
  4424                           
  4425                           ;hd44780.c: 36: _delay((unsigned long)((5)*(8000000/4000.0)));
  4426  00080A  0E0D               	movlw	13
  4427  00080C  6E35               	movwf	??_initLCD^0,c
  4428  00080E  0EFC               	movlw	252
  4429  000810                     u2047:
  4430  000810  2EE8               	decfsz	wreg,f,c
  4431  000812  D7FE               	bra	u2047
  4432  000814  2E35               	decfsz	??_initLCD^0,f,c
  4433  000816  D7FC               	bra	u2047
  4434                           
  4435                           ;hd44780.c: 37: lcdWrite(0x06, COMMAND);
  4436  000818  0E00               	movlw	0
  4437  00081A  6E32               	movwf	lcdWrite@type^0,c
  4438  00081C  0E06               	movlw	6
  4439  00081E  EC68  F007         	call	_lcdWrite
  4440                           
  4441                           ;hd44780.c: 38: _delay((unsigned long)((5)*(8000000/4000.0)));
  4442  000822  0E0D               	movlw	13
  4443  000824  6E35               	movwf	??_initLCD^0,c
  4444  000826  0EFC               	movlw	252
  4445  000828                     u2057:
  4446  000828  2EE8               	decfsz	wreg,f,c
  4447  00082A  D7FE               	bra	u2057
  4448  00082C  2E35               	decfsz	??_initLCD^0,f,c
  4449  00082E  D7FC               	bra	u2057
  4450                           
  4451                           ;hd44780.c: 39: clearLCD();
  4452  000830  EC97  F007         	call	_clearLCD	;wreg free
  4453                           
  4454                           ;hd44780.c: 41: PORTAbits.RA2 = 1;
  4455  000834  8480               	bsf	128,2,c	;volatile
  4456  000836  0012               	return		;funcret
  4457  000838                     __end_of_initLCD:
  4458                           	callstack 0
  4459                           
  4460 ;; *************** function _clearLCD *****************
  4461 ;; Defined at:
  4462 ;;		line 45 in file "hd44780.c"
  4463 ;; Parameters:    Size  Location     Type
  4464 ;;		None
  4465 ;; Auto vars:     Size  Location     Type
  4466 ;;		None
  4467 ;; Return value:  Size  Location     Type
  4468 ;;                  1    wreg      void 
  4469 ;; Registers used:
  4470 ;;		wreg, status,2, status,0, cstack
  4471 ;; Tracked objects:
  4472 ;;		On entry : 0/0
  4473 ;;		On exit  : 0/0
  4474 ;;		Unchanged: 0/0
  4475 ;; Data sizes:     COMRAM   BANK0   BANK1
  4476 ;;      Params:         0       0       0
  4477 ;;      Locals:         0       0       0
  4478 ;;      Temps:          1       0       0
  4479 ;;      Totals:         1       0       0
  4480 ;;Total ram usage:        1 bytes
  4481 ;; Hardware stack levels used:    1
  4482 ;; Hardware stack levels required when called:    3
  4483 ;; This function calls:
  4484 ;;		_lcdWrite
  4485 ;; This function is called by:
  4486 ;;		_main
  4487 ;;		_initLCD
  4488 ;; This function uses a non-reentrant model
  4489 ;;
  4490                           
  4491                           	psect	text25
  4492  000F2E                     __ptext25:
  4493                           	callstack 0
  4494  000F2E                     _clearLCD:
  4495                           	callstack 0
  4496                           
  4497                           ;hd44780.c: 46: lcdWrite(0x01, COMMAND);
  4498                           
  4499                           ;incstack = 0
  4500  000F2E  ECDB  F004         	call	PL32	;call to abstracted procedure
  4501  000F32  EC68  F007         	call	_lcdWrite
  4502                           
  4503                           ;hd44780.c: 47: _delay((unsigned long)((2)*(8000000/4000.0)));
  4504  000F36  0E06               	movlw	6
  4505  000F38  6E34               	movwf	??_clearLCD^0,c
  4506  000F3A  0E30               	movlw	48
  4507  000F3C                     u2067:
  4508  000F3C  2EE8               	decfsz	wreg,f,c
  4509  000F3E  D7FE               	bra	u2067
  4510  000F40  2E34               	decfsz	??_clearLCD^0,f,c
  4511  000F42  D7FC               	bra	u2067
  4512  000F44  D000               	nop2	
  4513  000F46  0012               	return		;funcret
  4514  000F48                     __end_of_clearLCD:
  4515                           	callstack 0
  4516                           
  4517 ;; *************** function _cgrom_char *****************
  4518 ;; Defined at:
  4519 ;;		line 127 in file "hd44780.c"
  4520 ;; Parameters:    Size  Location     Type
  4521 ;;  symbol          2    4[COMRAM] PTR unsigned char 
  4522 ;;		 -> symbol_4(8), 
  4523 ;;  address         1    6[COMRAM] unsigned char 
  4524 ;; Auto vars:     Size  Location     Type
  4525 ;;  i               1    7[COMRAM] unsigned char 
  4526 ;; Return value:  Size  Location     Type
  4527 ;;                  1    wreg      void 
  4528 ;; Registers used:
  4529 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4530 ;; Tracked objects:
  4531 ;;		On entry : 0/0
  4532 ;;		On exit  : 0/0
  4533 ;;		Unchanged: 0/0
  4534 ;; Data sizes:     COMRAM   BANK0   BANK1
  4535 ;;      Params:         3       0       0
  4536 ;;      Locals:         1       0       0
  4537 ;;      Temps:          0       0       0
  4538 ;;      Totals:         4       0       0
  4539 ;;Total ram usage:        4 bytes
  4540 ;; Hardware stack levels used:    1
  4541 ;; Hardware stack levels required when called:    3
  4542 ;; This function calls:
  4543 ;;		_lcdWrite
  4544 ;; This function is called by:
  4545 ;;		_Main_init
  4546 ;; This function uses a non-reentrant model
  4547 ;;
  4548                           
  4549                           	psect	text26
  4550  000E00                     __ptext26:
  4551                           	callstack 0
  4552  000E00                     _cgrom_char:
  4553                           	callstack 26
  4554                           
  4555                           ;hd44780.c: 128: uint8_t i;;hd44780.c: 129: lcdWrite(0x40 | (address * 8), COMMAND);
  4556                           
  4557                           ;incstack = 0
  4558  000E00  6A32               	clrf	lcdWrite@type^0,c
  4559  000E02  5036               	movf	cgrom_char@address^0,w,c
  4560  000E04  0D08               	mullw	8
  4561  000E06  50F3               	movf	243,w,c
  4562  000E08  0940               	iorlw	64
  4563  000E0A  EC68  F007         	call	_lcdWrite
  4564                           
  4565                           ;hd44780.c: 130: for (i = 0; i < 8; i++)
  4566  000E0E  6A37               	clrf	cgrom_char@i^0,c
  4567  000E10                     l2201:
  4568                           
  4569                           ;hd44780.c: 131: lcdWrite(*symbol++, DATA);
  4570  000E10  0E01               	movlw	1
  4571  000E12  6E32               	movwf	lcdWrite@type^0,c
  4572  000E14  C034  FFF6         	movff	cgrom_char@symbol,tblptrl
  4573  000E18  C035  FFF7         	movff	cgrom_char@symbol+1,tblptrh
  4574  000E1C                     	if	0	;tblptru may be non-zero
  4575  000E1C                     	endif
  4576  000E1C                     	if	0	;tblptru may be non-zero
  4577  000E1C                     	endif
  4578  000E1C  0008               	tblrd		*
  4579  000E1E  50F5               	movf	tablat,w,c
  4580  000E20  EC68  F007         	call	_lcdWrite
  4581  000E24  4A34               	infsnz	cgrom_char@symbol^0,f,c
  4582  000E26  2A35               	incf	(cgrom_char@symbol+1)^0,f,c
  4583  000E28  2A37               	incf	cgrom_char@i^0,f,c
  4584  000E2A  0E07               	movlw	7
  4585  000E2C  6437               	cpfsgt	cgrom_char@i^0,c
  4586  000E2E  D7F0               	goto	l2201
  4587  000E30  0C07               	retlw	7
  4588  000E32                     __end_of_cgrom_char:
  4589                           	callstack 0
  4590                           
  4591 ;; *************** function _lcdWrite *****************
  4592 ;; Defined at:
  4593 ;;		line 50 in file "hd44780.c"
  4594 ;; Parameters:    Size  Location     Type
  4595 ;;  byte            1    wreg     unsigned char 
  4596 ;;  type            1    2[COMRAM] enum E2011
  4597 ;; Auto vars:     Size  Location     Type
  4598 ;;  byte            1    3[COMRAM] unsigned char 
  4599 ;; Return value:  Size  Location     Type
  4600 ;;                  1    wreg      void 
  4601 ;; Registers used:
  4602 ;;		wreg, status,2, status,0, cstack
  4603 ;; Tracked objects:
  4604 ;;		On entry : 0/0
  4605 ;;		On exit  : 0/0
  4606 ;;		Unchanged: 0/0
  4607 ;; Data sizes:     COMRAM   BANK0   BANK1
  4608 ;;      Params:         1       0       0
  4609 ;;      Locals:         1       0       0
  4610 ;;      Temps:          0       0       0
  4611 ;;      Totals:         2       0       0
  4612 ;;Total ram usage:        2 bytes
  4613 ;; Hardware stack levels used:    1
  4614 ;; Hardware stack levels required when called:    2
  4615 ;; This function calls:
  4616 ;;		_lcdNibble
  4617 ;; This function is called by:
  4618 ;;		_initLCD
  4619 ;;		_clearLCD
  4620 ;;		_lcd_gotoxy
  4621 ;;		_lcd_putc
  4622 ;;		_lcdPrint
  4623 ;;		_cgrom_char
  4624 ;; This function uses a non-reentrant model
  4625 ;;
  4626                           
  4627                           	psect	text27
  4628  000ED0                     __ptext27:
  4629                           	callstack 0
  4630  000ED0                     _lcdWrite:
  4631                           	callstack 27
  4632                           
  4633                           ;incstack = 0
  4634                           ;lcdWrite@byte stored from wreg
  4635  000ED0  6E33               	movwf	lcdWrite@byte^0,c
  4636                           
  4637                           ;hd44780.c: 51: if (type == COMMAND)
  4638  000ED2  5032               	movf	lcdWrite@type^0,w,c
  4639  000ED4  E102               	bnz	l324
  4640                           
  4641                           ;hd44780.c: 52: PORTAbits.RA2 = 0;
  4642  000ED6  9480               	bcf	128,2,c	;volatile
  4643  000ED8  D001               	goto	l2087
  4644  000EDA                     l324:
  4645                           
  4646                           ;hd44780.c: 53: else;hd44780.c: 54: PORTAbits.RA2 = 1;
  4647  000EDA  8480               	bsf	128,2,c	;volatile
  4648  000EDC                     l2087:
  4649                           
  4650                           ;hd44780.c: 56: _delay((unsigned long)((100)*(8000000/4000000.0)));
  4651  000EDC  0E42               	movlw	66
  4652  000EDE                     u2077:
  4653  000EDE  2EE8               	decfsz	wreg,f,c
  4654  000EE0  D7FE               	bra	u2077
  4655  000EE2  D000               	nop2	
  4656                           
  4657                           ;hd44780.c: 58: lcdNibble(byte >> 4);
  4658  000EE4  3833               	swapf	lcdWrite@byte^0,w,c
  4659  000EE6  0B0F               	andlw	15
  4660  000EE8  EC23  F005         	call	_lcdNibble
  4661                           
  4662                           ;hd44780.c: 59: lcdNibble(byte & 0x0F);
  4663  000EEC  5033               	movf	lcdWrite@byte^0,w,c
  4664  000EEE  0B0F               	andlw	15
  4665  000EF0  EF23  F005         	goto	_lcdNibble
  4666  000EF4                     __end_of_lcdWrite:
  4667                           	callstack 0
  4668                           
  4669 ;; *************** function _lcdNibble *****************
  4670 ;; Defined at:
  4671 ;;		line 63 in file "hd44780.c"
  4672 ;; Parameters:    Size  Location     Type
  4673 ;;  nibble          1    wreg     unsigned char 
  4674 ;; Auto vars:     Size  Location     Type
  4675 ;;  nibble          1    1[COMRAM] unsigned char 
  4676 ;; Return value:  Size  Location     Type
  4677 ;;                  1    wreg      void 
  4678 ;; Registers used:
  4679 ;;		wreg, status,2, status,0
  4680 ;; Tracked objects:
  4681 ;;		On entry : 0/0
  4682 ;;		On exit  : 0/0
  4683 ;;		Unchanged: 0/0
  4684 ;; Data sizes:     COMRAM   BANK0   BANK1
  4685 ;;      Params:         0       0       0
  4686 ;;      Locals:         1       0       0
  4687 ;;      Temps:          1       0       0
  4688 ;;      Totals:         2       0       0
  4689 ;;Total ram usage:        2 bytes
  4690 ;; Hardware stack levels used:    1
  4691 ;; Hardware stack levels required when called:    1
  4692 ;; This function calls:
  4693 ;;		Nothing
  4694 ;; This function is called by:
  4695 ;;		_initLCD
  4696 ;;		_lcdWrite
  4697 ;; This function uses a non-reentrant model
  4698 ;;
  4699                           
  4700                           	psect	text28
  4701  000A46                     __ptext28:
  4702                           	callstack 0
  4703  000A46                     _lcdNibble:
  4704                           	callstack 27
  4705                           
  4706                           ;incstack = 0
  4707                           ;lcdNibble@nibble stored from wreg
  4708  000A46  6E31               	movwf	lcdNibble@nibble^0,c
  4709                           
  4710                           ;hd44780.c: 64: PORTCbits.RC0 = (nibble & 0x01) ? 1 : 0;
  4711  000A48  A031               	btfss	lcdNibble@nibble^0,0,c
  4712  000A4A  D003               	goto	u10
  4713  000A4C  6A30               	clrf	??_lcdNibble^0,c
  4714  000A4E  2A30               	incf	??_lcdNibble^0,f,c
  4715  000A50  D001               	goto	u28
  4716  000A52                     u10:
  4717  000A52  6A30               	clrf	??_lcdNibble^0,c
  4718  000A54                     u28:
  4719  000A54  5082               	movf	130,w,c	;volatile
  4720  000A56  1830               	xorwf	??_lcdNibble^0,w,c
  4721  000A58  0BFE               	andlw	-2
  4722  000A5A  1830               	xorwf	??_lcdNibble^0,w,c
  4723  000A5C  6E82               	movwf	130,c	;volatile
  4724                           
  4725                           ;hd44780.c: 65: PORTCbits.RC1 = (nibble & 0x02) ? 1 : 0;
  4726  000A5E  A231               	btfss	lcdNibble@nibble^0,1,c
  4727  000A60  D003               	goto	u30
  4728  000A62  6A30               	clrf	??_lcdNibble^0,c
  4729  000A64  2A30               	incf	??_lcdNibble^0,f,c
  4730  000A66  D001               	goto	u48
  4731  000A68                     u30:
  4732  000A68  6A30               	clrf	??_lcdNibble^0,c
  4733  000A6A                     u48:
  4734  000A6A  4630               	rlncf	??_lcdNibble^0,f,c
  4735  000A6C  5082               	movf	130,w,c	;volatile
  4736  000A6E  1830               	xorwf	??_lcdNibble^0,w,c
  4737  000A70  0BFD               	andlw	-3
  4738  000A72  1830               	xorwf	??_lcdNibble^0,w,c
  4739  000A74  6E82               	movwf	130,c	;volatile
  4740                           
  4741                           ;hd44780.c: 66: PORTCbits.RC2 = (nibble & 0x04) ? 1 : 0;
  4742  000A76  A431               	btfss	lcdNibble@nibble^0,2,c
  4743  000A78  D003               	goto	u50
  4744  000A7A  6A30               	clrf	??_lcdNibble^0,c
  4745  000A7C  2A30               	incf	??_lcdNibble^0,f,c
  4746  000A7E  D001               	goto	u68
  4747  000A80                     u50:
  4748  000A80  6A30               	clrf	??_lcdNibble^0,c
  4749  000A82                     u68:
  4750  000A82  D819               	call	PL28	;call to abstracted procedure
  4751  000A84  0BFB               	andlw	-5
  4752  000A86  1830               	xorwf	??_lcdNibble^0,w,c
  4753  000A88  6E82               	movwf	130,c	;volatile
  4754                           
  4755                           ;hd44780.c: 67: PORTCbits.RC3 = (nibble & 0x08) ? 1 : 0;
  4756  000A8A  A631               	btfss	lcdNibble@nibble^0,3,c
  4757  000A8C  D003               	goto	u70
  4758  000A8E  6A30               	clrf	??_lcdNibble^0,c
  4759  000A90  2A30               	incf	??_lcdNibble^0,f,c
  4760  000A92  D001               	goto	u88
  4761  000A94                     u70:
  4762  000A94  6A30               	clrf	??_lcdNibble^0,c
  4763  000A96                     u88:
  4764  000A96  4630               	rlncf	??_lcdNibble^0,f,c
  4765  000A98  D80E               	call	PL28	;call to abstracted procedure
  4766  000A9A  0BF7               	andlw	-9
  4767  000A9C  1830               	xorwf	??_lcdNibble^0,w,c
  4768  000A9E  6E82               	movwf	130,c	;volatile
  4769                           
  4770                           ;hd44780.c: 70: PORTAbits.RA1 = 1;
  4771  000AA0  8280               	bsf	128,1,c	;volatile
  4772                           
  4773                           ;hd44780.c: 71: _delay((unsigned long)((100)*(8000000/4000000.0)));
  4774  000AA2  0E42               	movlw	66
  4775  000AA4                     u2087:
  4776  000AA4  2EE8               	decfsz	wreg,f,c
  4777  000AA6  D7FE               	bra	u2087
  4778  000AA8  D000               	nop2	
  4779                           
  4780                           ;hd44780.c: 72: PORTAbits.RA1 = 0;
  4781  000AAA  9280               	bcf	128,1,c	;volatile
  4782                           
  4783                           ;hd44780.c: 73: _delay((unsigned long)((100)*(8000000/4000000.0)));
  4784  000AAC  0E42               	movlw	66
  4785  000AAE                     u2097:
  4786  000AAE  2EE8               	decfsz	wreg,f,c
  4787  000AB0  D7FE               	bra	u2097
  4788  000AB2  D000               	nop2	
  4789  000AB4  0012               	return		;funcret
  4790  000AB6                     __end_of_lcdNibble:
  4791                           	callstack 0
  4792  000AB6                     PL28:
  4793                           	callstack 27
  4794  000AB6  4630               	rlncf	??_lcdNibble^0,f,c
  4795  000AB8  4630               	rlncf	??_lcdNibble^0,f,c
  4796  000ABA  5082               	movf	130,w,c	;volatile
  4797  000ABC  1830               	xorwf	??_lcdNibble^0,w,c
  4798  000ABE  0012               	return	
  4799  000AC0                     __end_ofPL28:
  4800                           	callstack 0
  4801                           
  4802 ;; *************** function _myInt *****************
  4803 ;; Defined at:
  4804 ;;		line 382 in file "main.c"
  4805 ;; Parameters:    Size  Location     Type
  4806 ;;		None
  4807 ;; Auto vars:     Size  Location     Type
  4808 ;;		None
  4809 ;; Return value:  Size  Location     Type
  4810 ;;                  1    wreg      void 
  4811 ;; Registers used:
  4812 ;;		wreg, status,2, status,0
  4813 ;; Tracked objects:
  4814 ;;		On entry : 0/0
  4815 ;;		On exit  : 0/0
  4816 ;;		Unchanged: 0/0
  4817 ;; Data sizes:     COMRAM   BANK0   BANK1
  4818 ;;      Params:         0       0       0
  4819 ;;      Locals:         0       0       0
  4820 ;;      Temps:          0       0       0
  4821 ;;      Totals:         0       0       0
  4822 ;;Total ram usage:        0 bytes
  4823 ;; Hardware stack levels used:    1
  4824 ;; This function calls:
  4825 ;;		Nothing
  4826 ;; This function is called by:
  4827 ;;		Interrupt level 2
  4828 ;; This function uses a non-reentrant model
  4829 ;;
  4830                           
  4831                           	psect	intcode
  4832  000008                     __pintcode:
  4833                           	callstack 0
  4834  000008                     _myInt:
  4835                           	callstack 25
  4836                           
  4837                           ;incstack = 0
  4838  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4839                           
  4840                           ;main.c: 383: static uint8_t snd_delay;;main.c: 384: if (PIR1bits.TMR1IF == 1) {
  4841  00000A  A09E               	btfss	158,0,c	;volatile
  4842  00000C  D00D               	goto	i2l2063
  4843                           
  4844                           ;main.c: 385: PIR1bits.TMR1IF = 0;
  4845  00000E  909E               	bcf	158,0,c	;volatile
  4846                           
  4847                           ;main.c: 386: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
  4848  000010  0E3C               	movlw	60
  4849  000012  6ECF               	movwf	207,c	;volatile
  4850                           
  4851                           ;main.c: 387: TMR1L = ((unsigned char)((15536)&0xFF));
  4852  000014  0EB0               	movlw	176
  4853  000016  6ECE               	movwf	206,c	;volatile
  4854                           
  4855                           ;main.c: 388: if (++timer_val >= 30)
  4856  000018  2A2F               	incf	_timer_val^0,f,c
  4857  00001A  0E1D               	movlw	29
  4858  00001C  642F               	cpfsgt	_timer_val^0,c
  4859  00001E  D004               	goto	i2l2063
  4860                           
  4861                           ;main.c: 389: {;main.c: 390: timer_val = 0;
  4862  000020  6A2F               	clrf	_timer_val^0,c
  4863                           
  4864                           ;main.c: 391: time_flag = 1;
  4865  000022  0E01               	movlw	1
  4866  000024  6E2E               	movwf	_time_flag^0,c
  4867                           
  4868                           ;main.c: 392: T1CONbits.TMR1ON = 0;
  4869  000026  90CD               	bcf	205,0,c	;volatile
  4870  000028                     i2l2063:
  4871                           
  4872                           ;main.c: 394: };main.c: 395: };main.c: 396: if (INTCONbits.T0IF == 1) {
  4873  000028  A4F2               	btfss	242,2,c	;volatile
  4874  00002A  D013               	goto	i2l224
  4875                           
  4876                           ;main.c: 397: INTCONbits.T0IF = 0;
  4877  00002C  94F2               	bcf	242,2,c	;volatile
  4878                           
  4879                           ;main.c: 398: TMR0H = ((unsigned char)(((45536)>>8)&0xFF));
  4880  00002E  0EB1               	movlw	177
  4881  000030  6ED7               	movwf	215,c	;volatile
  4882                           
  4883                           ;main.c: 399: TMR0L = ((unsigned char)((45536)&0xFF));
  4884  000032  0EE0               	movlw	224
  4885  000034  6ED6               	movwf	214,c	;volatile
  4886                           
  4887                           ;main.c: 400: read_key = 1;
  4888  000036  8247               	bsf	(_read_key/(0+8))^0,_read_key& (0+7),c
  4889                           
  4890                           ;main.c: 401: if (en_sound) {
  4891  000038  A047               	btfss	(_en_sound/(0+8))^0,_en_sound& (0+7),c
  4892  00003A  D00B               	goto	i2l224
  4893                           
  4894                           ;main.c: 402: snd_delay++;
  4895  00003C  2A1E               	incf	myInt@snd_delay^0,f,c
  4896                           
  4897                           ;main.c: 403: if (snd_delay <= 20) {
  4898  00003E  0E15               	movlw	21
  4899  000040  601E               	cpfslt	myInt@snd_delay^0,c
  4900  000042  D002               	goto	i2l221
  4901                           
  4902                           ;main.c: 404: LATCbits.LATC4 = 1;
  4903  000044  888B               	bsf	139,4,c	;volatile
  4904                           
  4905                           ;main.c: 405: } else
  4906  000046  D001               	goto	i2l2079
  4907  000048                     i2l221:
  4908                           
  4909                           ;main.c: 406: LATCbits.LATC4 = 0;
  4910  000048  988B               	bcf	139,4,c	;volatile
  4911  00004A                     i2l2079:
  4912                           
  4913                           ;main.c: 407: if(snd_delay > 70)
  4914  00004A  0E46               	movlw	70
  4915  00004C  641E               	cpfsgt	myInt@snd_delay^0,c
  4916  00004E  D001               	goto	i2l224
  4917                           
  4918                           ;main.c: 408: snd_delay = 0;
  4919  000050  6A1E               	clrf	myInt@snd_delay^0,c
  4920  000052                     i2l224:
  4921  000052  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4922  000054  0011               	retfie		f
  4923  000056                     __end_of_myInt:
  4924                           	callstack 0
  4925                           
  4926                           	psect	rparam
  4927  0000                     
  4928                           	psect	temp
  4929  000048                     btemp:
  4930                           	callstack 0
  4931  000048                     	ds	1
  4932  0000                     int$flags	set	btemp
  4933  0000                     wtemp8	set	btemp+1
  4934  0000                     ttemp5	set	btemp+1
  4935  0000                     ttemp6	set	btemp+4
  4936  0000                     ttemp7	set	btemp+8
  4937                           
  4938                           	psect	idloc
  4939                           
  4940                           ;Config register IDLOC0 @ 0x200000
  4941                           ;	unspecified, using default values
  4942  200000                     	org	2097152
  4943  200000  FF                 	db	255
  4944                           
  4945                           ;Config register IDLOC1 @ 0x200001
  4946                           ;	unspecified, using default values
  4947  200001                     	org	2097153
  4948  200001  FF                 	db	255
  4949                           
  4950                           ;Config register IDLOC2 @ 0x200002
  4951                           ;	unspecified, using default values
  4952  200002                     	org	2097154
  4953  200002  FF                 	db	255
  4954                           
  4955                           ;Config register IDLOC3 @ 0x200003
  4956                           ;	unspecified, using default values
  4957  200003                     	org	2097155
  4958  200003  FF                 	db	255
  4959                           
  4960                           ;Config register IDLOC4 @ 0x200004
  4961                           ;	unspecified, using default values
  4962  200004                     	org	2097156
  4963  200004  FF                 	db	255
  4964                           
  4965                           ;Config register IDLOC5 @ 0x200005
  4966                           ;	unspecified, using default values
  4967  200005                     	org	2097157
  4968  200005  FF                 	db	255
  4969                           
  4970                           ;Config register IDLOC6 @ 0x200006
  4971                           ;	unspecified, using default values
  4972  200006                     	org	2097158
  4973  200006  FF                 	db	255
  4974                           
  4975                           ;Config register IDLOC7 @ 0x200007
  4976                           ;	unspecified, using default values
  4977  200007                     	org	2097159
  4978  200007  FF                 	db	255
  4979                           
  4980                           	psect	config
  4981                           
  4982                           ; Padding undefined space
  4983  300000                     	org	3145728
  4984  300000  FF                 	db	255
  4985                           
  4986                           ;Config register CONFIG1H @ 0x300001
  4987                           ;	Oscillator Selection bits
  4988                           ;	OSC = INTIO2, Internal RC oscillator, port function on RA6 and port function on RA7
  4989                           ;	Fail-Safe Clock Monitor Enable bit
  4990                           ;	FSCM = OFF, Fail-Safe Clock Monitor disabled
  4991                           ;	Internal/External Switchover bit
  4992                           ;	IESO = OFF, Internal/External Switchover mode disabled
  4993  300001                     	org	3145729
  4994  300001  08                 	db	8
  4995                           
  4996                           ;Config register CONFIG2L @ 0x300002
  4997                           ;	Power-up Timer enable bit
  4998                           ;	PWRT = ON, PWRT enabled
  4999                           ;	Brown-out Reset enable bit
  5000                           ;	BOR = ON, Brown-out Reset enabled
  5001                           ;	Brown-out Reset Voltage bits
  5002                           ;	BORV = 27, VBOR set to 2.7V
  5003  300002                     	org	3145730
  5004  300002  0A                 	db	10
  5005                           
  5006                           ;Config register CONFIG2H @ 0x300003
  5007                           ;	Watchdog Timer Enable bit
  5008                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  5009                           ;	Watchdog Timer Postscale Select bits
  5010                           ;	WDTPS = 32768, 1:32768
  5011  300003                     	org	3145731
  5012  300003  1E                 	db	30
  5013                           
  5014                           ; Padding undefined space
  5015  300004                     	org	3145732
  5016  300004  FF                 	db	255
  5017                           
  5018                           ;Config register CONFIG3H @ 0x300005
  5019                           ;	CCP2 MUX bit
  5020                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  5021                           ;	PORTB A/D Enable bit
  5022                           ;	PBAD = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  5023                           ;	MCLR Pin Enable bit
  5024                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  5025  300005                     	org	3145733
  5026  300005  81                 	db	129
  5027                           
  5028                           ;Config register CONFIG4L @ 0x300006
  5029                           ;	Stack Full/Underflow Reset Enable bit
  5030                           ;	STVR = ON, Stack full/underflow will cause Reset
  5031                           ;	Single-Supply ICSP Enable bit
  5032                           ;	LVP = OFF, Single-Supply ICSP disabled
  5033                           ;	Background Debugger Enable bit
  5034                           ;	DEBUG = 0x1, unprogrammed default
  5035  300006                     	org	3145734
  5036  300006  81                 	db	129
  5037                           
  5038                           ; Padding undefined space
  5039  300007                     	org	3145735
  5040  300007  FF                 	db	255
  5041                           
  5042                           ;Config register CONFIG5L @ 0x300008
  5043                           ;	Code Protection bit
  5044                           ;	CP0 = OFF, Block 0 (000200-0007FFh) not code-protected
  5045                           ;	Code Protection bit
  5046                           ;	CP1 = OFF, Block 1 (000800-000FFFh) not code-protected
  5047                           ;	Code Protection bit
  5048                           ;	CP2 = OFF, Block 2 (001000-0017FFh) not code-protected
  5049                           ;	Code Protection bit
  5050                           ;	CP3 = OFF, Block 3 (001800-001FFFh) not code-protected
  5051  300008                     	org	3145736
  5052  300008  0F                 	db	15
  5053                           
  5054                           ;Config register CONFIG5H @ 0x300009
  5055                           ;	Boot Block Code Protection bit
  5056                           ;	CPB = OFF, Boot block (000000-0001FFh) is not code-protected
  5057                           ;	Data EEPROM Code Protection bit
  5058                           ;	CPD = OFF, Data EEPROM is not code-protected
  5059  300009                     	org	3145737
  5060  300009  C0                 	db	192
  5061                           
  5062                           ;Config register CONFIG6L @ 0x30000A
  5063                           ;	Write Protection bit
  5064                           ;	WRT0 = OFF, Block 0 (000200-0007FFh) not write-protected
  5065                           ;	Write Protection bit
  5066                           ;	WRT1 = OFF, Block 1 (000800-000FFFh) not write-protected
  5067                           ;	Write Protection bit
  5068                           ;	WRT2 = OFF, Block 2 (001000-0017FFh) not write-protected
  5069                           ;	Write Protection bit
  5070                           ;	WRT3 = OFF, Block 3 (001800-001FFFh) not write-protected
  5071  30000A                     	org	3145738
  5072  30000A  0F                 	db	15
  5073                           
  5074                           ;Config register CONFIG6H @ 0x30000B
  5075                           ;	Configuration Register Write Protection bit
  5076                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  5077                           ;	Boot Block Write Protection bit
  5078                           ;	WRTB = OFF, Boot block (000000-0001FFh) is not write-protected
  5079                           ;	Data EEPROM Write Protection bit
  5080                           ;	WRTD = OFF, Data EEPROM is not write-protected
  5081  30000B                     	org	3145739
  5082  30000B  E0                 	db	224
  5083                           
  5084                           ;Config register CONFIG7L @ 0x30000C
  5085                           ;	Table Read Protection bit
  5086                           ;	EBTR0 = OFF, Block 0 (000200-0007FFh) not protected from table reads executed in other
      +                           blocks
  5087                           ;	Table Read Protection bit
  5088                           ;	EBTR1 = OFF, Block 1 (000800-000FFFh) not protected from table reads executed in other
      +                           blocks
  5089                           ;	Table Read Protection bit
  5090                           ;	EBTR2 = OFF, Block 2 (001000-0017FFh) not protected from table reads executed in other
      +                           blocks
  5091                           ;	Table Read Protection bit
  5092                           ;	EBTR3 = OFF, Block 3 (001800-001FFFh) not protected from table reads executed in other
      +                           blocks
  5093  30000C                     	org	3145740
  5094  30000C  0F                 	db	15
  5095                           
  5096                           ;Config register CONFIG7H @ 0x30000D
  5097                           ;	Boot Block Table Read Protection bit
  5098                           ;	EBTRB = OFF, Boot block (000000-0001FFh) is not protected from table reads executed in
      +                           other blocks
  5099  30000D                     	org	3145741
  5100  30000D  40                 	db	64
  5101                           tosu	equ	0xFFF
  5102                           tosh	equ	0xFFE
  5103                           tosl	equ	0xFFD
  5104                           stkptr	equ	0xFFC
  5105                           pclatu	equ	0xFFB
  5106                           pclath	equ	0xFFA
  5107                           pcl	equ	0xFF9
  5108                           tblptru	equ	0xFF8
  5109                           tblptrh	equ	0xFF7
  5110                           tblptrl	equ	0xFF6
  5111                           tablat	equ	0xFF5
  5112                           prodh	equ	0xFF4
  5113                           prodl	equ	0xFF3
  5114                           indf0	equ	0xFEF
  5115                           postinc0	equ	0xFEE
  5116                           postdec0	equ	0xFED
  5117                           preinc0	equ	0xFEC
  5118                           plusw0	equ	0xFEB
  5119                           fsr0h	equ	0xFEA
  5120                           fsr0l	equ	0xFE9
  5121                           wreg	equ	0xFE8
  5122                           indf1	equ	0xFE7
  5123                           postinc1	equ	0xFE6
  5124                           postdec1	equ	0xFE5
  5125                           preinc1	equ	0xFE4
  5126                           plusw1	equ	0xFE3
  5127                           fsr1h	equ	0xFE2
  5128                           fsr1l	equ	0xFE1
  5129                           bsr	equ	0xFE0
  5130                           indf2	equ	0xFDF
  5131                           postinc2	equ	0xFDE
  5132                           postdec2	equ	0xFDD
  5133                           preinc2	equ	0xFDC
  5134                           plusw2	equ	0xFDB
  5135                           fsr2h	equ	0xFDA
  5136                           fsr2l	equ	0xFD9
  5137                           status	equ	0xFD8

Data Sizes:
    Strings     175
    Constant    88
    Data        4
    BSS         47
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     19      71
    BANK0           128      0       0
    BANK1           256      0       0

Pointer List with Targets:

    cgrom_char@symbol	PTR unsigned char  size(2) Largest target is 8
		 -> symbol_4(CODE[8]), 

    lcdPrint@t	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_15(CODE[15]), STR_14(CODE[15]), STR_13(CODE[11]), STR_12(CODE[13]), 
		 -> STR_11(CODE[11]), STR_10(CODE[13]), STR_9(CODE[16]), STR_8(CODE[15]), 
		 -> STR_7(CODE[15]), STR_6(CODE[8]), STR_5(CODE[8]), STR_4(CODE[13]), 
		 -> STR_3(CODE[16]), STR_2(CODE[16]), STR_1(CODE[16]), 

    ds18b20_crc8@data_in	PTR unsigned char  size(1) Largest target is 9
		 -> ds18b20_readrom@temp_rom(COMRAM[8]), scratch(COMRAM[9]), 

    ds18b20_get_temp@minus	PTR unsigned char  size(1) Largest target is 1
		 -> minus_2(COMRAM[1]), minus_1(COMRAM[1]), 

    ds18b20_readTemp@time_flag	PTR unsigned char  size(1) Largest target is 1
		 -> time_flag(COMRAM[1]), 

    ds18b20_readTemp@timer_val	PTR unsigned char  size(1) Largest target is 1
		 -> timer_val(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_ds18b20_readrom
    _lcd_putc->_lcdWrite
    _lcdPrint->_lcd_gotoxy
    _lcd_gotoxy->_lcdWrite
    _ds18b20_readrom->_ds18b20_crc8
    _ds18b20_readTemp->_ds18b20_crc8
    ___lwmod->___lwdiv
    ___lbmod->___lbdiv
    _Main_init->_init_ds18b20
    _init_ds18b20->_write_byte
    _write_byte->_write_bit
    _initLCD->_clearLCD
    _clearLCD->_lcdWrite
    _cgrom_char->_lcdWrite
    _lcdWrite->_lcdNibble

Critical Paths under _myInt in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _myInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myInt in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   23282
                                             17 COMRAM     2     2      0
                           _Delay_ms
                          _Main_init
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                           _clearLCD
                   _ds18b20_get_temp
                   _ds18b20_readTemp
                    _ds18b20_readrom
                         _key_GetKey
                          _key_press
                           _lcdPrint
                         _lcd_gotoxy
                           _lcd_putc
                           _read_eep
                          _write_eep
 ---------------------------------------------------------------------------------
 (1) _lcd_putc                                             1     1      0    1060
                                              4 COMRAM     1     1      0
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (1) _lcdPrint                                             6     4      2    5220
                                              7 COMRAM     6     4      2
                           _lcdWrite
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (1) _lcd_gotoxy                                           3     2      1    2931
                                              4 COMRAM     3     2      1
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (1) _key_press                                            1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _key_GetKey                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ds18b20_readrom                                     10    10      0    1594
                                              7 COMRAM    10    10      0
                           _Delay_ms
                       _ds18b20_crc8
                           _ow_reset
                          _read_byte
                         _write_byte
                          _write_eep
 ---------------------------------------------------------------------------------
 (1) _write_eep                                            2     1      1     424
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _Delay_ms                                             5     3      2     198
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ds18b20_readTemp                                     8     6      2    1234
                                              7 COMRAM     8     6      2
                       _ds18b20_crc8
                           _ow_reset
                          _read_byte
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _read_byte                                            4     4      0      60
                                              0 COMRAM     4     4      0
                           _read_bit
 ---------------------------------------------------------------------------------
 (3) _read_bit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ds18b20_crc8                                         7     5      2     557
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _ds18b20_get_temp                                     6     4      2     423
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4    1983
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4    1378
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___lbmod                                              4     3      1     767
                                              4 COMRAM     4     3      1
                            ___lbdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lbdiv                                              4     3      1     466
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _Main_init                                            0     0      0    4104
                         _cgrom_char
                            _initLCD
                       _init_ds18b20
 ---------------------------------------------------------------------------------
 (2) _init_ds18b20                                         4     4      0     687
                                              6 COMRAM     4     4      0
                           _ow_reset
                           _read_eep
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _write_byte                                           5     5      0      90
                                              1 COMRAM     5     5      0
                          _write_bit
 ---------------------------------------------------------------------------------
 (3) _write_bit                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_eep                                             2     0      2     402
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ow_reset                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0    2136
                                              5 COMRAM     1     1      0
                           _clearLCD
                          _lcdNibble
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (1) _clearLCD                                             1     1      0    1038
                                              4 COMRAM     1     1      0
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (2) _cgrom_char                                           4     1      3    1281
                                              4 COMRAM     4     1      3
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (2) _lcdWrite                                             2     1      1    1038
                                              2 COMRAM     2     1      1
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      60
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _myInt                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay_ms
   _Main_init
     _cgrom_char
       _lcdWrite
         _lcdNibble
     _initLCD
       _clearLCD
         _lcdWrite
           _lcdNibble
       _lcdNibble
       _lcdWrite
         _lcdNibble
     _init_ds18b20
       _ow_reset
       _read_eep
       _write_byte
         _write_bit
   ___lbdiv
   ___lbmod
     ___lbdiv (ARG)
   ___lwdiv
   ___lwmod
     ___lwdiv (ARG)
   _clearLCD
     _lcdWrite
       _lcdNibble
   _ds18b20_get_temp
   _ds18b20_readTemp
     _ds18b20_crc8
     _ow_reset
     _read_byte
       _read_bit
     _write_byte
       _write_bit
   _ds18b20_readrom
     _Delay_ms
     _ds18b20_crc8
     _ow_reset
     _read_byte
       _read_bit
     _write_byte
       _write_bit
     _write_eep
   _key_GetKey
   _key_press
   _lcdPrint
     _lcdWrite
       _lcdNibble
     _lcd_gotoxy
       _lcdWrite
         _lcdNibble
   _lcd_gotoxy
     _lcdWrite
       _lcdNibble
   _lcd_putc
     _lcdWrite
       _lcdNibble
   _read_eep
   _write_eep

 _myInt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80      0       0       4        0.0%
BITCOMRAM           7E      0       1       0        0.8%
COMRAM              7E     13      47       1       56.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      47       7        0.0%
DATA                 0      0      47       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Wed Dec 02 14:55:06 2020

           myInt@snd_delay 001E                         PL2 06BE                         PL4 09A8  
                       PL6 06CE                         PL8 06DA                         u10 0A52  
                       u30 0A68                         u50 0A80                         u28 0A54  
                       u70 0A94                         u48 0A6A                         u68 0A82  
                       u88 0A96               lcdWrite@byte 0033                        PL10 06E6  
                      PL20 0B92                        PL12 06EE                        PL30 0724  
                      PL22 0708                        PL14 06F8                        PL32 09B6  
                      PL24 0712                        PL16 0702                        PL34 072C  
                      PL26 071C                        PL18 0906                        PL36 0732  
                      PL28 0AB6                        PL38 0738               lcdWrite@type 0032  
                      l207 0EC4                        l144 0270                        l139 0152  
                      l324 0EDA                        l332 0F1E                        l254 0AE8  
                      l431 0C4C                        l425 0C0E                        l266 0866  
                      l427 0C16                        l429 0C20                        l287 09F0  
                      l295 0C78                        l921 0CDC                        l931 0D1A  
                      u124 0DAA                        u125 0DA6                        u234 0D7C  
                      u235 0D78                        wreg 000FE8            lcdNibble@nibble 0031  
            write_eep@data 0030                lcd_gotoxy@x 0035                lcd_gotoxy@y 0034  
                     l1213 0F06                       l2201 0E10                       l2113 0EB2  
                     l2211 0C58                       l2107 0F20                       l2117 0E8A  
                     l2301 0944                       l1247 0D9A                       l2143 0AE6  
                     l2223 0C86                       l2215 0C68                       l2231 0C92  
                     l1503 0C22                       l2311 099E                       l2153 0AEA  
                     l2305 0960                       l2313 09A2                       l1515 0C3E  
                     l2501 0E80                       l2317 083A                       l1509 0C38  
                     l2309 098E                       l2087 0EDC                       l2407 0A06  
                     l1375 0D64                       l2335 0868                       l2513 0CAC  
                     l2345 0874                       l2433 0B46                       l2515 0CB4  
                     l1379 0D84                       l2371 08D6                       l2611 0246  
                     l2525 0CD2                       l2541 0D10                       l2533 0CF2  
                     l2373 08DE                       l2293 0916                       l2535 0CFA  
                     l2359 0898                       l2447 0B68                       l2623 02FA  
                     l2481 0DF4                       l2473 0DE0                       l2393 08F0  
                     l2297 092E                       l2721 04B8                       l2625 0360  
                     l2609 01E0                       l2459 0B90                       l2299 0938  
                     l2803 0614                       l2731 04FE                       l2643 03B8  
                     l2627 038A                       l2469 0DDA                       l2485 0DFC  
                     l2493 0E6A                       l2821 066A                       l2813 065A  
                     l2709 048E                       l2581 00F2                       l2573 00C2  
                     l2831 068C                       l2647 03CA                       l2673 0420  
                     l2665 03FC                       l2657 03EC                       l2593 0138  
                     l2747 0524                       l2739 050E                       l2675 0426  
                     l2835 0698                       l2587 00FC                       l2765 057A  
                     l2757 056A                       l2693 0458                       l2685 0448  
                     l2597 0154                       l2589 0104                       l2775 059C  
                     l2777 05A8                       l2795 05FE                       l2787 05EE  
                     STR_1 1F5F                       STR_2 1F6F                       STR_3 1F7F  
                     STR_4 1FD6                       STR_5 1FF6                       STR_6 1FEE  
                     STR_7 1F8F                       STR_8 1FAD                       STR_9 1F4F  
         ow_reset@presence 0030                       u1300 0B56            _ds18b20_readrom 0B34  
                     u2007 07B8                       u2017 07CC                       u1410 0CFE  
                     u2027 07E4                       u1340 0DE4                       u2037 07FC  
                     _LATA 000F89                       u1270 09E6                       _LATB 000F8A  
                     u2047 0810                       _LATC 000F8B                       u2057 0828  
                     u2067 0F3C                       u1380 0CB8                       u2077 0EDE  
                     u1470 017C                       u2087 0AA4                       u2097 0AAE  
                     u1490 0296                       u1907 0F08                       u1917 0E38  
                     u1927 0E44                       u1937 0E54                       u1857 0922  
                     u1947 074A                       u1867 0EB8                       u1957 075A  
                     u1877 0D86                       u1967 076A                       u1887 0F54  
                     u1977 077A                       u1897 0DC6                       u1987 0790  
                     u1997 07A4                       _main 005A                       fsr2h 000FDA  
                     indf2 000FDF                       fsr1l 000FE1                       fsr2l 000FD9  
                     btemp 0048              write_byte@val 0033                       prodh 000FF4  
                     prodl 000FF3                       start 0056               ___param_bank 000000  
         _ds18b20_get_temp 09BC           _ds18b20_readTemp 0838                      ?_main 0030  
          __end_of___lbdiv 0E00                      _EEADR 000FA9                      STR_10 1FC9  
                    STR_11 1FE3                      STR_12 1FBC                      STR_13 1FE3  
                    STR_14 1F9E                      STR_15 1F9E            __end_of___lbmod 0E88  
                    _T1CON 000FCD            __end_of___lwdiv 0CE6            __end_of___lwmod 0D24  
                    i2l221 0048                      i2l224 0052                      _TMR0H 000FD7  
                    _TMR1H 000FCF                      _TMR0L 000FD6                      _TMR1L 000FCE  
                    _PORTA 000F80                      _PORTB 000F81                      _PORTC 000F82  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
          __end_of_initLCD 0838                      _fract 1F37                      _myInt 0008  
           write_byte@temp 0034             __pbitbssCOMRAM 0238                      tablat 000FF5  
                    ttemp5 0049                      ttemp6 004C                      ttemp7 0050  
                    status 000FD8                      wtemp8 0049            ___lbdiv@divisor 0030  
          ___lbdiv@counter 0032           __end_of_Delay_ms 0ED0            write_bit@bitval 0030  
          __initialization 0D24            ds18b20_crc8@crc 0036               __end_of_main 06BE  
      ds18b20_crc8@data_in 0030                     ??_main 0041              __activetblptr 000002  
            ?_init_ds18b20 0030    __end_of_ds18b20_readrom 0B92                     ?_myInt 0030  
                   _EEDATA 000FA8                     _EECON2 000FA7         __size_of_Main_init 0068  
                   i2l2063 0028                     i2l2079 004A           __end_of_clearLCD 0F48  
         __end_of_lcdPrint 09A8           __end_of_lcdWrite 0EF4           __end_of_lcd_putc 0F7C  
                ??___lbdiv 0031                  ??___lbmod 0035                  ??___lwdiv 0034  
                ??___lwmod 003B                     _dq_num 0043              Delay_ms@delay 0030  
         __end_of_read_eep 0F70           __end_of_read_bit 0F5E                     clear_0 0D4C  
                   _select 0044                     _rom_dq 0001             ??_init_ds18b20 0036  
                ??_initLCD 0035               __pdataCOMRAM 0043               __mediumconst 1EF6  
         __end_of_ow_reset 0E62                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8           ___lbdiv@dividend 0031           __end_of_symbol_4 1F4F  
          ___lbmod@divisor 0034                 __accesstop 0080    __end_of__initialization 0D52  
          ___lbmod@counter 0036              ___rparam_used 000001           write_eep@address 0031  
         ds18b20_crc8@data 0033             __pcstackCOMRAM 0030              __end_of_fract 1F47  
            __end_of_myInt 0056          __end_of_Main_init 0C04     ds18b20_crc8@loop_count 0035  
               __end_ofPL2 06CE                 __end_ofPL4 09B6                 __end_ofPL6 06DA  
               __end_ofPL8 06E6           ___lbdiv@quotient 0033              ?_ds18b20_crc8 0030  
       __size_of_lcdNibble 0070       ds18b20_readTemp@temp 003B           ?_ds18b20_readrom 0030  
                ?_Delay_ms 0030          lcd_gotoxy@address 0036                    ??_myInt 0030  
 __end_of_ds18b20_get_temp 0A46   __end_of_ds18b20_readTemp 0906         __size_of_key_press 004E  
       __size_of_read_byte 0036    ds18b20_crc8@bit_counter 0032           ds18b20_readrom@i 0040  
      __end_of_HD44780_CYR 1F37             ??_ds18b20_crc8 0032                 _cgrom_char 0E00  
                ?_clearLCD 0030                 ??_Delay_ms 0032                 _lcd_gotoxy 0F12  
                ?_lcdPrint 0037                  ?_lcdWrite 0032                  ?_lcd_putc 0030  
                ?_read_bit 0030                  ?_read_eep 0030                 _key_GetKey 0F7C  
     __end_of_init_ds18b20 0B34          __end_of_lcdNibble 0AB6         __size_of_write_bit 001E  
       __size_of_write_eep 0024                    __Hparam 0000                    __Lparam 0000  
                ?_ow_reset 0030                    ___lbdiv 0DCC                    ___lbmod 0E62  
                  ___lwdiv 0C9C                    ___lwmod 0CE6                    __pcinit 0D24  
  ds18b20_readrom@temp_rom 0037                    __ramtop 0200                    __ptext0 005A  
                  __ptext1 0F70                    __ptext2 0914                    __ptext3 0F12  
                  __ptext4 0C04                    __ptext5 0F7C                    __ptext6 0B34  
                  __ptext7 0E88                    __ptext8 0EAC                    __ptext9 0838  
                _T0CONbits 000FD5                    _initLCD 0740                  _T1CONbits 000FCD  
        __end_of_key_press 0C52          __end_of_read_byte 0D96                 ??_clearLCD 0034  
                  _minus_1 0046                    _minus_2 0045                    _scratch 0025  
                  _sub_sel 0023                 ??_lcdPrint 0039                 ??_lcdWrite 0033  
               ??_lcd_putc 0034       end_of_initialization 0D52                  Delay_ms@i 0033  
             key_press@key 0030              __Lmediumconst 1EF6                 ??_read_eep 0032  
               ??_read_bit 0030                _HD44780_CYR 1EF7                 ??_ow_reset 0030  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc2 000FDE                 _temp_ready 0011               read_byte@val 0032  
      ds18b20_get_temp@tmp 0033                ?_cgrom_char 0034                  _PORTAbits 000F80  
                _PORTCbits 000F82              key_GetKey@key 0030          __end_of_write_bit 0F12  
        __end_of_write_eep 0EAC           ___lbmod@dividend 0035                  _TRISAbits 000F92  
              ?_lcd_gotoxy 0034                ___lbmod@rem 0037       __end_of_ds18b20_crc8 0C9C  
              ?_key_GetKey 0030              __pidataCOMRAM 0F86                 _write_byte 0D96  
                _Main_init 0B9C                __end_ofPL10 06EE                __end_ofPL20 0B9C  
              __end_ofPL12 06F8                __end_ofPL30 072C                __end_ofPL22 0712  
              __end_ofPL14 0702                __end_ofPL32 09BC                __end_ofPL24 071C  
              __end_ofPL16 0708                __end_ofPL34 0732                __end_ofPL26 0724  
              __end_ofPL18 0914                __end_ofPL36 0738                __end_ofPL28 0AC0  
              __end_ofPL38 0740        start_initialization 0D24          __size_of_Delay_ms 0024  
    __size_of_init_ds18b20 0074          ?_ds18b20_get_temp 0030         ??_ds18b20_get_temp 0032  
      __size_of_cgrom_char 0032          ?_ds18b20_readTemp 0037         ??_ds18b20_readTemp 0039  
 ds18b20_crc8@feedback_bit 0034        __size_of_lcd_gotoxy 001C            read_eep@address 0030  
               read_byte@i 0033                 ?_Main_init 0030        __size_of_key_GetKey 000A  
             _init_ds18b20 0AC0                __pbssCOMRAM 0001          __size_of_clearLCD 001A  
        __size_of_lcdPrint 0094          __size_of_lcdWrite 0024   __size_of_ds18b20_readrom 005E  
        __size_of_lcd_putc 000C      ds18b20_crc8@num_bytes 0031          ds18b20_readTemp@i 003E  
        ds18b20_readTemp@j 003D          __size_of_read_eep 0012          __size_of_read_bit 0016  
         ___lwdiv@dividend 0030                  __pintcode 0008              __pmediumconst 1EF6  
                _lcdNibble 0A46                   ?___lbdiv 0030                   ?___lbmod 0034  
                 ?___lwdiv 0030                   ?___lwmod 0037          __size_of_ow_reset 0030  
              ?_write_byte 0030                   ?_initLCD 0030      __size_of_ds18b20_crc8 004A  
         ___lwdiv@quotient 0034                  _key_press 0C04             __size_of_myInt 004E  
                _read_byte 0D60                   _LATCbits 000F8B                  _temp1_fix 0017  
                 _PIE1bits 000F9D                   _PIR1bits 000F9E              _set_t_dq1_dwn 0021  
            _set_t_dq2_dwn 001F                 ?_lcdNibble 0030                  _time_flag 002E  
                _timer_val 002F                  lcdPrint@t 0037               ??_cgrom_char 0037  
               _ADCON1bits 000FC1               _ds18b20_crc8 0C52                ??_Main_init 003A  
                lcd_putc@c 0034                write_byte@i 0035                   _Delay_ms 0EAC  
             ??_lcd_gotoxy 0035                 ?_key_press 0030                  _write_bit 0EF4  
                _write_eep 0E88                _INTCON2bits 000FF1                 ?_read_byte 0030  
                copy_data0 0D38              init_ds18b20@i 0039              init_ds18b20@q 0038  
      __size_of_write_byte 0036               ??_key_GetKey 0030                 _EECON1bits 000FA6  
       __end_of_cgrom_char 0E32                   __Hrparam 0000                   __Lrparam 0000  
        ??_ds18b20_readrom 0037         __end_of_lcd_gotoxy 0F2E             key_press@count 0015  
         __size_of___lbdiv 0034           __size_of___lbmod 0026           __size_of___lwdiv 004A  
         __size_of___lwmod 003E              _temperature_1 001B              _temperature_2 0019  
         __size_of_initLCD 00F8                   _clearLCD 0F2E                _key_pressed 001D  
       __end_of_key_GetKey 0F86            ___lwdiv@divisor 0032            ___lwdiv@counter 0036  
                 __ptext10 0D60                   __ptext11 0F48                   __ptext20 0D96  
                 __ptext12 0C52                   __ptext21 0EF4                   __ptext13 09BC  
                 __ptext22 0F5E                   __ptext14 0CE6                   __ptext23 0E32  
                 __ptext15 0C9C                   __ptext24 0740                   __ptext16 0E62  
                 __ptext25 0F2E                   __ptext17 0DCC                   __ptext26 0E00  
                 __ptext18 0B9C                   __ptext27 0ED0                   __ptext19 0AC0  
                 __ptext28 0A46                   _lcdPrint 0914                   _lcdWrite 0ED0  
               ?_write_bit 0030                 ?_write_eep 0030                   _en_sound 0238  
                 _lcd_putc 0F70     ds18b20_get_temp@num_dq 0032              __size_of_main 0664  
                 _read_bit 0F48                   _read_eep 0F5E      ds18b20_readrom@num_dq 003F  
                 _read_key 0239          cgrom_char@address 0036               _set_t_dq1_up 0022  
             _set_t_dq2_up 0020                ??_lcdNibble 0030                   _ow_reset 0E32  
                 int$flags 0048  __size_of_ds18b20_get_temp 008A                   _symbol_4 1F47  
__size_of_ds18b20_readTemp 00CE                 _INTCONbits 000FF2                ??_key_press 0030  
              ??_read_byte 0030                   intlevel2 0000           ___lwmod@dividend 0037  
    ds18b20_get_temp@minus 0030                 _OSCCONbits 000FD3  ds18b20_readTemp@time_flag 0037  
ds18b20_readTemp@timer_val 0038           cgrom_char@symbol 0034               ??_write_byte 0031  
          ___lwmod@divisor 0039       ds18b20_get_temp@temp 0034            ___lwmod@counter 003B  
              cgrom_char@i 0037                ??_write_eep 0031                ??_write_bit 0030  
              _pressed_key 0024         __end_of_write_byte 0DCC  
