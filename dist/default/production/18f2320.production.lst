

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Thu Jul 22 19:29:44 2021

Microchip MPLAB XC8 C Compiler v2.30 (Pro license) build 20200825195618 Og9s 
     1                           	processor	18F2320
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    51                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    52                           	psect	pa_nodes0,global,class=CODE,delta=1
    53  0000                     
    54                           ; Version 2.20
    55                           ; Generated 12/02/2020 GMT
    56                           ; 
    57                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F2320 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	idataCOMRAM
    90  0018E6                     __pidataCOMRAM:
    91                           	callstack 0
    92                           
    93                           ;initializer for _temperature_2
    94  0018E6  7FFF               	dw	32767
    95                           
    96                           ;initializer for _temperature_1
    97  0018E8  7FFF               	dw	32767
    98                           
    99                           ;initializer for _dq_num
   100  0018EA  01                 	db	1
   101                           
   102                           ;initializer for _sub_main
   103  0018EB  01                 	db	1
   104                           
   105                           ;initializer for _select
   106  0018EC  01                 	db	1
   107                           
   108                           ;initializer for _minus_2
   109  0018ED  2B                 	db	43
   110                           
   111                           ;initializer for _minus_1
   112  0018EE  2B                 	db	43
   113                           
   114                           	psect	mediumconst
   115  001E92                     __pmediumconst:
   116                           	callstack 0
   117  001E92  00                 	db	0
   118  001E93                     _HD44780_CYR:
   119                           	callstack 0
   120  001E93  41                 	db	65
   121  001E94  A0                 	db	160
   122  001E95  42                 	db	66
   123  001E96  A1                 	db	161
   124  001E97  E0                 	db	224
   125  001E98  45                 	db	69
   126  001E99  A3                 	db	163
   127  001E9A  A4                 	db	164
   128  001E9B  A5                 	db	165
   129  001E9C  A6                 	db	166
   130  001E9D  4B                 	db	75
   131  001E9E  A7                 	db	167
   132  001E9F  4D                 	db	77
   133  001EA0  48                 	db	72
   134  001EA1  4F                 	db	79
   135  001EA2  A8                 	db	168
   136  001EA3  50                 	db	80
   137  001EA4  43                 	db	67
   138  001EA5  54                 	db	84
   139  001EA6  A9                 	db	169
   140  001EA7  AA                 	db	170
   141  001EA8  58                 	db	88
   142  001EA9  E1                 	db	225
   143  001EAA  AB                 	db	171
   144  001EAB  AC                 	db	172
   145  001EAC  E2                 	db	226
   146  001EAD  AD                 	db	173
   147  001EAE  AE                 	db	174
   148  001EAF  62                 	db	98
   149  001EB0  AF                 	db	175
   150  001EB1  B0                 	db	176
   151  001EB2  B1                 	db	177
   152  001EB3  61                 	db	97
   153  001EB4  B2                 	db	178
   154  001EB5  B3                 	db	179
   155  001EB6  B4                 	db	180
   156  001EB7  E3                 	db	227
   157  001EB8  65                 	db	101
   158  001EB9  B6                 	db	182
   159  001EBA  B7                 	db	183
   160  001EBB  B8                 	db	184
   161  001EBC  B9                 	db	185
   162  001EBD  BA                 	db	186
   163  001EBE  BB                 	db	187
   164  001EBF  BC                 	db	188
   165  001EC0  BD                 	db	189
   166  001EC1  6F                 	db	111
   167  001EC2  BE                 	db	190
   168  001EC3  70                 	db	112
   169  001EC4  63                 	db	99
   170  001EC5  BF                 	db	191
   171  001EC6  79                 	db	121
   172  001EC7  E4                 	db	228
   173  001EC8  78                 	db	120
   174  001EC9  E5                 	db	229
   175  001ECA  C0                 	db	192
   176  001ECB  C1                 	db	193
   177  001ECC  E6                 	db	230
   178  001ECD  C2                 	db	194
   179  001ECE  C3                 	db	195
   180  001ECF  C4                 	db	196
   181  001ED0  C5                 	db	197
   182  001ED1  C6                 	db	198
   183  001ED2  C7                 	db	199
   184  001ED3                     __end_of_HD44780_CYR:
   185                           	callstack 0
   186  001ED3                     _fract:
   187                           	callstack 0
   188  001ED3  00                 	db	0
   189  001ED4  01                 	db	1
   190  001ED5  01                 	db	1
   191  001ED6  02                 	db	2
   192  001ED7  02                 	db	2
   193  001ED8  03                 	db	3
   194  001ED9  04                 	db	4
   195  001EDA  04                 	db	4
   196  001EDB  05                 	db	5
   197  001EDC  06                 	db	6
   198  001EDD  06                 	db	6
   199  001EDE  07                 	db	7
   200  001EDF  07                 	db	7
   201  001EE0  08                 	db	8
   202  001EE1  09                 	db	9
   203  001EE2  09                 	db	9
   204  001EE3                     __end_of_fract:
   205                           	callstack 0
   206  001EE3                     _symbol_4:
   207                           	callstack 0
   208  001EE3  06                 	db	6
   209  001EE4  09                 	db	9
   210  001EE5  09                 	db	9
   211  001EE6  06                 	db	6
   212  001EE7  00                 	db	0
   213  001EE8  00                 	db	0
   214  001EE9  00                 	db	0
   215  001EEA  00                 	db	0
   216  001EEB                     __end_of_symbol_4:
   217                           	callstack 0
   218  0000                     _SPBRG	set	4015
   219  0000                     _RCSTAbits	set	4011
   220  0000                     _TXSTAbits	set	4012
   221  0000                     _TRISCbits	set	3988
   222  0000                     _TXREG	set	4013
   223  0000                     _EECON2	set	4007
   224  0000                     _EEDATA	set	4008
   225  0000                     _EEADR	set	4009
   226  0000                     _EECON1bits	set	4006
   227  0000                     _TRISAbits	set	3986
   228  0000                     _LATAbits	set	3977
   229  0000                     _T1CONbits	set	4045
   230  0000                     _PIR1bits	set	3998
   231  0000                     _RCONbits	set	4048
   232  0000                     _PIE1bits	set	3997
   233  0000                     _INTCON2bits	set	4081
   234  0000                     _INTCONbits	set	4082
   235  0000                     _TMR0L	set	4054
   236  0000                     _TMR0H	set	4055
   237  0000                     _T0CONbits	set	4053
   238  0000                     _IPR1bits	set	3999
   239  0000                     _TMR1L	set	4046
   240  0000                     _TMR1H	set	4047
   241  0000                     _T1CON	set	4045
   242  0000                     _PORTAbits	set	3968
   243  0000                     _ADCON1bits	set	4033
   244  0000                     _OSCCONbits	set	4051
   245  0000                     _TRISC	set	3988
   246  0000                     _LATC	set	3979
   247  0000                     _PORTC	set	3970
   248  0000                     _TRISB	set	3987
   249  0000                     _LATB	set	3978
   250  0000                     _TRISA	set	3986
   251  0000                     _LATA	set	3977
   252  0000                     _PORTA	set	3968
   253  0000                     _LATCbits	set	3979
   254  0000                     _PORTB	set	3969
   255  0000                     _TXIF	set	31988
   256  001EEB                     STR_17:
   257  001EEB  20                 	db	32
   258  001EEC  CA                 	db	-54
   259  001EED  EE                 	db	-18
   260  001EEE  E4                 	db	-28
   261  001EEF  20                 	db	32
   262  001EF0  EF                 	db	-17
   263  001EF1  F0                 	db	-16
   264  001EF2  EE                 	db	-18
   265  001EF3  F7                 	db	-9
   266  001EF4  E8                 	db	-24
   267  001EF5  F2                 	db	-14
   268  001EF6  E0                 	db	-32
   269  001EF7  ED                 	db	-19
   270  001EF8  EE                 	db	-18
   271  001EF9  20                 	db	32
   272  001EFA  00                 	db	0
   273  001EFB                     STR_26:
   274  001EFB  D2                 	db	-46
   275  001EFC  E5                 	db	-27
   276  001EFD  EC                 	db	-20
   277  001EFE  EF                 	db	-17
   278  001EFF  20                 	db	32
   279  001F00  E4                 	db	-28
   280  001F01  F0                 	db	-16
   281  001F02  E1                 	db	-31
   282  001F03  3A                 	db	58	;':'
   283  001F04  20                 	db	32
   284  001F05  20                 	db	32
   285  001F06  20                 	db	32
   286  001F07  20                 	db	32
   287  001F08  20                 	db	32
   288  001F09  20                 	db	32
   289  001F0A  00                 	db	0
   290  001F0B                     STR_1:
   291  001F0B  2D                 	db	45
   292  001F0C  2D                 	db	45
   293  001F0D  2D                 	db	45
   294  001F0E  D2                 	db	-46
   295  001F0F  C5                 	db	-59
   296  001F10  D0                 	db	-48
   297  001F11  CC                 	db	-52
   298  001F12  CE                 	db	-50
   299  001F13  CC                 	db	-52
   300  001F14  C5                 	db	-59
   301  001F15  D2                 	db	-46
   302  001F16  D0                 	db	-48
   303  001F17  2D                 	db	45
   304  001F18  2D                 	db	45
   305  001F19  2D                 	db	45
   306  001F1A  00                 	db	0
   307  001F1B                     STR_3:
   308  001F1B  C4                 	db	-60
   309  001F1C  E0                 	db	-32
   310  001F1D  F2                 	db	-14
   311  001F1E  F7                 	db	-9
   312  001F1F  E8                 	db	-24
   313  001F20  EA                 	db	-22
   314  001F21  20                 	db	32
   315  001F22  31                 	db	49	;'1'
   316  001F23  2C                 	db	44
   317  001F24  20                 	db	32
   318  001F25  E0                 	db	-32
   319  001F26  E1                 	db	-31
   320  001F27  EE                 	db	-18
   321  001F28  20                 	db	32
   322  001F29  32                 	db	50	;'2'
   323  001F2A  00                 	db	0
   324  001F2B                     STR_16:
   325  001F2B  20                 	db	32
   326  001F2C  20                 	db	32
   327  001F2D  31                 	db	49	;'1'
   328  001F2E  20                 	db	32
   329  001F2F  20                 	db	32
   330  001F30  20                 	db	32
   331  001F31  20                 	db	32
   332  001F32  20                 	db	32
   333  001F33  32                 	db	50	;'2'
   334  001F34  20                 	db	32
   335  001F35  20                 	db	32
   336  001F36  20                 	db	32
   337  001F37  31                 	db	49	;'1'
   338  001F38  2D                 	db	45
   339  001F39  32                 	db	50	;'2'
   340  001F3A  00                 	db	0
   341  001F3B                     STR_2:
   342  001F3B  28                 	db	40
   343  001F3C  63                 	db	99	;'c'
   344  001F3D  29                 	db	41
   345  001F3E  49                 	db	73	;'I'
   346  001F3F  76                 	db	118	;'v'
   347  001F40  61                 	db	97	;'a'
   348  001F41  6E                 	db	110	;'n'
   349  001F42  5F                 	db	95	;'_'
   350  001F43  66                 	db	102	;'f'
   351  001F44  64                 	db	100	;'d'
   352  001F45  20                 	db	32
   353  001F46  76                 	db	118	;'v'
   354  001F47  31                 	db	49	;'1'
   355  001F48  2E                 	db	46
   356  001F49  33                 	db	51	;'3'
   357  001F4A  00                 	db	0
   358  001F4B                     STR_15:
   359  001F4B  CF                 	db	-49
   360  001F4C  EE                 	db	-18
   361  001F4D  F0                 	db	-16
   362  001F4E  69                 	db	105	;'i'
   363  001F4F  E3                 	db	-29
   364  001F50  20                 	db	32
   365  001F51  D1                 	db	-47
   366  001F52  E8                 	db	-24
   367  001F53  E3                 	db	-29
   368  001F54  ED                 	db	-19
   369  001F55  2E                 	db	46
   370  001F56  20                 	db	32
   371  001F57  4C                 	db	76	;'L'
   372  001F58  65                 	db	101	;'e'
   373  001F59  64                 	db	100	;'d'
   374  001F5A  00                 	db	0
   375  001F5B                     STR_20:
   376  001F5B  20                 	db	32
   377  001F5C  CA                 	db	-54
   378  001F5D  EE                 	db	-18
   379  001F5E  EB                 	db	-21
   380  001F5F  EE                 	db	-18
   381  001F60  ED                 	db	-19
   382  001F61  E0                 	db	-32
   383  001F62  20                 	db	32
   384  001F63  20                 	db	32
   385  001F64  20                 	db	32
   386  001F65  20                 	db	32
   387  001F66  CA                 	db	-54
   388  001F67  F3                 	db	-13
   389  001F68  E1                 	db	-31
   390  001F69  00                 	db	0
   391  001F6A                     STR_25:
   392  001F6A  D2                 	db	-46
   393  001F6B  E5                 	db	-27
   394  001F6C  EC                 	db	-20
   395  001F6D  EF                 	db	-17
   396  001F6E  20                 	db	32
   397  001F6F  CD                 	db	-51
   398  001F70  E8                 	db	-24
   399  001F71  E7                 	db	-25
   400  001F72  3A                 	db	58	;':'
   401  001F73  20                 	db	32
   402  001F74  20                 	db	32
   403  001F75  20                 	db	32
   404  001F76  20                 	db	32
   405  001F77  20                 	db	32
   406  001F78  00                 	db	0
   407  001F79                     STR_19:
   408  001F79  CA                 	db	-54
   409  001F7A  EE                 	db	-18
   410  001F7B  EB                 	db	-21
   411  001F7C  28                 	db	40
   412  001F7D  31                 	db	49	;'1'
   413  001F7E  29                 	db	41
   414  001F7F  2F                 	db	47
   415  001F80  CA                 	db	-54
   416  001F81  F3                 	db	-13
   417  001F82  E1                 	db	-31
   418  001F83  28                 	db	40
   419  001F84  32                 	db	50	;'2'
   420  001F85  29                 	db	41
   421  001F86  3A                 	db	58	;':'
   422  001F87  00                 	db	0
   423  001F88                     STR_18:
   424  001F88  20                 	db	32
   425  001F89  20                 	db	32
   426  001F8A  20                 	db	32
   427  001F8B  C3                 	db	-61
   428  001F8C  F0                 	db	-16
   429  001F8D  E0                 	db	-32
   430  001F8E  ED                 	db	-19
   431  001F8F  E8                 	db	-24
   432  001F90  F6                 	db	-10
   433  001F91  69                 	db	105	;'i'
   434  001F92  20                 	db	32
   435  001F93  20                 	db	32
   436  001F94  20                 	db	32
   437  001F95  00                 	db	0
   438  001F96                     STR_23:
   439  001F96  20                 	db	32
   440  001F97  20                 	db	32
   441  001F98  20                 	db	32
   442  001F99  20                 	db	32
   443  001F9A  CA                 	db	-54
   444  001F9B  F3                 	db	-13
   445  001F9C  E1                 	db	-31
   446  001F9D  EE                 	db	-18
   447  001F9E  E2                 	db	-30
   448  001F9F  E0                 	db	-32
   449  001FA0  20                 	db	32
   450  001FA1  20                 	db	32
   451  001FA2  00                 	db	0
   452  001FA3                     STR_21:
   453  001FA3  20                 	db	32
   454  001FA4  20                 	db	32
   455  001FA5  20                 	db	32
   456  001FA6  20                 	db	32
   457  001FA7  CA                 	db	-54
   458  001FA8  EE                 	db	-18
   459  001FA9  EB                 	db	-21
   460  001FAA  EE                 	db	-18
   461  001FAB  ED                 	db	-19
   462  001FAC  E0                 	db	-32
   463  001FAD  20                 	db	32
   464  001FAE  20                 	db	32
   465  001FAF  00                 	db	0
   466  001FB0                     STR_4:
   467  001FB0  C2                 	db	-62
   468  001FB1  E8                 	db	-24
   469  001FB2  E1                 	db	-31
   470  001FB3  69                 	db	105	;'i'
   471  001FB4  F0                 	db	-16
   472  001FB5  20                 	db	32
   473  001FB6  31                 	db	49	;'1'
   474  001FB7  38                 	db	56	;'8'
   475  001FB8  42                 	db	66	;'B'
   476  001FB9  32                 	db	50	;'2'
   477  001FBA  30                 	db	48	;'0'
   478  001FBB  3A                 	db	58	;':'
   479  001FBC  00                 	db	0
   480  001FBD                     STR_22:
   481  001FBD  D2                 	db	-46
   482  001FBE  E5                 	db	-27
   483  001FBF  EC                 	db	-20
   484  001FC0  EF                 	db	-17
   485  001FC1  20                 	db	32
   486  001FC2  C2                 	db	-62
   487  001FC3  E5                 	db	-27
   488  001FC4  F0                 	db	-16
   489  001FC5  F5                 	db	-11
   490  001FC6  3A                 	db	58	;':'
   491  001FC7  00                 	db	0
   492  001FC8                     STR_24:
   493  001FC8  D2                 	db	-46
   494  001FC9  E5                 	db	-27
   495  001FCA  EC                 	db	-20
   496  001FCB  EF                 	db	-17
   497  001FCC  20                 	db	32
   498  001FCD  F6                 	db	-10
   499  001FCE  69                 	db	105	;'i'
   500  001FCF  EB                 	db	-21
   501  001FD0  69                 	db	105	;'i'
   502  001FD1  3A                 	db	58	;':'
   503  001FD2  00                 	db	0
   504  001FD3                     STR_13:
   505  001FD3  CA                 	db	-54
   506  001FD4  F3                 	db	-13
   507  001FD5  E1                 	db	-31
   508  001FD6  EE                 	db	-18
   509  001FD7  E2                 	db	-30
   510  001FD8  E0                 	db	-32
   511  001FD9  3A                 	db	58	;':'
   512  001FDA  00                 	db	0
   513  001FDB                     STR_12:
   514  001FDB  CA                 	db	-54
   515  001FDC  EE                 	db	-18
   516  001FDD  EB                 	db	-21
   517  001FDE  EE                 	db	-18
   518  001FDF  ED                 	db	-19
   519  001FE0  E0                 	db	-32
   520  001FE1  3A                 	db	58	;':'
   521  001FE2  00                 	db	0
   522  001FE3                     STR_11:
   523  001FE3  30                 	db	48	;'0'
   524  001FE4  30                 	db	48	;'0'
   525  001FE5  30                 	db	48	;'0'
   526  001FE6  30                 	db	48	;'0'
   527  001FE7  0D                 	db	13
   528  001FE8  0A                 	db	10
   529  001FE9  00                 	db	0
   530  001FEA                     STR_14:
   531  001FEA  CF                 	db	-49
   532  001FEB  EE                 	db	-18
   533  001FEC  F0                 	db	-16
   534  001FED  69                 	db	105	;'i'
   535  001FEE  E3                 	db	-29
   536  001FEF  3A                 	db	58	;':'
   537  001FF0  00                 	db	0
   538  001FF1                     STR_7:
   539  001FF1  30                 	db	48	;'0'
   540  001FF2  30                 	db	48	;'0'
   541  001FF3  30                 	db	48	;'0'
   542  001FF4  30                 	db	48	;'0'
   543  001FF5  00                 	db	0
   544  001FF6                     STR_8:
   545  001FF6  74                 	db	116	;'t'
   546  001FF7  62                 	db	98	;'b'
   547  001FF8  3A                 	db	58	;':'
   548  001FF9  00                 	db	0
   549  001FFA                     STR_5:
   550  001FFA  74                 	db	116	;'t'
   551  001FFB  6B                 	db	107	;'k'
   552  001FFC  3A                 	db	58	;':'
   553  001FFD  00                 	db	0
   554  001FFE  00                 	db	0	; dummy byte at the end
   555  0000                     
   556                           ; #config settings
   557                           
   558                           	psect	cinit
   559  0015B6                     __pcinit:
   560                           	callstack 0
   561  0015B6                     start_initialization:
   562                           	callstack 0
   563  0015B6                     __initialization:
   564                           	callstack 0
   565                           
   566                           ; Initialize objects allocated to COMRAM (9 bytes)
   567                           ; load TBLPTR registers with __pidataCOMRAM
   568  0015B6  0EE6               	movlw	low __pidataCOMRAM
   569  0015B8  6EF6               	movwf	tblptrl,c
   570  0015BA  0E18               	movlw	high __pidataCOMRAM
   571  0015BC  6EF7               	movwf	tblptrh,c
   572  0015BE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   573  0015C0  6EF8               	movwf	tblptru,c
   574  0015C2  EE00  F05C         	lfsr	0,__pdataCOMRAM
   575  0015C6  EE10 F009          	lfsr	1,9
   576  0015CA                     copy_data0:
   577  0015CA  0009               	tblrd		*+
   578  0015CC  CFF5 FFEE          	movff	tablat,postinc0
   579  0015D0  50E5               	movf	postdec1,w,c
   580  0015D2  50E1               	movf	fsr1l,w,c
   581  0015D4  E1FA               	bnz	copy_data0
   582                           
   583                           ; Clear objects allocated to BITCOMRAM (2 bytes)
   584  0015D6  6A5B               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
   585  0015D8  6A5A               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   586                           
   587                           ; Clear objects allocated to COMRAM (66 bytes)
   588  0015DA  EE00  F001         	lfsr	0,__pbssCOMRAM
   589  0015DE  0E42               	movlw	66
   590  0015E0                     clear_0:
   591  0015E0  6AEE               	clrf	postinc0,c
   592  0015E2  06E8               	decf	wreg,f,c
   593  0015E4  E1FD               	bnz	clear_0
   594  0015E6                     end_of_initialization:
   595                           	callstack 0
   596  0015E6                     __end_of__initialization:
   597                           	callstack 0
   598  0015E6  9065               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   599  0015E8  9265               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   600  0015EA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   601  0015EC  6EF8               	movwf	tblptru,c
   602  0015EE  0100               	movlb	0
   603  0015F0  EF50  F000         	goto	_main	;jump to C main() function
   604                           
   605                           	psect	bitbssCOMRAM
   606  0002D0                     __pbitbssCOMRAM:
   607                           	callstack 0
   608  0002D0                     _en_snd_b:
   609                           	callstack 0
   610  0002D0                     	ds	1
   611  0002D1                     _en_snd_k:
   612                           	callstack 0
   613  0002D1                     	ds	1
   614  0002D2                     _snd_b_b:
   615                           	callstack 0
   616  0002D2                     	ds	1
   617  0002D3                     _snd_k_b:
   618                           	callstack 0
   619  0002D3                     	ds	1
   620  0002D4                     _snd_all:
   621                           	callstack 0
   622  0002D4                     	ds	1
   623  0002D5                     _snd_b:
   624                           	callstack 0
   625  0002D5                     	ds	1
   626  0002D6                     _snd_k:
   627                           	callstack 0
   628  0002D6                     	ds	1
   629  0002D7                     _sound_yes:
   630                           	callstack 0
   631  0002D7                     	ds	1
   632  0002D8                     _en_sound:
   633                           	callstack 0
   634  0002D8                     	ds	1
   635  0002D9                     _read_key:
   636                           	callstack 0
   637  0002D9                     	ds	1
   638                           
   639                           	psect	bssCOMRAM
   640  000001                     __pbssCOMRAM:
   641                           	callstack 0
   642  000001                     _eusartTxBuffer:
   643                           	callstack 0
   644  000001                     	ds	16
   645  000011                     _rom_dq:
   646                           	callstack 0
   647  000011                     	ds	16
   648  000021                     _temp_ready:
   649                           	callstack 0
   650  000021                     	ds	4
   651  000025                     key_press@count:
   652                           	callstack 0
   653  000025                     	ds	2
   654  000027                     _temp1_fix:
   655                           	callstack 0
   656  000027                     	ds	2
   657  000029                     _set_t_dq2:
   658                           	callstack 0
   659  000029                     	ds	2
   660  00002B                     _eusartRxCount:
   661                           	callstack 0
   662  00002B                     	ds	1
   663  00002C                     _eusartTxBufferRemaining:
   664                           	callstack 0
   665  00002C                     	ds	1
   666  00002D                     _eusartTxHead:
   667                           	callstack 0
   668  00002D                     	ds	1
   669  00002E                     _key_pressed:
   670                           	callstack 0
   671  00002E                     	ds	1
   672  00002F                     myIntL@snd_delay:
   673                           	callstack 0
   674  00002F                     	ds	1
   675  000030                     _set_t_dq2_10:
   676                           	callstack 0
   677  000030                     	ds	1
   678  000031                     _set_t_dq2_100:
   679                           	callstack 0
   680  000031                     	ds	1
   681  000032                     _set_t_dq1_dwn:
   682                           	callstack 0
   683  000032                     	ds	1
   684  000033                     _set_t_dq1_up:
   685                           	callstack 0
   686  000033                     	ds	1
   687  000034                     _sub_sel:
   688                           	callstack 0
   689  000034                     	ds	1
   690  000035                     _pressed_key:
   691                           	callstack 0
   692  000035                     	ds	1
   693  000036                     _tik_time_b:
   694                           	callstack 0
   695  000036                     	ds	1
   696  000037                     _tik_time:
   697                           	callstack 0
   698  000037                     	ds	1
   699  000038                     _scratch:
   700                           	callstack 0
   701  000038                     	ds	9
   702  000041                     _time_flag:
   703                           	callstack 0
   704  000041                     	ds	1
   705  000042                     _timer_val:
   706                           	callstack 0
   707  000042                     	ds	1
   708                           
   709                           	psect	dataCOMRAM
   710  00005C                     __pdataCOMRAM:
   711                           	callstack 0
   712  00005C                     _temperature_2:
   713                           	callstack 0
   714  00005C                     	ds	2
   715  00005E                     _temperature_1:
   716                           	callstack 0
   717  00005E                     	ds	2
   718  000060                     _dq_num:
   719                           	callstack 0
   720  000060                     	ds	1
   721  000061                     _sub_main:
   722                           	callstack 0
   723  000061                     	ds	1
   724  000062                     _select:
   725                           	callstack 0
   726  000062                     	ds	1
   727  000063                     _minus_2:
   728                           	callstack 0
   729  000063                     	ds	1
   730  000064                     _minus_1:
   731                           	callstack 0
   732  000064                     	ds	1
   733                           
   734                           	psect	cstackCOMRAM
   735  000043                     __pcstackCOMRAM:
   736                           	callstack 0
   737  000043                     ??_myIntL:
   738  000043                     
   739                           ; 1 bytes @ 0x0
   740  000043                     	ds	3
   741  000046                     ??_read_byte:
   742  000046                     ??_lcdNibble:
   743  000046                     ?_ds18b20_get_temp:
   744                           	callstack 0
   745  000046                     ?___lwdiv:
   746                           	callstack 0
   747  000046                     ds18b20_get_temp@minus:
   748                           	callstack 0
   749  000046                     ds18b20_crc8@data_in:
   750                           	callstack 0
   751  000046                     ow_reset@presence:
   752                           	callstack 0
   753  000046                     write_bit@bitval:
   754                           	callstack 0
   755  000046                     write_eep@data:
   756                           	callstack 0
   757  000046                     key_press@key:
   758                           	callstack 0
   759  000046                     key_GetKey@key:
   760                           	callstack 0
   761  000046                     EUSART_Write@txData:
   762                           	callstack 0
   763  000046                     ___lbdiv@divisor:
   764                           	callstack 0
   765  000046                     Delay_ms@delay:
   766                           	callstack 0
   767  000046                     read_eep@address:
   768                           	callstack 0
   769  000046                     ___lwdiv@dividend:
   770                           	callstack 0
   771                           
   772                           ; 2 bytes @ 0x3
   773  000046                     	ds	1
   774  000047                     ??_write_byte:
   775  000047                     ds18b20_crc8@num_bytes:
   776                           	callstack 0
   777  000047                     lcdNibble@nibble:
   778                           	callstack 0
   779  000047                     write_eep@address:
   780                           	callstack 0
   781  000047                     ___lbdiv@dividend:
   782                           	callstack 0
   783  000047                     EUSART_Write_Str@t:
   784                           	callstack 0
   785                           
   786                           ; 2 bytes @ 0x4
   787  000047                     	ds	1
   788  000048                     ??_Delay_ms:
   789  000048                     ds18b20_get_temp@num_dq:
   790                           	callstack 0
   791  000048                     ds18b20_crc8@bit_counter:
   792                           	callstack 0
   793  000048                     lcdWrite@type:
   794                           	callstack 0
   795  000048                     read_byte@val:
   796                           	callstack 0
   797  000048                     ___lbdiv@counter:
   798                           	callstack 0
   799  000048                     ___lwdiv@divisor:
   800                           	callstack 0
   801                           
   802                           ; 2 bytes @ 0x5
   803  000048                     	ds	1
   804  000049                     ds18b20_get_temp@tmp:
   805                           	callstack 0
   806  000049                     ds18b20_crc8@data:
   807                           	callstack 0
   808  000049                     lcdWrite@byte:
   809                           	callstack 0
   810  000049                     read_byte@i:
   811                           	callstack 0
   812  000049                     write_byte@val:
   813                           	callstack 0
   814  000049                     ___lbdiv@quotient:
   815                           	callstack 0
   816  000049                     Delay_ms@i:
   817                           	callstack 0
   818                           
   819                           ; 2 bytes @ 0x6
   820  000049                     	ds	1
   821  00004A                     ??_clearLCD:
   822  00004A                     ds18b20_crc8@feedback_bit:
   823                           	callstack 0
   824  00004A                     lcd_gotoxy@y:
   825                           	callstack 0
   826  00004A                     lcd_putc@c:
   827                           	callstack 0
   828  00004A                     write_byte@temp:
   829                           	callstack 0
   830  00004A                     ___lbmod@divisor:
   831                           	callstack 0
   832  00004A                     ds18b20_get_temp@temp:
   833                           	callstack 0
   834  00004A                     cgrom_char@symbol:
   835                           	callstack 0
   836  00004A                     ___lwdiv@quotient:
   837                           	callstack 0
   838                           
   839                           ; 2 bytes @ 0x7
   840  00004A                     	ds	1
   841  00004B                     ??_initLCD:
   842  00004B                     ds18b20_crc8@loop_count:
   843                           	callstack 0
   844  00004B                     lcd_gotoxy@x:
   845                           	callstack 0
   846  00004B                     write_byte@i:
   847                           	callstack 0
   848  00004B                     ___lbmod@dividend:
   849                           	callstack 0
   850                           
   851                           ; 1 bytes @ 0x8
   852  00004B                     	ds	1
   853  00004C                     ??_init_ds18b20:
   854  00004C                     ds18b20_crc8@crc:
   855                           	callstack 0
   856  00004C                     lcd_gotoxy@address:
   857                           	callstack 0
   858  00004C                     cgrom_char@address:
   859                           	callstack 0
   860  00004C                     ___lbmod@counter:
   861                           	callstack 0
   862  00004C                     ___lwdiv@counter:
   863                           	callstack 0
   864                           
   865                           ; 1 bytes @ 0x9
   866  00004C                     	ds	1
   867  00004D                     ?___lwmod:
   868                           	callstack 0
   869  00004D                     ds18b20_readTemp@time_flag:
   870                           	callstack 0
   871  00004D                     cgrom_char@i:
   872                           	callstack 0
   873  00004D                     ___lbmod@rem:
   874                           	callstack 0
   875  00004D                     lcdPrint@t:
   876                           	callstack 0
   877  00004D                     ___lwmod@dividend:
   878                           	callstack 0
   879  00004D                     ds18b20_readrom@temp_rom:
   880                           	callstack 0
   881                           
   882                           ; 8 bytes @ 0xA
   883  00004D                     	ds	1
   884  00004E                     init_ds18b20@q:
   885                           	callstack 0
   886  00004E                     ds18b20_readTemp@timer_val:
   887                           	callstack 0
   888                           
   889                           ; 1 bytes @ 0xB
   890  00004E                     	ds	1
   891  00004F                     ??_lcdPrint:
   892  00004F                     ??_ds18b20_readTemp:
   893  00004F                     init_ds18b20@i:
   894                           	callstack 0
   895  00004F                     ___lwmod@divisor:
   896                           	callstack 0
   897                           
   898                           ; 2 bytes @ 0xC
   899  00004F                     	ds	1
   900  000050                     
   901                           ; 1 bytes @ 0xD
   902  000050                     	ds	1
   903  000051                     ___lwmod@counter:
   904                           	callstack 0
   905  000051                     ds18b20_readTemp@temp:
   906                           	callstack 0
   907                           
   908                           ; 2 bytes @ 0xE
   909  000051                     	ds	2
   910  000053                     ds18b20_readTemp@j:
   911                           	callstack 0
   912                           
   913                           ; 1 bytes @ 0x10
   914  000053                     	ds	1
   915  000054                     ds18b20_readTemp@i:
   916                           	callstack 0
   917                           
   918                           ; 1 bytes @ 0x11
   919  000054                     	ds	1
   920  000055                     ds18b20_readrom@num_dq:
   921                           	callstack 0
   922                           
   923                           ; 1 bytes @ 0x12
   924  000055                     	ds	1
   925  000056                     ds18b20_readrom@i:
   926                           	callstack 0
   927                           
   928                           ; 1 bytes @ 0x13
   929  000056                     	ds	1
   930  000057                     ??_main:
   931                           
   932                           ; 1 bytes @ 0x14
   933  000057                     	ds	3
   934                           
   935 ;;
   936 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   937 ;;
   938 ;; *************** function _main *****************
   939 ;; Defined at:
   940 ;;		line 37 in file "main.c"
   941 ;; Parameters:    Size  Location     Type
   942 ;;		None
   943 ;; Auto vars:     Size  Location     Type
   944 ;;		None
   945 ;; Return value:  Size  Location     Type
   946 ;;                  1    wreg      void 
   947 ;; Registers used:
   948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   949 ;; Tracked objects:
   950 ;;		On entry : 0/0
   951 ;;		On exit  : 0/0
   952 ;;		Unchanged: 0/0
   953 ;; Data sizes:     COMRAM   BANK0   BANK1
   954 ;;      Params:         0       0       0
   955 ;;      Locals:         0       0       0
   956 ;;      Temps:          3       0       0
   957 ;;      Totals:         3       0       0
   958 ;;Total ram usage:        3 bytes
   959 ;; Hardware stack levels required when called:    7
   960 ;; This function calls:
   961 ;;		_Delay_ms
   962 ;;		_EUSART_Write
   963 ;;		_EUSART_Write_Str
   964 ;;		_Main_init
   965 ;;		___lbdiv
   966 ;;		___lbmod
   967 ;;		___lwdiv
   968 ;;		___lwmod
   969 ;;		_clearLCD
   970 ;;		_ds18b20_get_temp
   971 ;;		_ds18b20_readTemp
   972 ;;		_ds18b20_readrom
   973 ;;		_key_GetKey
   974 ;;		_key_press
   975 ;;		_lcdPrint
   976 ;;		_lcd_gotoxy
   977 ;;		_lcd_putc
   978 ;;		_read_eep
   979 ;;		_write_eep
   980 ;; This function is called by:
   981 ;;		Startup code after reset
   982 ;; This function uses a non-reentrant model
   983 ;;
   984                           
   985                           	psect	text0
   986  0000A0                     __ptext0:
   987                           	callstack 0
   988  0000A0                     _main:
   989                           	callstack 24
   990                           
   991                           ;main.c: 38: Main_init();
   992                           
   993                           ;incstack = 0
   994  0000A0  ECC1  F009         	call	_Main_init	;wreg free
   995                           
   996                           ;main.c: 40: lcd_gotoxy(1, 1);
   997  0000A4  0E01               	movlw	1
   998  0000A6  6E4A               	movwf	lcd_gotoxy@y^0,c
   999  0000A8  EC2B  F00C         	call	_lcd_gotoxy
  1000                           
  1001                           ;main.c: 41: lcdPrint("---ÒÅÐÌÎÌÅÒÐ---");
  1002  0000AC  0E0B               	movlw	low STR_1
  1003  0000AE  6E4D               	movwf	lcdPrint@t^0,c
  1004  0000B0  0E1F               	movlw	high STR_1
  1005  0000B2  6E4E               	movwf	(lcdPrint@t+1)^0,c
  1006  0000B4  ECEB  F008         	call	_lcdPrint	;wreg free
  1007                           
  1008                           ;main.c: 42: lcd_gotoxy(1, 2);
  1009  0000B8  ECB0  F007         	call	PL22	;call to abstracted procedure
  1010  0000BC  EC2B  F00C         	call	_lcd_gotoxy
  1011                           
  1012                           ;main.c: 43: lcdPrint("(c)Ivan_fd v1.3");
  1013  0000C0  0E3B               	movlw	low STR_2
  1014  0000C2  6E4D               	movwf	lcdPrint@t^0,c
  1015  0000C4  0E1F               	movlw	high STR_2
  1016  0000C6  6E4E               	movwf	(lcdPrint@t+1)^0,c
  1017  0000C8  ECEB  F008         	call	_lcdPrint	;wreg free
  1018                           
  1019                           ;main.c: 44: Delay_ms(2000);
  1020  0000CC  0E07               	movlw	7
  1021  0000CE  6E47               	movwf	(Delay_ms@delay+1)^0,c
  1022  0000D0  0ED0               	movlw	208
  1023  0000D2  6E46               	movwf	Delay_ms@delay^0,c
  1024  0000D4  ECD7  F00B         	call	_Delay_ms	;wreg free
  1025                           
  1026                           ;main.c: 45: clearLCD();
  1027  0000D8  EC47  F00C         	call	_clearLCD	;wreg free
  1028                           
  1029                           ;main.c: 46: if ((PORTB & (1 << 1)) == 0) {
  1030  0000DC  B281               	btfsc	129,1,c	;volatile
  1031  0000DE  D017               	goto	l3053
  1032                           
  1033                           ;main.c: 47: clearLCD();
  1034  0000E0  EC47  F00C         	call	_clearLCD	;wreg free
  1035                           
  1036                           ;main.c: 48: select = 2;
  1037  0000E4  0E02               	movlw	2
  1038                           
  1039                           ;main.c: 49: lcd_gotoxy(1, 1);
  1040  0000E6  ECBF  F007         	call	PL32	;call to abstracted procedure
  1041  0000EA  EC2B  F00C         	call	_lcd_gotoxy
  1042                           
  1043                           ;main.c: 50: lcdPrint("Äàò÷èê 1, àáî 2");
  1044  0000EE  0E1B               	movlw	low STR_3
  1045  0000F0  6E4D               	movwf	lcdPrint@t^0,c
  1046  0000F2  0E1F               	movlw	high STR_3
  1047  0000F4  6E4E               	movwf	(lcdPrint@t+1)^0,c
  1048  0000F6  ECEB  F008         	call	_lcdPrint	;wreg free
  1049                           
  1050                           ;main.c: 51: lcd_gotoxy(1, 2);
  1051  0000FA  ECB0  F007         	call	PL22	;call to abstracted procedure
  1052  0000FE  EC2B  F00C         	call	_lcd_gotoxy
  1053                           
  1054                           ;main.c: 52: lcdPrint("Âèáið 18B20:");
  1055  000102  0EB0               	movlw	low STR_4
  1056  000104  6E4D               	movwf	lcdPrint@t^0,c
  1057  000106  0E1F               	movlw	high STR_4
  1058  000108  6E4E               	movwf	(lcdPrint@t+1)^0,c
  1059  00010A  ECEB  F008         	call	_lcdPrint	;wreg free
  1060  00010E                     l3053:
  1061                           
  1062                           ;main.c: 54: };main.c: 56: set_t_dq1_up = read_eep(16);
  1063  00010E  6A47               	clrf	(read_eep@address+1)^0,c
  1064  000110  0E10               	movlw	16
  1065  000112  6E46               	movwf	read_eep@address^0,c
  1066  000114  EC5F  F00C         	call	_read_eep	;wreg free
  1067  000118  6E33               	movwf	_set_t_dq1_up^0,c
  1068                           
  1069                           ;main.c: 57: set_t_dq1_dwn = read_eep(17);
  1070  00011A  6A47               	clrf	(read_eep@address+1)^0,c
  1071  00011C  0E11               	movlw	17
  1072  00011E  6E46               	movwf	read_eep@address^0,c
  1073  000120  EC5F  F00C         	call	_read_eep	;wreg free
  1074  000124  6E32               	movwf	_set_t_dq1_dwn^0,c
  1075                           
  1076                           ;main.c: 58: set_t_dq2 = (uint16_t) read_eep(18) << 8 | read_eep(19);
  1077  000126  6A47               	clrf	(read_eep@address+1)^0,c
  1078  000128  0E13               	movlw	19
  1079  00012A  6E46               	movwf	read_eep@address^0,c
  1080  00012C  EC5F  F00C         	call	_read_eep	;wreg free
  1081  000130  6E57               	movwf	??_main^0,c
  1082  000132  6A47               	clrf	(read_eep@address+1)^0,c
  1083  000134  0E12               	movlw	18
  1084  000136  6E46               	movwf	read_eep@address^0,c
  1085  000138  EC5F  F00C         	call	_read_eep	;wreg free
  1086  00013C  6E58               	movwf	(??_main+1)^0,c
  1087  00013E  5057               	movf	??_main^0,w,c
  1088  000140  6E29               	movwf	_set_t_dq2^0,c
  1089  000142  C058  F02A         	movff	??_main+1,_set_t_dq2+1
  1090                           
  1091                           ;main.c: 59: temp1_fix = (uint16_t) read_eep(20) << 8 | read_eep(20 + 1);
  1092  000146  6A47               	clrf	(read_eep@address+1)^0,c
  1093  000148  0E15               	movlw	21
  1094  00014A  6E46               	movwf	read_eep@address^0,c
  1095  00014C  EC5F  F00C         	call	_read_eep	;wreg free
  1096  000150  6E57               	movwf	??_main^0,c
  1097  000152  6A47               	clrf	(read_eep@address+1)^0,c
  1098  000154  0E14               	movlw	20
  1099  000156  6E46               	movwf	read_eep@address^0,c
  1100  000158  EC5F  F00C         	call	_read_eep	;wreg free
  1101  00015C  6E58               	movwf	(??_main+1)^0,c
  1102  00015E  5057               	movf	??_main^0,w,c
  1103  000160  6E27               	movwf	_temp1_fix^0,c
  1104  000162  C058  F028         	movff	??_main+1,_temp1_fix+1
  1105  000166                     l3061:
  1106                           
  1107                           ;main.c: 66: if (read_key) {
  1108  000166  A25B               	btfss	(_read_key/(0+8))^0,_read_key& (0+7),c
  1109  000168  D003               	goto	l3067
  1110                           
  1111                           ;main.c: 67: key_press();
  1112  00016A  EC6A  F00A         	call	_key_press	;wreg free
  1113                           
  1114                           ;main.c: 68: read_key = 0;
  1115  00016E  925B               	bcf	(_read_key/(0+8))^0,_read_key& (0+7),c
  1116  000170                     l3067:
  1117                           
  1118                           ;main.c: 69: };main.c: 70: pressed_key = key_GetKey();
  1119  000170  EC6E  F00C         	call	_key_GetKey	;wreg free
  1120  000174  6E35               	movwf	_pressed_key^0,c
  1121                           
  1122                           ;main.c: 72: switch (select) {
  1123  000176  EF64  F007         	goto	l3505
  1124  00017A                     l3069:
  1125                           
  1126                           ;main.c: 74: if (ds18b20_readTemp(&time_flag, &timer_val)) {
  1127  00017A  0E41               	movlw	low _time_flag
  1128  00017C  6E4D               	movwf	ds18b20_readTemp@time_flag^0,c
  1129  00017E  0E42               	movlw	low _timer_val
  1130  000180  6E4E               	movwf	ds18b20_readTemp@timer_val^0,c
  1131  000182  EC7D  F008         	call	_ds18b20_readTemp	;wreg free
  1132  000186  0900               	iorlw	0
  1133  000188  E012               	bz	l3073
  1134                           
  1135                           ;main.c: 75: temperature_1 = ds18b20_get_temp(1, &minus_1);
  1136  00018A  0E64               	movlw	low _minus_1
  1137  00018C  6E46               	movwf	ds18b20_get_temp@minus^0,c
  1138  00018E  0E01               	movlw	1
  1139  000190  EC3F  F009         	call	_ds18b20_get_temp
  1140  000194  C046  F05E         	movff	?_ds18b20_get_temp,_temperature_1
  1141  000198  C047  F05F         	movff	?_ds18b20_get_temp+1,_temperature_1+1
  1142                           
  1143                           ;main.c: 76: temperature_2 = ds18b20_get_temp(2, &minus_2);
  1144  00019C  0E63               	movlw	low _minus_2
  1145  00019E  6E46               	movwf	ds18b20_get_temp@minus^0,c
  1146  0001A0  0E02               	movlw	2
  1147  0001A2  EC3F  F009         	call	_ds18b20_get_temp
  1148  0001A6  C046  F05C         	movff	?_ds18b20_get_temp,_temperature_2
  1149  0001AA  C047  F05D         	movff	?_ds18b20_get_temp+1,_temperature_2+1
  1150  0001AE                     l3073:
  1151                           
  1152                           ;main.c: 77: };main.c: 79: if (tik_time_b >= 200) {
  1153  0001AE  0EC7               	movlw	199
  1154  0001B0  6436               	cpfsgt	_tik_time_b^0,c
  1155  0001B2  D398               	goto	l3169
  1156                           
  1157                           ;main.c: 80: tik_time_b = 0;
  1158  0001B4  6A36               	clrf	_tik_time_b^0,c
  1159                           
  1160                           ;main.c: 81: if (temperature_1 != 32767) {
  1161  0001B6  285E               	incf	_temperature_1^0,w,c
  1162  0001B8  E103               	bnz	u2010
  1163  0001BA  0E7F               	movlw	127
  1164  0001BC  185F               	xorwf	(_temperature_1+1)^0,w,c
  1165  0001BE  E039               	bz	l3089
  1166  0001C0                     u2010:
  1167                           
  1168                           ;main.c: 82: EUSART_Write_Str("tk:");
  1169  0001C0  ECD6  F007         	call	PL46	;call to abstracted procedure
  1170  0001C4  EC0C  F00C         	call	_EUSART_Write_Str	;wreg free
  1171                           
  1172                           ;main.c: 83: EUSART_Write(((temperature_1 / 1000) % 10) + 48);
  1173  0001C8  ECAD  F007         	call	PL18	;call to abstracted procedure
  1174  0001CC  EC88  F007         	call	PL4	;call to abstracted procedure
  1175  0001D0  ECB6  F00A         	call	___lwdiv	;wreg free
  1176  0001D4  EC80  F007         	call	PL2	;call to abstracted procedure
  1177  0001D8  ECFA  F00A         	call	___lwmod	;wreg free
  1178  0001DC  504D               	movf	?___lwmod^0,w,c
  1179  0001DE  0F30               	addlw	48
  1180  0001E0  EC9A  F00B         	call	_EUSART_Write
  1181                           
  1182                           ;main.c: 84: EUSART_Write(((temperature_1 / 100) % 10) + 48);
  1183  0001E4  6A49               	clrf	(___lwdiv@divisor+1)^0,c
  1184  0001E6  0E64               	movlw	100
  1185  0001E8  EC88  F007         	call	PL4	;call to abstracted procedure
  1186  0001EC  ECB6  F00A         	call	___lwdiv	;wreg free
  1187  0001F0  EC80  F007         	call	PL2	;call to abstracted procedure
  1188  0001F4  ECFA  F00A         	call	___lwmod	;wreg free
  1189  0001F8  504D               	movf	?___lwmod^0,w,c
  1190  0001FA  0F30               	addlw	48
  1191  0001FC  EC9A  F00B         	call	_EUSART_Write
  1192                           
  1193                           ;main.c: 85: EUSART_Write(((temperature_1 / 10) % 10) + 48);
  1194  000200  6A49               	clrf	(___lwdiv@divisor+1)^0,c
  1195  000202  0E0A               	movlw	10
  1196  000204  EC88  F007         	call	PL4	;call to abstracted procedure
  1197  000208  ECB6  F00A         	call	___lwdiv	;wreg free
  1198  00020C  EC80  F007         	call	PL2	;call to abstracted procedure
  1199  000210  ECFA  F00A         	call	___lwmod	;wreg free
  1200  000214  504D               	movf	?___lwmod^0,w,c
  1201  000216  0F30               	addlw	48
  1202  000218  EC9A  F00B         	call	_EUSART_Write
  1203                           
  1204                           ;main.c: 86: EUSART_Write((temperature_1 % 10) + 48);
  1205  00021C  ECA3  F007         	call	PL14	;call to abstracted procedure
  1206  000220  EC94  F007         	call	PL8	;call to abstracted procedure
  1207  000224  ECFA  F00A         	call	___lwmod	;wreg free
  1208  000228  504D               	movf	?___lwmod^0,w,c
  1209  00022A  0F30               	addlw	48
  1210  00022C  EC9A  F00B         	call	_EUSART_Write
  1211                           
  1212                           ;main.c: 88: } else {
  1213  000230  D00A               	goto	l3091
  1214  000232                     l3089:
  1215                           
  1216                           ;main.c: 89: EUSART_Write_Str("tk:");
  1217  000232  ECD6  F007         	call	PL46	;call to abstracted procedure
  1218  000236  EC0C  F00C         	call	_EUSART_Write_Str	;wreg free
  1219                           
  1220                           ;main.c: 90: EUSART_Write_Str("0000");
  1221  00023A  0EF1               	movlw	low STR_7
  1222  00023C  6E47               	movwf	EUSART_Write_Str@t^0,c
  1223  00023E  0E1F               	movlw	high STR_7
  1224  000240  6E48               	movwf	(EUSART_Write_Str@t+1)^0,c
  1225  000242  EC0C  F00C         	call	_EUSART_Write_Str	;wreg free
  1226  000246                     l3091:
  1227                           
  1228                           ;main.c: 91: };main.c: 92: if (temperature_2 != 32767) {
  1229  000246  285C               	incf	_temperature_2^0,w,c
  1230  000248  E103               	bnz	u2020
  1231  00024A  0E7F               	movlw	127
  1232  00024C  185D               	xorwf	(_temperature_2+1)^0,w,c
  1233  00024E  E03F               	bz	l3103
  1234  000250                     u2020:
  1235                           
  1236                           ;main.c: 93: EUSART_Write_Str("tb:");
  1237  000250  ECDB  F007         	call	PL48	;call to abstracted procedure
  1238  000254  EC0C  F00C         	call	_EUSART_Write_Str	;wreg free
  1239                           
  1240                           ;main.c: 94: EUSART_Write(((temperature_2 / 1000) % 10) + 48);
  1241  000258  ECAD  F007         	call	PL18	;call to abstracted procedure
  1242  00025C  EC8E  F007         	call	PL6	;call to abstracted procedure
  1243  000260  ECB6  F00A         	call	___lwdiv	;wreg free
  1244  000264  EC80  F007         	call	PL2	;call to abstracted procedure
  1245  000268  ECFA  F00A         	call	___lwmod	;wreg free
  1246  00026C  504D               	movf	?___lwmod^0,w,c
  1247  00026E  0F30               	addlw	48
  1248  000270  EC9A  F00B         	call	_EUSART_Write
  1249                           
  1250                           ;main.c: 95: EUSART_Write(((temperature_2 / 100) % 10) + 48);
  1251  000274  6A49               	clrf	(___lwdiv@divisor+1)^0,c
  1252  000276  0E64               	movlw	100
  1253  000278  EC8E  F007         	call	PL6	;call to abstracted procedure
  1254  00027C  ECB6  F00A         	call	___lwdiv	;wreg free
  1255  000280  EC80  F007         	call	PL2	;call to abstracted procedure
  1256  000284  ECFA  F00A         	call	___lwmod	;wreg free
  1257  000288  504D               	movf	?___lwmod^0,w,c
  1258  00028A  0F30               	addlw	48
  1259  00028C  EC9A  F00B         	call	_EUSART_Write
  1260                           
  1261                           ;main.c: 96: EUSART_Write(((temperature_2 / 10) % 10) + 48);
  1262  000290  6A49               	clrf	(___lwdiv@divisor+1)^0,c
  1263  000292  0E0A               	movlw	10
  1264  000294  EC8E  F007         	call	PL6	;call to abstracted procedure
  1265  000298  ECB6  F00A         	call	___lwdiv	;wreg free
  1266  00029C  EC80  F007         	call	PL2	;call to abstracted procedure
  1267  0002A0  ECFA  F00A         	call	___lwmod	;wreg free
  1268  0002A4  504D               	movf	?___lwmod^0,w,c
  1269  0002A6  0F30               	addlw	48
  1270  0002A8  EC9A  F00B         	call	_EUSART_Write
  1271                           
  1272                           ;main.c: 97: EUSART_Write((temperature_2 % 10) + 48);
  1273  0002AC  ECA8  F007         	call	PL16	;call to abstracted procedure
  1274  0002B0  EC94  F007         	call	PL8	;call to abstracted procedure
  1275  0002B4  ECFA  F00A         	call	___lwmod	;wreg free
  1276  0002B8  504D               	movf	?___lwmod^0,w,c
  1277  0002BA  0F30               	addlw	48
  1278  0002BC  EC9A  F00B         	call	_EUSART_Write
  1279                           
  1280                           ;main.c: 98: EUSART_Write_Str("\r\n");
  1281  0002C0  0EE7               	movlw	low (STR_11+4)
  1282  0002C2  6E47               	movwf	EUSART_Write_Str@t^0,c
  1283  0002C4  0E1F               	movlw	high (STR_11+4)
  1284  0002C6  6E48               	movwf	(EUSART_Write_Str@t+1)^0,c
  1285  0002C8  EC0C  F00C         	call	_EUSART_Write_Str	;wreg free
  1286                           
  1287                           ;main.c: 99: } else {
  1288  0002CC  D30B               	goto	l3169
  1289  0002CE                     l3103:
  1290                           
  1291                           ;main.c: 100: EUSART_Write_Str("tb:");
  1292  0002CE  ECDB  F007         	call	PL48	;call to abstracted procedure
  1293  0002D2  EC0C  F00C         	call	_EUSART_Write_Str	;wreg free
  1294                           
  1295                           ;main.c: 101: EUSART_Write_Str("0000\r\n");
  1296  0002D6  0EE3               	movlw	low STR_11
  1297  0002D8  6E47               	movwf	EUSART_Write_Str@t^0,c
  1298  0002DA  0E1F               	movlw	high STR_11
  1299  0002DC  6E48               	movwf	(EUSART_Write_Str@t+1)^0,c
  1300  0002DE  EC0C  F00C         	call	_EUSART_Write_Str	;wreg free
  1301  0002E2  D300               	goto	l3169
  1302  0002E4                     l3105:
  1303                           
  1304                           ;main.c: 111: lcd_gotoxy(1, 1);
  1305  0002E4  0E01               	movlw	1
  1306  0002E6  6E4A               	movwf	lcd_gotoxy@y^0,c
  1307  0002E8  EC2B  F00C         	call	_lcd_gotoxy
  1308                           
  1309                           ;main.c: 112: lcdPrint("Êîëîíà:");
  1310  0002EC  0EDB               	movlw	low STR_12
  1311  0002EE  6E4D               	movwf	lcdPrint@t^0,c
  1312  0002F0  0E1F               	movlw	high STR_12
  1313  0002F2  6E4E               	movwf	(lcdPrint@t+1)^0,c
  1314  0002F4  ECEB  F008         	call	_lcdPrint	;wreg free
  1315                           
  1316                           ;main.c: 114: if (!(temperature_1 == 32767)) {
  1317  0002F8  285E               	incf	_temperature_1^0,w,c
  1318  0002FA  E104               	bnz	u2030
  1319  0002FC  0E7F               	movlw	127
  1320  0002FE  185F               	xorwf	(_temperature_1+1)^0,w,c
  1321  000300  E101 D0BC          	bz	l3121
  1322  000304                     u2030:
  1323                           
  1324                           ;main.c: 115: if (((temperature_1 / 1000) % 10) == 0) {
  1325  000304  ECAD  F007         	call	PL18	;call to abstracted procedure
  1326  000308  EC88  F007         	call	PL4	;call to abstracted procedure
  1327  00030C  ECB6  F00A         	call	___lwdiv	;wreg free
  1328  000310  EC80  F007         	call	PL2	;call to abstracted procedure
  1329  000314  ECFA  F00A         	call	___lwmod	;wreg free
  1330  000318  504D               	movf	?___lwmod^0,w,c
  1331  00031A  104E               	iorwf	(?___lwmod+1)^0,w,c
  1332  00031C  E16E               	bnz	l3119
  1333                           
  1334                           ;main.c: 116: if (((temperature_1 / 100) % 10) == 0) {
  1335  00031E  6A49               	clrf	(___lwdiv@divisor+1)^0,c
  1336  000320  0E64               	movlw	100
  1337  000322  EC88  F007         	call	PL4	;call to abstracted procedure
  1338  000326  ECB6  F00A         	call	___lwdiv	;wreg free
  1339  00032A  EC80  F007         	call	PL2	;call to abstracted procedure
  1340  00032E  ECFA  F00A         	call	___lwmod	;wreg free
  1341  000332  504D               	movf	?___lwmod^0,w,c
  1342  000334  104E               	iorwf	(?___lwmod+1)^0,w,c
  1343  000336  E12B               	bnz	l3117
  1344                           
  1345                           ;main.c: 117: lcd_putc(minus_1);
  1346  000338  5064               	movf	_minus_1^0,w,c
  1347  00033A  EC68  F00C         	call	_lcd_putc
  1348                           
  1349                           ;main.c: 119: lcd_putc(((temperature_1 / 10) % 10) + 48);
  1350  00033E  6A49               	clrf	(___lwdiv@divisor+1)^0,c
  1351  000340  0E0A               	movlw	10
  1352  000342  EC88  F007         	call	PL4	;call to abstracted procedure
  1353  000346  ECB6  F00A         	call	___lwdiv	;wreg free
  1354  00034A  EC80  F007         	call	PL2	;call to abstracted procedure
  1355  00034E  ECFA  F00A         	call	___lwmod	;wreg free
  1356  000352  504D               	movf	?___lwmod^0,w,c
  1357  000354  0F30               	addlw	48
  1358  000356  EC68  F00C         	call	_lcd_putc
  1359                           
  1360                           ;main.c: 120: lcd_putc('.');
  1361  00035A  0E2E               	movlw	46
  1362  00035C  EC68  F00C         	call	_lcd_putc
  1363                           
  1364                           ;main.c: 121: lcd_putc(((temperature_1 % 10) + 48));
  1365  000360  ECA3  F007         	call	PL14	;call to abstracted procedure
  1366  000364  EC94  F007         	call	PL8	;call to abstracted procedure
  1367  000368  ECFA  F00A         	call	___lwmod	;wreg free
  1368  00036C  504D               	movf	?___lwmod^0,w,c
  1369  00036E  0F30               	addlw	48
  1370  000370  EC68  F00C         	call	_lcd_putc
  1371                           
  1372                           ;main.c: 122: lcd_putc(0x01);
  1373  000374  0E01               	movlw	1
  1374  000376  EC68  F00C         	call	_lcd_putc
  1375                           
  1376                           ;main.c: 124: lcd_putc(' ');
  1377  00037A  0E20               	movlw	32
  1378  00037C  EC68  F00C         	call	_lcd_putc
  1379                           
  1380                           ;main.c: 125: lcd_putc(' ');
  1381  000380  0E20               	movlw	32
  1382  000382  EC68  F00C         	call	_lcd_putc
  1383                           
  1384                           ;main.c: 126: lcd_putc(' ');
  1385  000386  0E20               	movlw	32
  1386  000388  EC68  F00C         	call	_lcd_putc
  1387                           
  1388                           ;main.c: 127: } else {
  1389  00038C  D08C               	goto	l183
  1390  00038E                     l3117:
  1391                           
  1392                           ;main.c: 128: lcd_putc(minus_1);
  1393  00038E  5064               	movf	_minus_1^0,w,c
  1394  000390  EC68  F00C         	call	_lcd_putc
  1395                           
  1396                           ;main.c: 129: lcd_putc(((temperature_1 / 100) % 10) + 48);
  1397  000394  6A49               	clrf	(___lwdiv@divisor+1)^0,c
  1398  000396  0E64               	movlw	100
  1399  000398  EC88  F007         	call	PL4	;call to abstracted procedure
  1400  00039C  ECB6  F00A         	call	___lwdiv	;wreg free
  1401  0003A0  EC80  F007         	call	PL2	;call to abstracted procedure
  1402  0003A4  ECFA  F00A         	call	___lwmod	;wreg free
  1403  0003A8  504D               	movf	?___lwmod^0,w,c
  1404  0003AA  0F30               	addlw	48
  1405  0003AC  EC68  F00C         	call	_lcd_putc
  1406                           
  1407                           ;main.c: 130: lcd_putc(((temperature_1 / 10) % 10) + 48);
  1408  0003B0  6A49               	clrf	(___lwdiv@divisor+1)^0,c
  1409  0003B2  0E0A               	movlw	10
  1410  0003B4  EC88  F007         	call	PL4	;call to abstracted procedure
  1411  0003B8  ECB6  F00A         	call	___lwdiv	;wreg free
  1412  0003BC  EC80  F007         	call	PL2	;call to abstracted procedure
  1413  0003C0  ECFA  F00A         	call	___lwmod	;wreg free
  1414  0003C4  504D               	movf	?___lwmod^0,w,c
  1415  0003C6  0F30               	addlw	48
  1416  0003C8  EC68  F00C         	call	_lcd_putc
  1417                           
  1418                           ;main.c: 131: lcd_putc('.');
  1419  0003CC  0E2E               	movlw	46
  1420  0003CE  EC68  F00C         	call	_lcd_putc
  1421                           
  1422                           ;main.c: 132: lcd_putc(((temperature_1 % 10) + 48));
  1423  0003D2  ECA3  F007         	call	PL14	;call to abstracted procedure
  1424  0003D6  EC94  F007         	call	PL8	;call to abstracted procedure
  1425  0003DA  ECFA  F00A         	call	___lwmod	;wreg free
  1426  0003DE  504D               	movf	?___lwmod^0,w,c
  1427  0003E0  0F30               	addlw	48
  1428  0003E2  EC68  F00C         	call	_lcd_putc
  1429                           
  1430                           ;main.c: 133: lcd_putc(0x01);
  1431  0003E6  0E01               	movlw	1
  1432  0003E8  EC68  F00C         	call	_lcd_putc
  1433                           
  1434                           ;main.c: 135: lcd_putc(' ');
  1435  0003EC  0E20               	movlw	32
  1436  0003EE  EC68  F00C         	call	_lcd_putc
  1437                           
  1438                           ;main.c: 136: lcd_putc(' ');
  1439  0003F2  0E20               	movlw	32
  1440  0003F4  EC68  F00C         	call	_lcd_putc
  1441  0003F8  D056               	goto	l183
  1442  0003FA                     l3119:
  1443                           
  1444                           ;main.c: 140: lcd_putc(minus_1);
  1445  0003FA  5064               	movf	_minus_1^0,w,c
  1446  0003FC  EC68  F00C         	call	_lcd_putc
  1447                           
  1448                           ;main.c: 141: lcd_putc(((temperature_1 / 1000) % 10) + 48);
  1449  000400  ECAD  F007         	call	PL18	;call to abstracted procedure
  1450  000404  EC88  F007         	call	PL4	;call to abstracted procedure
  1451  000408  ECB6  F00A         	call	___lwdiv	;wreg free
  1452  00040C  EC80  F007         	call	PL2	;call to abstracted procedure
  1453  000410  ECFA  F00A         	call	___lwmod	;wreg free
  1454  000414  504D               	movf	?___lwmod^0,w,c
  1455  000416  0F30               	addlw	48
  1456  000418  EC68  F00C         	call	_lcd_putc
  1457                           
  1458                           ;main.c: 142: lcd_putc(((temperature_1 / 100) % 10) + 48);
  1459  00041C  6A49               	clrf	(___lwdiv@divisor+1)^0,c
  1460  00041E  0E64               	movlw	100
  1461  000420  EC88  F007         	call	PL4	;call to abstracted procedure
  1462  000424  ECB6  F00A         	call	___lwdiv	;wreg free
  1463  000428  EC80  F007         	call	PL2	;call to abstracted procedure
  1464  00042C  ECFA  F00A         	call	___lwmod	;wreg free
  1465  000430  504D               	movf	?___lwmod^0,w,c
  1466  000432  0F30               	addlw	48
  1467  000434  EC68  F00C         	call	_lcd_putc
  1468                           
  1469                           ;main.c: 143: lcd_putc(((temperature_1 / 10) % 10) + 48);
  1470  000438  6A49               	clrf	(___lwdiv@divisor+1)^0,c
  1471  00043A  0E0A               	movlw	10
  1472  00043C  EC88  F007         	call	PL4	;call to abstracted procedure
  1473  000440  ECB6  F00A         	call	___lwdiv	;wreg free
  1474  000444  EC80  F007         	call	PL2	;call to abstracted procedure
  1475  000448  ECFA  F00A         	call	___lwmod	;wreg free
  1476  00044C  504D               	movf	?___lwmod^0,w,c
  1477  00044E  0F30               	addlw	48
  1478  000450  EC68  F00C         	call	_lcd_putc
  1479                           
  1480                           ;main.c: 144: lcd_putc('.');
  1481  000454  0E2E               	movlw	46
  1482  000456  EC68  F00C         	call	_lcd_putc
  1483                           
  1484                           ;main.c: 145: lcd_putc(((temperature_1 % 10) + 48));
  1485  00045A  ECA3  F007         	call	PL14	;call to abstracted procedure
  1486  00045E  EC94  F007         	call	PL8	;call to abstracted procedure
  1487  000462  ECFA  F00A         	call	___lwmod	;wreg free
  1488  000466  504D               	movf	?___lwmod^0,w,c
  1489  000468  0F30               	addlw	48
  1490  00046A  EC68  F00C         	call	_lcd_putc
  1491                           
  1492                           ;main.c: 146: lcd_putc(0x01);
  1493  00046E  0E01               	movlw	1
  1494  000470  EC68  F00C         	call	_lcd_putc
  1495                           
  1496                           ;main.c: 148: lcd_putc(' ');
  1497  000474  0E20               	movlw	32
  1498  000476  EC68  F00C         	call	_lcd_putc
  1499  00047A  D015               	goto	l183
  1500  00047C                     l3121:
  1501                           
  1502                           ;main.c: 152: lcd_putc('-');
  1503  00047C  0E2D               	movlw	45
  1504  00047E  EC68  F00C         	call	_lcd_putc
  1505                           
  1506                           ;main.c: 153: lcd_putc('-');
  1507  000482  0E2D               	movlw	45
  1508  000484  EC68  F00C         	call	_lcd_putc
  1509                           
  1510                           ;main.c: 154: lcd_putc('-');
  1511  000488  0E2D               	movlw	45
  1512  00048A  EC68  F00C         	call	_lcd_putc
  1513                           
  1514                           ;main.c: 155: lcd_putc(' ');
  1515  00048E  0E20               	movlw	32
  1516  000490  EC68  F00C         	call	_lcd_putc
  1517                           
  1518                           ;main.c: 156: lcd_putc(' ');
  1519  000494  0E20               	movlw	32
  1520  000496  EC68  F00C         	call	_lcd_putc
  1521                           
  1522                           ;main.c: 157: lcd_putc(' ');
  1523  00049A  0E20               	movlw	32
  1524  00049C  EC68  F00C         	call	_lcd_putc
  1525                           
  1526                           ;main.c: 158: lcd_putc(' ');
  1527  0004A0  0E20               	movlw	32
  1528  0004A2  EC68  F00C         	call	_lcd_putc
  1529  0004A6                     l183:
  1530                           
  1531                           ;main.c: 159: };main.c: 160: lcd_gotoxy(16, 1);
  1532  0004A6  ECE4  F007         	call	PL54	;call to abstracted procedure
  1533  0004AA  EC2B  F00C         	call	_lcd_gotoxy
  1534                           
  1535                           ;main.c: 161: (en_snd_k) ? lcd_putc(0xED): lcd_putc(0xD5);
  1536  0004AE  A25A               	btfss	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  1537  0004B0  D004               	goto	l3127
  1538  0004B2  0EED               	movlw	237
  1539  0004B4  EC68  F00C         	call	_lcd_putc
  1540  0004B8  D003               	goto	l187
  1541  0004BA                     l3127:
  1542  0004BA  0ED5               	movlw	213
  1543  0004BC  EC68  F00C         	call	_lcd_putc
  1544  0004C0                     l187:
  1545                           
  1546                           ;main.c: 163: lcd_gotoxy(1, 2);
  1547  0004C0  ECB0  F007         	call	PL22	;call to abstracted procedure
  1548  0004C4  EC2B  F00C         	call	_lcd_gotoxy
  1549                           
  1550                           ;main.c: 164: lcd_putc(0xCE);
  1551  0004C8  0ECE               	movlw	206
  1552  0004CA  EC68  F00C         	call	_lcd_putc
  1553                           
  1554                           ;main.c: 165: lcd_putc(((temp1_fix / 100) % 10) + 48);
  1555  0004CE  6A49               	clrf	(___lwdiv@divisor+1)^0,c
  1556  0004D0  0E64               	movlw	100
  1557  0004D2  ECB3  F007         	call	PL28	;call to abstracted procedure
  1558  0004D6  ECB6  F00A         	call	___lwdiv	;wreg free
  1559  0004DA  EC80  F007         	call	PL2	;call to abstracted procedure
  1560  0004DE  ECFA  F00A         	call	___lwmod	;wreg free
  1561  0004E2  504D               	movf	?___lwmod^0,w,c
  1562  0004E4  0F30               	addlw	48
  1563  0004E6  EC68  F00C         	call	_lcd_putc
  1564                           
  1565                           ;main.c: 166: lcd_putc(((temp1_fix / 10) % 10) + 48);
  1566  0004EA  6A49               	clrf	(___lwdiv@divisor+1)^0,c
  1567  0004EC  0E0A               	movlw	10
  1568  0004EE  ECB3  F007         	call	PL28	;call to abstracted procedure
  1569  0004F2  ECB6  F00A         	call	___lwdiv	;wreg free
  1570  0004F6  EC80  F007         	call	PL2	;call to abstracted procedure
  1571  0004FA  ECFA  F00A         	call	___lwmod	;wreg free
  1572  0004FE  504D               	movf	?___lwmod^0,w,c
  1573  000500  0F30               	addlw	48
  1574  000502  EC68  F00C         	call	_lcd_putc
  1575                           
  1576                           ;main.c: 167: lcd_putc('.');
  1577  000506  0E2E               	movlw	46
  1578  000508  EC68  F00C         	call	_lcd_putc
  1579                           
  1580                           ;main.c: 168: lcd_putc(((temp1_fix % 10) + 48));
  1581  00050C  C027  F04D         	movff	_temp1_fix,___lwmod@dividend
  1582  000510  C028  F04E         	movff	_temp1_fix+1,___lwmod@dividend+1
  1583  000514  EC94  F007         	call	PL8	;call to abstracted procedure
  1584  000518  ECFA  F00A         	call	___lwmod	;wreg free
  1585  00051C  504D               	movf	?___lwmod^0,w,c
  1586  00051E  0F30               	addlw	48
  1587  000520  EC68  F00C         	call	_lcd_putc
  1588                           
  1589                           ;main.c: 169: lcd_putc(0x01);
  1590  000524  0E01               	movlw	1
  1591  000526  EC68  F00C         	call	_lcd_putc
  1592                           
  1593                           ;main.c: 170: lcd_putc(' ');
  1594  00052A  0E20               	movlw	32
  1595  00052C  EC68  F00C         	call	_lcd_putc
  1596                           
  1597                           ;main.c: 171: lcd_putc(0xD9);
  1598  000530  0ED9               	movlw	217
  1599  000532  EC68  F00C         	call	_lcd_putc
  1600                           
  1601                           ;main.c: 172: lcd_putc(((set_t_dq1_up / 10) % 10) + 48);
  1602  000536  ECC7  F007         	call	PL38	;call to abstracted procedure
  1603  00053A  EC4F  F00B         	call	___lbdiv
  1604  00053E  ECB2  F00B         	call	___lbmod
  1605  000542  0F30               	addlw	48
  1606  000544  EC68  F00C         	call	_lcd_putc
  1607                           
  1608                           ;main.c: 173: lcd_putc('.');
  1609  000548  0E2E               	movlw	46
  1610  00054A  EC68  F00C         	call	_lcd_putc
  1611                           
  1612                           ;main.c: 174: lcd_putc(((set_t_dq1_up % 10) + 48));
  1613  00054E  ECF1  F007         	call	PL62	;call to abstracted procedure
  1614  000552  ECB2  F00B         	call	___lbmod
  1615  000556  0F30               	addlw	48
  1616  000558  EC68  F00C         	call	_lcd_putc
  1617                           
  1618                           ;main.c: 175: lcd_putc(' ');
  1619  00055C  0E20               	movlw	32
  1620  00055E  EC68  F00C         	call	_lcd_putc
  1621                           
  1622                           ;main.c: 176: lcd_putc(0xDA);
  1623  000562  0EDA               	movlw	218
  1624  000564  EC68  F00C         	call	_lcd_putc
  1625                           
  1626                           ;main.c: 177: lcd_putc(((set_t_dq1_dwn / 10) % 10) + 48);
  1627  000568  ECD1  F007         	call	PL42	;call to abstracted procedure
  1628  00056C  EC4F  F00B         	call	___lbdiv
  1629  000570  ECB2  F00B         	call	___lbmod
  1630  000574  0F30               	addlw	48
  1631  000576  EC68  F00C         	call	_lcd_putc
  1632                           
  1633                           ;main.c: 178: lcd_putc('.');
  1634  00057A  0E2E               	movlw	46
  1635  00057C  EC68  F00C         	call	_lcd_putc
  1636                           
  1637                           ;main.c: 179: lcd_putc(((set_t_dq1_dwn % 10) + 48));
  1638  000580  ECE0  F007         	call	PL52	;call to abstracted procedure
  1639  000584  ECB2  F00B         	call	___lbmod
  1640  000588  0F30               	addlw	48
  1641  00058A  EC68  F00C         	call	_lcd_putc
  1642                           
  1643                           ;main.c: 181: break;
  1644  00058E  D1B1               	goto	l188
  1645  000590                     l3129:
  1646                           
  1647                           ;main.c: 183: lcd_gotoxy(1, 1);
  1648  000590  0E01               	movlw	1
  1649  000592  6E4A               	movwf	lcd_gotoxy@y^0,c
  1650  000594  EC2B  F00C         	call	_lcd_gotoxy
  1651                           
  1652                           ;main.c: 184: lcdPrint("Êóáîâà:");
  1653  000598  0ED3               	movlw	low STR_13
  1654  00059A  6E4D               	movwf	lcdPrint@t^0,c
  1655  00059C  0E1F               	movlw	high STR_13
  1656  00059E  6E4E               	movwf	(lcdPrint@t+1)^0,c
  1657  0005A0  ECEB  F008         	call	_lcdPrint	;wreg free
  1658                           
  1659                           ;main.c: 186: if (!(temperature_2 == 32767)) {
  1660  0005A4  285C               	incf	_temperature_2^0,w,c
  1661  0005A6  E104               	bnz	u2070
  1662  0005A8  0E7F               	movlw	127
  1663  0005AA  185D               	xorwf	(_temperature_2+1)^0,w,c
  1664  0005AC  E101 D0BC          	bz	l3145
  1665  0005B0                     u2070:
  1666                           
  1667                           ;main.c: 187: if (((temperature_2 / 1000) % 10) == 0) {
  1668  0005B0  ECAD  F007         	call	PL18	;call to abstracted procedure
  1669  0005B4  EC8E  F007         	call	PL6	;call to abstracted procedure
  1670  0005B8  ECB6  F00A         	call	___lwdiv	;wreg free
  1671  0005BC  EC80  F007         	call	PL2	;call to abstracted procedure
  1672  0005C0  ECFA  F00A         	call	___lwmod	;wreg free
  1673  0005C4  504D               	movf	?___lwmod^0,w,c
  1674  0005C6  104E               	iorwf	(?___lwmod+1)^0,w,c
  1675  0005C8  E16E               	bnz	l3143
  1676                           
  1677                           ;main.c: 188: if (((temperature_2 / 100) % 10) == 0) {
  1678  0005CA  6A49               	clrf	(___lwdiv@divisor+1)^0,c
  1679  0005CC  0E64               	movlw	100
  1680  0005CE  EC8E  F007         	call	PL6	;call to abstracted procedure
  1681  0005D2  ECB6  F00A         	call	___lwdiv	;wreg free
  1682  0005D6  EC80  F007         	call	PL2	;call to abstracted procedure
  1683  0005DA  ECFA  F00A         	call	___lwmod	;wreg free
  1684  0005DE  504D               	movf	?___lwmod^0,w,c
  1685  0005E0  104E               	iorwf	(?___lwmod+1)^0,w,c
  1686  0005E2  E12B               	bnz	l3141
  1687                           
  1688                           ;main.c: 189: lcd_putc(minus_2);
  1689  0005E4  5063               	movf	_minus_2^0,w,c
  1690  0005E6  EC68  F00C         	call	_lcd_putc
  1691                           
  1692                           ;main.c: 191: lcd_putc(((temperature_2 / 10) % 10) + 48);
  1693  0005EA  6A49               	clrf	(___lwdiv@divisor+1)^0,c
  1694  0005EC  0E0A               	movlw	10
  1695  0005EE  EC8E  F007         	call	PL6	;call to abstracted procedure
  1696  0005F2  ECB6  F00A         	call	___lwdiv	;wreg free
  1697  0005F6  EC80  F007         	call	PL2	;call to abstracted procedure
  1698  0005FA  ECFA  F00A         	call	___lwmod	;wreg free
  1699  0005FE  504D               	movf	?___lwmod^0,w,c
  1700  000600  0F30               	addlw	48
  1701  000602  EC68  F00C         	call	_lcd_putc
  1702                           
  1703                           ;main.c: 192: lcd_putc('.');
  1704  000606  0E2E               	movlw	46
  1705  000608  EC68  F00C         	call	_lcd_putc
  1706                           
  1707                           ;main.c: 193: lcd_putc(((temperature_2 % 10) + 48));
  1708  00060C  ECA8  F007         	call	PL16	;call to abstracted procedure
  1709  000610  EC94  F007         	call	PL8	;call to abstracted procedure
  1710  000614  ECFA  F00A         	call	___lwmod	;wreg free
  1711  000618  504D               	movf	?___lwmod^0,w,c
  1712  00061A  0F30               	addlw	48
  1713  00061C  EC68  F00C         	call	_lcd_putc
  1714                           
  1715                           ;main.c: 194: lcd_putc(0x01);
  1716  000620  0E01               	movlw	1
  1717  000622  EC68  F00C         	call	_lcd_putc
  1718                           
  1719                           ;main.c: 196: lcd_putc(' ');
  1720  000626  0E20               	movlw	32
  1721  000628  EC68  F00C         	call	_lcd_putc
  1722                           
  1723                           ;main.c: 197: lcd_putc(' ');
  1724  00062C  0E20               	movlw	32
  1725  00062E  EC68  F00C         	call	_lcd_putc
  1726                           
  1727                           ;main.c: 198: lcd_putc(' ');
  1728  000632  0E20               	movlw	32
  1729  000634  EC68  F00C         	call	_lcd_putc
  1730                           
  1731                           ;main.c: 199: } else {
  1732  000638  D08C               	goto	l195
  1733  00063A                     l3141:
  1734                           
  1735                           ;main.c: 200: lcd_putc(minus_2);
  1736  00063A  5063               	movf	_minus_2^0,w,c
  1737  00063C  EC68  F00C         	call	_lcd_putc
  1738                           
  1739                           ;main.c: 201: lcd_putc(((temperature_2 / 100) % 10) + 48);
  1740  000640  6A49               	clrf	(___lwdiv@divisor+1)^0,c
  1741  000642  0E64               	movlw	100
  1742  000644  EC8E  F007         	call	PL6	;call to abstracted procedure
  1743  000648  ECB6  F00A         	call	___lwdiv	;wreg free
  1744  00064C  EC80  F007         	call	PL2	;call to abstracted procedure
  1745  000650  ECFA  F00A         	call	___lwmod	;wreg free
  1746  000654  504D               	movf	?___lwmod^0,w,c
  1747  000656  0F30               	addlw	48
  1748  000658  EC68  F00C         	call	_lcd_putc
  1749                           
  1750                           ;main.c: 202: lcd_putc(((temperature_2 / 10) % 10) + 48);
  1751  00065C  6A49               	clrf	(___lwdiv@divisor+1)^0,c
  1752  00065E  0E0A               	movlw	10
  1753  000660  EC8E  F007         	call	PL6	;call to abstracted procedure
  1754  000664  ECB6  F00A         	call	___lwdiv	;wreg free
  1755  000668  EC80  F007         	call	PL2	;call to abstracted procedure
  1756  00066C  ECFA  F00A         	call	___lwmod	;wreg free
  1757  000670  504D               	movf	?___lwmod^0,w,c
  1758  000672  0F30               	addlw	48
  1759  000674  EC68  F00C         	call	_lcd_putc
  1760                           
  1761                           ;main.c: 203: lcd_putc('.');
  1762  000678  0E2E               	movlw	46
  1763  00067A  EC68  F00C         	call	_lcd_putc
  1764                           
  1765                           ;main.c: 204: lcd_putc(((temperature_2 % 10) + 48));
  1766  00067E  ECA8  F007         	call	PL16	;call to abstracted procedure
  1767  000682  EC94  F007         	call	PL8	;call to abstracted procedure
  1768  000686  ECFA  F00A         	call	___lwmod	;wreg free
  1769  00068A  504D               	movf	?___lwmod^0,w,c
  1770  00068C  0F30               	addlw	48
  1771  00068E  EC68  F00C         	call	_lcd_putc
  1772                           
  1773                           ;main.c: 205: lcd_putc(0x01);
  1774  000692  0E01               	movlw	1
  1775  000694  EC68  F00C         	call	_lcd_putc
  1776                           
  1777                           ;main.c: 207: lcd_putc(' ');
  1778  000698  0E20               	movlw	32
  1779  00069A  EC68  F00C         	call	_lcd_putc
  1780                           
  1781                           ;main.c: 208: lcd_putc(' ');
  1782  00069E  0E20               	movlw	32
  1783  0006A0  EC68  F00C         	call	_lcd_putc
  1784  0006A4  D056               	goto	l195
  1785  0006A6                     l3143:
  1786                           
  1787                           ;main.c: 212: lcd_putc(minus_2);
  1788  0006A6  5063               	movf	_minus_2^0,w,c
  1789  0006A8  EC68  F00C         	call	_lcd_putc
  1790                           
  1791                           ;main.c: 213: lcd_putc(((temperature_2 / 1000) % 10) + 48);
  1792  0006AC  ECAD  F007         	call	PL18	;call to abstracted procedure
  1793  0006B0  EC8E  F007         	call	PL6	;call to abstracted procedure
  1794  0006B4  ECB6  F00A         	call	___lwdiv	;wreg free
  1795  0006B8  EC80  F007         	call	PL2	;call to abstracted procedure
  1796  0006BC  ECFA  F00A         	call	___lwmod	;wreg free
  1797  0006C0  504D               	movf	?___lwmod^0,w,c
  1798  0006C2  0F30               	addlw	48
  1799  0006C4  EC68  F00C         	call	_lcd_putc
  1800                           
  1801                           ;main.c: 214: lcd_putc(((temperature_2 / 100) % 10) + 48);
  1802  0006C8  6A49               	clrf	(___lwdiv@divisor+1)^0,c
  1803  0006CA  0E64               	movlw	100
  1804  0006CC  EC8E  F007         	call	PL6	;call to abstracted procedure
  1805  0006D0  ECB6  F00A         	call	___lwdiv	;wreg free
  1806  0006D4  EC80  F007         	call	PL2	;call to abstracted procedure
  1807  0006D8  ECFA  F00A         	call	___lwmod	;wreg free
  1808  0006DC  504D               	movf	?___lwmod^0,w,c
  1809  0006DE  0F30               	addlw	48
  1810  0006E0  EC68  F00C         	call	_lcd_putc
  1811                           
  1812                           ;main.c: 215: lcd_putc(((temperature_2 / 10) % 10) + 48);
  1813  0006E4  6A49               	clrf	(___lwdiv@divisor+1)^0,c
  1814  0006E6  0E0A               	movlw	10
  1815  0006E8  EC8E  F007         	call	PL6	;call to abstracted procedure
  1816  0006EC  ECB6  F00A         	call	___lwdiv	;wreg free
  1817  0006F0  EC80  F007         	call	PL2	;call to abstracted procedure
  1818  0006F4  ECFA  F00A         	call	___lwmod	;wreg free
  1819  0006F8  504D               	movf	?___lwmod^0,w,c
  1820  0006FA  0F30               	addlw	48
  1821  0006FC  EC68  F00C         	call	_lcd_putc
  1822                           
  1823                           ;main.c: 216: lcd_putc('.');
  1824  000700  0E2E               	movlw	46
  1825  000702  EC68  F00C         	call	_lcd_putc
  1826                           
  1827                           ;main.c: 217: lcd_putc(((temperature_2 % 10) + 48));
  1828  000706  ECA8  F007         	call	PL16	;call to abstracted procedure
  1829  00070A  EC94  F007         	call	PL8	;call to abstracted procedure
  1830  00070E  ECFA  F00A         	call	___lwmod	;wreg free
  1831  000712  504D               	movf	?___lwmod^0,w,c
  1832  000714  0F30               	addlw	48
  1833  000716  EC68  F00C         	call	_lcd_putc
  1834                           
  1835                           ;main.c: 218: lcd_putc(0x01);
  1836  00071A  0E01               	movlw	1
  1837  00071C  EC68  F00C         	call	_lcd_putc
  1838                           
  1839                           ;main.c: 220: lcd_putc(' ');
  1840  000720  0E20               	movlw	32
  1841  000722  EC68  F00C         	call	_lcd_putc
  1842  000726  D015               	goto	l195
  1843  000728                     l3145:
  1844                           
  1845                           ;main.c: 224: lcd_putc('-');
  1846  000728  0E2D               	movlw	45
  1847  00072A  EC68  F00C         	call	_lcd_putc
  1848                           
  1849                           ;main.c: 225: lcd_putc('-');
  1850  00072E  0E2D               	movlw	45
  1851  000730  EC68  F00C         	call	_lcd_putc
  1852                           
  1853                           ;main.c: 226: lcd_putc('-');
  1854  000734  0E2D               	movlw	45
  1855  000736  EC68  F00C         	call	_lcd_putc
  1856                           
  1857                           ;main.c: 227: lcd_putc(' ');
  1858  00073A  0E20               	movlw	32
  1859  00073C  EC68  F00C         	call	_lcd_putc
  1860                           
  1861                           ;main.c: 228: lcd_putc(' ');
  1862  000740  0E20               	movlw	32
  1863  000742  EC68  F00C         	call	_lcd_putc
  1864                           
  1865                           ;main.c: 229: lcd_putc(' ');
  1866  000746  0E20               	movlw	32
  1867  000748  EC68  F00C         	call	_lcd_putc
  1868                           
  1869                           ;main.c: 230: lcd_putc(' ');
  1870  00074C  0E20               	movlw	32
  1871  00074E  EC68  F00C         	call	_lcd_putc
  1872  000752                     l195:
  1873                           
  1874                           ;main.c: 231: };main.c: 232: lcd_gotoxy(16, 1);
  1875  000752  ECE4  F007         	call	PL54	;call to abstracted procedure
  1876  000756  EC2B  F00C         	call	_lcd_gotoxy
  1877                           
  1878                           ;main.c: 233: (en_snd_b) ? lcd_putc(0xED) : lcd_putc(0xD5);
  1879  00075A  A05A               	btfss	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  1880  00075C  D004               	goto	l3151
  1881  00075E  0EED               	movlw	237
  1882  000760  EC68  F00C         	call	_lcd_putc
  1883  000764  D003               	goto	l199
  1884  000766                     l3151:
  1885  000766  0ED5               	movlw	213
  1886  000768  EC68  F00C         	call	_lcd_putc
  1887  00076C                     l199:
  1888                           
  1889                           ;main.c: 234: lcd_gotoxy(1, 2);
  1890  00076C  DBF9               	call	PL22	;call to abstracted procedure
  1891  00076E  EC2B  F00C         	call	_lcd_gotoxy
  1892                           
  1893                           ;main.c: 235: lcdPrint("Ïîðiã:");
  1894  000772  0EEA               	movlw	low STR_14
  1895  000774  6E4D               	movwf	lcdPrint@t^0,c
  1896  000776  0E1F               	movlw	high STR_14
  1897  000778  6E4E               	movwf	(lcdPrint@t+1)^0,c
  1898  00077A  ECEB  F008         	call	_lcdPrint	;wreg free
  1899                           
  1900                           ;main.c: 236: lcd_putc('+');
  1901  00077E  0E2B               	movlw	43
  1902  000780  EC68  F00C         	call	_lcd_putc
  1903                           
  1904                           ;main.c: 237: if (!(((set_t_dq2 / 1000) % 10) == 0)) {
  1905  000784  DBEA               	call	PL18	;call to abstracted procedure
  1906  000786  DBD4               	call	PL10	;call to abstracted procedure
  1907  000788  ECB6  F00A         	call	___lwdiv	;wreg free
  1908  00078C  DBB9               	call	PL2	;call to abstracted procedure
  1909  00078E  ECFA  F00A         	call	___lwmod	;wreg free
  1910  000792  504D               	movf	?___lwmod^0,w,c
  1911  000794  104E               	iorwf	(?___lwmod+1)^0,w,c
  1912  000796  E03B               	bz	l3161
  1913                           
  1914                           ;main.c: 238: lcd_putc(((set_t_dq2 / 1000) % 10) + 48);
  1915  000798  DBE0               	call	PL18	;call to abstracted procedure
  1916  00079A  DBCA               	call	PL10	;call to abstracted procedure
  1917  00079C  ECB6  F00A         	call	___lwdiv	;wreg free
  1918  0007A0  DBAF               	call	PL2	;call to abstracted procedure
  1919  0007A2  ECFA  F00A         	call	___lwmod	;wreg free
  1920  0007A6  504D               	movf	?___lwmod^0,w,c
  1921  0007A8  0F30               	addlw	48
  1922  0007AA  EC68  F00C         	call	_lcd_putc
  1923                           
  1924                           ;main.c: 239: lcd_putc(((set_t_dq2 / 100) % 10) + 48);
  1925  0007AE  6A49               	clrf	(___lwdiv@divisor+1)^0,c
  1926  0007B0  0E64               	movlw	100
  1927  0007B2  DBBE               	call	PL10	;call to abstracted procedure
  1928  0007B4  ECB6  F00A         	call	___lwdiv	;wreg free
  1929  0007B8  DBA3               	call	PL2	;call to abstracted procedure
  1930  0007BA  ECFA  F00A         	call	___lwmod	;wreg free
  1931  0007BE  504D               	movf	?___lwmod^0,w,c
  1932  0007C0  0F30               	addlw	48
  1933  0007C2  EC68  F00C         	call	_lcd_putc
  1934                           
  1935                           ;main.c: 240: lcd_putc(((set_t_dq2 / 10) % 10) + 48);
  1936  0007C6  6A49               	clrf	(___lwdiv@divisor+1)^0,c
  1937  0007C8  0E0A               	movlw	10
  1938  0007CA  DBB2               	call	PL10	;call to abstracted procedure
  1939  0007CC  ECB6  F00A         	call	___lwdiv	;wreg free
  1940  0007D0  DB97               	call	PL2	;call to abstracted procedure
  1941  0007D2  ECFA  F00A         	call	___lwmod	;wreg free
  1942  0007D6  504D               	movf	?___lwmod^0,w,c
  1943  0007D8  0F30               	addlw	48
  1944  0007DA  EC68  F00C         	call	_lcd_putc
  1945                           
  1946                           ;main.c: 241: lcd_putc('.');
  1947  0007DE  0E2E               	movlw	46
  1948  0007E0  EC68  F00C         	call	_lcd_putc
  1949                           
  1950                           ;main.c: 242: lcd_putc(((set_t_dq2 % 10) + 48));
  1951  0007E4  DBAB               	call	PL12	;call to abstracted procedure
  1952  0007E6  DBA0               	call	PL8	;call to abstracted procedure
  1953  0007E8  ECFA  F00A         	call	___lwmod	;wreg free
  1954  0007EC  504D               	movf	?___lwmod^0,w,c
  1955  0007EE  0F30               	addlw	48
  1956  0007F0  EC68  F00C         	call	_lcd_putc
  1957                           
  1958                           ;main.c: 243: lcd_putc(0x01);
  1959  0007F4  0E01               	movlw	1
  1960  0007F6  EC68  F00C         	call	_lcd_putc
  1961                           
  1962                           ;main.c: 244: lcd_putc(' ');
  1963  0007FA  0E20               	movlw	32
  1964  0007FC  EC68  F00C         	call	_lcd_putc
  1965                           
  1966                           ;main.c: 245: lcd_putc(' ');
  1967  000800  0E20               	movlw	32
  1968  000802  EC68  F00C         	call	_lcd_putc
  1969                           
  1970                           ;main.c: 246: lcd_putc(' ');
  1971  000806  0E20               	movlw	32
  1972  000808  EC68  F00C         	call	_lcd_putc
  1973                           
  1974                           ;main.c: 247: } else if (!(((set_t_dq2 / 100) % 10) == 0)) {
  1975  00080C  D072               	goto	l188
  1976  00080E                     l3161:
  1977  00080E  6A49               	clrf	(___lwdiv@divisor+1)^0,c
  1978  000810  0E64               	movlw	100
  1979  000812  DB8E               	call	PL10	;call to abstracted procedure
  1980  000814  ECB6  F00A         	call	___lwdiv	;wreg free
  1981  000818  DB73               	call	PL2	;call to abstracted procedure
  1982  00081A  ECFA  F00A         	call	___lwmod	;wreg free
  1983  00081E  504D               	movf	?___lwmod^0,w,c
  1984  000820  104E               	iorwf	(?___lwmod+1)^0,w,c
  1985  000822  E033               	bz	l3165
  1986                           
  1987                           ;main.c: 248: lcd_putc(((set_t_dq2 / 100) % 10) + 48);
  1988  000824  6A49               	clrf	(___lwdiv@divisor+1)^0,c
  1989  000826  0E64               	movlw	100
  1990  000828  DB83               	call	PL10	;call to abstracted procedure
  1991  00082A  ECB6  F00A         	call	___lwdiv	;wreg free
  1992  00082E  DB68               	call	PL2	;call to abstracted procedure
  1993  000830  ECFA  F00A         	call	___lwmod	;wreg free
  1994  000834  504D               	movf	?___lwmod^0,w,c
  1995  000836  0F30               	addlw	48
  1996  000838  EC68  F00C         	call	_lcd_putc
  1997                           
  1998                           ;main.c: 249: lcd_putc(((set_t_dq2 / 10) % 10) + 48);
  1999  00083C  6A49               	clrf	(___lwdiv@divisor+1)^0,c
  2000  00083E  0E0A               	movlw	10
  2001  000840  DB77               	call	PL10	;call to abstracted procedure
  2002  000842  ECB6  F00A         	call	___lwdiv	;wreg free
  2003  000846  DB5C               	call	PL2	;call to abstracted procedure
  2004  000848  ECFA  F00A         	call	___lwmod	;wreg free
  2005  00084C  504D               	movf	?___lwmod^0,w,c
  2006  00084E  0F30               	addlw	48
  2007  000850  EC68  F00C         	call	_lcd_putc
  2008                           
  2009                           ;main.c: 250: lcd_putc('.');
  2010  000854  0E2E               	movlw	46
  2011  000856  EC68  F00C         	call	_lcd_putc
  2012                           
  2013                           ;main.c: 251: lcd_putc(((set_t_dq2 % 10) + 48));
  2014  00085A  DB70               	call	PL12	;call to abstracted procedure
  2015  00085C  DB65               	call	PL8	;call to abstracted procedure
  2016  00085E  ECFA  F00A         	call	___lwmod	;wreg free
  2017  000862  504D               	movf	?___lwmod^0,w,c
  2018  000864  0F30               	addlw	48
  2019  000866  EC68  F00C         	call	_lcd_putc
  2020                           
  2021                           ;main.c: 252: lcd_putc(0x01);
  2022  00086A  0E01               	movlw	1
  2023  00086C  EC68  F00C         	call	_lcd_putc
  2024                           
  2025                           ;main.c: 253: lcd_putc(' ');
  2026  000870  0E20               	movlw	32
  2027  000872  EC68  F00C         	call	_lcd_putc
  2028                           
  2029                           ;main.c: 254: lcd_putc(' ');
  2030  000876  0E20               	movlw	32
  2031  000878  EC68  F00C         	call	_lcd_putc
  2032                           
  2033                           ;main.c: 255: lcd_putc(' ');
  2034  00087C  0E20               	movlw	32
  2035  00087E  EC68  F00C         	call	_lcd_putc
  2036                           
  2037                           ;main.c: 256: lcd_putc(' ');
  2038  000882  0E20               	movlw	32
  2039  000884  EC68  F00C         	call	_lcd_putc
  2040                           
  2041                           ;main.c: 257: } else {
  2042  000888  D034               	goto	l188
  2043  00088A                     l3165:
  2044                           
  2045                           ;main.c: 258: lcd_putc(((set_t_dq2 / 10) % 10) + 48);
  2046  00088A  6A49               	clrf	(___lwdiv@divisor+1)^0,c
  2047  00088C  0E0A               	movlw	10
  2048  00088E  DB50               	call	PL10	;call to abstracted procedure
  2049  000890  ECB6  F00A         	call	___lwdiv	;wreg free
  2050  000894  DB35               	call	PL2	;call to abstracted procedure
  2051  000896  ECFA  F00A         	call	___lwmod	;wreg free
  2052  00089A  504D               	movf	?___lwmod^0,w,c
  2053  00089C  0F30               	addlw	48
  2054  00089E  EC68  F00C         	call	_lcd_putc
  2055                           
  2056                           ;main.c: 259: lcd_putc('.');
  2057  0008A2  0E2E               	movlw	46
  2058  0008A4  EC68  F00C         	call	_lcd_putc
  2059                           
  2060                           ;main.c: 260: lcd_putc(((set_t_dq2 % 10) + 48));
  2061  0008A8  DB49               	call	PL12	;call to abstracted procedure
  2062  0008AA  DB3E               	call	PL8	;call to abstracted procedure
  2063  0008AC  ECFA  F00A         	call	___lwmod	;wreg free
  2064  0008B0  504D               	movf	?___lwmod^0,w,c
  2065  0008B2  0F30               	addlw	48
  2066  0008B4  EC68  F00C         	call	_lcd_putc
  2067                           
  2068                           ;main.c: 261: lcd_putc(0x01);
  2069  0008B8  0E01               	movlw	1
  2070  0008BA  EC68  F00C         	call	_lcd_putc
  2071                           
  2072                           ;main.c: 262: lcd_putc(' ');
  2073  0008BE  0E20               	movlw	32
  2074  0008C0  EC68  F00C         	call	_lcd_putc
  2075                           
  2076                           ;main.c: 263: lcd_putc(' ');
  2077  0008C4  0E20               	movlw	32
  2078  0008C6  EC68  F00C         	call	_lcd_putc
  2079                           
  2080                           ;main.c: 264: lcd_putc(' ');
  2081  0008CA  0E20               	movlw	32
  2082  0008CC  EC68  F00C         	call	_lcd_putc
  2083                           
  2084                           ;main.c: 265: lcd_putc(' ');
  2085  0008D0  0E20               	movlw	32
  2086  0008D2  EC68  F00C         	call	_lcd_putc
  2087                           
  2088                           ;main.c: 266: lcd_putc(' ');
  2089  0008D6  0E20               	movlw	32
  2090  0008D8  EC68  F00C         	call	_lcd_putc
  2091                           
  2092                           ;main.c: 267: lcd_putc(' ');
  2093  0008DC  0E20               	movlw	32
  2094  0008DE  EC68  F00C         	call	_lcd_putc
  2095  0008E2  D007               	goto	l188
  2096  0008E4                     l3169:
  2097  0008E4  5061               	movf	_sub_main^0,w,c
  2098                           
  2099                           ; Switch size 1, requested type "space"
  2100                           ; Number of cases is 2, Range of values is 1 to 2
  2101                           ; switch strategies available:
  2102                           ; Name         Instructions Cycles
  2103                           ; simple_byte            7     4 (average)
  2104                           ;	Chosen strategy is simple_byte
  2105  0008E6  0A01               	xorlw	1	; case 1
  2106  0008E8  E101 D4FC          	bz	l3105
  2107  0008EC  0A03               	xorlw	3	; case 2
  2108  0008EE  E101 D64F          	bz	l3129
  2109  0008F2                     l188:
  2110                           
  2111                           ;main.c: 277: if (sound_yes) {
  2112  0008F2  AE5A               	btfss	(_sound_yes/(0+8))^0,_sound_yes& (0+7),c
  2113  0008F4  D090               	goto	l204
  2114                           
  2115                           ;main.c: 281: if (en_snd_k) {
  2116  0008F6  A25A               	btfss	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2117  0008F8  D01D               	goto	l206
  2118                           
  2119                           ;main.c: 282: if (((temperature_1 >= (temp1_fix + set_t_dq1_up)) ||;main.c: 283: (temper
      +                          ature_1 <= (temp1_fix - set_t_dq1_dwn))) &&;main.c: 284: !(temperature_1 == 32767)) {
  2120  0008FA  5033               	movf	_set_t_dq1_up^0,w,c
  2121  0008FC  2427               	addwf	_temp1_fix^0,w,c
  2122  0008FE  6E57               	movwf	??_main^0,c
  2123  000900  0E00               	movlw	0
  2124  000902  2028               	addwfc	(_temp1_fix+1)^0,w,c
  2125  000904  6E58               	movwf	(??_main+1)^0,c
  2126  000906  5057               	movf	??_main^0,w,c
  2127  000908  5C5E               	subwf	_temperature_1^0,w,c
  2128  00090A  5058               	movf	(??_main+1)^0,w,c
  2129  00090C  585F               	subwfb	(_temperature_1+1)^0,w,c
  2130  00090E  E20B               	bc	u2160
  2131  000910  5032               	movf	_set_t_dq1_dwn^0,w,c
  2132  000912  5C27               	subwf	_temp1_fix^0,w,c
  2133  000914  6E57               	movwf	??_main^0,c
  2134  000916  0E00               	movlw	0
  2135  000918  5828               	subwfb	(_temp1_fix+1)^0,w,c
  2136  00091A  6E58               	movwf	(??_main+1)^0,c
  2137  00091C  505E               	movf	_temperature_1^0,w,c
  2138  00091E  5C57               	subwf	??_main^0,w,c
  2139  000920  505F               	movf	(_temperature_1+1)^0,w,c
  2140  000922  5858               	subwfb	(??_main+1)^0,w,c
  2141  000924  E307               	bnc	l206
  2142  000926                     u2160:
  2143  000926  285E               	incf	_temperature_1^0,w,c
  2144  000928  E103               	bnz	u2170
  2145  00092A  0E7F               	movlw	127
  2146  00092C  185F               	xorwf	(_temperature_1+1)^0,w,c
  2147  00092E  E002               	bz	l206
  2148  000930                     u2170:
  2149                           
  2150                           ;main.c: 286: snd_k_b = 1;
  2151  000930  865A               	bsf	(_snd_k_b/(0+8))^0,_snd_k_b& (0+7),c
  2152                           
  2153                           ;main.c: 287: } else
  2154  000932  D001               	goto	l210
  2155  000934                     l206:
  2156                           
  2157                           ;main.c: 288: snd_k_b = 0;
  2158  000934  965A               	bcf	(_snd_k_b/(0+8))^0,_snd_k_b& (0+7),c
  2159  000936                     l210:
  2160                           
  2161                           ;main.c: 292: if (en_snd_b) {
  2162  000936  A05A               	btfss	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2163  000938  D00C               	goto	l212
  2164                           
  2165                           ;main.c: 293: if ((temperature_2 >= set_t_dq2) && !(temperature_2 == 32767))
  2166  00093A  5029               	movf	_set_t_dq2^0,w,c
  2167  00093C  5C5C               	subwf	_temperature_2^0,w,c
  2168  00093E  502A               	movf	(_set_t_dq2+1)^0,w,c
  2169  000940  585D               	subwfb	(_temperature_2+1)^0,w,c
  2170  000942  E307               	bnc	l212
  2171  000944  285C               	incf	_temperature_2^0,w,c
  2172  000946  E103               	bnz	u2200
  2173  000948  0E7F               	movlw	127
  2174  00094A  185D               	xorwf	(_temperature_2+1)^0,w,c
  2175  00094C  E002               	bz	l212
  2176  00094E                     u2200:
  2177                           
  2178                           ;main.c: 294: snd_b_b = 1;
  2179  00094E  845A               	bsf	(_snd_b_b/(0+8))^0,_snd_b_b& (0+7),c
  2180  000950  D001               	goto	l214
  2181  000952                     l212:
  2182                           
  2183                           ;main.c: 295: else;main.c: 296: snd_b_b = 0;
  2184  000952  945A               	bcf	(_snd_b_b/(0+8))^0,_snd_b_b& (0+7),c
  2185  000954                     l214:
  2186                           
  2187                           ;main.c: 300: if (snd_k_b && snd_b_b) {
  2188  000954  B65A               	btfsc	(_snd_k_b/(0+8))^0,_snd_k_b& (0+7),c
  2189  000956  A45A               	btfss	(_snd_b_b/(0+8))^0,_snd_b_b& (0+7),c
  2190  000958  D01E               	goto	l215
  2191                           
  2192                           ;main.c: 301: en_sound = 1;
  2193  00095A  805B               	bsf	(_en_sound/(0+8))^0,_en_sound& (0+7),c
  2194                           
  2195                           ;main.c: 302: snd_k = 0;
  2196  00095C  9C5A               	bcf	(_snd_k/(0+8))^0,_snd_k& (0+7),c
  2197                           
  2198                           ;main.c: 303: snd_b = 0;
  2199  00095E  9A5A               	bcf	(_snd_b/(0+8))^0,_snd_b& (0+7),c
  2200                           
  2201                           ;main.c: 304: snd_all = 1;
  2202  000960  885A               	bsf	(_snd_all/(0+8))^0,_snd_all& (0+7),c
  2203                           
  2204                           ;main.c: 305: if (tik_time >= 100) {
  2205  000962  0E63               	movlw	99
  2206  000964  6437               	cpfsgt	_tik_time^0,c
  2207  000966  D059               	goto	l3213
  2208                           
  2209                           ;main.c: 306: tik_time = 0;
  2210  000968  6A37               	clrf	_tik_time^0,c
  2211                           
  2212                           ;main.c: 307: EUSART_Write('A');
  2213  00096A  0E41               	movlw	65
  2214  00096C  EC9A  F00B         	call	_EUSART_Write
  2215                           
  2216                           ;main.c: 308: EUSART_Write('l');
  2217  000970  0E6C               	movlw	108
  2218  000972  EC9A  F00B         	call	_EUSART_Write
  2219                           
  2220                           ;main.c: 309: EUSART_Write('r');
  2221  000976  0E72               	movlw	114
  2222  000978  EC9A  F00B         	call	_EUSART_Write
  2223                           
  2224                           ;main.c: 310: EUSART_Write('_');
  2225  00097C  0E5F               	movlw	95
  2226  00097E  EC9A  F00B         	call	_EUSART_Write
  2227                           
  2228                           ;main.c: 311: EUSART_Write('A');
  2229  000982  0E41               	movlw	65
  2230  000984  EC9A  F00B         	call	_EUSART_Write
  2231                           
  2232                           ;main.c: 312: EUSART_Write('\r');
  2233  000988  0E0D               	movlw	13
  2234  00098A  EC9A  F00B         	call	_EUSART_Write
  2235                           
  2236                           ;main.c: 313: EUSART_Write('\n');
  2237  00098E  0E0A               	movlw	10
  2238  000990  EC9A  F00B         	call	_EUSART_Write
  2239  000994  D042               	goto	l3213
  2240  000996                     l215:
  2241  000996  A45A               	btfss	(_snd_b_b/(0+8))^0,_snd_b_b& (0+7),c
  2242  000998  D01E               	goto	l218
  2243                           
  2244                           ;main.c: 316: en_sound = 1;
  2245  00099A  805B               	bsf	(_en_sound/(0+8))^0,_en_sound& (0+7),c
  2246                           
  2247                           ;main.c: 317: snd_k = 0;
  2248  00099C  9C5A               	bcf	(_snd_k/(0+8))^0,_snd_k& (0+7),c
  2249                           
  2250                           ;main.c: 318: snd_all = 0;
  2251  00099E  985A               	bcf	(_snd_all/(0+8))^0,_snd_all& (0+7),c
  2252                           
  2253                           ;main.c: 319: snd_b = 1;
  2254  0009A0  8A5A               	bsf	(_snd_b/(0+8))^0,_snd_b& (0+7),c
  2255                           
  2256                           ;main.c: 320: if (tik_time >= 100) {
  2257  0009A2  0E63               	movlw	99
  2258  0009A4  6437               	cpfsgt	_tik_time^0,c
  2259  0009A6  D039               	goto	l3213
  2260                           
  2261                           ;main.c: 321: tik_time = 0;
  2262  0009A8  6A37               	clrf	_tik_time^0,c
  2263                           
  2264                           ;main.c: 322: EUSART_Write('A');
  2265  0009AA  0E41               	movlw	65
  2266  0009AC  EC9A  F00B         	call	_EUSART_Write
  2267                           
  2268                           ;main.c: 323: EUSART_Write('l');
  2269  0009B0  0E6C               	movlw	108
  2270  0009B2  EC9A  F00B         	call	_EUSART_Write
  2271                           
  2272                           ;main.c: 324: EUSART_Write('r');
  2273  0009B6  0E72               	movlw	114
  2274  0009B8  EC9A  F00B         	call	_EUSART_Write
  2275                           
  2276                           ;main.c: 325: EUSART_Write('_');
  2277  0009BC  0E5F               	movlw	95
  2278  0009BE  EC9A  F00B         	call	_EUSART_Write
  2279                           
  2280                           ;main.c: 326: EUSART_Write('B');
  2281  0009C2  0E42               	movlw	66
  2282  0009C4  EC9A  F00B         	call	_EUSART_Write
  2283                           
  2284                           ;main.c: 327: EUSART_Write('\r');
  2285  0009C8  0E0D               	movlw	13
  2286  0009CA  EC9A  F00B         	call	_EUSART_Write
  2287                           
  2288                           ;main.c: 328: EUSART_Write('\n');
  2289  0009CE  0E0A               	movlw	10
  2290  0009D0  EC9A  F00B         	call	_EUSART_Write
  2291  0009D4  D022               	goto	l3213
  2292  0009D6                     l218:
  2293  0009D6  A65A               	btfss	(_snd_k_b/(0+8))^0,_snd_k_b& (0+7),c
  2294  0009D8  D01F               	goto	L1
  2295                           
  2296                           ;main.c: 331: en_sound = 1;
  2297  0009DA  805B               	bsf	(_en_sound/(0+8))^0,_en_sound& (0+7),c
  2298                           
  2299                           ;main.c: 332: snd_k = 1;
  2300  0009DC  8C5A               	bsf	(_snd_k/(0+8))^0,_snd_k& (0+7),c
  2301                           
  2302                           ;main.c: 333: snd_all = 0;
  2303  0009DE  985A               	bcf	(_snd_all/(0+8))^0,_snd_all& (0+7),c
  2304                           
  2305                           ;main.c: 334: snd_b = 0;
  2306  0009E0  9A5A               	bcf	(_snd_b/(0+8))^0,_snd_b& (0+7),c
  2307                           
  2308                           ;main.c: 335: if (tik_time >= 100) {
  2309  0009E2  0E63               	movlw	99
  2310  0009E4  6437               	cpfsgt	_tik_time^0,c
  2311  0009E6  D019               	goto	l3213
  2312                           
  2313                           ;main.c: 336: tik_time = 0;
  2314  0009E8  6A37               	clrf	_tik_time^0,c
  2315                           
  2316                           ;main.c: 337: EUSART_Write('A');
  2317  0009EA  0E41               	movlw	65
  2318  0009EC  EC9A  F00B         	call	_EUSART_Write
  2319                           
  2320                           ;main.c: 338: EUSART_Write('l');
  2321  0009F0  0E6C               	movlw	108
  2322  0009F2  EC9A  F00B         	call	_EUSART_Write
  2323                           
  2324                           ;main.c: 339: EUSART_Write('r');
  2325  0009F6  0E72               	movlw	114
  2326  0009F8  EC9A  F00B         	call	_EUSART_Write
  2327                           
  2328                           ;main.c: 340: EUSART_Write('_');
  2329  0009FC  0E5F               	movlw	95
  2330  0009FE  EC9A  F00B         	call	_EUSART_Write
  2331                           
  2332                           ;main.c: 341: EUSART_Write('K');
  2333  000A02  0E4B               	movlw	75
  2334  000A04  EC9A  F00B         	call	_EUSART_Write
  2335                           
  2336                           ;main.c: 342: EUSART_Write('\r');
  2337  000A08  0E0D               	movlw	13
  2338  000A0A  EC9A  F00B         	call	_EUSART_Write
  2339                           
  2340                           ;main.c: 343: EUSART_Write('\n');
  2341  000A0E  0E0A               	movlw	10
  2342  000A10  EC9A  F00B         	call	_EUSART_Write
  2343  000A14  D002               	goto	l3213
  2344  000A16                     l204:
  2345                           
  2346                           ;main.c: 352: LATCbits.LATC4 = 0;
  2347  000A16  988B               	bcf	139,4,c	;volatile
  2348  000A18                     L1:
  2349                           
  2350                           ;main.c: 353: en_sound = 0;
  2351  000A18  905B               	bcf	(_en_sound/(0+8))^0,_en_sound& (0+7),c
  2352  000A1A                     l3213:
  2353                           
  2354                           ;main.c: 354: };main.c: 357: if (pressed_key == 1) {
  2355  000A1A  0435               	decf	_pressed_key^0,w,c
  2356  000A1C  E115               	bnz	l3227
  2357                           
  2358                           ;main.c: 358: clearLCD();
  2359  000A1E  EC47  F00C         	call	_clearLCD	;wreg free
  2360                           
  2361                           ;main.c: 359: select = 7;
  2362  000A22  0E07               	movlw	7
  2363                           
  2364                           ;main.c: 360: lcd_gotoxy(1, 1);
  2365  000A24  DAAC               	call	PL32	;call to abstracted procedure
  2366  000A26  EC2B  F00C         	call	_lcd_gotoxy
  2367                           
  2368                           ;main.c: 361: lcdPrint("Ïîðiã Ñèãí. Led");
  2369  000A2A  0E4B               	movlw	low STR_15
  2370  000A2C  6E4D               	movwf	lcdPrint@t^0,c
  2371  000A2E  0E1F               	movlw	high STR_15
  2372  000A30  6E4E               	movwf	(lcdPrint@t+1)^0,c
  2373  000A32  ECEB  F008         	call	_lcdPrint	;wreg free
  2374                           
  2375                           ;main.c: 362: lcd_gotoxy(1, 2);
  2376  000A36  DA94               	call	PL22	;call to abstracted procedure
  2377  000A38  EC2B  F00C         	call	_lcd_gotoxy
  2378                           
  2379                           ;main.c: 363: lcdPrint("  1     2   1-2");
  2380  000A3C  0E2B               	movlw	low STR_16
  2381  000A3E  6E4D               	movwf	lcdPrint@t^0,c
  2382  000A40  0E1F               	movlw	high STR_16
  2383  000A42  6E4E               	movwf	(lcdPrint@t+1)^0,c
  2384  000A44  ECEB  F008         	call	_lcdPrint	;wreg free
  2385  000A48                     l3227:
  2386                           
  2387                           ;main.c: 365: };main.c: 367: if (pressed_key == 2) {
  2388  000A48  0E02               	movlw	2
  2389  000A4A  1835               	xorwf	_pressed_key^0,w,c
  2390  000A4C  E105               	bnz	l3235
  2391                           
  2392                           ;main.c: 368: if (sub_main == 1)
  2393  000A4E  0461               	decf	_sub_main^0,w,c
  2394                           
  2395                           ;main.c: 369: sub_main = 2;
  2396  000A50  0E02               	movlw	2
  2397  000A52  A4D8               	btfss	status,2,c
  2398                           
  2399                           ;main.c: 370: else;main.c: 371: sub_main = 1;
  2400  000A54  0E01               	movlw	1
  2401  000A56  6E61               	movwf	_sub_main^0,c
  2402  000A58                     l3235:
  2403                           
  2404                           ;main.c: 372: };main.c: 374: if (pressed_key == 3) {
  2405  000A58  0E03               	movlw	3
  2406  000A5A  1835               	xorwf	_pressed_key^0,w,c
  2407  000A5C  E011               	bz	l3243
  2408  000A5E  EFB3  F000         	goto	l3061
  2409  000A62                     l231:
  2410                           
  2411                           ;main.c: 378: temp1_fix = temperature_1;
  2412  000A62  C05E  F027         	movff	_temperature_1,_temp1_fix
  2413  000A66  C05F  F028         	movff	_temperature_1+1,_temp1_fix+1
  2414                           
  2415                           ;main.c: 379: write_eep(20, (temp1_fix >> 8));
  2416  000A6A  C028  F046         	movff	_temp1_fix+1,write_eep@data
  2417  000A6E  0E14               	movlw	20
  2418  000A70  ECC5  F00B         	call	_write_eep
  2419                           
  2420                           ;main.c: 380: write_eep(20 + 1, (uint8_t) temp1_fix);
  2421  000A74  C027  F046         	movff	_temp1_fix,write_eep@data
  2422  000A78  0E15               	movlw	21
  2423  000A7A  ECC5  F00B         	call	_write_eep
  2424                           
  2425                           ;main.c: 381: break;
  2426  000A7E  D004               	goto	l3245
  2427  000A80                     l3243:
  2428  000A80  5061               	movf	_sub_main^0,w,c
  2429                           
  2430                           ; Switch size 1, requested type "space"
  2431                           ; Number of cases is 2, Range of values is 1 to 2
  2432                           ; switch strategies available:
  2433                           ; Name         Instructions Cycles
  2434                           ; simple_byte            7     4 (average)
  2435                           ;	Chosen strategy is simple_byte
  2436  000A82  0A01               	xorlw	1	; case 1
  2437  000A84  E0EE               	bz	l231
  2438  000A86  0A03               	xorlw	3	; case 2
  2439  000A88                     l3245:
  2440                           
  2441                           ;main.c: 388: Delay_ms(10);
  2442  000A88  DAB8               	call	PL68	;call to abstracted procedure
  2443  000A8A  ECD7  F00B         	call	_Delay_ms	;wreg free
  2444  000A8E  EFB3  F000         	goto	l3061
  2445  000A92                     l3247:
  2446                           
  2447                           ;main.c: 395: lcd_gotoxy(14, 2);
  2448  000A92  0E02               	movlw	2
  2449  000A94  6E4A               	movwf	lcd_gotoxy@y^0,c
  2450  000A96  0E0E               	movlw	14
  2451  000A98  EC2B  F00C         	call	_lcd_gotoxy
  2452                           
  2453                           ;main.c: 396: lcd_putc(dq_num + 48);
  2454  000A9C  5060               	movf	_dq_num^0,w,c
  2455  000A9E  0F30               	addlw	48
  2456  000AA0  EC68  F00C         	call	_lcd_putc
  2457                           
  2458                           ;main.c: 397: if (pressed_key == 1) {
  2459  000AA4  0435               	decf	_pressed_key^0,w,c
  2460  000AA6  E106               	bnz	l3257
  2461                           
  2462                           ;main.c: 398: dq_num++;
  2463  000AA8  2A60               	incf	_dq_num^0,f,c
  2464                           
  2465                           ;main.c: 399: if (dq_num == 3)
  2466  000AAA  0E03               	movlw	3
  2467  000AAC  1860               	xorwf	_dq_num^0,w,c
  2468  000AAE  E102               	bnz	l3257
  2469                           
  2470                           ;main.c: 400: dq_num = 1;
  2471  000AB0  0E01               	movlw	1
  2472  000AB2  6E60               	movwf	_dq_num^0,c
  2473  000AB4                     l3257:
  2474                           
  2475                           ;main.c: 401: };main.c: 402: if (pressed_key == 2) {
  2476  000AB4  0E02               	movlw	2
  2477  000AB6  1835               	xorwf	_pressed_key^0,w,c
  2478  000AB8  E105               	bnz	l3265
  2479                           
  2480                           ;main.c: 403: dq_num--;
  2481  000ABA  0660               	decf	_dq_num^0,f,c
  2482                           
  2483                           ;main.c: 404: if (dq_num == 0)
  2484  000ABC  5060               	movf	_dq_num^0,w,c
  2485  000ABE  E102               	bnz	l3265
  2486                           
  2487                           ;main.c: 405: dq_num = 2;
  2488  000AC0  0E02               	movlw	2
  2489  000AC2  6E60               	movwf	_dq_num^0,c
  2490  000AC4                     l3265:
  2491                           
  2492                           ;main.c: 406: };main.c: 407: if (pressed_key == 3) {
  2493  000AC4  0E03               	movlw	3
  2494  000AC6  1835               	xorwf	_pressed_key^0,w,c
  2495  000AC8  E002 EFB3  F000    	bnz	l3061
  2496                           
  2497                           ;main.c: 408: if (ds18b20_readrom(dq_num)) {
  2498  000ACE  5060               	movf	_dq_num^0,w,c
  2499  000AD0  EC37  F00A         	call	_ds18b20_readrom
  2500  000AD4  0900               	iorlw	0
  2501  000AD6  E009               	bz	l3273
  2502                           
  2503                           ;main.c: 409: lcd_gotoxy(1, 2);
  2504  000AD8  DA43               	call	PL22	;call to abstracted procedure
  2505  000ADA  EC2B  F00C         	call	_lcd_gotoxy
  2506                           
  2507                           ;main.c: 410: lcdPrint(" Êîä ïðî÷èòàíî ");
  2508  000ADE  0EEB               	movlw	low STR_17
  2509  000AE0  6E4D               	movwf	lcdPrint@t^0,c
  2510  000AE2  0E1E               	movlw	high STR_17
  2511  000AE4  6E4E               	movwf	(lcdPrint@t+1)^0,c
  2512  000AE6  ECEB  F008         	call	_lcdPrint	;wreg free
  2513  000AEA                     l3273:
  2514                           
  2515                           ;main.c: 411: };main.c: 413: select = 3;
  2516  000AEA  0E03               	movlw	3
  2517  000AEC  D039               	goto	L3
  2518  000AEE                     l3275:
  2519                           
  2520                           ;main.c: 419: if (pressed_key == 1) {
  2521  000AEE  0435               	decf	_pressed_key^0,w,c
  2522  000AF0  E115               	bnz	l3289
  2523                           
  2524                           ;main.c: 420: clearLCD();
  2525  000AF2  EC47  F00C         	call	_clearLCD	;wreg free
  2526                           
  2527                           ;main.c: 421: select = 4;
  2528  000AF6  0E04               	movlw	4
  2529                           
  2530                           ;main.c: 422: lcd_gotoxy(1, 1);
  2531  000AF8  DA42               	call	PL32	;call to abstracted procedure
  2532  000AFA  EC2B  F00C         	call	_lcd_gotoxy
  2533                           
  2534                           ;main.c: 423: lcdPrint("   Ãðàíèöi   ");
  2535  000AFE  0E88               	movlw	low STR_18
  2536  000B00  6E4D               	movwf	lcdPrint@t^0,c
  2537  000B02  0E1F               	movlw	high STR_18
  2538  000B04  6E4E               	movwf	(lcdPrint@t+1)^0,c
  2539  000B06  ECEB  F008         	call	_lcdPrint	;wreg free
  2540                           
  2541                           ;main.c: 424: lcd_gotoxy(1, 2);
  2542  000B0A  DA2A               	call	PL22	;call to abstracted procedure
  2543  000B0C  EC2B  F00C         	call	_lcd_gotoxy
  2544                           
  2545                           ;main.c: 425: lcdPrint("Êîë(1)/Êóá(2):");
  2546  000B10  0E79               	movlw	low STR_19
  2547  000B12  6E4D               	movwf	lcdPrint@t^0,c
  2548  000B14  0E1F               	movlw	high STR_19
  2549  000B16  6E4E               	movwf	(lcdPrint@t+1)^0,c
  2550  000B18  ECEB  F008         	call	_lcdPrint	;wreg free
  2551  000B1C                     l3289:
  2552                           
  2553                           ;main.c: 426: };main.c: 428: if (pressed_key == 2) {
  2554  000B1C  0E02               	movlw	2
  2555  000B1E  1835               	xorwf	_pressed_key^0,w,c
  2556  000B20  E10C               	bnz	l3299
  2557                           
  2558                           ;main.c: 431: clearLCD();
  2559  000B22  EC47  F00C         	call	_clearLCD	;wreg free
  2560                           
  2561                           ;main.c: 432: select = 8;
  2562  000B26  0E08               	movlw	8
  2563                           
  2564                           ;main.c: 433: lcd_gotoxy(1, 1);
  2565  000B28  DA2A               	call	PL32	;call to abstracted procedure
  2566  000B2A  EC2B  F00C         	call	_lcd_gotoxy
  2567                           
  2568                           ;main.c: 434: lcdPrint(" Êîëîíà    Êóá");
  2569  000B2E  0E5B               	movlw	low STR_20
  2570  000B30  6E4D               	movwf	lcdPrint@t^0,c
  2571  000B32  0E1F               	movlw	high STR_20
  2572  000B34  6E4E               	movwf	(lcdPrint@t+1)^0,c
  2573  000B36  ECEB  F008         	call	_lcdPrint	;wreg free
  2574  000B3A                     l3299:
  2575                           
  2576                           ;main.c: 435: };main.c: 436: if (pressed_key == 3) {
  2577  000B3A  0E03               	movlw	3
  2578  000B3C  1835               	xorwf	_pressed_key^0,w,c
  2579  000B3E  E002 EFB3  F000    	bnz	l3061
  2580                           
  2581                           ;main.c: 437: LATCbits.LATC5 = !(LATCbits.LATC5);
  2582  000B44  BA8B               	btfsc	139,5,c	;volatile
  2583  000B46  D003               	goto	u2410
  2584  000B48  6A57               	clrf	??_main^0,c
  2585  000B4A  2A57               	incf	??_main^0,f,c
  2586  000B4C  D001               	goto	u2428
  2587  000B4E                     u2410:
  2588  000B4E  6A57               	clrf	??_main^0,c
  2589  000B50                     u2428:
  2590  000B50  3A57               	swapf	??_main^0,f,c
  2591  000B52  4657               	rlncf	??_main^0,f,c
  2592  000B54  508B               	movf	139,w,c	;volatile
  2593  000B56  1857               	xorwf	??_main^0,w,c
  2594  000B58  0BDF               	andlw	-33
  2595  000B5A  1857               	xorwf	??_main^0,w,c
  2596  000B5C  6E8B               	movwf	139,c	;volatile
  2597  000B5E                     l3303:
  2598                           
  2599                           ;main.c: 438: select = 1;
  2600  000B5E  0E01               	movlw	1
  2601  000B60                     L3:
  2602  000B60  6E62               	movwf	_select^0,c
  2603  000B62  EFB3  F000         	goto	l3061
  2604  000B66                     l3305:
  2605                           
  2606                           ;main.c: 442: lcd_gotoxy(4, 2);
  2607  000B66  0E02               	movlw	2
  2608  000B68  6E4A               	movwf	lcd_gotoxy@y^0,c
  2609  000B6A  0E04               	movlw	4
  2610  000B6C  EC2B  F00C         	call	_lcd_gotoxy
  2611                           
  2612                           ;main.c: 443: (en_snd_k) ? lcd_putc(0xED) : lcd_putc(0xD5);
  2613  000B70  A25A               	btfss	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2614  000B72  D004               	goto	l3311
  2615  000B74  0EED               	movlw	237
  2616  000B76  EC68  F00C         	call	_lcd_putc
  2617  000B7A  D003               	goto	l251
  2618  000B7C                     l3311:
  2619  000B7C  0ED5               	movlw	213
  2620  000B7E  EC68  F00C         	call	_lcd_putc
  2621  000B82                     l251:
  2622                           
  2623                           ;main.c: 444: lcd_gotoxy(13, 2);
  2624  000B82  0E02               	movlw	2
  2625  000B84  6E4A               	movwf	lcd_gotoxy@y^0,c
  2626  000B86  0E0D               	movlw	13
  2627  000B88  EC2B  F00C         	call	_lcd_gotoxy
  2628                           
  2629                           ;main.c: 445: (en_snd_b) ? lcd_putc(0xED) : lcd_putc(0xD5);
  2630  000B8C  A05A               	btfss	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2631  000B8E  D004               	goto	l3317
  2632  000B90  0EED               	movlw	237
  2633  000B92  EC68  F00C         	call	_lcd_putc
  2634  000B96  D003               	goto	l3319
  2635  000B98                     l3317:
  2636  000B98  0ED5               	movlw	213
  2637  000B9A  EC68  F00C         	call	_lcd_putc
  2638  000B9E                     l3319:
  2639                           
  2640                           ;main.c: 447: if (pressed_key == 1) {
  2641  000B9E  0435               	decf	_pressed_key^0,w,c
  2642  000BA0  E105               	bnz	u2475
  2643                           
  2644                           ;main.c: 448: en_snd_k = !(en_snd_k);
  2645  000BA2  B25A               	btfsc	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2646  000BA4  D002               	goto	u2460
  2647  000BA6  825A               	bsf	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2648  000BA8  D001               	goto	u2475
  2649  000BAA                     u2460:
  2650  000BAA  925A               	bcf	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2651  000BAC                     u2475:
  2652                           
  2653                           ;main.c: 449: };main.c: 451: if (pressed_key == 2) {
  2654  000BAC  0E02               	movlw	2
  2655  000BAE  1835               	xorwf	_pressed_key^0,w,c
  2656  000BB0  E105               	bnz	u2505
  2657                           
  2658                           ;main.c: 452: en_snd_b = !(en_snd_b);
  2659  000BB2  B05A               	btfsc	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2660  000BB4  D002               	goto	u2490
  2661  000BB6  805A               	bsf	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2662  000BB8  D001               	goto	u2505
  2663  000BBA                     u2490:
  2664  000BBA  905A               	bcf	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2665  000BBC                     u2505:
  2666                           
  2667                           ;main.c: 453: };main.c: 454: if (pressed_key == 3) {
  2668  000BBC  0E03               	movlw	3
  2669  000BBE  1835               	xorwf	_pressed_key^0,w,c
  2670  000BC0  E002 EFB3  F000    	bnz	l3061
  2671                           
  2672                           ;main.c: 455: if (!(en_snd_k) && !(en_snd_b)) {
  2673  000BC6  A25A               	btfss	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2674  000BC8  B05A               	btfsc	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2675  000BCA  D002               	goto	l259
  2676                           
  2677                           ;main.c: 456: sound_yes = 0;
  2678  000BCC  9E5A               	bcf	(_sound_yes/(0+8))^0,_sound_yes& (0+7),c
  2679                           
  2680                           ;main.c: 457: } else
  2681  000BCE  D7C7               	goto	l3303
  2682  000BD0                     l259:
  2683                           
  2684                           ;main.c: 458: sound_yes = 1;
  2685  000BD0  8E5A               	bsf	(_sound_yes/(0+8))^0,_sound_yes& (0+7),c
  2686  000BD2  D7C5               	goto	l3303
  2687  000BD4                     l3337:
  2688                           
  2689                           ;main.c: 464: lcd_gotoxy(16, 2);
  2690  000BD4  0E02               	movlw	2
  2691  000BD6  6E4A               	movwf	lcd_gotoxy@y^0,c
  2692  000BD8  0E10               	movlw	16
  2693  000BDA  EC2B  F00C         	call	_lcd_gotoxy
  2694                           
  2695                           ;main.c: 465: lcd_putc(dq_num + 48);
  2696  000BDE  5060               	movf	_dq_num^0,w,c
  2697  000BE0  0F30               	addlw	48
  2698  000BE2  EC68  F00C         	call	_lcd_putc
  2699                           
  2700                           ;main.c: 466: if (pressed_key == 1) {
  2701  000BE6  0435               	decf	_pressed_key^0,w,c
  2702  000BE8  E106               	bnz	l3347
  2703                           
  2704                           ;main.c: 467: dq_num++;
  2705  000BEA  2A60               	incf	_dq_num^0,f,c
  2706                           
  2707                           ;main.c: 468: if (dq_num == 3)
  2708  000BEC  0E03               	movlw	3
  2709  000BEE  1860               	xorwf	_dq_num^0,w,c
  2710  000BF0  E102               	bnz	l3347
  2711                           
  2712                           ;main.c: 469: dq_num = 1;
  2713  000BF2  0E01               	movlw	1
  2714  000BF4  6E60               	movwf	_dq_num^0,c
  2715  000BF6                     l3347:
  2716                           
  2717                           ;main.c: 470: };main.c: 471: if (pressed_key == 2) {
  2718  000BF6  0E02               	movlw	2
  2719  000BF8  1835               	xorwf	_pressed_key^0,w,c
  2720  000BFA  E105               	bnz	l3355
  2721                           
  2722                           ;main.c: 472: dq_num--;
  2723  000BFC  0660               	decf	_dq_num^0,f,c
  2724                           
  2725                           ;main.c: 473: if (dq_num == 0)
  2726  000BFE  5060               	movf	_dq_num^0,w,c
  2727  000C00  E102               	bnz	l3355
  2728                           
  2729                           ;main.c: 474: dq_num = 2;
  2730  000C02  0E02               	movlw	2
  2731  000C04  6E60               	movwf	_dq_num^0,c
  2732  000C06                     l3355:
  2733                           
  2734                           ;main.c: 475: };main.c: 476: if (pressed_key == 3) {
  2735  000C06  0E03               	movlw	3
  2736  000C08  1835               	xorwf	_pressed_key^0,w,c
  2737  000C0A  E002 EFB3  F000    	bnz	l3061
  2738                           
  2739                           ;main.c: 477: if (dq_num == 1) {
  2740  000C10  0460               	decf	_dq_num^0,w,c
  2741  000C12  E119               	bnz	l3371
  2742                           
  2743                           ;main.c: 478: select = 5;
  2744  000C14  0E05               	movlw	5
  2745                           
  2746                           ;main.c: 479: sub_sel = 1;
  2747  000C16  D9E9               	call	PL64	;call to abstracted procedure
  2748                           
  2749                           ;main.c: 480: clearLCD();
  2750  000C18  EC47  F00C         	call	_clearLCD	;wreg free
  2751                           
  2752                           ;main.c: 481: lcd_gotoxy(1, 1);
  2753  000C1C  0E01               	movlw	1
  2754  000C1E  6E4A               	movwf	lcd_gotoxy@y^0,c
  2755  000C20  EC2B  F00C         	call	_lcd_gotoxy
  2756                           
  2757                           ;main.c: 482: lcdPrint("    Êîëîíà  ");
  2758  000C24  0EA3               	movlw	low STR_21
  2759  000C26  6E4D               	movwf	lcdPrint@t^0,c
  2760  000C28  0E1F               	movlw	high STR_21
  2761  000C2A  6E4E               	movwf	(lcdPrint@t+1)^0,c
  2762  000C2C  ECEB  F008         	call	_lcdPrint	;wreg free
  2763                           
  2764                           ;main.c: 483: lcd_gotoxy(1, 2);
  2765  000C30  D997               	call	PL22	;call to abstracted procedure
  2766  000C32  EC2B  F00C         	call	_lcd_gotoxy
  2767                           
  2768                           ;main.c: 484: lcdPrint("Òåìï Âåðõ:");
  2769  000C36  0EBD               	movlw	low STR_22
  2770  000C38  6E4D               	movwf	lcdPrint@t^0,c
  2771  000C3A  0E1F               	movlw	high STR_22
  2772  000C3C  6E4E               	movwf	(lcdPrint@t+1)^0,c
  2773  000C3E  ECEB  F008         	call	_lcdPrint	;wreg free
  2774                           
  2775                           ;main.c: 485: } else {
  2776  000C42  EFB3  F000         	goto	l3061
  2777  000C46                     l3371:
  2778                           
  2779                           ;main.c: 486: select = 6;
  2780  000C46  0E06               	movlw	6
  2781                           
  2782                           ;main.c: 487: sub_sel = 1;
  2783  000C48  D9D0               	call	PL64	;call to abstracted procedure
  2784                           
  2785                           ;main.c: 488: clearLCD();
  2786  000C4A  EC47  F00C         	call	_clearLCD	;wreg free
  2787                           
  2788                           ;main.c: 489: lcd_gotoxy(1, 1);
  2789  000C4E  0E01               	movlw	1
  2790  000C50  6E4A               	movwf	lcd_gotoxy@y^0,c
  2791  000C52  EC2B  F00C         	call	_lcd_gotoxy
  2792                           
  2793                           ;main.c: 490: lcdPrint("    Êóáîâà  ");
  2794  000C56  0E96               	movlw	low STR_23
  2795  000C58  6E4D               	movwf	lcdPrint@t^0,c
  2796  000C5A  0E1F               	movlw	high STR_23
  2797  000C5C  6E4E               	movwf	(lcdPrint@t+1)^0,c
  2798  000C5E  ECEB  F008         	call	_lcdPrint	;wreg free
  2799                           
  2800                           ;main.c: 491: lcd_gotoxy(1, 2);
  2801  000C62  D97E               	call	PL22	;call to abstracted procedure
  2802  000C64  EC2B  F00C         	call	_lcd_gotoxy
  2803                           
  2804                           ;main.c: 492: lcdPrint("Òåìï öiëi:");
  2805  000C68  0EC8               	movlw	low STR_24
  2806  000C6A  6E4D               	movwf	lcdPrint@t^0,c
  2807  000C6C  0E1F               	movlw	high STR_24
  2808  000C6E  6E4E               	movwf	(lcdPrint@t+1)^0,c
  2809  000C70  ECEB  F008         	call	_lcdPrint	;wreg free
  2810                           
  2811                           ;main.c: 493: set_t_dq2_100 = set_t_dq2 / 10;
  2812  000C74  C029  F046         	movff	_set_t_dq2,___lwdiv@dividend
  2813  000C78  C02A  F047         	movff	_set_t_dq2+1,___lwdiv@dividend+1
  2814  000C7C  6A49               	clrf	(___lwdiv@divisor+1)^0,c
  2815  000C7E  0E0A               	movlw	10
  2816  000C80  6E48               	movwf	___lwdiv@divisor^0,c
  2817  000C82  ECB6  F00A         	call	___lwdiv	;wreg free
  2818  000C86  5046               	movf	?___lwdiv^0,w,c
  2819  000C88  6E31               	movwf	_set_t_dq2_100^0,c
  2820                           
  2821                           ;main.c: 494: set_t_dq2_10 = set_t_dq2 % 10;
  2822  000C8A  D958               	call	PL12	;call to abstracted procedure
  2823  000C8C  D94D               	call	PL8	;call to abstracted procedure
  2824  000C8E  ECFA  F00A         	call	___lwmod	;wreg free
  2825  000C92  504D               	movf	?___lwmod^0,w,c
  2826  000C94  6E30               	movwf	_set_t_dq2_10^0,c
  2827  000C96  EFB3  F000         	goto	l3061
  2828  000C9A                     l3387:
  2829                           
  2830                           ;main.c: 502: lcd_gotoxy(11, 2);
  2831  000C9A  D99C               	call	PL58	;call to abstracted procedure
  2832  000C9C  EC2B  F00C         	call	_lcd_gotoxy
  2833                           
  2834                           ;main.c: 503: lcd_putc('+');
  2835  000CA0  0E2B               	movlw	43
  2836  000CA2  EC68  F00C         	call	_lcd_putc
  2837                           
  2838                           ;main.c: 504: lcd_putc(((set_t_dq1_up / 10) % 10) + 48);
  2839  000CA6  D973               	call	PL38	;call to abstracted procedure
  2840  000CA8  EC4F  F00B         	call	___lbdiv
  2841  000CAC  ECB2  F00B         	call	___lbmod
  2842  000CB0  0F30               	addlw	48
  2843  000CB2  EC68  F00C         	call	_lcd_putc
  2844                           
  2845                           ;main.c: 505: lcd_putc('.');
  2846  000CB6  0E2E               	movlw	46
  2847  000CB8  EC68  F00C         	call	_lcd_putc
  2848                           
  2849                           ;main.c: 506: lcd_putc(((set_t_dq1_up % 10) + 48));
  2850  000CBC  D992               	call	PL62	;call to abstracted procedure
  2851  000CBE  ECB2  F00B         	call	___lbmod
  2852  000CC2  0F30               	addlw	48
  2853  000CC4  EC68  F00C         	call	_lcd_putc
  2854                           
  2855                           ;main.c: 508: if (pressed_key == 1) {
  2856  000CC8  0435               	decf	_pressed_key^0,w,c
  2857  000CCA  E105               	bnz	l3397
  2858                           
  2859                           ;main.c: 509: set_t_dq1_up++;
  2860  000CCC  2A33               	incf	_set_t_dq1_up^0,f,c
  2861                           
  2862                           ;main.c: 510: if (set_t_dq1_up == 11)
  2863  000CCE  0E0B               	movlw	11
  2864  000CD0  1833               	xorwf	_set_t_dq1_up^0,w,c
  2865  000CD2  E101               	bnz	l3397
  2866                           
  2867                           ;main.c: 511: set_t_dq1_up = 0;
  2868  000CD4  6A33               	clrf	_set_t_dq1_up^0,c
  2869  000CD6                     l3397:
  2870                           
  2871                           ;main.c: 512: };main.c: 513: if (pressed_key == 2) {
  2872  000CD6  0E02               	movlw	2
  2873  000CD8  1835               	xorwf	_pressed_key^0,w,c
  2874  000CDA  E105               	bnz	l3405
  2875                           
  2876                           ;main.c: 514: set_t_dq1_up--;
  2877  000CDC  0633               	decf	_set_t_dq1_up^0,f,c
  2878                           
  2879                           ;main.c: 515: if (set_t_dq1_up == 255)
  2880  000CDE  2833               	incf	_set_t_dq1_up^0,w,c
  2881  000CE0  E102               	bnz	l3405
  2882                           
  2883                           ;main.c: 516: set_t_dq1_up = 10;
  2884  000CE2  0E0A               	movlw	10
  2885  000CE4  6E33               	movwf	_set_t_dq1_up^0,c
  2886  000CE6                     l3405:
  2887                           
  2888                           ;main.c: 517: };main.c: 518: if (pressed_key == 3) {
  2889  000CE6  0E03               	movlw	3
  2890  000CE8  1835               	xorwf	_pressed_key^0,w,c
  2891  000CEA  E002 EFB3  F000    	bnz	l3061
  2892                           
  2893                           ;main.c: 519: sub_sel = 2;
  2894                           
  2895                           ;main.c: 520: lcd_gotoxy(1, 2);
  2896  000CF0  D94A               	call	PL34	;call to abstracted procedure
  2897  000CF2  EC2B  F00C         	call	_lcd_gotoxy
  2898                           
  2899                           ;main.c: 521: lcdPrint("Òåìï Íèç:     ");
  2900  000CF6  0E6A               	movlw	low STR_25
  2901  000CF8  6E4D               	movwf	lcdPrint@t^0,c
  2902  000CFA  0E1F               	movlw	high STR_25
  2903  000CFC  6E4E               	movwf	(lcdPrint@t+1)^0,c
  2904  000CFE  ECEB  F008         	call	_lcdPrint	;wreg free
  2905  000D02  EFB3  F000         	goto	l3061
  2906  000D06                     l3413:
  2907                           
  2908                           ;main.c: 525: lcd_gotoxy(10, 2);
  2909  000D06  D963               	call	PL56	;call to abstracted procedure
  2910  000D08  EC2B  F00C         	call	_lcd_gotoxy
  2911                           
  2912                           ;main.c: 526: lcd_putc('-');
  2913  000D0C  0E2D               	movlw	45
  2914  000D0E  EC68  F00C         	call	_lcd_putc
  2915                           
  2916                           ;main.c: 527: lcd_putc(((set_t_dq1_dwn / 10) % 10) + 48);
  2917  000D12  D947               	call	PL42	;call to abstracted procedure
  2918  000D14  EC4F  F00B         	call	___lbdiv
  2919  000D18  ECB2  F00B         	call	___lbmod
  2920  000D1C  0F30               	addlw	48
  2921  000D1E  EC68  F00C         	call	_lcd_putc
  2922                           
  2923                           ;main.c: 528: lcd_putc('.');
  2924  000D22  0E2E               	movlw	46
  2925  000D24  EC68  F00C         	call	_lcd_putc
  2926                           
  2927                           ;main.c: 529: lcd_putc(((set_t_dq1_dwn % 10) + 48));
  2928  000D28  D94B               	call	PL52	;call to abstracted procedure
  2929  000D2A  ECB2  F00B         	call	___lbmod
  2930  000D2E  0F30               	addlw	48
  2931  000D30  EC68  F00C         	call	_lcd_putc
  2932                           
  2933                           ;main.c: 531: if (pressed_key == 1) {
  2934  000D34  0435               	decf	_pressed_key^0,w,c
  2935  000D36  E105               	bnz	l3423
  2936                           
  2937                           ;main.c: 532: set_t_dq1_dwn++;
  2938  000D38  2A32               	incf	_set_t_dq1_dwn^0,f,c
  2939                           
  2940                           ;main.c: 533: if (set_t_dq1_dwn == 11)
  2941  000D3A  0E0B               	movlw	11
  2942  000D3C  1832               	xorwf	_set_t_dq1_dwn^0,w,c
  2943  000D3E  E101               	bnz	l3423
  2944                           
  2945                           ;main.c: 534: set_t_dq1_dwn = 0;
  2946  000D40  6A32               	clrf	_set_t_dq1_dwn^0,c
  2947  000D42                     l3423:
  2948                           
  2949                           ;main.c: 535: };main.c: 536: if (pressed_key == 2) {
  2950  000D42  0E02               	movlw	2
  2951  000D44  1835               	xorwf	_pressed_key^0,w,c
  2952  000D46  E105               	bnz	l3431
  2953                           
  2954                           ;main.c: 537: set_t_dq1_dwn--;
  2955  000D48  0632               	decf	_set_t_dq1_dwn^0,f,c
  2956                           
  2957                           ;main.c: 538: if (set_t_dq1_dwn == 255)
  2958  000D4A  2832               	incf	_set_t_dq1_dwn^0,w,c
  2959  000D4C  E102               	bnz	l3431
  2960                           
  2961                           ;main.c: 539: set_t_dq1_dwn = 10;
  2962  000D4E  0E0A               	movlw	10
  2963  000D50  6E32               	movwf	_set_t_dq1_dwn^0,c
  2964  000D52                     l3431:
  2965                           
  2966                           ;main.c: 540: };main.c: 541: if (pressed_key == 3) {
  2967  000D52  0E03               	movlw	3
  2968  000D54  1835               	xorwf	_pressed_key^0,w,c
  2969  000D56  E002 EFB3  F000    	bnz	l3061
  2970                           
  2971                           ;main.c: 542: select = 1;
  2972  000D5C  0E01               	movlw	1
  2973  000D5E  6E62               	movwf	_select^0,c
  2974                           
  2975                           ;main.c: 543: write_eep(16, set_t_dq1_up);
  2976  000D60  C033  F046         	movff	_set_t_dq1_up,write_eep@data
  2977  000D64  0E10               	movlw	16
  2978  000D66  ECC5  F00B         	call	_write_eep
  2979                           
  2980                           ;main.c: 544: write_eep(17, set_t_dq1_dwn);
  2981  000D6A  C032  F046         	movff	_set_t_dq1_dwn,write_eep@data
  2982  000D6E  0E11               	movlw	17
  2983  000D70  ECC5  F00B         	call	_write_eep
  2984  000D74  EFB3  F000         	goto	l3061
  2985  000D78                     l3441:
  2986  000D78  5034               	movf	_sub_sel^0,w,c
  2987                           
  2988                           ; Switch size 1, requested type "space"
  2989                           ; Number of cases is 2, Range of values is 1 to 2
  2990                           ; switch strategies available:
  2991                           ; Name         Instructions Cycles
  2992                           ; simple_byte            7     4 (average)
  2993                           ;	Chosen strategy is simple_byte
  2994  000D7A  0A01               	xorlw	1	; case 1
  2995  000D7C  E08E               	bz	l3387
  2996  000D7E  0A03               	xorlw	3	; case 2
  2997  000D80  E0C2               	bz	l3413
  2998  000D82  EFB3  F000         	goto	l3061
  2999  000D86                     l3443:
  3000                           
  3001                           ;main.c: 553: lcd_gotoxy(11, 2);
  3002  000D86  D926               	call	PL58	;call to abstracted procedure
  3003  000D88  EC2B  F00C         	call	_lcd_gotoxy
  3004                           
  3005                           ;main.c: 554: lcd_putc('+');
  3006  000D8C  0E2B               	movlw	43
  3007  000D8E  EC68  F00C         	call	_lcd_putc
  3008                           
  3009                           ;main.c: 555: lcd_putc(((set_t_dq2_100 / 100) % 10) + 48);
  3010  000D92  D8EF               	call	PL30	;call to abstracted procedure
  3011  000D94  EC4F  F00B         	call	___lbdiv
  3012  000D98  ECB2  F00B         	call	___lbmod
  3013  000D9C  0F30               	addlw	48
  3014  000D9E  EC68  F00C         	call	_lcd_putc
  3015                           
  3016                           ;main.c: 556: lcd_putc(((set_t_dq2_100 / 10) % 10) + 48);
  3017  000DA2  D8FA               	call	PL40	;call to abstracted procedure
  3018  000DA4  EC4F  F00B         	call	___lbdiv
  3019  000DA8  ECB2  F00B         	call	___lbmod
  3020  000DAC  0F30               	addlw	48
  3021  000DAE  EC68  F00C         	call	_lcd_putc
  3022                           
  3023                           ;main.c: 557: lcd_putc(((set_t_dq2_100 % 10) + 48));
  3024  000DB2  D91F               	call	PL66	;call to abstracted procedure
  3025  000DB4  ECB2  F00B         	call	___lbmod
  3026  000DB8  0F30               	addlw	48
  3027  000DBA  EC68  F00C         	call	_lcd_putc
  3028                           
  3029                           ;main.c: 558: lcd_putc('.');
  3030  000DBE  0E2E               	movlw	46
  3031  000DC0  EC68  F00C         	call	_lcd_putc
  3032                           
  3033                           ;main.c: 559: lcd_putc((set_t_dq2_10 % 10) + 48);
  3034  000DC4  D90A               	call	PL60	;call to abstracted procedure
  3035  000DC6  ECB2  F00B         	call	___lbmod
  3036  000DCA  0F30               	addlw	48
  3037  000DCC  EC68  F00C         	call	_lcd_putc
  3038                           
  3039                           ;main.c: 562: if (pressed_key == 1) {
  3040  000DD0  0435               	decf	_pressed_key^0,w,c
  3041  000DD2  E105               	bnz	l3453
  3042                           
  3043                           ;main.c: 563: set_t_dq2_100++;
  3044  000DD4  2A31               	incf	_set_t_dq2_100^0,f,c
  3045                           
  3046                           ;main.c: 564: if (set_t_dq2_100 >= 105)
  3047  000DD6  0E68               	movlw	104
  3048  000DD8  6431               	cpfsgt	_set_t_dq2_100^0,c
  3049  000DDA  D001               	goto	l3453
  3050                           
  3051                           ;main.c: 565: set_t_dq2_100 = 0;
  3052  000DDC  6A31               	clrf	_set_t_dq2_100^0,c
  3053  000DDE                     l3453:
  3054                           
  3055                           ;main.c: 566: };main.c: 567: if (pressed_key == 2) {
  3056  000DDE  0E02               	movlw	2
  3057  000DE0  1835               	xorwf	_pressed_key^0,w,c
  3058  000DE2  E105               	bnz	l3461
  3059                           
  3060                           ;main.c: 568: set_t_dq2_100--;
  3061  000DE4  0631               	decf	_set_t_dq2_100^0,f,c
  3062                           
  3063                           ;main.c: 569: if (set_t_dq2_100 == 255)
  3064  000DE6  2831               	incf	_set_t_dq2_100^0,w,c
  3065  000DE8  E102               	bnz	l3461
  3066                           
  3067                           ;main.c: 570: set_t_dq2_100 = 105;
  3068  000DEA  0E69               	movlw	105
  3069  000DEC  6E31               	movwf	_set_t_dq2_100^0,c
  3070  000DEE                     l3461:
  3071                           
  3072                           ;main.c: 571: };main.c: 572: if (pressed_key == 3) {
  3073  000DEE  0E03               	movlw	3
  3074  000DF0  1835               	xorwf	_pressed_key^0,w,c
  3075  000DF2  E002 EFB3  F000    	bnz	l3061
  3076                           
  3077                           ;main.c: 573: sub_sel = 2;
  3078                           
  3079                           ;main.c: 574: lcd_gotoxy(1, 2);
  3080  000DF8  D8C6               	call	PL34	;call to abstracted procedure
  3081  000DFA  EC2B  F00C         	call	_lcd_gotoxy
  3082                           
  3083                           ;main.c: 575: lcdPrint("Òåìï äðá:      ");
  3084  000DFE  0EFB               	movlw	low STR_26
  3085  000E00  6E4D               	movwf	lcdPrint@t^0,c
  3086  000E02  0E1E               	movlw	high STR_26
  3087  000E04  6E4E               	movwf	(lcdPrint@t+1)^0,c
  3088  000E06  ECEB  F008         	call	_lcdPrint	;wreg free
  3089  000E0A  EFB3  F000         	goto	l3061
  3090  000E0E                     l3469:
  3091                           
  3092                           ;main.c: 579: lcd_gotoxy(10, 2);
  3093  000E0E  D8DF               	call	PL56	;call to abstracted procedure
  3094  000E10  EC2B  F00C         	call	_lcd_gotoxy
  3095                           
  3096                           ;main.c: 580: lcd_putc('+');
  3097  000E14  0E2B               	movlw	43
  3098  000E16  EC68  F00C         	call	_lcd_putc
  3099                           
  3100                           ;main.c: 581: lcd_putc(((set_t_dq2_100 / 100) % 10) + 48);
  3101  000E1A  D8AB               	call	PL30	;call to abstracted procedure
  3102  000E1C  EC4F  F00B         	call	___lbdiv
  3103  000E20  ECB2  F00B         	call	___lbmod
  3104  000E24  0F30               	addlw	48
  3105  000E26  EC68  F00C         	call	_lcd_putc
  3106                           
  3107                           ;main.c: 582: lcd_putc(((set_t_dq2_100 / 10) % 10) + 48);
  3108  000E2A  D8B6               	call	PL40	;call to abstracted procedure
  3109  000E2C  EC4F  F00B         	call	___lbdiv
  3110  000E30  ECB2  F00B         	call	___lbmod
  3111  000E34  0F30               	addlw	48
  3112  000E36  EC68  F00C         	call	_lcd_putc
  3113                           
  3114                           ;main.c: 583: lcd_putc(((set_t_dq2_100 % 10) + 48));
  3115  000E3A  D8DB               	call	PL66	;call to abstracted procedure
  3116  000E3C  ECB2  F00B         	call	___lbmod
  3117  000E40  0F30               	addlw	48
  3118  000E42  EC68  F00C         	call	_lcd_putc
  3119                           
  3120                           ;main.c: 584: lcd_putc('.');
  3121  000E46  0E2E               	movlw	46
  3122  000E48  EC68  F00C         	call	_lcd_putc
  3123                           
  3124                           ;main.c: 585: lcd_putc((set_t_dq2_10 % 10) + 48);
  3125  000E4C  D8C6               	call	PL60	;call to abstracted procedure
  3126  000E4E  ECB2  F00B         	call	___lbmod
  3127  000E52  0F30               	addlw	48
  3128  000E54  EC68  F00C         	call	_lcd_putc
  3129                           
  3130                           ;main.c: 586: lcd_putc(' ');
  3131  000E58  0E20               	movlw	32
  3132  000E5A  EC68  F00C         	call	_lcd_putc
  3133                           
  3134                           ;main.c: 588: if (pressed_key == 1) {
  3135  000E5E  0435               	decf	_pressed_key^0,w,c
  3136  000E60  E105               	bnz	l3479
  3137                           
  3138                           ;main.c: 589: set_t_dq2_10++;
  3139  000E62  2A30               	incf	_set_t_dq2_10^0,f,c
  3140                           
  3141                           ;main.c: 590: if (set_t_dq2_10 == 10)
  3142  000E64  0E0A               	movlw	10
  3143  000E66  1830               	xorwf	_set_t_dq2_10^0,w,c
  3144  000E68  E101               	bnz	l3479
  3145                           
  3146                           ;main.c: 591: set_t_dq2_10 = 0;
  3147  000E6A  6A30               	clrf	_set_t_dq2_10^0,c
  3148  000E6C                     l3479:
  3149                           
  3150                           ;main.c: 592: };main.c: 593: if (pressed_key == 2) {
  3151  000E6C  0E02               	movlw	2
  3152  000E6E  1835               	xorwf	_pressed_key^0,w,c
  3153  000E70  E105               	bnz	l3487
  3154                           
  3155                           ;main.c: 594: set_t_dq2_10--;
  3156  000E72  0630               	decf	_set_t_dq2_10^0,f,c
  3157                           
  3158                           ;main.c: 595: if (set_t_dq2_10 == 255)
  3159  000E74  2830               	incf	_set_t_dq2_10^0,w,c
  3160  000E76  E102               	bnz	l3487
  3161                           
  3162                           ;main.c: 596: set_t_dq2_10 = 9;
  3163  000E78  0E09               	movlw	9
  3164  000E7A  6E30               	movwf	_set_t_dq2_10^0,c
  3165  000E7C                     l3487:
  3166                           
  3167                           ;main.c: 597: };main.c: 598: if (pressed_key == 3) {
  3168  000E7C  0E03               	movlw	3
  3169  000E7E  1835               	xorwf	_pressed_key^0,w,c
  3170  000E80  E002 EFB3  F000    	bnz	l3061
  3171                           
  3172                           ;main.c: 599: select = 1;
  3173  000E86  0E01               	movlw	1
  3174  000E88  6E62               	movwf	_select^0,c
  3175                           
  3176                           ;main.c: 600: set_t_dq2 = (set_t_dq2_100 * 10) + set_t_dq2_10;
  3177  000E8A  5031               	movf	_set_t_dq2_100^0,w,c
  3178  000E8C  0D0A               	mullw	10
  3179  000E8E  CFF3 F057          	movff	prodl,??_main
  3180  000E92  CFF4 F058          	movff	prodh,??_main+1
  3181  000E96  5030               	movf	_set_t_dq2_10^0,w,c
  3182  000E98  2457               	addwf	??_main^0,w,c
  3183  000E9A  6E29               	movwf	_set_t_dq2^0,c
  3184  000E9C  0E00               	movlw	0
  3185  000E9E  2058               	addwfc	(??_main+1)^0,w,c
  3186  000EA0  6E2A               	movwf	(_set_t_dq2+1)^0,c
  3187                           
  3188                           ;main.c: 601: write_eep(18, ((unsigned char)(((set_t_dq2)>>8)&0xFF)));
  3189  000EA2  C02A  F046         	movff	_set_t_dq2+1,write_eep@data
  3190  000EA6  0E12               	movlw	18
  3191  000EA8  ECC5  F00B         	call	_write_eep
  3192                           
  3193                           ;main.c: 602: write_eep(19, ((unsigned char)((set_t_dq2)&0xFF)));
  3194  000EAC  C029  F046         	movff	_set_t_dq2,write_eep@data
  3195  000EB0  0E13               	movlw	19
  3196  000EB2  ECC5  F00B         	call	_write_eep
  3197  000EB6  D5E8               	goto	l3245
  3198  000EB8                     l3501:
  3199  000EB8  5034               	movf	_sub_sel^0,w,c
  3200                           
  3201                           ; Switch size 1, requested type "space"
  3202                           ; Number of cases is 2, Range of values is 1 to 2
  3203                           ; switch strategies available:
  3204                           ; Name         Instructions Cycles
  3205                           ; simple_byte            7     4 (average)
  3206                           ;	Chosen strategy is simple_byte
  3207  000EBA  0A01               	xorlw	1	; case 1
  3208  000EBC  E101 D763          	bz	l3443
  3209  000EC0  0A03               	xorlw	3	; case 2
  3210  000EC2  E0A5               	bz	l3469
  3211  000EC4  EFB3  F000         	goto	l3061
  3212  000EC8                     l3505:
  3213  000EC8  5062               	movf	_select^0,w,c
  3214                           
  3215                           ; Switch size 1, requested type "space"
  3216                           ; Number of cases is 8, Range of values is 1 to 8
  3217                           ; switch strategies available:
  3218                           ; Name         Instructions Cycles
  3219                           ; simple_byte           25    13 (average)
  3220                           ;	Chosen strategy is simple_byte
  3221  000ECA  0A01               	xorlw	1	; case 1
  3222  000ECC  E102 EFBD  F000    	bz	l3069
  3223  000ED2  0A03               	xorlw	3	; case 2
  3224  000ED4  E101 D5DD          	bz	l3247
  3225  000ED8  0A01               	xorlw	1	; case 3
  3226  000EDA  E102 EFB3  F000    	bz	l3061
  3227  000EE0  0A07               	xorlw	7	; case 4
  3228  000EE2  E101 D677          	bz	l3337
  3229  000EE6  0A01               	xorlw	1	; case 5
  3230  000EE8  E101 D746          	bz	l3441
  3231  000EEC  0A03               	xorlw	3	; case 6
  3232  000EEE  E0E4               	bz	l3501
  3233  000EF0  0A01               	xorlw	1	; case 7
  3234  000EF2  E101 D5FC          	bz	l3275
  3235  000EF6  0A0F               	xorlw	15	; case 8
  3236  000EF8  E101 D635          	bz	l3305
  3237  000EFC  EFB3  F000         	goto	l3061
  3238  000F00                     __end_of_main:
  3239                           	callstack 0
  3240  000F00                     PL2:
  3241                           	callstack 24
  3242  000F00  C046  F04D         	movff	?___lwdiv,___lwmod@dividend
  3243  000F04  C047  F04E         	movff	?___lwdiv+1,___lwmod@dividend+1
  3244  000F08  6A50               	clrf	(___lwmod@divisor+1)^0,c
  3245  000F0A  0E0A               	movlw	10
  3246  000F0C  6E4F               	movwf	___lwmod@divisor^0,c
  3247  000F0E  0C0A               	retlw	10
  3248  000F10                     __end_ofPL2:
  3249                           	callstack 0
  3250  000F10                     PL4:
  3251                           	callstack 24
  3252  000F10  6E48               	movwf	___lwdiv@divisor^0,c
  3253  000F12  C05E  F046         	movff	_temperature_1,___lwdiv@dividend
  3254  000F16  C05F  F047         	movff	_temperature_1+1,___lwdiv@dividend+1
  3255  000F1A  0012               	return	
  3256  000F1C                     __end_ofPL4:
  3257                           	callstack 0
  3258  000F1C                     PL6:
  3259                           	callstack 24
  3260  000F1C  6E48               	movwf	___lwdiv@divisor^0,c
  3261  000F1E  C05C  F046         	movff	_temperature_2,___lwdiv@dividend
  3262  000F22  C05D  F047         	movff	_temperature_2+1,___lwdiv@dividend+1
  3263  000F26  0012               	return	
  3264  000F28                     __end_ofPL6:
  3265                           	callstack 0
  3266  000F28                     PL8:
  3267                           	callstack 24
  3268  000F28  6A50               	clrf	(___lwmod@divisor+1)^0,c
  3269  000F2A  0E0A               	movlw	10
  3270  000F2C  6E4F               	movwf	___lwmod@divisor^0,c
  3271  000F2E  0C0A               	retlw	10
  3272  000F30                     __end_ofPL8:
  3273                           	callstack 0
  3274  000F30                     PL10:
  3275                           	callstack 24
  3276  000F30  6E48               	movwf	___lwdiv@divisor^0,c
  3277  000F32  C029  F046         	movff	_set_t_dq2,___lwdiv@dividend
  3278  000F36  C02A  F047         	movff	_set_t_dq2+1,___lwdiv@dividend+1
  3279  000F3A  0012               	return	
  3280  000F3C                     __end_ofPL10:
  3281                           	callstack 0
  3282  000F3C                     PL12:
  3283                           	callstack 24
  3284  000F3C  C029  F04D         	movff	_set_t_dq2,___lwmod@dividend
  3285  000F40  C02A  F04E         	movff	_set_t_dq2+1,___lwmod@dividend+1
  3286  000F44  0012               	return	
  3287  000F46                     __end_ofPL12:
  3288                           	callstack 0
  3289  000F46                     PL14:
  3290                           	callstack 24
  3291  000F46  C05E  F04D         	movff	_temperature_1,___lwmod@dividend
  3292  000F4A  C05F  F04E         	movff	_temperature_1+1,___lwmod@dividend+1
  3293  000F4E  0012               	return	
  3294  000F50                     __end_ofPL14:
  3295                           	callstack 0
  3296  000F50                     PL16:
  3297                           	callstack 24
  3298  000F50  C05C  F04D         	movff	_temperature_2,___lwmod@dividend
  3299  000F54  C05D  F04E         	movff	_temperature_2+1,___lwmod@dividend+1
  3300  000F58  0012               	return	
  3301  000F5A                     __end_ofPL16:
  3302                           	callstack 0
  3303  000F5A                     PL18:
  3304                           	callstack 24
  3305  000F5A  0E03               	movlw	3
  3306  000F5C  6E49               	movwf	(___lwdiv@divisor+1)^0,c
  3307  000F5E  0CE8               	retlw	232
  3308  000F60                     __end_ofPL18:
  3309                           	callstack 0
  3310  000F60                     PL22:
  3311                           	callstack 24
  3312  000F60  0E02               	movlw	2
  3313  000F62  6E4A               	movwf	lcd_gotoxy@y^0,c
  3314  000F64  0C01               	retlw	1
  3315  000F66                     __end_ofPL22:
  3316                           	callstack 0
  3317  000F66                     PL28:
  3318                           	callstack 24
  3319  000F66  6E48               	movwf	___lwdiv@divisor^0,c
  3320  000F68  C027  F046         	movff	_temp1_fix,___lwdiv@dividend
  3321  000F6C  C028  F047         	movff	_temp1_fix+1,___lwdiv@dividend+1
  3322  000F70  0012               	return	
  3323  000F72                     __end_ofPL28:
  3324                           	callstack 0
  3325  000F72                     PL30:
  3326                           	callstack 24
  3327  000F72  0E0A               	movlw	10
  3328  000F74  6E4A               	movwf	___lbmod@divisor^0,c
  3329  000F76  0E64               	movlw	100
  3330  000F78  6E46               	movwf	___lbdiv@divisor^0,c
  3331  000F7A  5031               	movf	_set_t_dq2_100^0,w,c
  3332  000F7C  0012               	return	
  3333  000F7E                     __end_ofPL30:
  3334                           	callstack 0
  3335  000F7E                     PL32:
  3336                           	callstack 24
  3337  000F7E  6E62               	movwf	_select^0,c
  3338  000F80  0E01               	movlw	1
  3339  000F82  6E4A               	movwf	lcd_gotoxy@y^0,c
  3340  000F84  0C01               	retlw	1
  3341  000F86                     __end_ofPL32:
  3342                           	callstack 0
  3343  000F86                     PL34:
  3344                           	callstack 24
  3345  000F86  0E02               	movlw	2
  3346  000F88  6E34               	movwf	_sub_sel^0,c
  3347  000F8A  6E4A               	movwf	lcd_gotoxy@y^0,c
  3348  000F8C  0C01               	retlw	1
  3349  000F8E                     __end_ofPL34:
  3350                           	callstack 0
  3351  000F8E                     PL38:
  3352                           	callstack 24
  3353  000F8E  0E0A               	movlw	10
  3354  000F90  6E4A               	movwf	___lbmod@divisor^0,c
  3355  000F92  6E46               	movwf	___lbdiv@divisor^0,c
  3356  000F94  5033               	movf	_set_t_dq1_up^0,w,c
  3357  000F96  0012               	return	
  3358  000F98                     __end_ofPL38:
  3359                           	callstack 0
  3360  000F98                     PL40:
  3361                           	callstack 24
  3362  000F98  0E0A               	movlw	10
  3363  000F9A  6E4A               	movwf	___lbmod@divisor^0,c
  3364  000F9C  6E46               	movwf	___lbdiv@divisor^0,c
  3365  000F9E  5031               	movf	_set_t_dq2_100^0,w,c
  3366  000FA0  0012               	return	
  3367  000FA2                     __end_ofPL40:
  3368                           	callstack 0
  3369  000FA2                     PL42:
  3370                           	callstack 24
  3371  000FA2  0E0A               	movlw	10
  3372  000FA4  6E4A               	movwf	___lbmod@divisor^0,c
  3373  000FA6  6E46               	movwf	___lbdiv@divisor^0,c
  3374  000FA8  5032               	movf	_set_t_dq1_dwn^0,w,c
  3375  000FAA  0012               	return	
  3376  000FAC                     __end_ofPL42:
  3377                           	callstack 0
  3378  000FAC                     PL46:
  3379                           	callstack 24
  3380  000FAC  0EFA               	movlw	low STR_5
  3381  000FAE  6E47               	movwf	EUSART_Write_Str@t^0,c
  3382  000FB0  0E1F               	movlw	high STR_5
  3383  000FB2  6E48               	movwf	(EUSART_Write_Str@t+1)^0,c
  3384  000FB4  0012               	return	
  3385  000FB6                     __end_ofPL46:
  3386                           	callstack 0
  3387  000FB6                     PL48:
  3388                           	callstack 24
  3389  000FB6  0EF6               	movlw	low STR_8
  3390  000FB8  6E47               	movwf	EUSART_Write_Str@t^0,c
  3391  000FBA  0E1F               	movlw	high STR_8
  3392  000FBC  6E48               	movwf	(EUSART_Write_Str@t+1)^0,c
  3393  000FBE  0012               	return	
  3394  000FC0                     __end_ofPL48:
  3395                           	callstack 0
  3396  000FC0                     PL52:
  3397                           	callstack 24
  3398  000FC0  0E0A               	movlw	10
  3399  000FC2  6E4A               	movwf	___lbmod@divisor^0,c
  3400  000FC4  5032               	movf	_set_t_dq1_dwn^0,w,c
  3401  000FC6  0012               	return	
  3402  000FC8                     __end_ofPL52:
  3403                           	callstack 0
  3404  000FC8                     PL54:
  3405                           	callstack 24
  3406  000FC8  0E01               	movlw	1
  3407  000FCA  6E4A               	movwf	lcd_gotoxy@y^0,c
  3408  000FCC  0C10               	retlw	16
  3409  000FCE                     __end_ofPL54:
  3410                           	callstack 0
  3411  000FCE                     PL56:
  3412                           	callstack 24
  3413  000FCE  0E02               	movlw	2
  3414  000FD0  6E4A               	movwf	lcd_gotoxy@y^0,c
  3415  000FD2  0C0A               	retlw	10
  3416  000FD4                     __end_ofPL56:
  3417                           	callstack 0
  3418  000FD4                     PL58:
  3419                           	callstack 24
  3420  000FD4  0E02               	movlw	2
  3421  000FD6  6E4A               	movwf	lcd_gotoxy@y^0,c
  3422  000FD8  0C0B               	retlw	11
  3423  000FDA                     __end_ofPL58:
  3424                           	callstack 0
  3425  000FDA                     PL60:
  3426                           	callstack 24
  3427  000FDA  0E0A               	movlw	10
  3428  000FDC  6E4A               	movwf	___lbmod@divisor^0,c
  3429  000FDE  5030               	movf	_set_t_dq2_10^0,w,c
  3430  000FE0  0012               	return	
  3431  000FE2                     __end_ofPL60:
  3432                           	callstack 0
  3433  000FE2                     PL62:
  3434                           	callstack 24
  3435  000FE2  0E0A               	movlw	10
  3436  000FE4  6E4A               	movwf	___lbmod@divisor^0,c
  3437  000FE6  5033               	movf	_set_t_dq1_up^0,w,c
  3438  000FE8  0012               	return	
  3439  000FEA                     __end_ofPL62:
  3440                           	callstack 0
  3441  000FEA                     PL64:
  3442                           	callstack 24
  3443  000FEA  6E62               	movwf	_select^0,c
  3444  000FEC  0E01               	movlw	1
  3445  000FEE  6E34               	movwf	_sub_sel^0,c
  3446  000FF0  0C01               	retlw	1
  3447  000FF2                     __end_ofPL64:
  3448                           	callstack 0
  3449  000FF2                     PL66:
  3450                           	callstack 24
  3451  000FF2  0E0A               	movlw	10
  3452  000FF4  6E4A               	movwf	___lbmod@divisor^0,c
  3453  000FF6  5031               	movf	_set_t_dq2_100^0,w,c
  3454  000FF8  0012               	return	
  3455  000FFA                     __end_ofPL66:
  3456                           	callstack 0
  3457  000FFA                     PL68:
  3458                           	callstack 26
  3459  000FFA  6A47               	clrf	(Delay_ms@delay+1)^0,c
  3460  000FFC  0E0A               	movlw	10
  3461  000FFE  6E46               	movwf	Delay_ms@delay^0,c
  3462  001000  0C0A               	retlw	10
  3463  001002                     __end_ofPL68:
  3464                           	callstack 0
  3465                           
  3466 ;; *************** function _lcd_putc *****************
  3467 ;; Defined at:
  3468 ;;		line 90 in file "hd44780.c"
  3469 ;; Parameters:    Size  Location     Type
  3470 ;;  c               1    wreg     unsigned char 
  3471 ;; Auto vars:     Size  Location     Type
  3472 ;;  c               1    7[COMRAM] unsigned char 
  3473 ;; Return value:  Size  Location     Type
  3474 ;;                  1    wreg      void 
  3475 ;; Registers used:
  3476 ;;		wreg, status,2, status,0, cstack
  3477 ;; Tracked objects:
  3478 ;;		On entry : 0/0
  3479 ;;		On exit  : 0/0
  3480 ;;		Unchanged: 0/0
  3481 ;; Data sizes:     COMRAM   BANK0   BANK1
  3482 ;;      Params:         0       0       0
  3483 ;;      Locals:         1       0       0
  3484 ;;      Temps:          0       0       0
  3485 ;;      Totals:         1       0       0
  3486 ;;Total ram usage:        1 bytes
  3487 ;; Hardware stack levels used:    1
  3488 ;; Hardware stack levels required when called:    4
  3489 ;; This function calls:
  3490 ;;		_lcdWrite
  3491 ;; This function is called by:
  3492 ;;		_main
  3493 ;; This function uses a non-reentrant model
  3494 ;;
  3495                           
  3496                           	psect	text1
  3497  0018D0                     __ptext1:
  3498                           	callstack 0
  3499  0018D0                     _lcd_putc:
  3500                           	callstack 26
  3501                           
  3502                           ;incstack = 0
  3503                           ;lcd_putc@c stored from wreg
  3504  0018D0  6E4A               	movwf	lcd_putc@c^0,c
  3505                           
  3506                           ;hd44780.c: 92: lcdWrite(c, DATA);
  3507  0018D2  0E01               	movlw	1
  3508  0018D4  6E48               	movwf	lcdWrite@type^0,c
  3509  0018D6  504A               	movf	lcd_putc@c^0,w,c
  3510  0018D8  EFE9  F00B         	goto	_lcdWrite
  3511  0018DC                     __end_of_lcd_putc:
  3512                           	callstack 0
  3513                           
  3514 ;; *************** function _lcdPrint *****************
  3515 ;; Defined at:
  3516 ;;		line 96 in file "hd44780.c"
  3517 ;; Parameters:    Size  Location     Type
  3518 ;;  t               2   10[COMRAM] PTR const unsigned char 
  3519 ;;		 -> STR_26(16), STR_25(15), STR_24(11), STR_23(13), 
  3520 ;;		 -> STR_22(11), STR_21(13), STR_20(15), STR_19(15), 
  3521 ;;		 -> STR_18(14), STR_17(16), STR_16(16), STR_15(16), 
  3522 ;;		 -> STR_14(7), STR_13(8), STR_12(8), STR_4(13), 
  3523 ;;		 -> STR_3(16), STR_2(16), STR_1(16), 
  3524 ;; Auto vars:     Size  Location     Type
  3525 ;;		None
  3526 ;; Return value:  Size  Location     Type
  3527 ;;                  1    wreg      void 
  3528 ;; Registers used:
  3529 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3530 ;; Tracked objects:
  3531 ;;		On entry : 0/0
  3532 ;;		On exit  : 0/0
  3533 ;;		Unchanged: 0/0
  3534 ;; Data sizes:     COMRAM   BANK0   BANK1
  3535 ;;      Params:         2       0       0
  3536 ;;      Locals:         0       0       0
  3537 ;;      Temps:          4       0       0
  3538 ;;      Totals:         6       0       0
  3539 ;;Total ram usage:        6 bytes
  3540 ;; Hardware stack levels used:    1
  3541 ;; Hardware stack levels required when called:    5
  3542 ;; This function calls:
  3543 ;;		_lcdWrite
  3544 ;;		_lcd_gotoxy
  3545 ;; This function is called by:
  3546 ;;		_main
  3547 ;; This function uses a non-reentrant model
  3548 ;;
  3549                           
  3550                           	psect	text2
  3551  0011D6                     __ptext2:
  3552                           	callstack 0
  3553  0011D6                     _lcdPrint:
  3554                           	callstack 25
  3555                           
  3556                           ;hd44780.c: 97: while(*t != '\0'){
  3557                           
  3558                           ;incstack = 0
  3559  0011D6  D046               	goto	l2779
  3560  0011D8                     l2759:
  3561                           
  3562                           ;hd44780.c: 100: lcdWrite(1, COMMAND);
  3563  0011D8  D84F               	call	PL50	;call to abstracted procedure
  3564  0011DA  ECE9  F00B         	call	_lcdWrite
  3565                           
  3566                           ;hd44780.c: 101: _delay((unsigned long)((2)*(8000000/4000.0)));
  3567  0011DE  0E06               	movlw	6
  3568  0011E0  6E4F               	movwf	??_lcdPrint^0,c
  3569  0011E2  0E30               	movlw	48
  3570  0011E4                     u2807:
  3571  0011E4  2EE8               	decfsz	wreg,f,c
  3572  0011E6  D7FE               	bra	u2807
  3573  0011E8  2E4F               	decfsz	??_lcdPrint^0,f,c
  3574  0011EA  D7FC               	bra	u2807
  3575  0011EC  D000               	nop2	
  3576                           
  3577                           ;hd44780.c: 102: break;
  3578  0011EE  D038               	goto	l2777
  3579  0011F0                     l2763:
  3580                           
  3581                           ;hd44780.c: 105: lcd_gotoxy(1, 2);
  3582  0011F0  ECB0  F007         	call	PL22	;call to abstracted procedure
  3583  0011F4  EC2B  F00C         	call	_lcd_gotoxy
  3584                           
  3585                           ;hd44780.c: 106: break;
  3586  0011F8  D033               	goto	l2777
  3587  0011FA                     l2765:
  3588                           
  3589                           ;hd44780.c: 109: lcdWrite(0x10, COMMAND);
  3590  0011FA  0E00               	movlw	0
  3591  0011FC  6E48               	movwf	lcdWrite@type^0,c
  3592  0011FE  0E10               	movlw	16
  3593  001200  ECE9  F00B         	call	_lcdWrite
  3594                           
  3595                           ;hd44780.c: 110: break;
  3596  001204  D02D               	goto	l2777
  3597  001206                     l2767:
  3598                           
  3599                           ;hd44780.c: 113: if (*t < 0xC0) {
  3600  001206  C04D  FFF6         	movff	lcdPrint@t,tblptrl
  3601  00120A  C04E  FFF7         	movff	lcdPrint@t+1,tblptrh
  3602  00120E                     	if	0	;tblptru may be non-zero
  3603  00120E                     	endif
  3604  00120E                     	if	0	;tblptru may be non-zero
  3605  00120E                     	endif
  3606  00120E  0EC0               	movlw	192
  3607  001210  0008               	tblrd		*
  3608  001212  60F5               	cpfslt	tablat,c
  3609  001214  D006               	goto	l2771
  3610                           
  3611                           ;hd44780.c: 114: lcdWrite(*t, DATA);
  3612  001216  0E01               	movlw	1
  3613  001218  6E48               	movwf	lcdWrite@type^0,c
  3614  00121A  D827               	call	PL20	;call to abstracted procedure
  3615  00121C  ECE9  F00B         	call	_lcdWrite
  3616                           
  3617                           ;hd44780.c: 115: } else {
  3618  001220  D01F               	goto	l2777
  3619  001222                     l2771:
  3620                           
  3621                           ;hd44780.c: 116: lcdWrite(HD44780_CYR[(unsigned char) (*t) - 0xC0], DATA);
  3622  001222  0E01               	movlw	1
  3623  001224  6E48               	movwf	lcdWrite@type^0,c
  3624  001226  0E40               	movlw	64
  3625  001228  6E4F               	movwf	??_lcdPrint^0,c
  3626  00122A  6850               	setf	(??_lcdPrint+1)^0,c
  3627  00122C  D81E               	call	PL20	;call to abstracted procedure
  3628  00122E  6E51               	movwf	(??_lcdPrint+2)^0,c
  3629  001230  6A52               	clrf	(??_lcdPrint+3)^0,c
  3630  001232  504F               	movf	??_lcdPrint^0,w,c
  3631  001234  2651               	addwf	(??_lcdPrint+2)^0,f,c
  3632  001236  5050               	movf	(??_lcdPrint+1)^0,w,c
  3633  001238  2252               	addwfc	(??_lcdPrint+3)^0,f,c
  3634  00123A  0E93               	movlw	low _HD44780_CYR
  3635  00123C  2451               	addwf	(??_lcdPrint+2)^0,w,c
  3636  00123E  6EF6               	movwf	tblptrl,c
  3637  001240  0E1E               	movlw	high _HD44780_CYR
  3638  001242  2052               	addwfc	(??_lcdPrint+3)^0,w,c
  3639  001244  6EF7               	movwf	tblptrh,c
  3640  001246                     	if	0	;There are less than 3 active tblptr bytes
  3641  001246                     	endif
  3642  001246  0008               	tblrd		*
  3643  001248  50F5               	movf	tablat,w,c
  3644  00124A  ECE9  F00B         	call	_lcdWrite
  3645  00124E  D008               	goto	l2777
  3646  001250                     l2775:
  3647  001250  D80C               	call	PL20	;call to abstracted procedure
  3648                           
  3649                           ; Switch size 1, requested type "space"
  3650                           ; Number of cases is 3, Range of values is 8 to 12
  3651                           ; switch strategies available:
  3652                           ; Name         Instructions Cycles
  3653                           ; simple_byte           10     6 (average)
  3654                           ;	Chosen strategy is simple_byte
  3655  001252  0A08               	xorlw	8	; case 8
  3656  001254  E0D2               	bz	l2765
  3657  001256  0A02               	xorlw	2	; case 10
  3658  001258  E0CB               	bz	l2763
  3659  00125A  0A06               	xorlw	6	; case 12
  3660  00125C  E0BD               	bz	l2759
  3661  00125E  D7D3               	goto	l2767
  3662  001260                     l2777:
  3663                           
  3664                           ;hd44780.c: 121: *t++;
  3665  001260  4A4D               	infsnz	lcdPrint@t^0,f,c
  3666  001262  2A4E               	incf	(lcdPrint@t+1)^0,f,c
  3667  001264                     l2779:
  3668  001264  D802               	call	PL20	;call to abstracted procedure
  3669  001266  E1F4               	bnz	l2775
  3670  001268  0012               	return		;funcret
  3671  00126A                     __end_of_lcdPrint:
  3672                           	callstack 0
  3673  00126A                     PL20:
  3674                           	callstack 25
  3675  00126A  C04D  FFF6         	movff	lcdPrint@t,tblptrl
  3676  00126E  C04E  FFF7         	movff	lcdPrint@t+1,tblptrh
  3677  001272                     	if	0	;tblptru may be non-zero
  3678  001272                     	endif
  3679  001272                     	if	0	;tblptru may be non-zero
  3680  001272                     	endif
  3681  001272  0008               	tblrd		*
  3682  001274  50F5               	movf	tablat,w,c
  3683  001276  0012               	return	
  3684  001278                     __end_ofPL20:
  3685                           	callstack 0
  3686  001278                     PL50:
  3687                           	callstack 26
  3688  001278  0E00               	movlw	0
  3689  00127A  6E48               	movwf	lcdWrite@type^0,c
  3690  00127C  0C01               	retlw	1
  3691  00127E                     __end_ofPL50:
  3692                           	callstack 0
  3693                           
  3694 ;; *************** function _lcd_gotoxy *****************
  3695 ;; Defined at:
  3696 ;;		line 76 in file "hd44780.c"
  3697 ;; Parameters:    Size  Location     Type
  3698 ;;  x               1    wreg     unsigned char 
  3699 ;;  y               1    7[COMRAM] unsigned char 
  3700 ;; Auto vars:     Size  Location     Type
  3701 ;;  x               1    8[COMRAM] unsigned char 
  3702 ;;  address         1    9[COMRAM] unsigned char 
  3703 ;; Return value:  Size  Location     Type
  3704 ;;                  1    wreg      void 
  3705 ;; Registers used:
  3706 ;;		wreg, status,2, status,0, cstack
  3707 ;; Tracked objects:
  3708 ;;		On entry : 0/0
  3709 ;;		On exit  : 0/0
  3710 ;;		Unchanged: 0/0
  3711 ;; Data sizes:     COMRAM   BANK0   BANK1
  3712 ;;      Params:         1       0       0
  3713 ;;      Locals:         2       0       0
  3714 ;;      Temps:          0       0       0
  3715 ;;      Totals:         3       0       0
  3716 ;;Total ram usage:        3 bytes
  3717 ;; Hardware stack levels used:    1
  3718 ;; Hardware stack levels required when called:    4
  3719 ;; This function calls:
  3720 ;;		_lcdWrite
  3721 ;; This function is called by:
  3722 ;;		_main
  3723 ;;		_lcdPrint
  3724 ;; This function uses a non-reentrant model
  3725 ;;
  3726                           
  3727                           	psect	text3
  3728  001856                     __ptext3:
  3729                           	callstack 0
  3730  001856                     _lcd_gotoxy:
  3731                           	callstack 26
  3732                           
  3733                           ;incstack = 0
  3734                           ;lcd_gotoxy@x stored from wreg
  3735  001856  6E4B               	movwf	lcd_gotoxy@x^0,c
  3736                           
  3737                           ;hd44780.c: 77: uint8_t address;;hd44780.c: 79: if (y != 1)
  3738  001858  044A               	decf	lcd_gotoxy@y^0,w,c
  3739  00185A  E003               	bz	l449
  3740                           
  3741                           ;hd44780.c: 80: address = 0x40;
  3742  00185C  0E40               	movlw	64
  3743  00185E  6E4C               	movwf	lcd_gotoxy@address^0,c
  3744  001860  D001               	goto	l2559
  3745  001862                     l449:
  3746                           
  3747                           ;hd44780.c: 81: else;hd44780.c: 82: address = 0;
  3748  001862  6A4C               	clrf	lcd_gotoxy@address^0,c
  3749  001864                     l2559:
  3750                           
  3751                           ;hd44780.c: 84: address += x - 1;
  3752  001864  044B               	decf	lcd_gotoxy@x^0,w,c
  3753  001866  264C               	addwf	lcd_gotoxy@address^0,f,c
  3754                           
  3755                           ;hd44780.c: 85: lcdWrite(0x80 | address, COMMAND);
  3756  001868  6A48               	clrf	lcdWrite@type^0,c
  3757  00186A  504C               	movf	lcd_gotoxy@address^0,w,c
  3758  00186C  0980               	iorlw	128
  3759  00186E  EFE9  F00B         	goto	_lcdWrite
  3760  001872                     __end_of_lcd_gotoxy:
  3761                           	callstack 0
  3762                           
  3763 ;; *************** function _key_press *****************
  3764 ;; Defined at:
  3765 ;;		line 5 in file "key.c"
  3766 ;; Parameters:    Size  Location     Type
  3767 ;;		None
  3768 ;; Auto vars:     Size  Location     Type
  3769 ;;  key             1    3[COMRAM] unsigned char 
  3770 ;; Return value:  Size  Location     Type
  3771 ;;                  1    wreg      void 
  3772 ;; Registers used:
  3773 ;;		wreg, status,2, status,0
  3774 ;; Tracked objects:
  3775 ;;		On entry : 0/0
  3776 ;;		On exit  : 0/0
  3777 ;;		Unchanged: 0/0
  3778 ;; Data sizes:     COMRAM   BANK0   BANK1
  3779 ;;      Params:         0       0       0
  3780 ;;      Locals:         1       0       0
  3781 ;;      Temps:          0       0       0
  3782 ;;      Totals:         1       0       0
  3783 ;;Total ram usage:        1 bytes
  3784 ;; Hardware stack levels used:    1
  3785 ;; Hardware stack levels required when called:    2
  3786 ;; This function calls:
  3787 ;;		Nothing
  3788 ;; This function is called by:
  3789 ;;		_main
  3790 ;; This function uses a non-reentrant model
  3791 ;;
  3792                           
  3793                           	psect	text4
  3794  0014D4                     __ptext4:
  3795                           	callstack 0
  3796  0014D4                     _key_press:
  3797                           	callstack 28
  3798                           
  3799                           ;key.c: 7: static uint16_t count = 0;;key.c: 8: uint8_t key;;key.c: 9: if (((PORTB & (1 
      +                          << 1)) == 0) && ((PORTB & (1 << 2)) == 0))
  3800                           
  3801                           ;incstack = 0
  3802  0014D4  A281               	btfss	129,1,c	;volatile
  3803  0014D6  B481               	btfsc	129,2,c	;volatile
  3804  0014D8  D002               	goto	l542
  3805                           
  3806                           ;key.c: 10: key = 3;
  3807  0014DA  0E03               	movlw	3
  3808  0014DC  D007               	goto	L5
  3809  0014DE                     l542:
  3810                           
  3811                           ;key.c: 11: else if ((PORTB & (1 << 1)) == 0)
  3812  0014DE  B281               	btfsc	129,1,c	;volatile
  3813  0014E0  D002               	goto	l544
  3814                           
  3815                           ;key.c: 12: key = 1;
  3816  0014E2  0E01               	movlw	1
  3817  0014E4  D003               	goto	L5
  3818  0014E6                     l544:
  3819                           
  3820                           ;key.c: 13: else if ((PORTB & (1 << 2)) == 0)
  3821  0014E6  B481               	btfsc	129,2,c	;volatile
  3822  0014E8  D003               	goto	l546
  3823                           
  3824                           ;key.c: 14: key = 2;
  3825  0014EA  0E02               	movlw	2
  3826  0014EC                     L5:
  3827  0014EC  6E46               	movwf	key_press@key^0,c
  3828  0014EE  D001               	goto	l1727
  3829  0014F0                     l546:
  3830                           
  3831                           ;key.c: 15: else;key.c: 16: key = 0;
  3832  0014F0  6A46               	clrf	key_press@key^0,c
  3833  0014F2                     l1727:
  3834                           
  3835                           ;key.c: 19: if (key) {
  3836  0014F2  5046               	movf	key_press@key^0,w,c
  3837  0014F4  E013               	bz	l548
  3838                           
  3839                           ;key.c: 20: if (count > 300) {
  3840  0014F6  0E2D               	movlw	45
  3841  0014F8  5C25               	subwf	key_press@count^0,w,c
  3842  0014FA  0E01               	movlw	1
  3843  0014FC  5826               	subwfb	(key_press@count+1)^0,w,c
  3844  0014FE  E307               	bnc	l1739
  3845                           
  3846                           ;key.c: 21: count = 300 - 10;
  3847  001500  0E01               	movlw	1
  3848  001502  6E26               	movwf	(key_press@count+1)^0,c
  3849  001504  0E22               	movlw	34
  3850  001506  6E25               	movwf	key_press@count^0,c
  3851  001508                     l1733:
  3852                           
  3853                           ;key.c: 22: key_pressed = key;
  3854  001508  C046  F02E         	movff	key_press@key,_key_pressed	;volatile
  3855  00150C  0012               	return	
  3856  00150E                     l1739:
  3857  00150E  4A25               	infsnz	key_press@count^0,f,c
  3858  001510  2A26               	incf	(key_press@count+1)^0,f,c
  3859                           
  3860                           ;key.c: 26: if (count == 15) {
  3861  001512  0E0F               	movlw	15
  3862  001514  1825               	xorwf	key_press@count^0,w,c
  3863  001516  1026               	iorwf	(key_press@count+1)^0,w,c
  3864  001518  E0F7               	bz	l1733
  3865  00151A  0012               	return	
  3866  00151C                     l548:
  3867  00151C  6A25               	clrf	key_press@count^0,c
  3868  00151E  6A26               	clrf	(key_press@count+1)^0,c
  3869  001520  0012               	return		;funcret
  3870  001522                     __end_of_key_press:
  3871                           	callstack 0
  3872                           
  3873 ;; *************** function _key_GetKey *****************
  3874 ;; Defined at:
  3875 ;;		line 48 in file "key.c"
  3876 ;; Parameters:    Size  Location     Type
  3877 ;;		None
  3878 ;; Auto vars:     Size  Location     Type
  3879 ;;  key             1    3[COMRAM] unsigned char 
  3880 ;; Return value:  Size  Location     Type
  3881 ;;                  1    wreg      unsigned char 
  3882 ;; Registers used:
  3883 ;;		wreg, status,2
  3884 ;; Tracked objects:
  3885 ;;		On entry : 0/0
  3886 ;;		On exit  : 0/0
  3887 ;;		Unchanged: 0/0
  3888 ;; Data sizes:     COMRAM   BANK0   BANK1
  3889 ;;      Params:         0       0       0
  3890 ;;      Locals:         1       0       0
  3891 ;;      Temps:          0       0       0
  3892 ;;      Totals:         1       0       0
  3893 ;;Total ram usage:        1 bytes
  3894 ;; Hardware stack levels used:    1
  3895 ;; Hardware stack levels required when called:    2
  3896 ;; This function calls:
  3897 ;;		Nothing
  3898 ;; This function is called by:
  3899 ;;		_main
  3900 ;; This function uses a non-reentrant model
  3901 ;;
  3902                           
  3903                           	psect	text5
  3904  0018DC                     __ptext5:
  3905                           	callstack 0
  3906  0018DC                     _key_GetKey:
  3907                           	callstack 28
  3908                           
  3909                           ;key.c: 50: uint8_t key = key_pressed;
  3910                           
  3911                           ;incstack = 0
  3912  0018DC  C02E  F046         	movff	_key_pressed,key_GetKey@key	;volatile
  3913                           
  3914                           ;key.c: 52: key_pressed = 0;
  3915  0018E0  6A2E               	clrf	_key_pressed^0,c	;volatile
  3916                           
  3917                           ;key.c: 53: return key;
  3918  0018E2  5046               	movf	key_GetKey@key^0,w,c
  3919  0018E4  0012               	return		;funcret
  3920  0018E6                     __end_of_key_GetKey:
  3921                           	callstack 0
  3922                           
  3923 ;; *************** function _ds18b20_readrom *****************
  3924 ;; Defined at:
  3925 ;;		line 172 in file "ds18b20.c"
  3926 ;; Parameters:    Size  Location     Type
  3927 ;;  num_dq          1    wreg     unsigned char 
  3928 ;; Auto vars:     Size  Location     Type
  3929 ;;  num_dq          1   18[COMRAM] unsigned char 
  3930 ;;  temp_rom        8   10[COMRAM] unsigned char [8]
  3931 ;;  i               1   19[COMRAM] unsigned char 
  3932 ;; Return value:  Size  Location     Type
  3933 ;;                  1    wreg      unsigned char 
  3934 ;; Registers used:
  3935 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3936 ;; Tracked objects:
  3937 ;;		On entry : 0/0
  3938 ;;		On exit  : 0/0
  3939 ;;		Unchanged: 0/0
  3940 ;; Data sizes:     COMRAM   BANK0   BANK1
  3941 ;;      Params:         0       0       0
  3942 ;;      Locals:        10       0       0
  3943 ;;      Temps:          0       0       0
  3944 ;;      Totals:        10       0       0
  3945 ;;Total ram usage:       10 bytes
  3946 ;; Hardware stack levels used:    1
  3947 ;; Hardware stack levels required when called:    4
  3948 ;; This function calls:
  3949 ;;		_Delay_ms
  3950 ;;		_ds18b20_crc8
  3951 ;;		_ow_reset
  3952 ;;		_read_byte
  3953 ;;		_write_byte
  3954 ;;		_write_eep
  3955 ;; This function is called by:
  3956 ;;		_main
  3957 ;; This function uses a non-reentrant model
  3958 ;;
  3959                           
  3960                           	psect	text6
  3961  00146E                     __ptext6:
  3962                           	callstack 0
  3963  00146E                     _ds18b20_readrom:
  3964                           	callstack 26
  3965                           
  3966                           ;incstack = 0
  3967                           ;ds18b20_readrom@num_dq stored from wreg
  3968  00146E  6E55               	movwf	ds18b20_readrom@num_dq^0,c
  3969                           
  3970                           ;ds18b20.c: 173: uint8_t i;;ds18b20.c: 174: uint8_t temp_rom[8];;ds18b20.c: 176: if (!ow
      +                          _reset())
  3971  001470  EC82  F00B         	call	_ow_reset	;wreg free
  3972  001474  0900               	iorlw	0
  3973  001476  E10C               	bnz	u1840
  3974                           
  3975                           ;ds18b20.c: 177: {;ds18b20.c: 178: write_byte(0x33);
  3976  001478  0E33               	movlw	51
  3977  00147A  EC34  F00B         	call	_write_byte
  3978                           
  3979                           ;ds18b20.c: 179: for (i = 0; i < 8; i++) {
  3980  00147E  6A56               	clrf	ds18b20_readrom@i^0,c
  3981  001480                     l2913:
  3982                           
  3983                           ;ds18b20.c: 180: temp_rom[i] = read_byte();
  3984  001480  D824               	call	PL44	;call to abstracted procedure
  3985  001482  EC19  F00B         	call	_read_byte	;wreg free
  3986  001486  6EDF               	movwf	indf2,c
  3987  001488  2A56               	incf	ds18b20_readrom@i^0,f,c
  3988  00148A  0E07               	movlw	7
  3989  00148C  6456               	cpfsgt	ds18b20_readrom@i^0,c
  3990  00148E  D7F8               	goto	l2913
  3991  001490                     u1840:
  3992                           
  3993                           ;ds18b20.c: 181: };ds18b20.c: 182: };ds18b20.c: 183: if (!(ds18b20_crc8(temp_rom, 8))) {
  3994  001490  0E4D               	movlw	low ds18b20_readrom@temp_rom
  3995  001492  6E46               	movwf	ds18b20_crc8@data_in^0,c
  3996  001494  0E08               	movlw	8
  3997  001496  6E47               	movwf	ds18b20_crc8@num_bytes^0,c
  3998  001498  EC91  F00A         	call	_ds18b20_crc8	;wreg free
  3999  00149C  0900               	iorlw	0
  4000  00149E  E114               	bnz	l2939
  4001                           
  4002                           ;ds18b20.c: 184: for (i = 0; i < 8; i++) {
  4003  0014A0  6A56               	clrf	ds18b20_readrom@i^0,c
  4004  0014A2                     l2927:
  4005                           
  4006                           ;ds18b20.c: 185: write_eep(((num_dq - 1)*8) + i, temp_rom[i]);
  4007  0014A2  D813               	call	PL44	;call to abstracted procedure
  4008  0014A4  50DF               	movf	indf2,w,c
  4009  0014A6  6E46               	movwf	write_eep@data^0,c
  4010  0014A8  5055               	movf	ds18b20_readrom@num_dq^0,w,c
  4011  0014AA  0D08               	mullw	8
  4012  0014AC  50F3               	movf	243,w,c
  4013  0014AE  2456               	addwf	ds18b20_readrom@i^0,w,c
  4014  0014B0  0FF8               	addlw	248
  4015  0014B2  ECC5  F00B         	call	_write_eep
  4016  0014B6  2A56               	incf	ds18b20_readrom@i^0,f,c
  4017  0014B8  0E07               	movlw	7
  4018  0014BA  6456               	cpfsgt	ds18b20_readrom@i^0,c
  4019  0014BC  D7F2               	goto	l2927
  4020                           
  4021                           ;ds18b20.c: 186: };ds18b20.c: 187: Delay_ms(10);
  4022  0014BE  ECFD  F007         	call	PL68	;call to abstracted procedure
  4023  0014C2  ECD7  F00B         	call	_Delay_ms	;wreg free
  4024                           
  4025                           ;ds18b20.c: 188: return 1;
  4026  0014C6  0C01               	retlw	1
  4027  0014C8                     l2939:
  4028                           
  4029                           ;ds18b20.c: 189: };ds18b20.c: 190: return 0;
  4030  0014C8  0C00               	retlw	0	;funcret
  4031  0014CA                     __end_of_ds18b20_readrom:
  4032                           	callstack 0
  4033  0014CA                     PL44:
  4034                           	callstack 26
  4035  0014CA  5056               	movf	ds18b20_readrom@i^0,w,c
  4036  0014CC  0F4D               	addlw	low ds18b20_readrom@temp_rom
  4037  0014CE  6ED9               	movwf	fsr2l,c
  4038  0014D0  6ADA               	clrf	fsr2h,c
  4039  0014D2  0012               	return	
  4040  0014D4                     __end_ofPL44:
  4041                           	callstack 0
  4042                           
  4043 ;; *************** function _write_eep *****************
  4044 ;; Defined at:
  4045 ;;		line 5 in file "eeprom.c"
  4046 ;; Parameters:    Size  Location     Type
  4047 ;;  address         1    wreg     unsigned char 
  4048 ;;  data            1    3[COMRAM] unsigned char 
  4049 ;; Auto vars:     Size  Location     Type
  4050 ;;  address         1    4[COMRAM] unsigned char 
  4051 ;; Return value:  Size  Location     Type
  4052 ;;                  1    wreg      void 
  4053 ;; Registers used:
  4054 ;;		wreg, status,2
  4055 ;; Tracked objects:
  4056 ;;		On entry : 0/0
  4057 ;;		On exit  : 0/0
  4058 ;;		Unchanged: 0/0
  4059 ;; Data sizes:     COMRAM   BANK0   BANK1
  4060 ;;      Params:         1       0       0
  4061 ;;      Locals:         1       0       0
  4062 ;;      Temps:          0       0       0
  4063 ;;      Totals:         2       0       0
  4064 ;;Total ram usage:        2 bytes
  4065 ;; Hardware stack levels used:    1
  4066 ;; Hardware stack levels required when called:    2
  4067 ;; This function calls:
  4068 ;;		Nothing
  4069 ;; This function is called by:
  4070 ;;		_main
  4071 ;;		_ds18b20_readrom
  4072 ;; This function uses a non-reentrant model
  4073 ;;
  4074                           
  4075                           	psect	text7
  4076  00178A                     __ptext7:
  4077                           	callstack 0
  4078  00178A                     _write_eep:
  4079                           	callstack 28
  4080                           
  4081                           ;incstack = 0
  4082                           ;write_eep@address stored from wreg
  4083  00178A  6E47               	movwf	write_eep@address^0,c
  4084  00178C                     
  4085                           ;eeprom.c: 8: {}
  4086  00178C  B2A6               	btfsc	166,1,c	;volsfr
  4087  00178E  D7FE               	goto	l2569
  4088                           
  4089                           ;eeprom.c: 11: EEADR = address;
  4090  001790  C047  FFA9         	movff	write_eep@address,4009	;volatile
  4091                           
  4092                           ;eeprom.c: 12: EEDATA = data;
  4093  001794  C046  FFA8         	movff	write_eep@data,4008	;volatile
  4094                           
  4095                           ;eeprom.c: 13: EECON1bits.EEPGD = 0;
  4096  001798  9EA6               	bcf	166,7,c	;volsfr
  4097                           
  4098                           ;eeprom.c: 14: EECON1bits.CFGS = 0;
  4099  00179A  9CA6               	bcf	166,6,c	;volsfr
  4100                           
  4101                           ;eeprom.c: 15: EECON1bits.WREN = 1;
  4102  00179C  84A6               	bsf	166,2,c	;volsfr
  4103                           
  4104                           ;eeprom.c: 16: INTCONbits.GIE = 0;
  4105  00179E  9EF2               	bcf	242,7,c	;volatile
  4106                           
  4107                           ;eeprom.c: 18: EECON2 = 0x55;
  4108  0017A0  0E55               	movlw	85
  4109  0017A2  6EA7               	movwf	167,c	;volsfr
  4110                           
  4111                           ;eeprom.c: 19: EECON2 = 0xAA;
  4112  0017A4  0EAA               	movlw	170
  4113  0017A6  6EA7               	movwf	167,c	;volsfr
  4114                           
  4115                           ;eeprom.c: 20: EECON1bits.WR = 1;
  4116  0017A8  82A6               	bsf	166,1,c	;volsfr
  4117                           
  4118                           ;eeprom.c: 22: INTCONbits.GIE = 1;
  4119  0017AA  8EF2               	bsf	242,7,c	;volatile
  4120  0017AC  0CAA               	retlw	170	;funcret
  4121  0017AE                     __end_of_write_eep:
  4122                           	callstack 0
  4123                           
  4124 ;; *************** function _Delay_ms *****************
  4125 ;; Defined at:
  4126 ;;		line 673 in file "main.c"
  4127 ;; Parameters:    Size  Location     Type
  4128 ;;  delay           2    3[COMRAM] unsigned int 
  4129 ;; Auto vars:     Size  Location     Type
  4130 ;;  i               2    6[COMRAM] unsigned int 
  4131 ;; Return value:  Size  Location     Type
  4132 ;;                  1    wreg      void 
  4133 ;; Registers used:
  4134 ;;		wreg, status,2, status,0
  4135 ;; Tracked objects:
  4136 ;;		On entry : 0/0
  4137 ;;		On exit  : 0/0
  4138 ;;		Unchanged: 0/0
  4139 ;; Data sizes:     COMRAM   BANK0   BANK1
  4140 ;;      Params:         2       0       0
  4141 ;;      Locals:         2       0       0
  4142 ;;      Temps:          1       0       0
  4143 ;;      Totals:         5       0       0
  4144 ;;Total ram usage:        5 bytes
  4145 ;; Hardware stack levels used:    1
  4146 ;; Hardware stack levels required when called:    2
  4147 ;; This function calls:
  4148 ;;		Nothing
  4149 ;; This function is called by:
  4150 ;;		_main
  4151 ;;		_ds18b20_readrom
  4152 ;; This function uses a non-reentrant model
  4153 ;;
  4154                           
  4155                           	psect	text8
  4156  0017AE                     __ptext8:
  4157                           	callstack 0
  4158  0017AE                     _Delay_ms:
  4159                           	callstack 27
  4160                           
  4161                           ;main.c: 674: for (uint16_t i = 0; i <= delay; i++)
  4162                           
  4163                           ;incstack = 0
  4164  0017AE  6A49               	clrf	Delay_ms@i^0,c
  4165  0017B0  6A4A               	clrf	(Delay_ms@i+1)^0,c
  4166  0017B2  D009               	goto	l307
  4167  0017B4                     l2565:
  4168                           
  4169                           ;main.c: 675: _delay((unsigned long)((1)*(8000000/4000.0)));
  4170  0017B4  0E03               	movlw	3
  4171  0017B6  6E48               	movwf	??_Delay_ms^0,c
  4172  0017B8  0E98               	movlw	152
  4173  0017BA                     u2817:
  4174  0017BA  2EE8               	decfsz	wreg,f,c
  4175  0017BC  D7FE               	bra	u2817
  4176  0017BE  2E48               	decfsz	??_Delay_ms^0,f,c
  4177  0017C0  D7FC               	bra	u2817
  4178  0017C2  4A49               	infsnz	Delay_ms@i^0,f,c
  4179  0017C4  2A4A               	incf	(Delay_ms@i+1)^0,f,c
  4180  0017C6                     l307:
  4181  0017C6  5049               	movf	Delay_ms@i^0,w,c
  4182  0017C8  5C46               	subwf	Delay_ms@delay^0,w,c
  4183  0017CA  504A               	movf	(Delay_ms@i+1)^0,w,c
  4184  0017CC  5847               	subwfb	(Delay_ms@delay+1)^0,w,c
  4185  0017CE  E2F2               	bc	l2565
  4186  0017D0  0012               	return		;funcret
  4187  0017D2                     __end_of_Delay_ms:
  4188                           	callstack 0
  4189                           
  4190 ;; *************** function _ds18b20_readTemp *****************
  4191 ;; Defined at:
  4192 ;;		line 117 in file "ds18b20.c"
  4193 ;; Parameters:    Size  Location     Type
  4194 ;;  time_flag       1   10[COMRAM] PTR unsigned char 
  4195 ;;		 -> time_flag(1), 
  4196 ;;  timer_val       1   11[COMRAM] PTR unsigned char 
  4197 ;;		 -> timer_val(1), 
  4198 ;; Auto vars:     Size  Location     Type
  4199 ;;  j               1   16[COMRAM] unsigned char 
  4200 ;;  temp            2   14[COMRAM] unsigned int 
  4201 ;;  i               1   17[COMRAM] unsigned char 
  4202 ;; Return value:  Size  Location     Type
  4203 ;;                  1    wreg      unsigned char 
  4204 ;; Registers used:
  4205 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4206 ;; Tracked objects:
  4207 ;;		On entry : 0/0
  4208 ;;		On exit  : 0/0
  4209 ;;		Unchanged: 0/0
  4210 ;; Data sizes:     COMRAM   BANK0   BANK1
  4211 ;;      Params:         2       0       0
  4212 ;;      Locals:         4       0       0
  4213 ;;      Temps:          2       0       0
  4214 ;;      Totals:         8       0       0
  4215 ;;Total ram usage:        8 bytes
  4216 ;; Hardware stack levels used:    1
  4217 ;; Hardware stack levels required when called:    4
  4218 ;; This function calls:
  4219 ;;		_ds18b20_crc8
  4220 ;;		_ow_reset
  4221 ;;		_read_byte
  4222 ;;		_write_byte
  4223 ;; This function is called by:
  4224 ;;		_main
  4225 ;; This function uses a non-reentrant model
  4226 ;;
  4227                           
  4228                           	psect	text9
  4229  0010FA                     __ptext9:
  4230                           	callstack 0
  4231  0010FA                     _ds18b20_readTemp:
  4232                           	callstack 26
  4233                           
  4234                           ;ds18b20.c: 120: uint8_t i;;ds18b20.c: 122: switch (*time_flag) {
  4235                           
  4236                           ;incstack = 0
  4237  0010FA  D05D               	goto	l2861
  4238  0010FC                     l2783:
  4239                           
  4240                           ;ds18b20.c: 124: if (!ow_reset())
  4241  0010FC  EC82  F00B         	call	_ow_reset	;wreg free
  4242  001100  0900               	iorlw	0
  4243  001102  A4D8               	btfss	status,2,c
  4244  001104  0C00               	retlw	0
  4245                           
  4246                           ;ds18b20.c: 125: {;ds18b20.c: 126: write_byte(0xCC);
  4247  001106  0ECC               	movlw	204
  4248  001108  EC34  F00B         	call	_write_byte
  4249                           
  4250                           ;ds18b20.c: 127: write_byte(0x44);
  4251  00110C  0E44               	movlw	68
  4252  00110E  EC34  F00B         	call	_write_byte
  4253                           
  4254                           ;ds18b20.c: 128: *timer_val = 0;
  4255  001112  504E               	movf	ds18b20_readTemp@timer_val^0,w,c
  4256  001114  6ED9               	movwf	fsr2l,c
  4257  001116  6ADA               	clrf	fsr2h,c
  4258  001118  6ADF               	clrf	indf2,c
  4259                           
  4260                           ;ds18b20.c: 129: *time_flag = 2;
  4261  00111A  504D               	movf	ds18b20_readTemp@time_flag^0,w,c
  4262  00111C  6ED9               	movwf	fsr2l,c
  4263  00111E  6ADA               	clrf	fsr2h,c
  4264  001120  0E02               	movlw	2
  4265  001122  6EDF               	movwf	indf2,c
  4266                           
  4267                           ;ds18b20.c: 130: T1CONbits.TMR1ON = 1;
  4268  001124  80CD               	bsf	205,0,c	;volatile
  4269                           
  4270                           ;ds18b20.c: 132: return 0;
  4271  001126  0C00               	retlw	0
  4272  001128                     l383:
  4273                           
  4274                           ;ds18b20.c: 136: for (uint8_t j = 0; j < 2; j++) {
  4275  001128  6A53               	clrf	ds18b20_readTemp@j^0,c
  4276  00112A                     l384:
  4277                           
  4278                           ;ds18b20.c: 137: (INTCONbits.GIE = 0);
  4279  00112A  9EF2               	bcf	242,7,c	;volatile
  4280                           
  4281                           ;ds18b20.c: 138: ow_reset();
  4282  00112C  EC82  F00B         	call	_ow_reset	;wreg free
  4283                           
  4284                           ;ds18b20.c: 139: write_byte(0x55);
  4285  001130  0E55               	movlw	85
  4286  001132  EC34  F00B         	call	_write_byte
  4287                           
  4288                           ;ds18b20.c: 140: for (i = 0; i < 8; i++) {
  4289  001136  6A54               	clrf	ds18b20_readTemp@i^0,c
  4290  001138                     l2811:
  4291                           
  4292                           ;ds18b20.c: 141: write_byte(rom_dq[j][i]);
  4293  001138  5053               	movf	ds18b20_readTemp@j^0,w,c
  4294  00113A  0D08               	mullw	8
  4295  00113C  50F3               	movf	243,w,c
  4296  00113E  0F11               	addlw	low _rom_dq
  4297  001140  2454               	addwf	ds18b20_readTemp@i^0,w,c
  4298  001142  6ED9               	movwf	fsr2l,c
  4299  001144  6ADA               	clrf	fsr2h,c
  4300  001146  50DF               	movf	indf2,w,c
  4301  001148  EC34  F00B         	call	_write_byte
  4302  00114C  2A54               	incf	ds18b20_readTemp@i^0,f,c
  4303  00114E  0E07               	movlw	7
  4304  001150  6454               	cpfsgt	ds18b20_readTemp@i^0,c
  4305  001152  D7F2               	goto	l2811
  4306                           
  4307                           ;ds18b20.c: 142: };ds18b20.c: 143: write_byte(0xBE);
  4308  001154  0EBE               	movlw	190
  4309  001156  EC34  F00B         	call	_write_byte
  4310                           
  4311                           ;ds18b20.c: 145: for (i = 0; i < 9; i++)
  4312  00115A  6A54               	clrf	ds18b20_readTemp@i^0,c
  4313  00115C                     l2825:
  4314                           
  4315                           ;ds18b20.c: 146: {;ds18b20.c: 147: scratch[i] = read_byte();
  4316  00115C  5054               	movf	ds18b20_readTemp@i^0,w,c
  4317  00115E  0F38               	addlw	low _scratch
  4318  001160  6ED9               	movwf	fsr2l,c
  4319  001162  6ADA               	clrf	fsr2h,c
  4320  001164  EC19  F00B         	call	_read_byte	;wreg free
  4321  001168  6EDF               	movwf	indf2,c
  4322  00116A  2A54               	incf	ds18b20_readTemp@i^0,f,c
  4323  00116C  0E08               	movlw	8
  4324  00116E  6454               	cpfsgt	ds18b20_readTemp@i^0,c
  4325  001170  D7F5               	goto	l2825
  4326                           
  4327                           ;ds18b20.c: 148: };ds18b20.c: 150: if (!(ds18b20_crc8(scratch, 9))) {
  4328  001172  0E38               	movlw	low _scratch
  4329  001174  6E46               	movwf	ds18b20_crc8@data_in^0,c
  4330  001176  0E09               	movlw	9
  4331  001178  6E47               	movwf	ds18b20_crc8@num_bytes^0,c
  4332  00117A  EC91  F00A         	call	_ds18b20_crc8	;wreg free
  4333  00117E  0900               	iorlw	0
  4334  001180  E10C               	bnz	l2837
  4335                           
  4336                           ;ds18b20.c: 151: temp = (((uint16_t) scratch[1]) << 8) | ((uint16_t) scratch[0]);
  4337  001182  5039               	movf	(_scratch+1)^0,w,c
  4338  001184  6E4F               	movwf	??_ds18b20_readTemp^0,c
  4339  001186  5038               	movf	_scratch^0,w,c
  4340  001188  6E51               	movwf	ds18b20_readTemp@temp^0,c
  4341  00118A  C04F  F052         	movff	??_ds18b20_readTemp,ds18b20_readTemp@temp+1
  4342                           
  4343                           ;ds18b20.c: 152: temp_ready[j] = temp;
  4344  00118E  D81C               	call	PL26	;call to abstracted procedure
  4345  001190  C051  FFDE         	movff	ds18b20_readTemp@temp,postinc2
  4346  001194  C052  FFDD         	movff	ds18b20_readTemp@temp+1,postdec2
  4347                           
  4348                           ;ds18b20.c: 153: }else
  4349  001198  D004               	goto	l2839
  4350  00119A                     l2837:
  4351                           
  4352                           ;ds18b20.c: 154: temp_ready[j] = 32767;
  4353  00119A  D816               	call	PL26	;call to abstracted procedure
  4354  00119C  68DE               	setf	postinc2,c
  4355  00119E  0E7F               	movlw	127
  4356  0011A0  6EDD               	movwf	postdec2,c
  4357  0011A2                     l2839:
  4358                           
  4359                           ;ds18b20.c: 155: (INTCONbits.GIE = 1);
  4360  0011A2  8EF2               	bsf	242,7,c	;volatile
  4361  0011A4  2A53               	incf	ds18b20_readTemp@j^0,f,c
  4362  0011A6  0E01               	movlw	1
  4363  0011A8  6453               	cpfsgt	ds18b20_readTemp@j^0,c
  4364  0011AA  D7BF               	goto	l384
  4365                           
  4366                           ;ds18b20.c: 156: };ds18b20.c: 157: *time_flag = 0;
  4367  0011AC  504D               	movf	ds18b20_readTemp@time_flag^0,w,c
  4368  0011AE  6ED9               	movwf	fsr2l,c
  4369  0011B0  6ADA               	clrf	fsr2h,c
  4370  0011B2  6ADF               	clrf	indf2,c
  4371                           
  4372                           ;ds18b20.c: 158: return 1;
  4373  0011B4  0C01               	retlw	1
  4374  0011B6                     l2861:
  4375  0011B6  504D               	movf	ds18b20_readTemp@time_flag^0,w,c
  4376  0011B8  6ED9               	movwf	fsr2l,c
  4377  0011BA  6ADA               	clrf	fsr2h,c
  4378  0011BC  50DF               	movf	indf2,w,c
  4379                           
  4380                           ; Switch size 1, requested type "space"
  4381                           ; Number of cases is 3, Range of values is 0 to 2
  4382                           ; switch strategies available:
  4383                           ; Name         Instructions Cycles
  4384                           ; simple_byte           10     6 (average)
  4385                           ;	Chosen strategy is simple_byte
  4386  0011BE  E09E               	bz	l2783
  4387  0011C0  0A01               	xorlw	1	; case 1
  4388  0011C2  E0B2               	bz	l383
  4389  0011C4  0A03               	xorlw	3	; case 2
  4390  0011C6  0C00               	retlw	0
  4391  0011C8                     __end_of_ds18b20_readTemp:
  4392                           	callstack 0
  4393  0011C8                     PL26:
  4394                           	callstack 26
  4395  0011C8  5053               	movf	ds18b20_readTemp@j^0,w,c
  4396  0011CA  0D02               	mullw	2
  4397  0011CC  50F3               	movf	243,w,c
  4398  0011CE  0F21               	addlw	low _temp_ready
  4399  0011D0  6ED9               	movwf	fsr2l,c
  4400  0011D2  6ADA               	clrf	fsr2h,c
  4401  0011D4  0012               	return	
  4402  0011D6                     __end_ofPL26:
  4403                           	callstack 0
  4404                           
  4405 ;; *************** function _read_byte *****************
  4406 ;; Defined at:
  4407 ;;		line 50 in file "onewire.c"
  4408 ;; Parameters:    Size  Location     Type
  4409 ;;		None
  4410 ;; Auto vars:     Size  Location     Type
  4411 ;;  i               1    6[COMRAM] unsigned char 
  4412 ;;  val             1    5[COMRAM] unsigned char 
  4413 ;; Return value:  Size  Location     Type
  4414 ;;                  1    wreg      unsigned char 
  4415 ;; Registers used:
  4416 ;;		wreg, status,2, status,0, cstack
  4417 ;; Tracked objects:
  4418 ;;		On entry : 0/0
  4419 ;;		On exit  : 0/0
  4420 ;;		Unchanged: 0/0
  4421 ;; Data sizes:     COMRAM   BANK0   BANK1
  4422 ;;      Params:         0       0       0
  4423 ;;      Locals:         2       0       0
  4424 ;;      Temps:          2       0       0
  4425 ;;      Totals:         4       0       0
  4426 ;;Total ram usage:        4 bytes
  4427 ;; Hardware stack levels used:    1
  4428 ;; Hardware stack levels required when called:    3
  4429 ;; This function calls:
  4430 ;;		_read_bit
  4431 ;; This function is called by:
  4432 ;;		_ds18b20_readTemp
  4433 ;;		_ds18b20_readrom
  4434 ;; This function uses a non-reentrant model
  4435 ;;
  4436                           
  4437                           	psect	text10
  4438  001632                     __ptext10:
  4439                           	callstack 0
  4440  001632                     _read_byte:
  4441                           	callstack 26
  4442                           
  4443                           ;onewire.c: 52: uint8_t i;;onewire.c: 53: uint8_t val = 0;
  4444                           
  4445                           ;incstack = 0
  4446  001632  6A48               	clrf	read_byte@val^0,c
  4447                           
  4448                           ;onewire.c: 55: for(i=0;i<8;i++)
  4449  001634  6A49               	clrf	read_byte@i^0,c
  4450  001636                     l1585:
  4451                           
  4452                           ;onewire.c: 56: {;onewire.c: 57: if(read_bit()) val |= (0x01 << i);
  4453  001636  EC54  F00C         	call	_read_bit	;wreg free
  4454  00163A  0900               	iorlw	0
  4455  00163C  E00C               	bz	l1589
  4456  00163E  C049  F046         	movff	read_byte@i,??_read_byte
  4457  001642  0E01               	movlw	1
  4458  001644  6E47               	movwf	(??_read_byte+1)^0,c
  4459  001646  2A46               	incf	??_read_byte^0,f,c
  4460  001648  D002               	goto	u274
  4461  00164A                     u275:
  4462  00164A  90D8               	bcf	status,0,c
  4463  00164C  3647               	rlcf	(??_read_byte+1)^0,f,c
  4464  00164E                     u274:
  4465  00164E  2E46               	decfsz	??_read_byte^0,f,c
  4466  001650  D7FC               	goto	u275
  4467  001652  5047               	movf	(??_read_byte+1)^0,w,c
  4468  001654  1248               	iorwf	read_byte@val^0,f,c
  4469  001656                     l1589:
  4470                           
  4471                           ;onewire.c: 58: _delay((unsigned long)((120)*(8000000/4000000.0)));
  4472  001656  0E50               	movlw	80
  4473  001658                     u2827:
  4474  001658  2EE8               	decfsz	wreg,f,c
  4475  00165A  D7FE               	bra	u2827
  4476  00165C  2A49               	incf	read_byte@i^0,f,c
  4477  00165E  0E07               	movlw	7
  4478  001660  6449               	cpfsgt	read_byte@i^0,c
  4479  001662  D7E9               	goto	l1585
  4480                           
  4481                           ;onewire.c: 59: };onewire.c: 61: return val;
  4482  001664  5048               	movf	read_byte@val^0,w,c
  4483  001666  0012               	return		;funcret
  4484  001668                     __end_of_read_byte:
  4485                           	callstack 0
  4486                           
  4487 ;; *************** function _read_bit *****************
  4488 ;; Defined at:
  4489 ;;		line 22 in file "onewire.c"
  4490 ;; Parameters:    Size  Location     Type
  4491 ;;		None
  4492 ;; Auto vars:     Size  Location     Type
  4493 ;;		None
  4494 ;; Return value:  Size  Location     Type
  4495 ;;                  1    wreg      unsigned char 
  4496 ;; Registers used:
  4497 ;;		wreg
  4498 ;; Tracked objects:
  4499 ;;		On entry : 0/0
  4500 ;;		On exit  : 0/0
  4501 ;;		Unchanged: 0/0
  4502 ;; Data sizes:     COMRAM   BANK0   BANK1
  4503 ;;      Params:         0       0       0
  4504 ;;      Locals:         0       0       0
  4505 ;;      Temps:          0       0       0
  4506 ;;      Totals:         0       0       0
  4507 ;;Total ram usage:        0 bytes
  4508 ;; Hardware stack levels used:    1
  4509 ;; Hardware stack levels required when called:    2
  4510 ;; This function calls:
  4511 ;;		Nothing
  4512 ;; This function is called by:
  4513 ;;		_read_byte
  4514 ;; This function uses a non-reentrant model
  4515 ;;
  4516                           
  4517                           	psect	text11
  4518  0018A8                     __ptext11:
  4519                           	callstack 0
  4520  0018A8                     _read_bit:
  4521                           	callstack 26
  4522                           
  4523                           ;onewire.c: 24: PORTAbits.RA6 = 0;
  4524                           
  4525                           ;incstack = 0
  4526  0018A8  9C80               	bcf	128,6,c	;volatile
  4527                           
  4528                           ;onewire.c: 25: TRISAbits.TRISA6 = 0;
  4529  0018AA  9C92               	bcf	146,6,c	;volatile
  4530                           
  4531                           ;onewire.c: 26: _delay((unsigned long)((1)*(8000000/4000000.0)));
  4532  0018AC  D000               	nop2		;2 cycle nop
  4533                           
  4534                           ;onewire.c: 27: PORTAbits.RA6 = 1;
  4535  0018AE  8C80               	bsf	128,6,c	;volatile
  4536                           
  4537                           ;onewire.c: 28: TRISAbits.TRISA6 = 1;
  4538  0018B0  8C92               	bsf	146,6,c	;volatile
  4539                           
  4540                           ;onewire.c: 29: _delay((unsigned long)((6)*(8000000/4000000.0)));
  4541  0018B2  0E04               	movlw	4
  4542  0018B4                     u2837:
  4543  0018B4  2EE8               	decfsz	wreg,f,c
  4544  0018B6  D7FE               	bra	u2837
  4545                           
  4546                           ;onewire.c: 30: return(PORTAbits.RA6);
  4547  0018B8  BC80               	btfsc	128,6,c	;volatile
  4548  0018BA  0C01               	retlw	1
  4549  0018BC  0C00               	retlw	0	;funcret
  4550  0018BE                     __end_of_read_bit:
  4551                           	callstack 0
  4552                           
  4553 ;; *************** function _ds18b20_crc8 *****************
  4554 ;; Defined at:
  4555 ;;		line 221 in file "ds18b20.c"
  4556 ;; Parameters:    Size  Location     Type
  4557 ;;  data_in         1    3[COMRAM] PTR unsigned char 
  4558 ;;		 -> ds18b20_readrom@temp_rom(8), scratch(9), 
  4559 ;;  num_bytes       1    4[COMRAM] unsigned char 
  4560 ;; Auto vars:     Size  Location     Type
  4561 ;;  crc             1    9[COMRAM] unsigned char 
  4562 ;;  loop_count      1    8[COMRAM] unsigned char 
  4563 ;;  feedback_bit    1    7[COMRAM] unsigned char 
  4564 ;;  data            1    6[COMRAM] unsigned char 
  4565 ;;  bit_counter     1    5[COMRAM] unsigned char 
  4566 ;; Return value:  Size  Location     Type
  4567 ;;                  1    wreg      unsigned char 
  4568 ;; Registers used:
  4569 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4570 ;; Tracked objects:
  4571 ;;		On entry : 0/0
  4572 ;;		On exit  : 0/0
  4573 ;;		Unchanged: 0/0
  4574 ;; Data sizes:     COMRAM   BANK0   BANK1
  4575 ;;      Params:         2       0       0
  4576 ;;      Locals:         5       0       0
  4577 ;;      Temps:          0       0       0
  4578 ;;      Totals:         7       0       0
  4579 ;;Total ram usage:        7 bytes
  4580 ;; Hardware stack levels used:    1
  4581 ;; Hardware stack levels required when called:    2
  4582 ;; This function calls:
  4583 ;;		Nothing
  4584 ;; This function is called by:
  4585 ;;		_ds18b20_readTemp
  4586 ;;		_ds18b20_readrom
  4587 ;; This function uses a non-reentrant model
  4588 ;;
  4589                           
  4590                           	psect	text12
  4591  001522                     __ptext12:
  4592                           	callstack 0
  4593  001522                     _ds18b20_crc8:
  4594                           	callstack 27
  4595                           
  4596                           ;ds18b20.c: 222: uint8_t crc;;ds18b20.c: 223: uint8_t loop_count;;ds18b20.c: 224: uint8_
      +                          t bit_counter;;ds18b20.c: 225: uint8_t data;;ds18b20.c: 226: uint8_t feedback_bit;;ds18b
      +                          20.c: 228: crc = 0x00;
  4597                           
  4598                           ;incstack = 0
  4599  001522  6A4C               	clrf	ds18b20_crc8@crc^0,c
  4600                           
  4601                           ;ds18b20.c: 230: for (loop_count = 0; loop_count != num_bytes; loop_count++) {
  4602  001524  6A4B               	clrf	ds18b20_crc8@loop_count^0,c
  4603  001526  D01D               	goto	l2683
  4604  001528                     l2663:
  4605                           
  4606                           ;ds18b20.c: 231: data = data_in[loop_count];
  4607  001528  5046               	movf	ds18b20_crc8@data_in^0,w,c
  4608  00152A  244B               	addwf	ds18b20_crc8@loop_count^0,w,c
  4609  00152C  6ED9               	movwf	fsr2l,c
  4610  00152E  6ADA               	clrf	fsr2h,c
  4611  001530  50DF               	movf	indf2,w,c
  4612  001532  6E49               	movwf	ds18b20_crc8@data^0,c
  4613                           
  4614                           ;ds18b20.c: 233: bit_counter = 8;
  4615  001534  0E08               	movlw	8
  4616  001536  6E48               	movwf	ds18b20_crc8@bit_counter^0,c
  4617  001538                     l2667:
  4618                           
  4619                           ;ds18b20.c: 235: feedback_bit = (crc ^ data) & 0x01;
  4620  001538  504C               	movf	ds18b20_crc8@crc^0,w,c
  4621  00153A  1849               	xorwf	ds18b20_crc8@data^0,w,c
  4622  00153C  0B01               	andlw	1
  4623  00153E  6E4A               	movwf	ds18b20_crc8@feedback_bit^0,c
  4624                           
  4625                           ;ds18b20.c: 237: if (feedback_bit == 0x01) {
  4626  001540  044A               	decf	ds18b20_crc8@feedback_bit^0,w,c
  4627  001542  E102               	bnz	l412
  4628                           
  4629                           ;ds18b20.c: 238: crc = crc ^ 0x18;
  4630  001544  0E18               	movlw	24
  4631  001546  1A4C               	xorwf	ds18b20_crc8@crc^0,f,c
  4632  001548                     l412:
  4633                           
  4634                           ;ds18b20.c: 239: };ds18b20.c: 240: crc = (crc >> 1) & 0x7F;
  4635  001548  90D8               	bcf	status,0,c
  4636  00154A  304C               	rrcf	ds18b20_crc8@crc^0,w,c
  4637  00154C  0B7F               	andlw	127
  4638  00154E  6E4C               	movwf	ds18b20_crc8@crc^0,c
  4639                           
  4640                           ;ds18b20.c: 241: if (feedback_bit == 0x01) {
  4641  001550  044A               	decf	ds18b20_crc8@feedback_bit^0,w,c
  4642  001552  E101               	bnz	l2675
  4643                           
  4644                           ;ds18b20.c: 242: crc = crc | 0x80;
  4645  001554  8E4C               	bsf	ds18b20_crc8@crc^0,7,c
  4646  001556                     l2675:
  4647                           
  4648                           ;ds18b20.c: 243: };ds18b20.c: 245: data = data >> 1;
  4649  001556  90D8               	bcf	status,0,c
  4650  001558  3249               	rrcf	ds18b20_crc8@data^0,f,c
  4651                           
  4652                           ;ds18b20.c: 246: bit_counter--;
  4653  00155A  0648               	decf	ds18b20_crc8@bit_counter^0,f,c
  4654                           
  4655                           ;ds18b20.c: 248: } while (bit_counter > 0);
  4656  00155C  5048               	movf	ds18b20_crc8@bit_counter^0,w,c
  4657  00155E  E1EC               	bnz	l2667
  4658  001560  2A4B               	incf	ds18b20_crc8@loop_count^0,f,c
  4659  001562                     l2683:
  4660  001562  5047               	movf	ds18b20_crc8@num_bytes^0,w,c
  4661  001564  184B               	xorwf	ds18b20_crc8@loop_count^0,w,c
  4662  001566  E1E0               	bnz	l2663
  4663                           
  4664                           ;ds18b20.c: 249: };ds18b20.c: 251: return crc;
  4665  001568  504C               	movf	ds18b20_crc8@crc^0,w,c
  4666  00156A  0012               	return		;funcret
  4667  00156C                     __end_of_ds18b20_crc8:
  4668                           	callstack 0
  4669                           
  4670 ;; *************** function _ds18b20_get_temp *****************
  4671 ;; Defined at:
  4672 ;;		line 198 in file "ds18b20.c"
  4673 ;; Parameters:    Size  Location     Type
  4674 ;;  num_dq          1    wreg     unsigned char 
  4675 ;;  minus           1    3[COMRAM] PTR unsigned char 
  4676 ;;		 -> minus_2(1), minus_1(1), 
  4677 ;; Auto vars:     Size  Location     Type
  4678 ;;  num_dq          1    5[COMRAM] unsigned char 
  4679 ;;  temp            2    7[COMRAM] unsigned int 
  4680 ;;  tmp             1    6[COMRAM] unsigned char 
  4681 ;; Return value:  Size  Location     Type
  4682 ;;                  2    3[COMRAM] unsigned int 
  4683 ;; Registers used:
  4684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4685 ;; Tracked objects:
  4686 ;;		On entry : 0/0
  4687 ;;		On exit  : 0/0
  4688 ;;		Unchanged: 0/0
  4689 ;; Data sizes:     COMRAM   BANK0   BANK1
  4690 ;;      Params:         2       0       0
  4691 ;;      Locals:         4       0       0
  4692 ;;      Temps:          0       0       0
  4693 ;;      Totals:         6       0       0
  4694 ;;Total ram usage:        6 bytes
  4695 ;; Hardware stack levels used:    1
  4696 ;; Hardware stack levels required when called:    2
  4697 ;; This function calls:
  4698 ;;		Nothing
  4699 ;; This function is called by:
  4700 ;;		_main
  4701 ;; This function uses a non-reentrant model
  4702 ;;
  4703                           
  4704                           	psect	text13
  4705  00127E                     __ptext13:
  4706                           	callstack 0
  4707  00127E                     _ds18b20_get_temp:
  4708                           	callstack 28
  4709                           
  4710                           ;incstack = 0
  4711                           ;ds18b20_get_temp@num_dq stored from wreg
  4712  00127E  6E48               	movwf	ds18b20_get_temp@num_dq^0,c
  4713                           
  4714                           ;ds18b20.c: 199: uint16_t temp = temp_ready[num_dq-1];
  4715  001280  5048               	movf	ds18b20_get_temp@num_dq^0,w,c
  4716  001282  0D02               	mullw	2
  4717  001284  50F3               	movf	243,w,c
  4718  001286  0F1F               	addlw	low (_temp_ready+254)
  4719  001288  6ED9               	movwf	fsr2l,c
  4720  00128A  6ADA               	clrf	fsr2h,c
  4721  00128C  CFDE F04A          	movff	postinc2,ds18b20_get_temp@temp
  4722  001290  CFDD F04B          	movff	postdec2,ds18b20_get_temp@temp+1
  4723                           
  4724                           ;ds18b20.c: 200: uint8_t tmp;;ds18b20.c: 201: *minus = '+';
  4725  001294  5046               	movf	ds18b20_get_temp@minus^0,w,c
  4726  001296  6ED9               	movwf	fsr2l,c
  4727  001298  6ADA               	clrf	fsr2h,c
  4728  00129A  0E2B               	movlw	43
  4729  00129C  6EDF               	movwf	indf2,c
  4730                           
  4731                           ;ds18b20.c: 202: if(temp == 32767)
  4732  00129E  284A               	incf	ds18b20_get_temp@temp^0,w,c
  4733  0012A0  E108               	bnz	l404
  4734  0012A2  0E7F               	movlw	127
  4735  0012A4  184B               	xorwf	(ds18b20_get_temp@temp+1)^0,w,c
  4736  0012A6  E105               	bnz	l404
  4737  0012A8                     u1800:
  4738                           
  4739                           ;ds18b20.c: 203: return temp;
  4740  0012A8  C04A  F046         	movff	ds18b20_get_temp@temp,?_ds18b20_get_temp
  4741  0012AC  C04B  F047         	movff	ds18b20_get_temp@temp+1,?_ds18b20_get_temp+1
  4742  0012B0  0012               	return	
  4743  0012B2                     l404:
  4744                           
  4745                           ;ds18b20.c: 204: if (temp & 0x8000) {
  4746  0012B2  AE4B               	btfss	(ds18b20_get_temp@temp+1)^0,7,c
  4747  0012B4  D009               	goto	l2879
  4748                           
  4749                           ;ds18b20.c: 205: temp = -temp;
  4750  0012B6  6C4A               	negf	ds18b20_get_temp@temp^0,c
  4751  0012B8  1E4B               	comf	(ds18b20_get_temp@temp+1)^0,f,c
  4752  0012BA  B0D8               	btfsc	status,0,c
  4753  0012BC  2A4B               	incf	(ds18b20_get_temp@temp+1)^0,f,c
  4754                           
  4755                           ;ds18b20.c: 206: *minus = '-';
  4756  0012BE  5046               	movf	ds18b20_get_temp@minus^0,w,c
  4757  0012C0  6ED9               	movwf	fsr2l,c
  4758  0012C2  6ADA               	clrf	fsr2h,c
  4759  0012C4  0E2D               	movlw	45
  4760  0012C6  6EDF               	movwf	indf2,c
  4761  0012C8                     l2879:
  4762                           
  4763                           ;ds18b20.c: 207: };ds18b20.c: 209: tmp = temp & 0x0f;
  4764  0012C8  504A               	movf	ds18b20_get_temp@temp^0,w,c
  4765  0012CA  0B0F               	andlw	15
  4766  0012CC  6E49               	movwf	ds18b20_get_temp@tmp^0,c
  4767                           
  4768                           ;ds18b20.c: 210: tmp = fract[tmp];
  4769  0012CE  0ED3               	movlw	low _fract
  4770  0012D0  2449               	addwf	ds18b20_get_temp@tmp^0,w,c
  4771  0012D2  6EF6               	movwf	tblptrl,c
  4772  0012D4  6AF7               	clrf	tblptrh,c
  4773  0012D6  0E1E               	movlw	high _fract
  4774  0012D8  22F7               	addwfc	tblptrh,f,c
  4775  0012DA                     	if	0	;There are less than 3 active tblptr bytes
  4776  0012DA                     	endif
  4777  0012DA  0008               	tblrd		*
  4778  0012DC  CFF5 F049          	movff	tablat,ds18b20_get_temp@tmp
  4779                           
  4780                           ;ds18b20.c: 211: temp = temp >> 4;
  4781  0012E0  3A4A               	swapf	ds18b20_get_temp@temp^0,f,c
  4782  0012E2  3A4B               	swapf	(ds18b20_get_temp@temp+1)^0,f,c
  4783  0012E4  0E0F               	movlw	15
  4784  0012E6  164A               	andwf	ds18b20_get_temp@temp^0,f,c
  4785  0012E8  504B               	movf	(ds18b20_get_temp@temp+1)^0,w,c
  4786  0012EA  0BF0               	andlw	240
  4787  0012EC  124A               	iorwf	ds18b20_get_temp@temp^0,f,c
  4788  0012EE  0E0F               	movlw	15
  4789  0012F0  164B               	andwf	(ds18b20_get_temp@temp+1)^0,f,c
  4790                           
  4791                           ;ds18b20.c: 212: temp = (temp & 0x00ff) * 10;
  4792  0012F2  504A               	movf	ds18b20_get_temp@temp^0,w,c
  4793  0012F4  0D0A               	mullw	10
  4794  0012F6  CFF3 F04A          	movff	prodl,ds18b20_get_temp@temp
  4795  0012FA  CFF4 F04B          	movff	prodh,ds18b20_get_temp@temp+1
  4796                           
  4797                           ;ds18b20.c: 213: temp = temp + tmp;
  4798  0012FE  5049               	movf	ds18b20_get_temp@tmp^0,w,c
  4799  001300  264A               	addwf	ds18b20_get_temp@temp^0,f,c
  4800  001302  0E00               	movlw	0
  4801  001304  224B               	addwfc	(ds18b20_get_temp@temp+1)^0,f,c
  4802  001306  D7D0               	goto	u1800
  4803  001308                     __end_of_ds18b20_get_temp:
  4804                           	callstack 0
  4805                           
  4806 ;; *************** function ___lwmod *****************
  4807 ;; Defined at:
  4808 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.30\pic\sources\c90\common\lwmod.c"
  4809 ;; Parameters:    Size  Location     Type
  4810 ;;  dividend        2   10[COMRAM] unsigned int 
  4811 ;;  divisor         2   12[COMRAM] unsigned int 
  4812 ;; Auto vars:     Size  Location     Type
  4813 ;;  counter         1   14[COMRAM] unsigned char 
  4814 ;; Return value:  Size  Location     Type
  4815 ;;                  2   10[COMRAM] unsigned int 
  4816 ;; Registers used:
  4817 ;;		wreg, status,2, status,0
  4818 ;; Tracked objects:
  4819 ;;		On entry : 0/0
  4820 ;;		On exit  : 0/0
  4821 ;;		Unchanged: 0/0
  4822 ;; Data sizes:     COMRAM   BANK0   BANK1
  4823 ;;      Params:         4       0       0
  4824 ;;      Locals:         1       0       0
  4825 ;;      Temps:          0       0       0
  4826 ;;      Totals:         5       0       0
  4827 ;;Total ram usage:        5 bytes
  4828 ;; Hardware stack levels used:    1
  4829 ;; Hardware stack levels required when called:    2
  4830 ;; This function calls:
  4831 ;;		Nothing
  4832 ;; This function is called by:
  4833 ;;		_main
  4834 ;; This function uses a non-reentrant model
  4835 ;;
  4836                           
  4837                           	psect	text14
  4838  0015F4                     __ptext14:
  4839                           	callstack 0
  4840  0015F4                     ___lwmod:
  4841                           	callstack 28
  4842                           
  4843                           ;incstack = 0
  4844  0015F4  504F               	movf	___lwmod@divisor^0,w,c
  4845  0015F6  1050               	iorwf	(___lwmod@divisor+1)^0,w,c
  4846  0015F8  E017               	bz	l1117
  4847  0015FA  0E01               	movlw	1
  4848  0015FC  6E51               	movwf	___lwmod@counter^0,c
  4849  0015FE  D004               	goto	l3015
  4850  001600                     l3013:
  4851  001600  90D8               	bcf	status,0,c
  4852  001602  364F               	rlcf	___lwmod@divisor^0,f,c
  4853  001604  3650               	rlcf	(___lwmod@divisor+1)^0,f,c
  4854  001606  2A51               	incf	___lwmod@counter^0,f,c
  4855  001608                     l3015:
  4856  001608  AE50               	btfss	(___lwmod@divisor+1)^0,7,c
  4857  00160A  D7FA               	goto	l3013
  4858  00160C                     u1950:
  4859  00160C  504F               	movf	___lwmod@divisor^0,w,c
  4860  00160E  5C4D               	subwf	___lwmod@dividend^0,w,c
  4861  001610  5050               	movf	(___lwmod@divisor+1)^0,w,c
  4862  001612  584E               	subwfb	(___lwmod@dividend+1)^0,w,c
  4863  001614  E304               	bnc	l3021
  4864  001616  504F               	movf	___lwmod@divisor^0,w,c
  4865  001618  5E4D               	subwf	___lwmod@dividend^0,f,c
  4866  00161A  5050               	movf	(___lwmod@divisor+1)^0,w,c
  4867  00161C  5A4E               	subwfb	(___lwmod@dividend+1)^0,f,c
  4868  00161E                     l3021:
  4869  00161E  90D8               	bcf	status,0,c
  4870  001620  3250               	rrcf	(___lwmod@divisor+1)^0,f,c
  4871  001622  324F               	rrcf	___lwmod@divisor^0,f,c
  4872  001624  2E51               	decfsz	___lwmod@counter^0,f,c
  4873  001626  D7F2               	goto	u1950
  4874  001628                     l1117:
  4875  001628  C04D  F04D         	movff	___lwmod@dividend,?___lwmod
  4876  00162C  C04E  F04E         	movff	___lwmod@dividend+1,?___lwmod+1
  4877  001630  0012               	return		;funcret
  4878  001632                     __end_of___lwmod:
  4879                           	callstack 0
  4880                           
  4881 ;; *************** function ___lwdiv *****************
  4882 ;; Defined at:
  4883 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.30\pic\sources\c90\common\lwdiv.c"
  4884 ;; Parameters:    Size  Location     Type
  4885 ;;  dividend        2    3[COMRAM] unsigned int 
  4886 ;;  divisor         2    5[COMRAM] unsigned int 
  4887 ;; Auto vars:     Size  Location     Type
  4888 ;;  quotient        2    7[COMRAM] unsigned int 
  4889 ;;  counter         1    9[COMRAM] unsigned char 
  4890 ;; Return value:  Size  Location     Type
  4891 ;;                  2    3[COMRAM] unsigned int 
  4892 ;; Registers used:
  4893 ;;		wreg, status,2, status,0
  4894 ;; Tracked objects:
  4895 ;;		On entry : 0/0
  4896 ;;		On exit  : 0/0
  4897 ;;		Unchanged: 0/0
  4898 ;; Data sizes:     COMRAM   BANK0   BANK1
  4899 ;;      Params:         4       0       0
  4900 ;;      Locals:         3       0       0
  4901 ;;      Temps:          0       0       0
  4902 ;;      Totals:         7       0       0
  4903 ;;Total ram usage:        7 bytes
  4904 ;; Hardware stack levels used:    1
  4905 ;; Hardware stack levels required when called:    2
  4906 ;; This function calls:
  4907 ;;		Nothing
  4908 ;; This function is called by:
  4909 ;;		_main
  4910 ;; This function uses a non-reentrant model
  4911 ;;
  4912                           
  4913                           	psect	text15
  4914  00156C                     __ptext15:
  4915                           	callstack 0
  4916  00156C                     ___lwdiv:
  4917                           	callstack 28
  4918                           
  4919                           ;incstack = 0
  4920  00156C  6A4A               	clrf	___lwdiv@quotient^0,c
  4921  00156E  6A4B               	clrf	(___lwdiv@quotient+1)^0,c
  4922  001570  5048               	movf	___lwdiv@divisor^0,w,c
  4923  001572  1049               	iorwf	(___lwdiv@divisor+1)^0,w,c
  4924  001574  E01B               	bz	l1107
  4925  001576  0E01               	movlw	1
  4926  001578  6E4C               	movwf	___lwdiv@counter^0,c
  4927  00157A  D004               	goto	l2995
  4928  00157C                     l2993:
  4929  00157C  90D8               	bcf	status,0,c
  4930  00157E  3648               	rlcf	___lwdiv@divisor^0,f,c
  4931  001580  3649               	rlcf	(___lwdiv@divisor+1)^0,f,c
  4932  001582  2A4C               	incf	___lwdiv@counter^0,f,c
  4933  001584                     l2995:
  4934  001584  AE49               	btfss	(___lwdiv@divisor+1)^0,7,c
  4935  001586  D7FA               	goto	l2993
  4936  001588                     u1920:
  4937  001588  90D8               	bcf	status,0,c
  4938  00158A  364A               	rlcf	___lwdiv@quotient^0,f,c
  4939  00158C  364B               	rlcf	(___lwdiv@quotient+1)^0,f,c
  4940  00158E  5048               	movf	___lwdiv@divisor^0,w,c
  4941  001590  5C46               	subwf	___lwdiv@dividend^0,w,c
  4942  001592  5049               	movf	(___lwdiv@divisor+1)^0,w,c
  4943  001594  5847               	subwfb	(___lwdiv@dividend+1)^0,w,c
  4944  001596  E305               	bnc	l3005
  4945  001598  5048               	movf	___lwdiv@divisor^0,w,c
  4946  00159A  5E46               	subwf	___lwdiv@dividend^0,f,c
  4947  00159C  5049               	movf	(___lwdiv@divisor+1)^0,w,c
  4948  00159E  5A47               	subwfb	(___lwdiv@dividend+1)^0,f,c
  4949  0015A0  804A               	bsf	___lwdiv@quotient^0,0,c
  4950  0015A2                     l3005:
  4951  0015A2  90D8               	bcf	status,0,c
  4952  0015A4  3249               	rrcf	(___lwdiv@divisor+1)^0,f,c
  4953  0015A6  3248               	rrcf	___lwdiv@divisor^0,f,c
  4954  0015A8  2E4C               	decfsz	___lwdiv@counter^0,f,c
  4955  0015AA  D7EE               	goto	u1920
  4956  0015AC                     l1107:
  4957  0015AC  C04A  F046         	movff	___lwdiv@quotient,?___lwdiv
  4958  0015B0  C04B  F047         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4959  0015B4  0012               	return		;funcret
  4960  0015B6                     __end_of___lwdiv:
  4961                           	callstack 0
  4962                           
  4963 ;; *************** function ___lbmod *****************
  4964 ;; Defined at:
  4965 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.30\pic\sources\c90\common\lbmod.c"
  4966 ;; Parameters:    Size  Location     Type
  4967 ;;  dividend        1    wreg     unsigned char 
  4968 ;;  divisor         1    7[COMRAM] unsigned char 
  4969 ;; Auto vars:     Size  Location     Type
  4970 ;;  dividend        1    8[COMRAM] unsigned char 
  4971 ;;  rem             1   10[COMRAM] unsigned char 
  4972 ;;  counter         1    9[COMRAM] unsigned char 
  4973 ;; Return value:  Size  Location     Type
  4974 ;;                  1    wreg      unsigned char 
  4975 ;; Registers used:
  4976 ;;		wreg, status,2, status,0
  4977 ;; Tracked objects:
  4978 ;;		On entry : 0/0
  4979 ;;		On exit  : 0/0
  4980 ;;		Unchanged: 0/0
  4981 ;; Data sizes:     COMRAM   BANK0   BANK1
  4982 ;;      Params:         1       0       0
  4983 ;;      Locals:         3       0       0
  4984 ;;      Temps:          0       0       0
  4985 ;;      Totals:         4       0       0
  4986 ;;Total ram usage:        4 bytes
  4987 ;; Hardware stack levels used:    1
  4988 ;; Hardware stack levels required when called:    2
  4989 ;; This function calls:
  4990 ;;		Nothing
  4991 ;; This function is called by:
  4992 ;;		_main
  4993 ;; This function uses a non-reentrant model
  4994 ;;
  4995                           
  4996                           	psect	text16
  4997  001764                     __ptext16:
  4998                           	callstack 0
  4999  001764                     ___lbmod:
  5000                           	callstack 28
  5001                           
  5002                           ;incstack = 0
  5003                           ;___lbmod@dividend stored from wreg
  5004  001764  6E4B               	movwf	___lbmod@dividend^0,c
  5005  001766  0E08               	movlw	8
  5006  001768  6E4C               	movwf	___lbmod@counter^0,c
  5007  00176A  6A4D               	clrf	___lbmod@rem^0,c
  5008  00176C                     l2973:
  5009  00176C  90D8               	bcf	status,0,c
  5010  00176E  344B               	rlcf	___lbmod@dividend^0,w,c
  5011  001770  344D               	rlcf	___lbmod@rem^0,w,c
  5012  001772  6E4D               	movwf	___lbmod@rem^0,c
  5013  001774  90D8               	bcf	status,0,c
  5014  001776  364B               	rlcf	___lbmod@dividend^0,f,c
  5015  001778  504A               	movf	___lbmod@divisor^0,w,c
  5016  00177A  5C4D               	subwf	___lbmod@rem^0,w,c
  5017  00177C  E302               	bnc	l2981
  5018  00177E  504A               	movf	___lbmod@divisor^0,w,c
  5019  001780  5E4D               	subwf	___lbmod@rem^0,f,c
  5020  001782                     l2981:
  5021  001782  2E4C               	decfsz	___lbmod@counter^0,f,c
  5022  001784  D7F3               	goto	l2973
  5023  001786  504D               	movf	___lbmod@rem^0,w,c
  5024  001788  0012               	return		;funcret
  5025  00178A                     __end_of___lbmod:
  5026                           	callstack 0
  5027                           
  5028 ;; *************** function ___lbdiv *****************
  5029 ;; Defined at:
  5030 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.30\pic\sources\c90\common\lbdiv.c"
  5031 ;; Parameters:    Size  Location     Type
  5032 ;;  dividend        1    wreg     unsigned char 
  5033 ;;  divisor         1    3[COMRAM] unsigned char 
  5034 ;; Auto vars:     Size  Location     Type
  5035 ;;  dividend        1    4[COMRAM] unsigned char 
  5036 ;;  quotient        1    6[COMRAM] unsigned char 
  5037 ;;  counter         1    5[COMRAM] unsigned char 
  5038 ;; Return value:  Size  Location     Type
  5039 ;;                  1    wreg      unsigned char 
  5040 ;; Registers used:
  5041 ;;		wreg, status,2, status,0
  5042 ;; Tracked objects:
  5043 ;;		On entry : 0/0
  5044 ;;		On exit  : 0/0
  5045 ;;		Unchanged: 0/0
  5046 ;; Data sizes:     COMRAM   BANK0   BANK1
  5047 ;;      Params:         1       0       0
  5048 ;;      Locals:         3       0       0
  5049 ;;      Temps:          0       0       0
  5050 ;;      Totals:         4       0       0
  5051 ;;Total ram usage:        4 bytes
  5052 ;; Hardware stack levels used:    1
  5053 ;; Hardware stack levels required when called:    2
  5054 ;; This function calls:
  5055 ;;		Nothing
  5056 ;; This function is called by:
  5057 ;;		_main
  5058 ;; This function uses a non-reentrant model
  5059 ;;
  5060                           
  5061                           	psect	text17
  5062  00169E                     __ptext17:
  5063                           	callstack 0
  5064  00169E                     ___lbdiv:
  5065                           	callstack 28
  5066                           
  5067                           ;incstack = 0
  5068                           ;___lbdiv@dividend stored from wreg
  5069  00169E  6E47               	movwf	___lbdiv@dividend^0,c
  5070  0016A0  6A49               	clrf	___lbdiv@quotient^0,c
  5071  0016A2  5046               	movf	___lbdiv@divisor^0,w,c
  5072  0016A4  E014               	bz	l2965
  5073  0016A6  0E01               	movlw	1
  5074  0016A8  6E48               	movwf	___lbdiv@counter^0,c
  5075  0016AA  D003               	goto	l2953
  5076  0016AC                     l2949:
  5077  0016AC  90D8               	bcf	status,0,c
  5078  0016AE  3646               	rlcf	___lbdiv@divisor^0,f,c
  5079  0016B0  2A48               	incf	___lbdiv@counter^0,f,c
  5080  0016B2                     l2953:
  5081  0016B2  AE46               	btfss	___lbdiv@divisor^0,7,c
  5082  0016B4  D7FB               	goto	l2949
  5083  0016B6                     u1880:
  5084  0016B6  90D8               	bcf	status,0,c
  5085  0016B8  3649               	rlcf	___lbdiv@quotient^0,f,c
  5086  0016BA  5046               	movf	___lbdiv@divisor^0,w,c
  5087  0016BC  5C47               	subwf	___lbdiv@dividend^0,w,c
  5088  0016BE  E303               	bnc	l2961
  5089  0016C0  5046               	movf	___lbdiv@divisor^0,w,c
  5090  0016C2  5E47               	subwf	___lbdiv@dividend^0,f,c
  5091  0016C4  8049               	bsf	___lbdiv@quotient^0,0,c
  5092  0016C6                     l2961:
  5093  0016C6  90D8               	bcf	status,0,c
  5094  0016C8  3246               	rrcf	___lbdiv@divisor^0,f,c
  5095  0016CA  2E48               	decfsz	___lbdiv@counter^0,f,c
  5096  0016CC  D7F4               	goto	u1880
  5097  0016CE                     l2965:
  5098  0016CE  5049               	movf	___lbdiv@quotient^0,w,c
  5099  0016D0  0012               	return		;funcret
  5100  0016D2                     __end_of___lbdiv:
  5101                           	callstack 0
  5102                           
  5103 ;; *************** function _Main_init *****************
  5104 ;; Defined at:
  5105 ;;		line 619 in file "main.c"
  5106 ;; Parameters:    Size  Location     Type
  5107 ;;		None
  5108 ;; Auto vars:     Size  Location     Type
  5109 ;;		None
  5110 ;; Return value:  Size  Location     Type
  5111 ;;                  1    wreg      void 
  5112 ;; Registers used:
  5113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5114 ;; Tracked objects:
  5115 ;;		On entry : 0/0
  5116 ;;		On exit  : 0/0
  5117 ;;		Unchanged: 0/0
  5118 ;; Data sizes:     COMRAM   BANK0   BANK1
  5119 ;;      Params:         0       0       0
  5120 ;;      Locals:         0       0       0
  5121 ;;      Temps:          0       0       0
  5122 ;;      Totals:         0       0       0
  5123 ;;Total ram usage:        0 bytes
  5124 ;; Hardware stack levels used:    1
  5125 ;; Hardware stack levels required when called:    6
  5126 ;; This function calls:
  5127 ;;		_cgrom_char
  5128 ;;		_initLCD
  5129 ;;		_init_ds18b20
  5130 ;;		_init_uart
  5131 ;; This function is called by:
  5132 ;;		_main
  5133 ;; This function uses a non-reentrant model
  5134 ;;
  5135                           
  5136                           	psect	text18
  5137  001382                     __ptext18:
  5138                           	callstack 0
  5139  001382                     _Main_init:
  5140                           	callstack 24
  5141                           
  5142                           ;main.c: 622: PORTA = 0;
  5143                           
  5144                           ;incstack = 0
  5145  001382  6A80               	clrf	128,c	;volatile
  5146                           
  5147                           ;main.c: 623: LATA = 0;
  5148  001384  6A89               	clrf	137,c	;volatile
  5149                           
  5150                           ;main.c: 624: TRISA = 0;
  5151  001386  6A92               	clrf	146,c	;volatile
  5152                           
  5153                           ;main.c: 625: PORTB = 0;
  5154  001388  6A81               	clrf	129,c	;volatile
  5155                           
  5156                           ;main.c: 626: LATB = 0;
  5157  00138A  6A8A               	clrf	138,c	;volatile
  5158                           
  5159                           ;main.c: 627: TRISB = 0b00000110;
  5160  00138C  0E06               	movlw	6
  5161  00138E  6E93               	movwf	147,c	;volatile
  5162                           
  5163                           ;main.c: 628: PORTC = 0;
  5164  001390  6A82               	clrf	130,c	;volatile
  5165                           
  5166                           ;main.c: 629: LATC = 0;
  5167  001392  6A8B               	clrf	139,c	;volatile
  5168                           
  5169                           ;main.c: 630: TRISC = 0;
  5170  001394  6A94               	clrf	148,c	;volatile
  5171                           
  5172                           ;main.c: 631: OSCCONbits.SCS0 = 0;
  5173  001396  90D3               	bcf	211,0,c	;volatile
  5174                           
  5175                           ;main.c: 632: OSCCONbits.SCS1 = 1;
  5176  001398  82D3               	bsf	211,1,c	;volatile
  5177                           
  5178                           ;main.c: 633: OSCCONbits.IRCF = 0b111;
  5179  00139A  0E70               	movlw	112
  5180  00139C  12D3               	iorwf	211,f,c	;volatile
  5181                           
  5182                           ;main.c: 634: ADCON1bits.PCFG = 0b1111;
  5183  00139E  0E0F               	movlw	15
  5184  0013A0  12C1               	iorwf	193,f,c	;volatile
  5185                           
  5186                           ;main.c: 636: PORTAbits.RA6 = 1;
  5187  0013A2  8C80               	bsf	128,6,c	;volatile
  5188                           
  5189                           ;main.c: 638: init_ds18b20();
  5190  0013A4  ECFD  F009         	call	_init_ds18b20	;wreg free
  5191                           
  5192                           ;main.c: 640: T1CON = 0b10000000;
  5193  0013A8  0E80               	movlw	128
  5194  0013AA  6ECD               	movwf	205,c	;volatile
  5195                           
  5196                           ;main.c: 642: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
  5197  0013AC  0E3C               	movlw	60
  5198  0013AE  6ECF               	movwf	207,c	;volatile
  5199                           
  5200                           ;main.c: 643: TMR1L = ((unsigned char)((15536)&0xFF));
  5201  0013B0  0EB0               	movlw	176
  5202  0013B2  6ECE               	movwf	206,c	;volatile
  5203                           
  5204                           ;main.c: 644: IPR1bits.TMR1IP = 1;
  5205  0013B4  809F               	bsf	159,0,c	;volatile
  5206                           
  5207                           ;main.c: 646: T0CONbits.T0PS = 0b000;
  5208  0013B6  0EF8               	movlw	-8
  5209  0013B8  16D5               	andwf	213,f,c	;volatile
  5210                           
  5211                           ;main.c: 647: T0CONbits.PSA = 1;
  5212  0013BA  86D5               	bsf	213,3,c	;volatile
  5213                           
  5214                           ;main.c: 648: T0CONbits.T08BIT = 0;
  5215  0013BC  9CD5               	bcf	213,6,c	;volatile
  5216                           
  5217                           ;main.c: 649: T0CONbits.T0CS = 0;
  5218  0013BE  9AD5               	bcf	213,5,c	;volatile
  5219                           
  5220                           ;main.c: 650: T0CONbits.TMR0ON = 1;
  5221  0013C0  8ED5               	bsf	213,7,c	;volatile
  5222                           
  5223                           ;main.c: 651: TMR0H = ((unsigned char)(((45536)>>8)&0xFF));
  5224  0013C2  0EB1               	movlw	177
  5225  0013C4  6ED7               	movwf	215,c	;volatile
  5226                           
  5227                           ;main.c: 652: TMR0L = ((unsigned char)((45536)&0xFF));
  5228  0013C6  0EE0               	movlw	224
  5229  0013C8  6ED6               	movwf	214,c	;volatile
  5230                           
  5231                           ;main.c: 653: INTCONbits.T0IE = 1;
  5232  0013CA  8AF2               	bsf	242,5,c	;volatile
  5233                           
  5234                           ;main.c: 654: INTCON2bits.T0IP = 0;
  5235  0013CC  94F1               	bcf	241,2,c	;volatile
  5236                           
  5237                           ;main.c: 655: INTCON2bits.RBPU = 0;
  5238  0013CE  9EF1               	bcf	241,7,c	;volatile
  5239                           
  5240                           ;main.c: 659: PIE1bits.TMR1IE = 1;
  5241  0013D0  809D               	bsf	157,0,c	;volatile
  5242                           
  5243                           ;main.c: 660: RCONbits.IPEN = 1;
  5244  0013D2  8ED0               	bsf	208,7,c	;volatile
  5245                           
  5246                           ;main.c: 661: INTCONbits.PEIE = 1;
  5247  0013D4  8CF2               	bsf	242,6,c	;volatile
  5248                           
  5249                           ;main.c: 662: INTCONbits.GIE = 1;
  5250  0013D6  8EF2               	bsf	242,7,c	;volatile
  5251                           
  5252                           ;main.c: 663: initLCD();
  5253  0013D8  EC01  F008         	call	_initLCD	;wreg free
  5254                           
  5255                           ;main.c: 664: init_uart();
  5256  0013DC  EC39  F00C         	call	_init_uart	;wreg free
  5257                           
  5258                           ;main.c: 665: cgrom_char(symbol_4, 1);
  5259  0013E0  0EE3               	movlw	low _symbol_4
  5260  0013E2  6E4A               	movwf	cgrom_char@symbol^0,c
  5261  0013E4  0E1E               	movlw	high _symbol_4
  5262  0013E6  6E4B               	movwf	(cgrom_char@symbol+1)^0,c
  5263  0013E8  0E01               	movlw	1
  5264  0013EA  6E4C               	movwf	cgrom_char@address^0,c
  5265  0013EC  EC69  F00B         	call	_cgrom_char	;wreg free
  5266                           
  5267                           ;main.c: 666: LATCbits.LATC4 = 0;
  5268  0013F0  988B               	bcf	139,4,c	;volatile
  5269                           
  5270                           ;main.c: 667: snd_k = 0;
  5271  0013F2  9C5A               	bcf	(_snd_k/(0+8))^0,_snd_k& (0+7),c
  5272                           
  5273                           ;main.c: 668: snd_b = 0;
  5274  0013F4  9A5A               	bcf	(_snd_b/(0+8))^0,_snd_b& (0+7),c
  5275                           
  5276                           ;main.c: 669: snd_all = 0;
  5277  0013F6  985A               	bcf	(_snd_all/(0+8))^0,_snd_all& (0+7),c
  5278  0013F8  0012               	return		;funcret
  5279  0013FA                     __end_of_Main_init:
  5280                           	callstack 0
  5281                           
  5282 ;; *************** function _init_uart *****************
  5283 ;; Defined at:
  5284 ;;		line 28 in file "eusart.c"
  5285 ;; Parameters:    Size  Location     Type
  5286 ;;		None
  5287 ;; Auto vars:     Size  Location     Type
  5288 ;;		None
  5289 ;; Return value:  Size  Location     Type
  5290 ;;                  1    wreg      void 
  5291 ;; Registers used:
  5292 ;;		wreg, status,2
  5293 ;; Tracked objects:
  5294 ;;		On entry : 0/0
  5295 ;;		On exit  : 0/0
  5296 ;;		Unchanged: 0/0
  5297 ;; Data sizes:     COMRAM   BANK0   BANK1
  5298 ;;      Params:         0       0       0
  5299 ;;      Locals:         0       0       0
  5300 ;;      Temps:          0       0       0
  5301 ;;      Totals:         0       0       0
  5302 ;;Total ram usage:        0 bytes
  5303 ;; Hardware stack levels used:    1
  5304 ;; Hardware stack levels required when called:    2
  5305 ;; This function calls:
  5306 ;;		Nothing
  5307 ;; This function is called by:
  5308 ;;		_Main_init
  5309 ;; This function uses a non-reentrant model
  5310 ;;
  5311                           
  5312                           	psect	text19
  5313  001872                     __ptext19:
  5314                           	callstack 0
  5315  001872                     _init_uart:
  5316                           	callstack 27
  5317                           
  5318                           ;eusart.c: 30: TRISCbits.RC6 = 0;
  5319                           
  5320                           ;incstack = 0
  5321  001872  9C94               	bcf	148,6,c	;volatile
  5322                           
  5323                           ;eusart.c: 31: TRISCbits.RC7 = 1;
  5324  001874  8E94               	bsf	148,7,c	;volatile
  5325                           
  5326                           ;eusart.c: 32: TXSTAbits.SYNC = 0;
  5327  001876  98AC               	bcf	172,4,c	;volatile
  5328                           
  5329                           ;eusart.c: 33: TXSTAbits.TXEN = 1;
  5330  001878  8AAC               	bsf	172,5,c	;volatile
  5331                           
  5332                           ;eusart.c: 34: RCSTAbits.CREN = 1;
  5333  00187A  88AB               	bsf	171,4,c	;volatile
  5334                           
  5335                           ;eusart.c: 35: RCSTAbits.SPEN = 1;
  5336  00187C  8EAB               	bsf	171,7,c	;volatile
  5337                           
  5338                           ;eusart.c: 38: TXSTAbits.BRGH = 1;
  5339  00187E  84AC               	bsf	172,2,c	;volatile
  5340                           
  5341                           ;eusart.c: 39: SPBRG = 0x33;
  5342  001880  0E33               	movlw	51
  5343  001882  6EAF               	movwf	175,c	;volatile
  5344                           
  5345                           ;eusart.c: 52: eusartTxHead = 0;
  5346  001884  6A2D               	clrf	_eusartTxHead^0,c
  5347                           
  5348                           ;eusart.c: 57: eusartRxTail = 0;
  5349  001886  0E10               	movlw	16
  5350  001888  6E2C               	movwf	_eusartTxBufferRemaining^0,c	;volatile
  5351                           
  5352                           ;eusart.c: 58: eusartRxCount = 0;
  5353  00188A  6A2B               	clrf	_eusartRxCount^0,c	;volatile
  5354  00188C  0012               	return		;funcret
  5355  00188E                     __end_of_init_uart:
  5356                           	callstack 0
  5357                           
  5358 ;; *************** function _init_ds18b20 *****************
  5359 ;; Defined at:
  5360 ;;		line 18 in file "ds18b20.c"
  5361 ;; Parameters:    Size  Location     Type
  5362 ;;		None
  5363 ;; Auto vars:     Size  Location     Type
  5364 ;;  i               1   12[COMRAM] unsigned char 
  5365 ;;  q               1   11[COMRAM] unsigned char 
  5366 ;; Return value:  Size  Location     Type
  5367 ;;                  1    wreg      void 
  5368 ;; Registers used:
  5369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5370 ;; Tracked objects:
  5371 ;;		On entry : 0/0
  5372 ;;		On exit  : 0/0
  5373 ;;		Unchanged: 0/0
  5374 ;; Data sizes:     COMRAM   BANK0   BANK1
  5375 ;;      Params:         0       0       0
  5376 ;;      Locals:         2       0       0
  5377 ;;      Temps:          2       0       0
  5378 ;;      Totals:         4       0       0
  5379 ;;Total ram usage:        4 bytes
  5380 ;; Hardware stack levels used:    1
  5381 ;; Hardware stack levels required when called:    4
  5382 ;; This function calls:
  5383 ;;		_ow_reset
  5384 ;;		_read_eep
  5385 ;;		_write_byte
  5386 ;; This function is called by:
  5387 ;;		_Main_init
  5388 ;; This function uses a non-reentrant model
  5389 ;;
  5390                           
  5391                           	psect	text20
  5392  0013FA                     __ptext20:
  5393                           	callstack 0
  5394  0013FA                     _init_ds18b20:
  5395                           	callstack 25
  5396                           
  5397                           ;ds18b20.c: 20: if (!ow_reset())
  5398                           
  5399                           ;incstack = 0
  5400  0013FA  EC82  F00B         	call	_ow_reset	;wreg free
  5401  0013FE  0900               	iorlw	0
  5402  001400  E10F               	bnz	l2595
  5403                           
  5404                           ;ds18b20.c: 21: {;ds18b20.c: 23: write_byte(0xCC);
  5405  001402  0ECC               	movlw	204
  5406  001404  EC34  F00B         	call	_write_byte
  5407                           
  5408                           ;ds18b20.c: 24: write_byte(0x4E);
  5409  001408  0E4E               	movlw	78
  5410  00140A  EC34  F00B         	call	_write_byte
  5411                           
  5412                           ;ds18b20.c: 25: write_byte(0x00);
  5413  00140E  0E00               	movlw	0
  5414  001410  EC34  F00B         	call	_write_byte
  5415                           
  5416                           ;ds18b20.c: 26: write_byte(0x00);
  5417  001414  0E00               	movlw	0
  5418  001416  EC34  F00B         	call	_write_byte
  5419                           
  5420                           ;ds18b20.c: 27: write_byte(0x7F);
  5421  00141A  0E7F               	movlw	127
  5422  00141C  EC34  F00B         	call	_write_byte
  5423  001420                     l2595:
  5424                           
  5425                           ;ds18b20.c: 28: };ds18b20.c: 30: for (uint8_t q = 0; q < 2; q++) {
  5426  001420  6A4E               	clrf	init_ds18b20@q^0,c
  5427  001422                     l371:
  5428                           
  5429                           ;ds18b20.c: 31: for (uint8_t i = 0; i < 8; i++) {
  5430  001422  6A4F               	clrf	init_ds18b20@i^0,c
  5431  001424                     l2605:
  5432                           
  5433                           ;ds18b20.c: 32: rom_dq[q][i] = read_eep((q*8) + i);
  5434  001424  504E               	movf	init_ds18b20@q^0,w,c
  5435  001426  0D08               	mullw	8
  5436  001428  50F3               	movf	243,w,c
  5437  00142A  0F11               	addlw	low _rom_dq
  5438  00142C  244F               	addwf	init_ds18b20@i^0,w,c
  5439  00142E  6ED9               	movwf	fsr2l,c
  5440  001430  6ADA               	clrf	fsr2h,c
  5441  001432  504E               	movf	init_ds18b20@q^0,w,c
  5442  001434  6E4C               	movwf	??_init_ds18b20^0,c
  5443  001436  6A4D               	clrf	(??_init_ds18b20+1)^0,c
  5444  001438  90D8               	bcf	status,0,c
  5445  00143A  364C               	rlcf	??_init_ds18b20^0,f,c
  5446  00143C  364D               	rlcf	(??_init_ds18b20+1)^0,f,c
  5447  00143E  90D8               	bcf	status,0,c
  5448  001440  364C               	rlcf	??_init_ds18b20^0,f,c
  5449  001442  364D               	rlcf	(??_init_ds18b20+1)^0,f,c
  5450  001444  90D8               	bcf	status,0,c
  5451  001446  364C               	rlcf	??_init_ds18b20^0,f,c
  5452  001448  364D               	rlcf	(??_init_ds18b20+1)^0,f,c
  5453  00144A  504F               	movf	init_ds18b20@i^0,w,c
  5454  00144C  244C               	addwf	??_init_ds18b20^0,w,c
  5455  00144E  6E46               	movwf	read_eep@address^0,c
  5456  001450  0E00               	movlw	0
  5457  001452  204D               	addwfc	(??_init_ds18b20+1)^0,w,c
  5458  001454  6E47               	movwf	(read_eep@address+1)^0,c
  5459  001456  EC5F  F00C         	call	_read_eep	;wreg free
  5460  00145A  6EDF               	movwf	indf2,c
  5461  00145C  2A4F               	incf	init_ds18b20@i^0,f,c
  5462  00145E  0E07               	movlw	7
  5463  001460  644F               	cpfsgt	init_ds18b20@i^0,c
  5464  001462  D7E0               	goto	l2605
  5465  001464  2A4E               	incf	init_ds18b20@q^0,f,c
  5466  001466  0E01               	movlw	1
  5467  001468  644E               	cpfsgt	init_ds18b20@q^0,c
  5468  00146A  D7DB               	goto	l371
  5469  00146C  0C01               	retlw	1
  5470  00146E                     __end_of_init_ds18b20:
  5471                           	callstack 0
  5472                           
  5473 ;; *************** function _write_byte *****************
  5474 ;; Defined at:
  5475 ;;		line 66 in file "onewire.c"
  5476 ;; Parameters:    Size  Location     Type
  5477 ;;  val             1    wreg     unsigned char 
  5478 ;; Auto vars:     Size  Location     Type
  5479 ;;  val             1    6[COMRAM] unsigned char 
  5480 ;;  i               1    8[COMRAM] unsigned char 
  5481 ;;  temp            1    7[COMRAM] unsigned char 
  5482 ;; Return value:  Size  Location     Type
  5483 ;;                  1    wreg      void 
  5484 ;; Registers used:
  5485 ;;		wreg, status,2, status,0, cstack
  5486 ;; Tracked objects:
  5487 ;;		On entry : 0/0
  5488 ;;		On exit  : 0/0
  5489 ;;		Unchanged: 0/0
  5490 ;; Data sizes:     COMRAM   BANK0   BANK1
  5491 ;;      Params:         0       0       0
  5492 ;;      Locals:         3       0       0
  5493 ;;      Temps:          2       0       0
  5494 ;;      Totals:         5       0       0
  5495 ;;Total ram usage:        5 bytes
  5496 ;; Hardware stack levels used:    1
  5497 ;; Hardware stack levels required when called:    3
  5498 ;; This function calls:
  5499 ;;		_write_bit
  5500 ;; This function is called by:
  5501 ;;		_init_ds18b20
  5502 ;;		_ds18b20_readTemp
  5503 ;;		_ds18b20_readrom
  5504 ;; This function uses a non-reentrant model
  5505 ;;
  5506                           
  5507                           	psect	text21
  5508  001668                     __ptext21:
  5509                           	callstack 0
  5510  001668                     _write_byte:
  5511                           	callstack 26
  5512                           
  5513                           ;incstack = 0
  5514                           ;write_byte@val stored from wreg
  5515  001668  6E49               	movwf	write_byte@val^0,c
  5516                           
  5517                           ;onewire.c: 68: uint8_t i;;onewire.c: 69: uint8_t temp;;onewire.c: 71: for (i=0;i<8;i++)
  5518  00166A  6A4B               	clrf	write_byte@i^0,c
  5519  00166C                     l1433:
  5520                           
  5521                           ;onewire.c: 72: {;onewire.c: 73: temp = val >> i;
  5522  00166C  C04B  F047         	movff	write_byte@i,??_write_byte
  5523  001670  C049  F048         	movff	write_byte@val,??_write_byte+1
  5524  001674  2A47               	incf	??_write_byte^0,f,c
  5525  001676  D002               	goto	u124
  5526  001678                     u125:
  5527  001678  90D8               	bcf	status,0,c
  5528  00167A  3248               	rrcf	(??_write_byte+1)^0,f,c
  5529  00167C                     u124:
  5530  00167C  2E47               	decfsz	??_write_byte^0,f,c
  5531  00167E  D7FC               	goto	u125
  5532  001680  5048               	movf	(??_write_byte+1)^0,w,c
  5533  001682  6E4A               	movwf	write_byte@temp^0,c
  5534                           
  5535                           ;onewire.c: 74: temp &= 0x01;
  5536  001684  0E01               	movlw	1
  5537  001686  164A               	andwf	write_byte@temp^0,f,c
  5538                           
  5539                           ;onewire.c: 75: write_bit(temp);
  5540  001688  504A               	movf	write_byte@temp^0,w,c
  5541  00168A  EC1C  F00C         	call	_write_bit
  5542  00168E  2A4B               	incf	write_byte@i^0,f,c
  5543  001690  0E07               	movlw	7
  5544  001692  644B               	cpfsgt	write_byte@i^0,c
  5545  001694  D7EB               	goto	l1433
  5546                           
  5547                           ;onewire.c: 76: };onewire.c: 78: _delay((unsigned long)((105)*(8000000/4000000.0)));
  5548  001696  0E46               	movlw	70
  5549  001698                     u2847:
  5550  001698  2EE8               	decfsz	wreg,f,c
  5551  00169A  D7FE               	bra	u2847
  5552  00169C  0012               	return		;funcret
  5553  00169E                     __end_of_write_byte:
  5554                           	callstack 0
  5555                           
  5556 ;; *************** function _write_bit *****************
  5557 ;; Defined at:
  5558 ;;		line 34 in file "onewire.c"
  5559 ;; Parameters:    Size  Location     Type
  5560 ;;  bitval          1    wreg     unsigned char 
  5561 ;; Auto vars:     Size  Location     Type
  5562 ;;  bitval          1    3[COMRAM] unsigned char 
  5563 ;; Return value:  Size  Location     Type
  5564 ;;                  1    wreg      void 
  5565 ;; Registers used:
  5566 ;;		wreg, status,2, status,0, cstack
  5567 ;; Tracked objects:
  5568 ;;		On entry : 0/0
  5569 ;;		On exit  : 0/0
  5570 ;;		Unchanged: 0/0
  5571 ;; Data sizes:     COMRAM   BANK0   BANK1
  5572 ;;      Params:         0       0       0
  5573 ;;      Locals:         1       0       0
  5574 ;;      Temps:          0       0       0
  5575 ;;      Totals:         1       0       0
  5576 ;;Total ram usage:        1 bytes
  5577 ;; Hardware stack levels used:    1
  5578 ;; Hardware stack levels required when called:    2
  5579 ;; This function calls:
  5580 ;;		Nothing
  5581 ;; This function is called by:
  5582 ;;		_write_byte
  5583 ;; This function uses a non-reentrant model
  5584 ;;
  5585                           
  5586                           	psect	text22
  5587  001838                     __ptext22:
  5588                           	callstack 0
  5589  001838                     _write_bit:
  5590                           	callstack 26
  5591                           
  5592                           ;incstack = 0
  5593                           ;write_bit@bitval stored from wreg
  5594  001838  6E46               	movwf	write_bit@bitval^0,c
  5595                           
  5596                           ;onewire.c: 36: PORTAbits.RA6 = 0;
  5597  00183A  9C80               	bcf	128,6,c	;volatile
  5598                           
  5599                           ;onewire.c: 37: TRISAbits.TRISA6 = 0;
  5600  00183C  9C92               	bcf	146,6,c	;volatile
  5601                           
  5602                           ;onewire.c: 38: if(bitval == 1) {
  5603  00183E  0446               	decf	write_bit@bitval^0,w,c
  5604  001840  E104               	bnz	l1399
  5605                           
  5606                           ;onewire.c: 39: _delay((unsigned long)((2)*(8000000/4000000.0)));
  5607  001842  D000               	nop2		;2 cycle nop
  5608  001844  D000               	nop2		;2 cycle nop
  5609                           
  5610                           ;onewire.c: 40: PORTAbits.RA6 = 1;
  5611  001846  8C80               	bsf	128,6,c	;volatile
  5612                           
  5613                           ;onewire.c: 41: TRISAbits.TRISA6 = 1;
  5614  001848  8C92               	bsf	146,6,c	;volatile
  5615  00184A                     l1399:
  5616                           
  5617                           ;onewire.c: 42: };onewire.c: 43: _delay((unsigned long)((105)*(8000000/4000000.0)));
  5618  00184A  0E46               	movlw	70
  5619  00184C                     u2857:
  5620  00184C  2EE8               	decfsz	wreg,f,c
  5621  00184E  D7FE               	bra	u2857
  5622                           
  5623                           ;onewire.c: 44: PORTAbits.RA6 = 1;
  5624  001850  8C80               	bsf	128,6,c	;volatile
  5625                           
  5626                           ;onewire.c: 45: TRISAbits.TRISA6 = 1;
  5627  001852  8C92               	bsf	146,6,c	;volatile
  5628  001854  0012               	return		;funcret
  5629  001856                     __end_of_write_bit:
  5630                           	callstack 0
  5631                           
  5632 ;; *************** function _read_eep *****************
  5633 ;; Defined at:
  5634 ;;		line 25 in file "eeprom.c"
  5635 ;; Parameters:    Size  Location     Type
  5636 ;;  address         2    3[COMRAM] unsigned short 
  5637 ;; Auto vars:     Size  Location     Type
  5638 ;;		None
  5639 ;; Return value:  Size  Location     Type
  5640 ;;                  1    wreg      unsigned char 
  5641 ;; Registers used:
  5642 ;;		wreg, status,2
  5643 ;; Tracked objects:
  5644 ;;		On entry : 0/0
  5645 ;;		On exit  : 0/0
  5646 ;;		Unchanged: 0/0
  5647 ;; Data sizes:     COMRAM   BANK0   BANK1
  5648 ;;      Params:         2       0       0
  5649 ;;      Locals:         0       0       0
  5650 ;;      Temps:          0       0       0
  5651 ;;      Totals:         2       0       0
  5652 ;;Total ram usage:        2 bytes
  5653 ;; Hardware stack levels used:    1
  5654 ;; Hardware stack levels required when called:    2
  5655 ;; This function calls:
  5656 ;;		Nothing
  5657 ;; This function is called by:
  5658 ;;		_main
  5659 ;;		_init_ds18b20
  5660 ;; This function uses a non-reentrant model
  5661 ;;
  5662                           
  5663                           	psect	text23
  5664  0018BE                     __ptext23:
  5665                           	callstack 0
  5666  0018BE                     _read_eep:
  5667                           	callstack 28
  5668                           
  5669                           ;eeprom.c: 28: {}
  5670                           
  5671                           ;incstack = 0
  5672  0018BE  B2A6               	btfsc	166,1,c	;volsfr
  5673  0018C0  D7FE               	goto	_read_eep
  5674                           
  5675                           ;eeprom.c: 30: EEADR = address;
  5676  0018C2  C046  FFA9         	movff	read_eep@address,4009	;volatile
  5677                           
  5678                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
  5679  0018C6  9EA6               	bcf	166,7,c	;volsfr
  5680                           
  5681                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
  5682  0018C8  9CA6               	bcf	166,6,c	;volsfr
  5683                           
  5684                           ;eeprom.c: 33: EECON1bits.RD = 1;
  5685  0018CA  80A6               	bsf	166,0,c	;volsfr
  5686                           
  5687                           ;eeprom.c: 34: return( EEDATA );
  5688  0018CC  50A8               	movf	168,w,c	;volatile
  5689  0018CE  0012               	return		;funcret
  5690  0018D0                     __end_of_read_eep:
  5691                           	callstack 0
  5692                           
  5693 ;; *************** function _ow_reset *****************
  5694 ;; Defined at:
  5695 ;;		line 5 in file "onewire.c"
  5696 ;; Parameters:    Size  Location     Type
  5697 ;;		None
  5698 ;; Auto vars:     Size  Location     Type
  5699 ;;  presence        1    3[COMRAM] unsigned char 
  5700 ;; Return value:  Size  Location     Type
  5701 ;;                  1    wreg      unsigned char 
  5702 ;; Registers used:
  5703 ;;		wreg, status,2
  5704 ;; Tracked objects:
  5705 ;;		On entry : 0/0
  5706 ;;		On exit  : 0/0
  5707 ;;		Unchanged: 0/0
  5708 ;; Data sizes:     COMRAM   BANK0   BANK1
  5709 ;;      Params:         0       0       0
  5710 ;;      Locals:         1       0       0
  5711 ;;      Temps:          0       0       0
  5712 ;;      Totals:         1       0       0
  5713 ;;Total ram usage:        1 bytes
  5714 ;; Hardware stack levels used:    1
  5715 ;; Hardware stack levels required when called:    2
  5716 ;; This function calls:
  5717 ;;		Nothing
  5718 ;; This function is called by:
  5719 ;;		_init_ds18b20
  5720 ;;		_ds18b20_readTemp
  5721 ;;		_ds18b20_readrom
  5722 ;; This function uses a non-reentrant model
  5723 ;;
  5724                           
  5725                           	psect	text24
  5726  001704                     __ptext24:
  5727                           	callstack 0
  5728  001704                     _ow_reset:
  5729                           	callstack 27
  5730                           
  5731                           ;onewire.c: 7: uint8_t presence;;onewire.c: 8: PORTAbits.RA6 = 0;
  5732                           
  5733                           ;incstack = 0
  5734  001704  9C80               	bcf	128,6,c	;volatile
  5735                           
  5736                           ;onewire.c: 9: TRISAbits.TRISA6 = 0;
  5737  001706  9C92               	bcf	146,6,c	;volatile
  5738                           
  5739                           ;onewire.c: 10: _delay((unsigned long)((500)*(8000000/4000000.0)));
  5740  001708  0EC8               	movlw	200
  5741  00170A                     u2867:
  5742  00170A  D000               	nop2	
  5743  00170C  2EE8               	decfsz	wreg,f,c
  5744  00170E  D7FD               	bra	u2867
  5745                           
  5746                           ;onewire.c: 11: PORTAbits.RA6 = 1;
  5747  001710  8C80               	bsf	128,6,c	;volatile
  5748                           
  5749                           ;onewire.c: 12: TRISAbits.TRISA6 = 1;
  5750  001712  8C92               	bsf	146,6,c	;volatile
  5751                           
  5752                           ;onewire.c: 13: _delay((unsigned long)((100)*(8000000/4000000.0)));
  5753  001714  0E42               	movlw	66
  5754  001716                     u2877:
  5755  001716  2EE8               	decfsz	wreg,f,c
  5756  001718  D7FE               	bra	u2877
  5757  00171A  D000               	nop2	
  5758                           
  5759                           ;onewire.c: 14: presence = PORTAbits.RA6;
  5760  00171C  0E00               	movlw	0
  5761  00171E  BC80               	btfsc	128,6,c	;volatile
  5762  001720  0E01               	movlw	1
  5763  001722  6E46               	movwf	ow_reset@presence^0,c
  5764                           
  5765                           ;onewire.c: 15: _delay((unsigned long)((424)*(8000000/4000000.0)));
  5766  001724  0EA9               	movlw	169
  5767  001726                     u2887:
  5768  001726  D000               	nop2	
  5769  001728  2EE8               	decfsz	wreg,f,c
  5770  00172A  D7FD               	bra	u2887
  5771  00172C  D000               	nop2	
  5772  00172E  F000               	nop	
  5773                           
  5774                           ;onewire.c: 16: return(presence);
  5775  001730  5046               	movf	ow_reset@presence^0,w,c
  5776  001732  0012               	return		;funcret
  5777  001734                     __end_of_ow_reset:
  5778                           	callstack 0
  5779                           
  5780 ;; *************** function _initLCD *****************
  5781 ;; Defined at:
  5782 ;;		line 10 in file "hd44780.c"
  5783 ;; Parameters:    Size  Location     Type
  5784 ;;		None
  5785 ;; Auto vars:     Size  Location     Type
  5786 ;;		None
  5787 ;; Return value:  Size  Location     Type
  5788 ;;                  1    wreg      void 
  5789 ;; Registers used:
  5790 ;;		wreg, status,2, status,0, cstack
  5791 ;; Tracked objects:
  5792 ;;		On entry : 0/0
  5793 ;;		On exit  : 0/0
  5794 ;;		Unchanged: 0/0
  5795 ;; Data sizes:     COMRAM   BANK0   BANK1
  5796 ;;      Params:         0       0       0
  5797 ;;      Locals:         0       0       0
  5798 ;;      Temps:          1       0       0
  5799 ;;      Totals:         1       0       0
  5800 ;;Total ram usage:        1 bytes
  5801 ;; Hardware stack levels used:    1
  5802 ;; Hardware stack levels required when called:    5
  5803 ;; This function calls:
  5804 ;;		_clearLCD
  5805 ;;		_lcdNibble
  5806 ;;		_lcdWrite
  5807 ;; This function is called by:
  5808 ;;		_Main_init
  5809 ;; This function uses a non-reentrant model
  5810 ;;
  5811                           
  5812                           	psect	text25
  5813  001002                     __ptext25:
  5814                           	callstack 0
  5815  001002                     _initLCD:
  5816                           	callstack 24
  5817                           
  5818                           ;hd44780.c: 11: LATAbits.LATA2 = 0;
  5819                           
  5820                           ;incstack = 0
  5821  001002  9489               	bcf	137,2,c	;volatile
  5822                           
  5823                           ;hd44780.c: 12: LATAbits.LATA1 = 0;
  5824  001004  9289               	bcf	137,1,c	;volatile
  5825                           
  5826                           ;hd44780.c: 14: _delay((unsigned long)((10)*(8000000/4000.0)));
  5827  001006  0E1A               	movlw	26
  5828  001008  6E4B               	movwf	??_initLCD^0,c
  5829  00100A  0EF8               	movlw	248
  5830  00100C                     u2897:
  5831  00100C  2EE8               	decfsz	wreg,f,c
  5832  00100E  D7FE               	bra	u2897
  5833  001010  2E4B               	decfsz	??_initLCD^0,f,c
  5834  001012  D7FC               	bra	u2897
  5835  001014  D000               	nop2	
  5836                           
  5837                           ;hd44780.c: 15: _delay((unsigned long)((10)*(8000000/4000.0)));
  5838  001016  0E1A               	movlw	26
  5839  001018  6E4B               	movwf	??_initLCD^0,c
  5840  00101A  0EF8               	movlw	248
  5841  00101C                     u2907:
  5842  00101C  2EE8               	decfsz	wreg,f,c
  5843  00101E  D7FE               	bra	u2907
  5844  001020  2E4B               	decfsz	??_initLCD^0,f,c
  5845  001022  D7FC               	bra	u2907
  5846  001024  D000               	nop2	
  5847                           
  5848                           ;hd44780.c: 16: _delay((unsigned long)((10)*(8000000/4000.0)));
  5849  001026  0E1A               	movlw	26
  5850  001028  6E4B               	movwf	??_initLCD^0,c
  5851  00102A  0EF8               	movlw	248
  5852  00102C                     u2917:
  5853  00102C  2EE8               	decfsz	wreg,f,c
  5854  00102E  D7FE               	bra	u2917
  5855  001030  2E4B               	decfsz	??_initLCD^0,f,c
  5856  001032  D7FC               	bra	u2917
  5857  001034  D000               	nop2	
  5858                           
  5859                           ;hd44780.c: 17: _delay((unsigned long)((10)*(8000000/4000.0)));
  5860  001036  0E1A               	movlw	26
  5861  001038  6E4B               	movwf	??_initLCD^0,c
  5862  00103A  0EF8               	movlw	248
  5863  00103C                     u2927:
  5864  00103C  2EE8               	decfsz	wreg,f,c
  5865  00103E  D7FE               	bra	u2927
  5866  001040  2E4B               	decfsz	??_initLCD^0,f,c
  5867  001042  D7FC               	bra	u2927
  5868  001044  D000               	nop2	
  5869                           
  5870                           ;hd44780.c: 21: lcdNibble(0b0011);
  5871  001046  0E03               	movlw	3
  5872  001048  EC84  F009         	call	_lcdNibble
  5873                           
  5874                           ;hd44780.c: 22: _delay((unsigned long)((5)*(8000000/4000.0)));
  5875  00104C  0E0D               	movlw	13
  5876  00104E  6E4B               	movwf	??_initLCD^0,c
  5877  001050  0EFC               	movlw	252
  5878  001052                     u2937:
  5879  001052  2EE8               	decfsz	wreg,f,c
  5880  001054  D7FE               	bra	u2937
  5881  001056  2E4B               	decfsz	??_initLCD^0,f,c
  5882  001058  D7FC               	bra	u2937
  5883                           
  5884                           ;hd44780.c: 23: lcdNibble(0b0011);
  5885  00105A  0E03               	movlw	3
  5886  00105C  EC84  F009         	call	_lcdNibble
  5887                           
  5888                           ;hd44780.c: 24: _delay((unsigned long)((5)*(8000000/4000.0)));
  5889  001060  0E0D               	movlw	13
  5890  001062  6E4B               	movwf	??_initLCD^0,c
  5891  001064  0EFC               	movlw	252
  5892  001066                     u2947:
  5893  001066  2EE8               	decfsz	wreg,f,c
  5894  001068  D7FE               	bra	u2947
  5895  00106A  2E4B               	decfsz	??_initLCD^0,f,c
  5896  00106C  D7FC               	bra	u2947
  5897                           
  5898                           ;hd44780.c: 25: lcdNibble(0b0011);
  5899  00106E  0E03               	movlw	3
  5900  001070  EC84  F009         	call	_lcdNibble
  5901                           
  5902                           ;hd44780.c: 26: _delay((unsigned long)((5)*(8000000/4000.0)));
  5903  001074  0E0D               	movlw	13
  5904  001076  6E4B               	movwf	??_initLCD^0,c
  5905  001078  0EFC               	movlw	252
  5906  00107A                     u2957:
  5907  00107A  2EE8               	decfsz	wreg,f,c
  5908  00107C  D7FE               	bra	u2957
  5909  00107E  2E4B               	decfsz	??_initLCD^0,f,c
  5910  001080  D7FC               	bra	u2957
  5911                           
  5912                           ;hd44780.c: 27: lcdNibble(0b0010);
  5913  001082  0E02               	movlw	2
  5914  001084  EC84  F009         	call	_lcdNibble
  5915                           
  5916                           ;hd44780.c: 28: _delay((unsigned long)((5)*(8000000/4000.0)));
  5917  001088  0E0D               	movlw	13
  5918  00108A  6E4B               	movwf	??_initLCD^0,c
  5919  00108C  0EFC               	movlw	252
  5920  00108E                     u2967:
  5921  00108E  2EE8               	decfsz	wreg,f,c
  5922  001090  D7FE               	bra	u2967
  5923  001092  2E4B               	decfsz	??_initLCD^0,f,c
  5924  001094  D7FC               	bra	u2967
  5925                           
  5926                           ;hd44780.c: 31: lcdWrite(((0b0010 << 4) | (1 << 3)), COMMAND);
  5927  001096  0E00               	movlw	0
  5928  001098  6E48               	movwf	lcdWrite@type^0,c
  5929  00109A  0E28               	movlw	40
  5930  00109C  ECE9  F00B         	call	_lcdWrite
  5931                           
  5932                           ;hd44780.c: 32: _delay((unsigned long)((5)*(8000000/4000.0)));
  5933  0010A0  0E0D               	movlw	13
  5934  0010A2  6E4B               	movwf	??_initLCD^0,c
  5935  0010A4  0EFC               	movlw	252
  5936  0010A6                     u2977:
  5937  0010A6  2EE8               	decfsz	wreg,f,c
  5938  0010A8  D7FE               	bra	u2977
  5939  0010AA  2E4B               	decfsz	??_initLCD^0,f,c
  5940  0010AC  D7FC               	bra	u2977
  5941                           
  5942                           ;hd44780.c: 33: lcdWrite(((0b1100) | (0 << 1) | (0 << 0)), COMMAND);
  5943  0010AE  0E00               	movlw	0
  5944  0010B0  6E48               	movwf	lcdWrite@type^0,c
  5945  0010B2  0E0C               	movlw	12
  5946  0010B4  ECE9  F00B         	call	_lcdWrite
  5947                           
  5948                           ;hd44780.c: 34: _delay((unsigned long)((8)*(8000000/4000.0)));
  5949  0010B8  0E15               	movlw	21
  5950  0010BA  6E4B               	movwf	??_initLCD^0,c
  5951  0010BC  0EC6               	movlw	198
  5952  0010BE                     u2987:
  5953  0010BE  2EE8               	decfsz	wreg,f,c
  5954  0010C0  D7FE               	bra	u2987
  5955  0010C2  2E4B               	decfsz	??_initLCD^0,f,c
  5956  0010C4  D7FC               	bra	u2987
  5957  0010C6  D000               	nop2	
  5958                           
  5959                           ;hd44780.c: 35: clearLCD();
  5960  0010C8  EC47  F00C         	call	_clearLCD	;wreg free
  5961                           
  5962                           ;hd44780.c: 36: _delay((unsigned long)((5)*(8000000/4000.0)));
  5963  0010CC  0E0D               	movlw	13
  5964  0010CE  6E4B               	movwf	??_initLCD^0,c
  5965  0010D0  0EFC               	movlw	252
  5966  0010D2                     u2997:
  5967  0010D2  2EE8               	decfsz	wreg,f,c
  5968  0010D4  D7FE               	bra	u2997
  5969  0010D6  2E4B               	decfsz	??_initLCD^0,f,c
  5970  0010D8  D7FC               	bra	u2997
  5971                           
  5972                           ;hd44780.c: 37: lcdWrite(0x06, COMMAND);
  5973  0010DA  0E00               	movlw	0
  5974  0010DC  6E48               	movwf	lcdWrite@type^0,c
  5975  0010DE  0E06               	movlw	6
  5976  0010E0  ECE9  F00B         	call	_lcdWrite
  5977                           
  5978                           ;hd44780.c: 38: _delay((unsigned long)((5)*(8000000/4000.0)));
  5979  0010E4  0E0D               	movlw	13
  5980  0010E6  6E4B               	movwf	??_initLCD^0,c
  5981  0010E8  0EFC               	movlw	252
  5982  0010EA                     u3007:
  5983  0010EA  2EE8               	decfsz	wreg,f,c
  5984  0010EC  D7FE               	bra	u3007
  5985  0010EE  2E4B               	decfsz	??_initLCD^0,f,c
  5986  0010F0  D7FC               	bra	u3007
  5987                           
  5988                           ;hd44780.c: 39: clearLCD();
  5989  0010F2  EC47  F00C         	call	_clearLCD	;wreg free
  5990                           
  5991                           ;hd44780.c: 41: LATAbits.LATA2 = 1;
  5992  0010F6  8489               	bsf	137,2,c	;volatile
  5993  0010F8  0012               	return		;funcret
  5994  0010FA                     __end_of_initLCD:
  5995                           	callstack 0
  5996                           
  5997 ;; *************** function _clearLCD *****************
  5998 ;; Defined at:
  5999 ;;		line 45 in file "hd44780.c"
  6000 ;; Parameters:    Size  Location     Type
  6001 ;;		None
  6002 ;; Auto vars:     Size  Location     Type
  6003 ;;		None
  6004 ;; Return value:  Size  Location     Type
  6005 ;;                  1    wreg      void 
  6006 ;; Registers used:
  6007 ;;		wreg, status,2, status,0, cstack
  6008 ;; Tracked objects:
  6009 ;;		On entry : 0/0
  6010 ;;		On exit  : 0/0
  6011 ;;		Unchanged: 0/0
  6012 ;; Data sizes:     COMRAM   BANK0   BANK1
  6013 ;;      Params:         0       0       0
  6014 ;;      Locals:         0       0       0
  6015 ;;      Temps:          1       0       0
  6016 ;;      Totals:         1       0       0
  6017 ;;Total ram usage:        1 bytes
  6018 ;; Hardware stack levels used:    1
  6019 ;; Hardware stack levels required when called:    4
  6020 ;; This function calls:
  6021 ;;		_lcdWrite
  6022 ;; This function is called by:
  6023 ;;		_main
  6024 ;;		_initLCD
  6025 ;; This function uses a non-reentrant model
  6026 ;;
  6027                           
  6028                           	psect	text26
  6029  00188E                     __ptext26:
  6030                           	callstack 0
  6031  00188E                     _clearLCD:
  6032                           	callstack 0
  6033                           
  6034                           ;hd44780.c: 46: lcdWrite(0x01, COMMAND);
  6035                           
  6036                           ;incstack = 0
  6037  00188E  EC3C  F009         	call	PL50	;call to abstracted procedure
  6038  001892  ECE9  F00B         	call	_lcdWrite
  6039                           
  6040                           ;hd44780.c: 47: _delay((unsigned long)((2)*(8000000/4000.0)));
  6041  001896  0E06               	movlw	6
  6042  001898  6E4A               	movwf	??_clearLCD^0,c
  6043  00189A  0E30               	movlw	48
  6044  00189C                     u3017:
  6045  00189C  2EE8               	decfsz	wreg,f,c
  6046  00189E  D7FE               	bra	u3017
  6047  0018A0  2E4A               	decfsz	??_clearLCD^0,f,c
  6048  0018A2  D7FC               	bra	u3017
  6049  0018A4  D000               	nop2	
  6050  0018A6  0012               	return		;funcret
  6051  0018A8                     __end_of_clearLCD:
  6052                           	callstack 0
  6053                           
  6054 ;; *************** function _cgrom_char *****************
  6055 ;; Defined at:
  6056 ;;		line 127 in file "hd44780.c"
  6057 ;; Parameters:    Size  Location     Type
  6058 ;;  symbol          2    7[COMRAM] PTR unsigned char 
  6059 ;;		 -> symbol_4(8), 
  6060 ;;  address         1    9[COMRAM] unsigned char 
  6061 ;; Auto vars:     Size  Location     Type
  6062 ;;  i               1   10[COMRAM] unsigned char 
  6063 ;; Return value:  Size  Location     Type
  6064 ;;                  1    wreg      void 
  6065 ;; Registers used:
  6066 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6067 ;; Tracked objects:
  6068 ;;		On entry : 0/0
  6069 ;;		On exit  : 0/0
  6070 ;;		Unchanged: 0/0
  6071 ;; Data sizes:     COMRAM   BANK0   BANK1
  6072 ;;      Params:         3       0       0
  6073 ;;      Locals:         1       0       0
  6074 ;;      Temps:          0       0       0
  6075 ;;      Totals:         4       0       0
  6076 ;;Total ram usage:        4 bytes
  6077 ;; Hardware stack levels used:    1
  6078 ;; Hardware stack levels required when called:    4
  6079 ;; This function calls:
  6080 ;;		_lcdWrite
  6081 ;; This function is called by:
  6082 ;;		_Main_init
  6083 ;; This function uses a non-reentrant model
  6084 ;;
  6085                           
  6086                           	psect	text27
  6087  0016D2                     __ptext27:
  6088                           	callstack 0
  6089  0016D2                     _cgrom_char:
  6090                           	callstack 25
  6091                           
  6092                           ;hd44780.c: 128: uint8_t i;;hd44780.c: 129: lcdWrite(0x40 | (address * 8), COMMAND);
  6093                           
  6094                           ;incstack = 0
  6095  0016D2  6A48               	clrf	lcdWrite@type^0,c
  6096  0016D4  504C               	movf	cgrom_char@address^0,w,c
  6097  0016D6  0D08               	mullw	8
  6098  0016D8  50F3               	movf	243,w,c
  6099  0016DA  0940               	iorlw	64
  6100  0016DC  ECE9  F00B         	call	_lcdWrite
  6101                           
  6102                           ;hd44780.c: 130: for (i = 0; i < 8; i++)
  6103  0016E0  6A4D               	clrf	cgrom_char@i^0,c
  6104  0016E2                     l2653:
  6105                           
  6106                           ;hd44780.c: 131: lcdWrite(*symbol++, DATA);
  6107  0016E2  0E01               	movlw	1
  6108  0016E4  6E48               	movwf	lcdWrite@type^0,c
  6109  0016E6  C04A  FFF6         	movff	cgrom_char@symbol,tblptrl
  6110  0016EA  C04B  FFF7         	movff	cgrom_char@symbol+1,tblptrh
  6111  0016EE                     	if	0	;tblptru may be non-zero
  6112  0016EE                     	endif
  6113  0016EE                     	if	0	;tblptru may be non-zero
  6114  0016EE                     	endif
  6115  0016EE  0008               	tblrd		*
  6116  0016F0  50F5               	movf	tablat,w,c
  6117  0016F2  ECE9  F00B         	call	_lcdWrite
  6118  0016F6  4A4A               	infsnz	cgrom_char@symbol^0,f,c
  6119  0016F8  2A4B               	incf	(cgrom_char@symbol+1)^0,f,c
  6120  0016FA  2A4D               	incf	cgrom_char@i^0,f,c
  6121  0016FC  0E07               	movlw	7
  6122  0016FE  644D               	cpfsgt	cgrom_char@i^0,c
  6123  001700  D7F0               	goto	l2653
  6124  001702  0C07               	retlw	7
  6125  001704                     __end_of_cgrom_char:
  6126                           	callstack 0
  6127                           
  6128 ;; *************** function _lcdWrite *****************
  6129 ;; Defined at:
  6130 ;;		line 50 in file "hd44780.c"
  6131 ;; Parameters:    Size  Location     Type
  6132 ;;  byte            1    wreg     unsigned char 
  6133 ;;  type            1    5[COMRAM] enum E2021
  6134 ;; Auto vars:     Size  Location     Type
  6135 ;;  byte            1    6[COMRAM] unsigned char 
  6136 ;; Return value:  Size  Location     Type
  6137 ;;                  1    wreg      void 
  6138 ;; Registers used:
  6139 ;;		wreg, status,2, status,0, cstack
  6140 ;; Tracked objects:
  6141 ;;		On entry : 0/0
  6142 ;;		On exit  : 0/0
  6143 ;;		Unchanged: 0/0
  6144 ;; Data sizes:     COMRAM   BANK0   BANK1
  6145 ;;      Params:         1       0       0
  6146 ;;      Locals:         1       0       0
  6147 ;;      Temps:          0       0       0
  6148 ;;      Totals:         2       0       0
  6149 ;;Total ram usage:        2 bytes
  6150 ;; Hardware stack levels used:    1
  6151 ;; Hardware stack levels required when called:    3
  6152 ;; This function calls:
  6153 ;;		_lcdNibble
  6154 ;; This function is called by:
  6155 ;;		_initLCD
  6156 ;;		_clearLCD
  6157 ;;		_lcd_gotoxy
  6158 ;;		_lcd_putc
  6159 ;;		_lcdPrint
  6160 ;;		_cgrom_char
  6161 ;; This function uses a non-reentrant model
  6162 ;;
  6163                           
  6164                           	psect	text28
  6165  0017D2                     __ptext28:
  6166                           	callstack 0
  6167  0017D2                     _lcdWrite:
  6168                           	callstack 26
  6169                           
  6170                           ;incstack = 0
  6171                           ;lcdWrite@byte stored from wreg
  6172  0017D2  6E49               	movwf	lcdWrite@byte^0,c
  6173                           
  6174                           ;hd44780.c: 51: if (type == COMMAND)
  6175  0017D4  5048               	movf	lcdWrite@type^0,w,c
  6176  0017D6  E102               	bnz	l441
  6177                           
  6178                           ;hd44780.c: 52: LATAbits.LATA2 = 0;
  6179  0017D8  9489               	bcf	137,2,c	;volatile
  6180  0017DA  D001               	goto	l2539
  6181  0017DC                     l441:
  6182                           
  6183                           ;hd44780.c: 53: else;hd44780.c: 54: LATAbits.LATA2 = 1;
  6184  0017DC  8489               	bsf	137,2,c	;volatile
  6185  0017DE                     l2539:
  6186                           
  6187                           ;hd44780.c: 56: _delay((unsigned long)((100)*(8000000/4000000.0)));
  6188  0017DE  0E42               	movlw	66
  6189  0017E0                     u3027:
  6190  0017E0  2EE8               	decfsz	wreg,f,c
  6191  0017E2  D7FE               	bra	u3027
  6192  0017E4  D000               	nop2	
  6193                           
  6194                           ;hd44780.c: 58: lcdNibble(byte >> 4);
  6195  0017E6  3849               	swapf	lcdWrite@byte^0,w,c
  6196  0017E8  0B0F               	andlw	15
  6197  0017EA  EC84  F009         	call	_lcdNibble
  6198                           
  6199                           ;hd44780.c: 59: lcdNibble(byte & 0x0F);
  6200  0017EE  5049               	movf	lcdWrite@byte^0,w,c
  6201  0017F0  0B0F               	andlw	15
  6202  0017F2  EF84  F009         	goto	_lcdNibble
  6203  0017F6                     __end_of_lcdWrite:
  6204                           	callstack 0
  6205                           
  6206 ;; *************** function _lcdNibble *****************
  6207 ;; Defined at:
  6208 ;;		line 63 in file "hd44780.c"
  6209 ;; Parameters:    Size  Location     Type
  6210 ;;  nibble          1    wreg     unsigned char 
  6211 ;; Auto vars:     Size  Location     Type
  6212 ;;  nibble          1    4[COMRAM] unsigned char 
  6213 ;; Return value:  Size  Location     Type
  6214 ;;                  1    wreg      void 
  6215 ;; Registers used:
  6216 ;;		wreg, status,2, status,0
  6217 ;; Tracked objects:
  6218 ;;		On entry : 0/0
  6219 ;;		On exit  : 0/0
  6220 ;;		Unchanged: 0/0
  6221 ;; Data sizes:     COMRAM   BANK0   BANK1
  6222 ;;      Params:         0       0       0
  6223 ;;      Locals:         1       0       0
  6224 ;;      Temps:          1       0       0
  6225 ;;      Totals:         2       0       0
  6226 ;;Total ram usage:        2 bytes
  6227 ;; Hardware stack levels used:    1
  6228 ;; Hardware stack levels required when called:    2
  6229 ;; This function calls:
  6230 ;;		Nothing
  6231 ;; This function is called by:
  6232 ;;		_initLCD
  6233 ;;		_lcdWrite
  6234 ;; This function uses a non-reentrant model
  6235 ;;
  6236                           
  6237                           	psect	text29
  6238  001308                     __ptext29:
  6239                           	callstack 0
  6240  001308                     _lcdNibble:
  6241                           	callstack 26
  6242                           
  6243                           ;incstack = 0
  6244                           ;lcdNibble@nibble stored from wreg
  6245  001308  6E47               	movwf	lcdNibble@nibble^0,c
  6246                           
  6247                           ;hd44780.c: 64: LATCbits.LATC0 = (nibble & 0x01) ? 1 : 0;
  6248  00130A  A047               	btfss	lcdNibble@nibble^0,0,c
  6249  00130C  D003               	goto	u10
  6250  00130E  6A46               	clrf	??_lcdNibble^0,c
  6251  001310  2A46               	incf	??_lcdNibble^0,f,c
  6252  001312  D001               	goto	u28
  6253  001314                     u10:
  6254  001314  6A46               	clrf	??_lcdNibble^0,c
  6255  001316                     u28:
  6256  001316  508B               	movf	139,w,c	;volatile
  6257  001318  1846               	xorwf	??_lcdNibble^0,w,c
  6258  00131A  0BFE               	andlw	-2
  6259  00131C  1846               	xorwf	??_lcdNibble^0,w,c
  6260  00131E  6E8B               	movwf	139,c	;volatile
  6261                           
  6262                           ;hd44780.c: 65: LATCbits.LATC1 = (nibble & 0x02) ? 1 : 0;
  6263  001320  A247               	btfss	lcdNibble@nibble^0,1,c
  6264  001322  D003               	goto	u30
  6265  001324  6A46               	clrf	??_lcdNibble^0,c
  6266  001326  2A46               	incf	??_lcdNibble^0,f,c
  6267  001328  D001               	goto	u48
  6268  00132A                     u30:
  6269  00132A  6A46               	clrf	??_lcdNibble^0,c
  6270  00132C                     u48:
  6271  00132C  4646               	rlncf	??_lcdNibble^0,f,c
  6272  00132E  508B               	movf	139,w,c	;volatile
  6273  001330  1846               	xorwf	??_lcdNibble^0,w,c
  6274  001332  0BFD               	andlw	-3
  6275  001334  1846               	xorwf	??_lcdNibble^0,w,c
  6276  001336  6E8B               	movwf	139,c	;volatile
  6277                           
  6278                           ;hd44780.c: 66: LATCbits.LATC2 = (nibble & 0x04) ? 1 : 0;
  6279  001338  A447               	btfss	lcdNibble@nibble^0,2,c
  6280  00133A  D003               	goto	u50
  6281  00133C  6A46               	clrf	??_lcdNibble^0,c
  6282  00133E  2A46               	incf	??_lcdNibble^0,f,c
  6283  001340  D001               	goto	u68
  6284  001342                     u50:
  6285  001342  6A46               	clrf	??_lcdNibble^0,c
  6286  001344                     u68:
  6287  001344  D819               	call	PL36	;call to abstracted procedure
  6288  001346  0BFB               	andlw	-5
  6289  001348  1846               	xorwf	??_lcdNibble^0,w,c
  6290  00134A  6E8B               	movwf	139,c	;volatile
  6291                           
  6292                           ;hd44780.c: 67: LATCbits.LATC3 = (nibble & 0x08) ? 1 : 0;
  6293  00134C  A647               	btfss	lcdNibble@nibble^0,3,c
  6294  00134E  D003               	goto	u70
  6295  001350  6A46               	clrf	??_lcdNibble^0,c
  6296  001352  2A46               	incf	??_lcdNibble^0,f,c
  6297  001354  D001               	goto	u88
  6298  001356                     u70:
  6299  001356  6A46               	clrf	??_lcdNibble^0,c
  6300  001358                     u88:
  6301  001358  4646               	rlncf	??_lcdNibble^0,f,c
  6302  00135A  D80E               	call	PL36	;call to abstracted procedure
  6303  00135C  0BF7               	andlw	-9
  6304  00135E  1846               	xorwf	??_lcdNibble^0,w,c
  6305  001360  6E8B               	movwf	139,c	;volatile
  6306                           
  6307                           ;hd44780.c: 70: LATAbits.LATA1 = 1;
  6308  001362  8289               	bsf	137,1,c	;volatile
  6309                           
  6310                           ;hd44780.c: 71: _delay((unsigned long)((100)*(8000000/4000000.0)));
  6311  001364  0E42               	movlw	66
  6312  001366                     u3037:
  6313  001366  2EE8               	decfsz	wreg,f,c
  6314  001368  D7FE               	bra	u3037
  6315  00136A  D000               	nop2	
  6316                           
  6317                           ;hd44780.c: 72: LATAbits.LATA1 = 0;
  6318  00136C  9289               	bcf	137,1,c	;volatile
  6319                           
  6320                           ;hd44780.c: 73: _delay((unsigned long)((100)*(8000000/4000000.0)));
  6321  00136E  0E42               	movlw	66
  6322  001370                     u3047:
  6323  001370  2EE8               	decfsz	wreg,f,c
  6324  001372  D7FE               	bra	u3047
  6325  001374  D000               	nop2	
  6326  001376  0012               	return		;funcret
  6327  001378                     __end_of_lcdNibble:
  6328                           	callstack 0
  6329  001378                     PL36:
  6330                           	callstack 26
  6331  001378  4646               	rlncf	??_lcdNibble^0,f,c
  6332  00137A  4646               	rlncf	??_lcdNibble^0,f,c
  6333  00137C  508B               	movf	139,w,c	;volatile
  6334  00137E  1846               	xorwf	??_lcdNibble^0,w,c
  6335  001380  0012               	return	
  6336  001382                     __end_ofPL36:
  6337                           	callstack 0
  6338                           
  6339 ;; *************** function _EUSART_Write_Str *****************
  6340 ;; Defined at:
  6341 ;;		line 106 in file "eusart.c"
  6342 ;; Parameters:    Size  Location     Type
  6343 ;;  t               2    4[COMRAM] PTR const unsigned char 
  6344 ;;		 -> STR_11(7), STR_10(4), STR_9(3), STR_8(4), 
  6345 ;;		 -> STR_7(5), STR_6(4), STR_5(4), 
  6346 ;; Auto vars:     Size  Location     Type
  6347 ;;		None
  6348 ;; Return value:  Size  Location     Type
  6349 ;;                  1    wreg      void 
  6350 ;; Registers used:
  6351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6352 ;; Tracked objects:
  6353 ;;		On entry : 0/0
  6354 ;;		On exit  : 0/0
  6355 ;;		Unchanged: 0/0
  6356 ;; Data sizes:     COMRAM   BANK0   BANK1
  6357 ;;      Params:         2       0       0
  6358 ;;      Locals:         0       0       0
  6359 ;;      Temps:          0       0       0
  6360 ;;      Totals:         2       0       0
  6361 ;;Total ram usage:        2 bytes
  6362 ;; Hardware stack levels used:    1
  6363 ;; Hardware stack levels required when called:    3
  6364 ;; This function calls:
  6365 ;;		_EUSART_Write
  6366 ;; This function is called by:
  6367 ;;		_main
  6368 ;; This function uses a non-reentrant model
  6369 ;;
  6370                           
  6371                           	psect	text30
  6372  001818                     __ptext30:
  6373                           	callstack 0
  6374  001818                     _EUSART_Write_Str:
  6375                           	callstack 27
  6376                           
  6377                           ;eusart.c: 107: while (*t != '\0') {
  6378                           
  6379                           ;incstack = 0
  6380  001818  D005               	goto	l2899
  6381  00181A                     l2895:
  6382                           
  6383                           ;eusart.c: 108: EUSART_Write(*t);
  6384  00181A  D807               	call	PL24	;call to abstracted procedure
  6385  00181C  EC9A  F00B         	call	_EUSART_Write
  6386                           
  6387                           ;eusart.c: 109: *t++;
  6388  001820  4A47               	infsnz	EUSART_Write_Str@t^0,f,c
  6389  001822  2A48               	incf	(EUSART_Write_Str@t+1)^0,f,c
  6390  001824                     l2899:
  6391  001824  D802               	call	PL24	;call to abstracted procedure
  6392  001826  E1F9               	bnz	l2895
  6393  001828  0012               	return		;funcret
  6394  00182A                     __end_of_EUSART_Write_Str:
  6395                           	callstack 0
  6396  00182A                     PL24:
  6397                           	callstack 27
  6398  00182A  C047  FFF6         	movff	EUSART_Write_Str@t,tblptrl
  6399  00182E  C048  FFF7         	movff	EUSART_Write_Str@t+1,tblptrh
  6400  001832                     	if	0	;tblptru may be non-zero
  6401  001832                     	endif
  6402  001832                     	if	0	;tblptru may be non-zero
  6403  001832                     	endif
  6404  001832  0008               	tblrd		*
  6405  001834  50F5               	movf	tablat,w,c
  6406  001836  0012               	return	
  6407  001838                     __end_ofPL24:
  6408                           	callstack 0
  6409                           
  6410 ;; *************** function _EUSART_Write *****************
  6411 ;; Defined at:
  6412 ;;		line 81 in file "eusart.c"
  6413 ;; Parameters:    Size  Location     Type
  6414 ;;  txData          1    wreg     unsigned char 
  6415 ;; Auto vars:     Size  Location     Type
  6416 ;;  txData          1    3[COMRAM] unsigned char 
  6417 ;; Return value:  Size  Location     Type
  6418 ;;                  1    wreg      void 
  6419 ;; Registers used:
  6420 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6421 ;; Tracked objects:
  6422 ;;		On entry : 0/0
  6423 ;;		On exit  : 0/0
  6424 ;;		Unchanged: 0/0
  6425 ;; Data sizes:     COMRAM   BANK0   BANK1
  6426 ;;      Params:         0       0       0
  6427 ;;      Locals:         1       0       0
  6428 ;;      Temps:          0       0       0
  6429 ;;      Totals:         1       0       0
  6430 ;;Total ram usage:        1 bytes
  6431 ;; Hardware stack levels used:    1
  6432 ;; Hardware stack levels required when called:    2
  6433 ;; This function calls:
  6434 ;;		Nothing
  6435 ;; This function is called by:
  6436 ;;		_main
  6437 ;;		_EUSART_Write_Str
  6438 ;; This function uses a non-reentrant model
  6439 ;;
  6440                           
  6441                           	psect	text31
  6442  001734                     __ptext31:
  6443                           	callstack 0
  6444  001734                     _EUSART_Write:
  6445                           	callstack 27
  6446                           
  6447                           ;incstack = 0
  6448                           ;EUSART_Write@txData stored from wreg
  6449  001734  6E46               	movwf	EUSART_Write@txData^0,c
  6450  001736                     
  6451                           ;eusart.c: 82: while (0 == eusartTxBufferRemaining) {
  6452  001736  502C               	movf	_eusartTxBufferRemaining^0,w,c	;volatile
  6453  001738  E0FE               	bz	l1463
  6454                           
  6455                           ;eusart.c: 83: };eusart.c: 85: if (0 == PIE1bits.TXIE) {
  6456  00173A  B89D               	btfsc	157,4,c	;volatile
  6457  00173C  D005               	goto	l610
  6458  00173E                     u180:
  6459  00173E  A89E               	btfss	3998,4,c	;volatile
  6460  001740  D7FE               	goto	u180
  6461                           
  6462                           ;eusart.c: 88: TXREG = txData;
  6463  001742  C046  FFAD         	movff	EUSART_Write@txData,4013	;volatile
  6464                           
  6465                           ;eusart.c: 90: } else {
  6466  001746  0012               	return	
  6467  001748                     l610:
  6468                           
  6469                           ;eusart.c: 91: PIE1bits.TXIE = 0;
  6470  001748  989D               	bcf	157,4,c	;volatile
  6471                           
  6472                           ;eusart.c: 92: eusartTxBuffer[eusartTxHead++] = txData;
  6473  00174A  502D               	movf	_eusartTxHead^0,w,c
  6474  00174C  0F01               	addlw	low _eusartTxBuffer
  6475  00174E  6ED9               	movwf	fsr2l,c
  6476  001750  6ADA               	clrf	fsr2h,c
  6477  001752  C046  FFDF         	movff	EUSART_Write@txData,indf2
  6478  001756  2A2D               	incf	_eusartTxHead^0,f,c
  6479                           
  6480                           ;eusart.c: 93: if (sizeof (eusartTxBuffer) <= eusartTxHead) {
  6481  001758  0E0F               	movlw	15
  6482  00175A  642D               	cpfsgt	_eusartTxHead^0,c
  6483  00175C  D001               	goto	l1477
  6484                           
  6485                           ;eusart.c: 94: eusartTxHead = 0;
  6486  00175E  6A2D               	clrf	_eusartTxHead^0,c
  6487  001760                     l1477:
  6488                           
  6489                           ;eusart.c: 95: };eusart.c: 96: eusartTxBufferRemaining--;
  6490  001760  062C               	decf	_eusartTxBufferRemaining^0,f,c	;volatile
  6491  001762  0012               	return		;funcret
  6492  001764                     __end_of_EUSART_Write:
  6493                           	callstack 0
  6494                           
  6495 ;; *************** function _myIntL *****************
  6496 ;; Defined at:
  6497 ;;		line 697 in file "main.c"
  6498 ;; Parameters:    Size  Location     Type
  6499 ;;		None
  6500 ;; Auto vars:     Size  Location     Type
  6501 ;;		None
  6502 ;; Return value:  Size  Location     Type
  6503 ;;                  1    wreg      void 
  6504 ;; Registers used:
  6505 ;;		wreg, status,2, status,0
  6506 ;; Tracked objects:
  6507 ;;		On entry : 0/0
  6508 ;;		On exit  : 0/0
  6509 ;;		Unchanged: 0/0
  6510 ;; Data sizes:     COMRAM   BANK0   BANK1
  6511 ;;      Params:         0       0       0
  6512 ;;      Locals:         0       0       0
  6513 ;;      Temps:          3       0       0
  6514 ;;      Totals:         3       0       0
  6515 ;;Total ram usage:        3 bytes
  6516 ;; Hardware stack levels used:    1
  6517 ;; Hardware stack levels required when called:    1
  6518 ;; This function calls:
  6519 ;;		Nothing
  6520 ;; This function is called by:
  6521 ;;		Interrupt level 1
  6522 ;; This function uses a non-reentrant model
  6523 ;;
  6524                           
  6525                           	psect	intcodelo
  6526  000018                     __pintcodelo:
  6527                           	callstack 0
  6528  000018                     _myIntL:
  6529                           	callstack 24
  6530                           
  6531                           ;incstack = 0
  6532  000018  8065               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6533  00001A  CFD8 F043          	movff	status,??_myIntL
  6534  00001E  CFE8 F044          	movff	wreg,??_myIntL+1
  6535  000022  CFE0 F045          	movff	bsr,??_myIntL+2
  6536                           
  6537                           ;main.c: 698: static uint8_t snd_delay;;main.c: 700: if (INTCONbits.T0IF == 1) {
  6538  000026  A4F2               	btfss	242,2,c	;volatile
  6539  000028  D031               	goto	i1l338
  6540                           
  6541                           ;main.c: 701: INTCONbits.T0IF = 0;
  6542  00002A  94F2               	bcf	242,2,c	;volatile
  6543                           
  6544                           ;main.c: 702: TMR0H = ((unsigned char)(((45536)>>8)&0xFF));
  6545  00002C  0EB1               	movlw	177
  6546  00002E  6ED7               	movwf	215,c	;volatile
  6547                           
  6548                           ;main.c: 703: TMR0L = ((unsigned char)((45536)&0xFF));
  6549  000030  0EE0               	movlw	224
  6550  000032  6ED6               	movwf	214,c	;volatile
  6551                           
  6552                           ;main.c: 704: read_key = 1;
  6553  000034  825B               	bsf	(_read_key/(0+8))^0,_read_key& (0+7),c
  6554                           
  6555                           ;main.c: 705: tik_time++;
  6556  000036  2A37               	incf	_tik_time^0,f,c
  6557                           
  6558                           ;main.c: 706: tik_time_b++;
  6559  000038  2A36               	incf	_tik_time_b^0,f,c
  6560                           
  6561                           ;main.c: 707: if (en_sound) {
  6562  00003A  A05B               	btfss	(_en_sound/(0+8))^0,_en_sound& (0+7),c
  6563  00003C  D026               	goto	i1l325
  6564                           
  6565                           ;main.c: 708: snd_delay++;
  6566  00003E  2A2F               	incf	myIntL@snd_delay^0,f,c
  6567                           
  6568                           ;main.c: 709: if (snd_k) {
  6569  000040  AC5A               	btfss	(_snd_k/(0+8))^0,_snd_k& (0+7),c
  6570  000042  D00A               	goto	i1l326
  6571                           
  6572                           ;main.c: 710: if (snd_delay <= 10) {
  6573  000044  0E0B               	movlw	11
  6574  000046  602F               	cpfslt	myIntL@snd_delay^0,c
  6575  000048  D002               	goto	i1l327
  6576                           
  6577                           ;main.c: 711: LATCbits.LATC4 = 1;
  6578  00004A  888B               	bsf	139,4,c	;volatile
  6579                           
  6580                           ;main.c: 712: } else
  6581  00004C  D001               	goto	i1l2515
  6582  00004E                     i1l327:
  6583                           
  6584                           ;main.c: 713: LATCbits.LATC4 = 0;
  6585  00004E  988B               	bcf	139,4,c	;volatile
  6586  000050                     i1l2515:
  6587                           
  6588                           ;main.c: 714: if (snd_delay > 80)
  6589  000050  0E50               	movlw	80
  6590  000052  642F               	cpfsgt	myIntL@snd_delay^0,c
  6591  000054  D001               	goto	i1l326
  6592                           
  6593                           ;main.c: 715: snd_delay = 0;
  6594  000056  6A2F               	clrf	myIntL@snd_delay^0,c
  6595  000058                     i1l326:
  6596                           
  6597                           ;main.c: 716: };main.c: 717: if (snd_b) {
  6598  000058  AA5A               	btfss	(_snd_b/(0+8))^0,_snd_b& (0+7),c
  6599  00005A  D00A               	goto	i1l330
  6600                           
  6601                           ;main.c: 718: if (snd_delay <= 15) {
  6602  00005C  0E10               	movlw	16
  6603  00005E  602F               	cpfslt	myIntL@snd_delay^0,c
  6604  000060  D002               	goto	i1l331
  6605                           
  6606                           ;main.c: 719: LATCbits.LATC4 = 1;
  6607  000062  888B               	bsf	139,4,c	;volatile
  6608                           
  6609                           ;main.c: 720: } else
  6610  000064  D001               	goto	i1l2523
  6611  000066                     i1l331:
  6612                           
  6613                           ;main.c: 721: LATCbits.LATC4 = 0;
  6614  000066  988B               	bcf	139,4,c	;volatile
  6615  000068                     i1l2523:
  6616                           
  6617                           ;main.c: 722: if (snd_delay > 50)
  6618  000068  0E32               	movlw	50
  6619  00006A  642F               	cpfsgt	myIntL@snd_delay^0,c
  6620  00006C  D001               	goto	i1l330
  6621                           
  6622                           ;main.c: 723: snd_delay = 0;
  6623  00006E  6A2F               	clrf	myIntL@snd_delay^0,c
  6624  000070                     i1l330:
  6625                           
  6626                           ;main.c: 724: };main.c: 725: if (snd_all) {
  6627  000070  A85A               	btfss	(_snd_all/(0+8))^0,_snd_all& (0+7),c
  6628  000072  D00C               	goto	i1l338
  6629                           
  6630                           ;main.c: 726: if (snd_delay <= 10) {
  6631  000074  0E0B               	movlw	11
  6632  000076  602F               	cpfslt	myIntL@snd_delay^0,c
  6633  000078  D002               	goto	i1l335
  6634                           
  6635                           ;main.c: 727: LATCbits.LATC4 = 1;
  6636  00007A  888B               	bsf	139,4,c	;volatile
  6637                           
  6638                           ;main.c: 728: } else
  6639  00007C  D001               	goto	i1l2531
  6640  00007E                     i1l335:
  6641                           
  6642                           ;main.c: 729: LATCbits.LATC4 = 0;
  6643  00007E  988B               	bcf	139,4,c	;volatile
  6644  000080                     i1l2531:
  6645                           
  6646                           ;main.c: 730: if (snd_delay > 25)
  6647  000080  0E19               	movlw	25
  6648  000082  642F               	cpfsgt	myIntL@snd_delay^0,c
  6649  000084  D003               	goto	i1l338
  6650                           
  6651                           ;main.c: 731: snd_delay = 0;
  6652  000086  6A2F               	clrf	myIntL@snd_delay^0,c
  6653  000088  D001               	goto	i1l338
  6654  00008A                     i1l325:
  6655                           
  6656                           ;main.c: 734: LATCbits.LATC4 = 0;
  6657  00008A  988B               	bcf	139,4,c	;volatile
  6658  00008C                     i1l338:
  6659  00008C  C045  FFE0         	movff	??_myIntL+2,bsr
  6660  000090  C044  FFE8         	movff	??_myIntL+1,wreg
  6661  000094  C043  FFD8         	movff	??_myIntL,status
  6662  000098  9065               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6663  00009A  0010               	retfie	
  6664  00009C                     __end_of_myIntL:
  6665                           	callstack 0
  6666                           
  6667 ;; *************** function _myIntH *****************
  6668 ;; Defined at:
  6669 ;;		line 678 in file "main.c"
  6670 ;; Parameters:    Size  Location     Type
  6671 ;;		None
  6672 ;; Auto vars:     Size  Location     Type
  6673 ;;		None
  6674 ;; Return value:  Size  Location     Type
  6675 ;;                  1    wreg      void 
  6676 ;; Registers used:
  6677 ;;		wreg, status,2, status,0
  6678 ;; Tracked objects:
  6679 ;;		On entry : 0/0
  6680 ;;		On exit  : 0/0
  6681 ;;		Unchanged: 0/0
  6682 ;; Data sizes:     COMRAM   BANK0   BANK1
  6683 ;;      Params:         0       0       0
  6684 ;;      Locals:         0       0       0
  6685 ;;      Temps:          0       0       0
  6686 ;;      Totals:         0       0       0
  6687 ;;Total ram usage:        0 bytes
  6688 ;; Hardware stack levels used:    1
  6689 ;; This function calls:
  6690 ;;		Nothing
  6691 ;; This function is called by:
  6692 ;;		Interrupt level 2
  6693 ;; This function uses a non-reentrant model
  6694 ;;
  6695                           
  6696                           	psect	intcode
  6697  000008                     __pintcode:
  6698                           	callstack 0
  6699  000008                     _myIntH:
  6700                           	callstack 24
  6701                           
  6702                           ;incstack = 0
  6703  000008  8265               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6704  00000A  EFFB  F00B         	goto	int_func
  6705                           
  6706                           	psect	intcode_body
  6707  0017F6                     __pintcode_body:
  6708                           	callstack 24
  6709  0017F6                     int_func:
  6710                           	callstack 24
  6711                           
  6712                           ;main.c: 680: if (PIR1bits.TMR1IF == 1) {
  6713  0017F6  A09E               	btfss	158,0,c	;volatile
  6714  0017F8  D00D               	goto	i2l317
  6715                           
  6716                           ;main.c: 681: PIR1bits.TMR1IF = 0;
  6717  0017FA  909E               	bcf	158,0,c	;volatile
  6718                           
  6719                           ;main.c: 682: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
  6720  0017FC  0E3C               	movlw	60
  6721  0017FE  6ECF               	movwf	207,c	;volatile
  6722                           
  6723                           ;main.c: 683: TMR1L = ((unsigned char)((15536)&0xFF));
  6724  001800  0EB0               	movlw	176
  6725  001802  6ECE               	movwf	206,c	;volatile
  6726                           
  6727                           ;main.c: 684: if (++timer_val >= 30)
  6728  001804  2A42               	incf	_timer_val^0,f,c
  6729  001806  0E1D               	movlw	29
  6730  001808  6442               	cpfsgt	_timer_val^0,c
  6731  00180A  D004               	goto	i2l317
  6732                           
  6733                           ;main.c: 685: {;main.c: 686: timer_val = 0;
  6734  00180C  6A42               	clrf	_timer_val^0,c
  6735                           
  6736                           ;main.c: 687: time_flag = 1;
  6737  00180E  0E01               	movlw	1
  6738  001810  6E41               	movwf	_time_flag^0,c
  6739                           
  6740                           ;main.c: 688: T1CONbits.TMR1ON = 0;
  6741  001812  90CD               	bcf	205,0,c	;volatile
  6742  001814                     i2l317:
  6743  001814  9265               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6744  001816  0011               	retfie		f
  6745  001818                     __end_of_myIntH:
  6746                           	callstack 0
  6747                           
  6748                           	psect	rparam
  6749  0000                     
  6750                           	psect	temp
  6751  000065                     btemp:
  6752                           	callstack 0
  6753  000065                     	ds	1
  6754  0000                     int$flags	set	btemp
  6755  0000                     wtemp8	set	btemp+1
  6756  0000                     ttemp5	set	btemp+1
  6757  0000                     ttemp6	set	btemp+4
  6758  0000                     ttemp7	set	btemp+8
  6759                           
  6760                           	psect	idloc
  6761                           
  6762                           ;Config register IDLOC0 @ 0x200000
  6763                           ;	unspecified, using default values
  6764  200000                     	org	2097152
  6765  200000  FF                 	db	255
  6766                           
  6767                           ;Config register IDLOC1 @ 0x200001
  6768                           ;	unspecified, using default values
  6769  200001                     	org	2097153
  6770  200001  FF                 	db	255
  6771                           
  6772                           ;Config register IDLOC2 @ 0x200002
  6773                           ;	unspecified, using default values
  6774  200002                     	org	2097154
  6775  200002  FF                 	db	255
  6776                           
  6777                           ;Config register IDLOC3 @ 0x200003
  6778                           ;	unspecified, using default values
  6779  200003                     	org	2097155
  6780  200003  FF                 	db	255
  6781                           
  6782                           ;Config register IDLOC4 @ 0x200004
  6783                           ;	unspecified, using default values
  6784  200004                     	org	2097156
  6785  200004  FF                 	db	255
  6786                           
  6787                           ;Config register IDLOC5 @ 0x200005
  6788                           ;	unspecified, using default values
  6789  200005                     	org	2097157
  6790  200005  FF                 	db	255
  6791                           
  6792                           ;Config register IDLOC6 @ 0x200006
  6793                           ;	unspecified, using default values
  6794  200006                     	org	2097158
  6795  200006  FF                 	db	255
  6796                           
  6797                           ;Config register IDLOC7 @ 0x200007
  6798                           ;	unspecified, using default values
  6799  200007                     	org	2097159
  6800  200007  FF                 	db	255
  6801                           
  6802                           	psect	config
  6803                           
  6804                           ; Padding undefined space
  6805  300000                     	org	3145728
  6806  300000  FF                 	db	255
  6807                           
  6808                           ;Config register CONFIG1H @ 0x300001
  6809                           ;	Oscillator Selection bits
  6810                           ;	OSC = INTIO2, Internal RC oscillator, port function on RA6 and port function on RA7
  6811                           ;	Fail-Safe Clock Monitor Enable bit
  6812                           ;	FSCM = OFF, Fail-Safe Clock Monitor disabled
  6813                           ;	Internal/External Switchover bit
  6814                           ;	IESO = OFF, Internal/External Switchover mode disabled
  6815  300001                     	org	3145729
  6816  300001  08                 	db	8
  6817                           
  6818                           ;Config register CONFIG2L @ 0x300002
  6819                           ;	Power-up Timer enable bit
  6820                           ;	PWRT = ON, PWRT enabled
  6821                           ;	Brown-out Reset enable bit
  6822                           ;	BOR = ON, Brown-out Reset enabled
  6823                           ;	Brown-out Reset Voltage bits
  6824                           ;	BORV = 27, VBOR set to 2.7V
  6825  300002                     	org	3145730
  6826  300002  0A                 	db	10
  6827                           
  6828                           ;Config register CONFIG2H @ 0x300003
  6829                           ;	Watchdog Timer Enable bit
  6830                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  6831                           ;	Watchdog Timer Postscale Select bits
  6832                           ;	WDTPS = 32768, 1:32768
  6833  300003                     	org	3145731
  6834  300003  1E                 	db	30
  6835                           
  6836                           ; Padding undefined space
  6837  300004                     	org	3145732
  6838  300004  FF                 	db	255
  6839                           
  6840                           ;Config register CONFIG3H @ 0x300005
  6841                           ;	CCP2 MUX bit
  6842                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  6843                           ;	PORTB A/D Enable bit
  6844                           ;	PBAD = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  6845                           ;	MCLR Pin Enable bit
  6846                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  6847  300005                     	org	3145733
  6848  300005  81                 	db	129
  6849                           
  6850                           ;Config register CONFIG4L @ 0x300006
  6851                           ;	Stack Full/Underflow Reset Enable bit
  6852                           ;	STVR = ON, Stack full/underflow will cause Reset
  6853                           ;	Single-Supply ICSP Enable bit
  6854                           ;	LVP = OFF, Single-Supply ICSP disabled
  6855                           ;	Background Debugger Enable bit
  6856                           ;	DEBUG = 0x1, unprogrammed default
  6857  300006                     	org	3145734
  6858  300006  81                 	db	129
  6859                           
  6860                           ; Padding undefined space
  6861  300007                     	org	3145735
  6862  300007  FF                 	db	255
  6863                           
  6864                           ;Config register CONFIG5L @ 0x300008
  6865                           ;	Code Protection bit
  6866                           ;	CP0 = OFF, Block 0 (000200-0007FFh) not code-protected
  6867                           ;	Code Protection bit
  6868                           ;	CP1 = OFF, Block 1 (000800-000FFFh) not code-protected
  6869                           ;	Code Protection bit
  6870                           ;	CP2 = OFF, Block 2 (001000-0017FFh) not code-protected
  6871                           ;	Code Protection bit
  6872                           ;	CP3 = OFF, Block 3 (001800-001FFFh) not code-protected
  6873  300008                     	org	3145736
  6874  300008  0F                 	db	15
  6875                           
  6876                           ;Config register CONFIG5H @ 0x300009
  6877                           ;	Boot Block Code Protection bit
  6878                           ;	CPB = OFF, Boot block (000000-0001FFh) is not code-protected
  6879                           ;	Data EEPROM Code Protection bit
  6880                           ;	CPD = OFF, Data EEPROM is not code-protected
  6881  300009                     	org	3145737
  6882  300009  C0                 	db	192
  6883                           
  6884                           ;Config register CONFIG6L @ 0x30000A
  6885                           ;	Write Protection bit
  6886                           ;	WRT0 = OFF, Block 0 (000200-0007FFh) not write-protected
  6887                           ;	Write Protection bit
  6888                           ;	WRT1 = OFF, Block 1 (000800-000FFFh) not write-protected
  6889                           ;	Write Protection bit
  6890                           ;	WRT2 = OFF, Block 2 (001000-0017FFh) not write-protected
  6891                           ;	Write Protection bit
  6892                           ;	WRT3 = OFF, Block 3 (001800-001FFFh) not write-protected
  6893  30000A                     	org	3145738
  6894  30000A  0F                 	db	15
  6895                           
  6896                           ;Config register CONFIG6H @ 0x30000B
  6897                           ;	Configuration Register Write Protection bit
  6898                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  6899                           ;	Boot Block Write Protection bit
  6900                           ;	WRTB = OFF, Boot block (000000-0001FFh) is not write-protected
  6901                           ;	Data EEPROM Write Protection bit
  6902                           ;	WRTD = OFF, Data EEPROM is not write-protected
  6903  30000B                     	org	3145739
  6904  30000B  E0                 	db	224
  6905                           
  6906                           ;Config register CONFIG7L @ 0x30000C
  6907                           ;	Table Read Protection bit
  6908                           ;	EBTR0 = OFF, Block 0 (000200-0007FFh) not protected from table reads executed in other
      +                           blocks
  6909                           ;	Table Read Protection bit
  6910                           ;	EBTR1 = OFF, Block 1 (000800-000FFFh) not protected from table reads executed in other
      +                           blocks
  6911                           ;	Table Read Protection bit
  6912                           ;	EBTR2 = OFF, Block 2 (001000-0017FFh) not protected from table reads executed in other
      +                           blocks
  6913                           ;	Table Read Protection bit
  6914                           ;	EBTR3 = OFF, Block 3 (001800-001FFFh) not protected from table reads executed in other
      +                           blocks
  6915  30000C                     	org	3145740
  6916  30000C  0F                 	db	15
  6917                           
  6918                           ;Config register CONFIG7H @ 0x30000D
  6919                           ;	Boot Block Table Read Protection bit
  6920                           ;	EBTRB = OFF, Boot block (000000-0001FFh) is not protected from table reads executed in
      +                           other blocks
  6921  30000D                     	org	3145741
  6922  30000D  40                 	db	64
  6923                           tosu	equ	0xFFF
  6924                           tosh	equ	0xFFE
  6925                           tosl	equ	0xFFD
  6926                           stkptr	equ	0xFFC
  6927                           pclatu	equ	0xFFB
  6928                           pclath	equ	0xFFA
  6929                           pcl	equ	0xFF9
  6930                           tblptru	equ	0xFF8
  6931                           tblptrh	equ	0xFF7
  6932                           tblptrl	equ	0xFF6
  6933                           tablat	equ	0xFF5
  6934                           prodh	equ	0xFF4
  6935                           prodl	equ	0xFF3
  6936                           indf0	equ	0xFEF
  6937                           postinc0	equ	0xFEE
  6938                           postdec0	equ	0xFED
  6939                           preinc0	equ	0xFEC
  6940                           plusw0	equ	0xFEB
  6941                           fsr0h	equ	0xFEA
  6942                           fsr0l	equ	0xFE9
  6943                           wreg	equ	0xFE8
  6944                           indf1	equ	0xFE7
  6945                           postinc1	equ	0xFE6
  6946                           postdec1	equ	0xFE5
  6947                           preinc1	equ	0xFE4
  6948                           plusw1	equ	0xFE3
  6949                           fsr1h	equ	0xFE2
  6950                           fsr1l	equ	0xFE1
  6951                           bsr	equ	0xFE0
  6952                           indf2	equ	0xFDF
  6953                           postinc2	equ	0xFDE
  6954                           postdec2	equ	0xFDD
  6955                           preinc2	equ	0xFDC
  6956                           plusw2	equ	0xFDB
  6957                           fsr2h	equ	0xFDA
  6958                           fsr2l	equ	0xFD9
  6959                           status	equ	0xFD8

Data Sizes:
    Strings     275
    Constant    88
    Data        9
    BSS         66
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     23     100
    BANK0           128      0       0
    BANK1           256      0       0

Pointer List with Targets:

    EUSART_Write_Str@t	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_11(CODE[7]), STR_10(CODE[4]), STR_9(CODE[3]), STR_8(CODE[4]), 
		 -> STR_7(CODE[5]), STR_6(CODE[4]), STR_5(CODE[4]), 

    cgrom_char@symbol	PTR unsigned char  size(2) Largest target is 8
		 -> symbol_4(CODE[8]), 

    lcdPrint@t	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_26(CODE[16]), STR_25(CODE[15]), STR_24(CODE[11]), STR_23(CODE[13]), 
		 -> STR_22(CODE[11]), STR_21(CODE[13]), STR_20(CODE[15]), STR_19(CODE[15]), 
		 -> STR_18(CODE[14]), STR_17(CODE[16]), STR_16(CODE[16]), STR_15(CODE[16]), 
		 -> STR_14(CODE[7]), STR_13(CODE[8]), STR_12(CODE[8]), STR_4(CODE[13]), 
		 -> STR_3(CODE[16]), STR_2(CODE[16]), STR_1(CODE[16]), 

    ds18b20_crc8@data_in	PTR unsigned char  size(1) Largest target is 9
		 -> ds18b20_readrom@temp_rom(COMRAM[8]), scratch(COMRAM[9]), 

    ds18b20_get_temp@minus	PTR unsigned char  size(1) Largest target is 1
		 -> minus_2(COMRAM[1]), minus_1(COMRAM[1]), 

    ds18b20_readTemp@time_flag	PTR unsigned char  size(1) Largest target is 1
		 -> time_flag(COMRAM[1]), 

    ds18b20_readTemp@timer_val	PTR unsigned char  size(1) Largest target is 1
		 -> timer_val(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_ds18b20_readrom
    _lcd_putc->_lcdWrite
    _lcdPrint->_lcd_gotoxy
    _lcd_gotoxy->_lcdWrite
    _ds18b20_readrom->_ds18b20_crc8
    _ds18b20_readTemp->_ds18b20_crc8
    ___lwmod->___lwdiv
    ___lbmod->___lbdiv
    _Main_init->_init_ds18b20
    _init_ds18b20->_write_byte
    _write_byte->_write_bit
    _initLCD->_clearLCD
    _clearLCD->_lcdWrite
    _cgrom_char->_lcdWrite
    _lcdWrite->_lcdNibble
    _EUSART_Write_Str->_EUSART_Write

Critical Paths under _myIntL in COMRAM

    None.

Critical Paths under _myIntH in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _myIntL in BANK0

    None.

Critical Paths under _myIntH in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myIntL in BANK1

    None.

Critical Paths under _myIntH in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   35927
                                             20 COMRAM     3     3      0
                           _Delay_ms
                       _EUSART_Write
                   _EUSART_Write_Str
                          _Main_init
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                           _clearLCD
                   _ds18b20_get_temp
                   _ds18b20_readTemp
                    _ds18b20_readrom
                         _key_GetKey
                          _key_press
                           _lcdPrint
                         _lcd_gotoxy
                           _lcd_putc
                           _read_eep
                          _write_eep
 ---------------------------------------------------------------------------------
 (1) _lcd_putc                                             1     1      0    1060
                                              7 COMRAM     1     1      0
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (1) _lcdPrint                                             6     4      2    6056
                                             10 COMRAM     6     4      2
                           _lcdWrite
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (1) _lcd_gotoxy                                           3     2      1    3463
                                              7 COMRAM     3     2      1
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (1) _key_press                                            1     1      0      45
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _key_GetKey                                           1     1      0      15
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ds18b20_readrom                                     10    10      0    1898
                                             10 COMRAM    10    10      0
                           _Delay_ms
                       _ds18b20_crc8
                           _ow_reset
                          _read_byte
                         _write_byte
                          _write_eep
 ---------------------------------------------------------------------------------
 (1) _write_eep                                            2     1      1     576
                                              3 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _Delay_ms                                             5     3      2     350
                                              3 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ds18b20_readTemp                                     8     6      2    1234
                                             10 COMRAM     8     6      2
                       _ds18b20_crc8
                           _ow_reset
                          _read_byte
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _read_byte                                            4     4      0      60
                                              3 COMRAM     4     4      0
                           _read_bit
 ---------------------------------------------------------------------------------
 (3) _read_bit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ds18b20_crc8                                         7     5      2     557
                                              3 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _ds18b20_get_temp                                     6     4      2     423
                                              3 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4    6999
                                             10 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4    5178
                                              3 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___lbmod                                              4     3      1    1375
                                              7 COMRAM     4     3      1
                            ___lbdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lbdiv                                              4     3      1     770
                                              3 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _Main_init                                            0     0      0    4256
                         _cgrom_char
                            _initLCD
                       _init_ds18b20
                          _init_uart
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_ds18b20                                         4     4      0     839
                                              9 COMRAM     4     4      0
                           _ow_reset
                           _read_eep
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _write_byte                                           5     5      0      90
                                              4 COMRAM     5     5      0
                          _write_bit
 ---------------------------------------------------------------------------------
 (3) _write_bit                                            1     1      0      15
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_eep                                             2     0      2     554
                                              3 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ow_reset                                             1     1      0      15
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0    2136
                                              8 COMRAM     1     1      0
                           _clearLCD
                          _lcdNibble
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (1) _clearLCD                                             1     1      0    1038
                                              7 COMRAM     1     1      0
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (2) _cgrom_char                                           4     1      3    1281
                                              7 COMRAM     4     1      3
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (2) _lcdWrite                                             2     1      1    1038
                                              5 COMRAM     2     1      1
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      60
                                              3 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Write_Str                                     2     0      2     607
                                              4 COMRAM     2     0      2
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         1     1      0      30
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _myIntL                                               3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _myIntH                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay_ms
   _EUSART_Write
   _EUSART_Write_Str
     _EUSART_Write
   _Main_init
     _cgrom_char
       _lcdWrite
         _lcdNibble
     _initLCD
       _clearLCD
         _lcdWrite
           _lcdNibble
       _lcdNibble
       _lcdWrite
         _lcdNibble
     _init_ds18b20
       _ow_reset
       _read_eep
       _write_byte
         _write_bit
     _init_uart
   ___lbdiv
   ___lbmod
     ___lbdiv (ARG)
   ___lwdiv
   ___lwmod
     ___lwdiv (ARG)
   _clearLCD
     _lcdWrite
       _lcdNibble
   _ds18b20_get_temp
   _ds18b20_readTemp
     _ds18b20_crc8
     _ow_reset
     _read_byte
       _read_bit
     _write_byte
       _write_bit
   _ds18b20_readrom
     _Delay_ms
     _ds18b20_crc8
     _ow_reset
     _read_byte
       _read_bit
     _write_byte
       _write_bit
     _write_eep
   _key_GetKey
   _key_press
   _lcdPrint
     _lcdWrite
       _lcdNibble
     _lcd_gotoxy
       _lcdWrite
         _lcdNibble
   _lcd_gotoxy
     _lcdWrite
       _lcdNibble
   _lcd_putc
     _lcdWrite
       _lcdNibble
   _read_eep
   _write_eep

 _myIntL (ROOT)

 _myIntH (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80      0       0       4        0.0%
BITCOMRAM           7E      0       2       0        1.6%
COMRAM              7E     17      64       1       79.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      64       7        0.0%
DATA                 0      0      64       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Thu Jul 22 19:29:44 2021

                       PL2 0F00                         PL4 0F10                         PL6 0F1C  
                       PL8 0F28                         u10 1314                         u30 132A  
                       u50 1342                         u28 1316                         u70 1356  
                       u48 132C                         u68 1344                         u88 1358  
                       bsr 000FE0               lcdWrite@byte 0049                        PL10 0F30  
                      PL20 126A                        PL12 0F3C                        PL30 0F72  
                      PL22 0F60                        PL14 0F46                        PL40 0F98  
                      PL32 0F7E                        PL24 182A                        PL16 0F50  
                      PL50 1278                        PL42 0FA2                        PL34 0F86  
                      PL26 11C8                        PL18 0F5A                        PL60 0FDA  
                      PL52 0FC0                        PL44 14CA                        PL36 1378  
                      PL28 0F66                        PL62 0FE2                        PL54 0FC8  
                      PL46 0FAC                        PL38 0F8E                        PL64 0FEA  
                      PL56 0FCE                        PL48 0FB6                        PL66 0FF2  
                      PL58 0FD4                        PL68 0FFA               lcdWrite@type 0048  
                      l210 0936                        l212 0952                        l204 0A16  
                      l214 0954                        l206 0934                        l231 0A62  
                      l215 0996                        l218 09D6                        l307 17C6  
                      l251 0B82                        l404 12B2                        l412 1548  
                      l183 04A6                        l441 17DC                        l610 1748  
                      l371 1422                        l259 0BD0                        l195 0752  
                      l187 04C0                        l188 08F2                        l542 14DE  
                      l383 1128                        l199 076C                        l384 112A  
                      l544 14E6                        l449 1862                        l546 14F0  
                      l548 151C                        u124 167C                        u125 1678  
                      u180 173E                        u274 164E                        u275 164A  
 __end_of_EUSART_Write_Str 182A                        wreg 000FE8            lcdNibble@nibble 0047  
            write_eep@data 0046                lcd_gotoxy@x 004B                lcd_gotoxy@y 004A  
                     l1107 15AC                       l1117 1628                       l3005 15A2  
                     l3021 161E                       l3013 1600                       l3015 1608  
                     l3103 02CE                       l1433 166C                       l3121 047C  
                     l3105 02E4                       l3213 0A1A                       l3141 063A  
                     l3117 038E                       l3061 0166                       l3053 010E  
                     l1463 1736                       l3311 0B7C                       l3303 0B5E  
                     l3151 0766                       l3143 06A6                       l3127 04BA  
                     l3119 03FA                       l3305 0B66                       l3161 080E  
                     l3145 0728                       l3129 0590                       l3073 01AE  
                     l3243 0A80                       l3235 0A58                       l3227 0A48  
                     l3091 0246                       l3067 0170                       l1477 1760  
                     l2605 1424                       l1733 1508                       l3501 0EB8  
                     l3413 0D06                       l3405 0CE6                       l3317 0B98  
                     l3245 0A88                       l3165 088A                       l3069 017A  
                     l1399 184A                       l1727 14F2                       l3431 0D52  
                     l3423 0D42                       l3319 0B9E                       l3247 0A92  
                     l1585 1636                       l3441 0D78                       l3337 0BD4  
                     l3273 0AEA                       l3265 0AC4                       l3257 0AB4  
                     l3089 0232                       l3169 08E4                       l3505 0EC8  
                     l2539 17DE                       l2811 1138                       l1739 150E  
                     l3443 0D86                       l3371 0C46                       l3355 0C06  
                     l3347 0BF6                       l3275 0AEE                       l2653 16E2  
                     l1589 1656                       l2565 17B4                       l3461 0DEE  
                     l3453 0DDE                       l2663 1528                       l2559 1864  
                     l2825 115C                       l2569 178C                       l2913 1480  
                     l3289 0B1C                       l2595 1420                       l2675 1556  
                     l2667 1538                       l2683 1562                       l2771 1222  
                     l2763 11F0                       l3387 0C9A                       l3299 0B3A  
                     l2837 119A                       l2861 11B6                       l2765 11FA  
                     l3469 0E0E                       l3397 0CD6                       l2839 11A2  
                     l2783 10FC                       l2927 14A2                       l2775 1250  
                     l2767 1206                       l2759 11D8                       l3487 0E7C  
                     l3479 0E6C                       l2961 16C6                       l2953 16B2  
                     l2777 1260                       l2939 14C8                       l2779 1264  
                     l2949 16AC                       l2965 16CE                       l2981 1782  
                     l2973 176C                       l2895 181A                       l2879 12C8  
                     l2993 157C                       l2899 1824                       l2995 1584  
                     STR_1 1F0B                       STR_2 1F3B                       STR_3 1F1B  
                     STR_4 1FB0                       STR_5 1FFA                       STR_6 1FFA  
                     STR_7 1FF1                       STR_8 1FF6                       STR_9 1FE7  
         ow_reset@presence 0046                       u2010 01C0                       u2020 0250  
          _ds18b20_readrom 146E                       u2030 0304                       u2200 094E  
                     _LATA 000F89                       u2070 05B0                       _LATB 000F8A  
                     u3007 10EA                       _LATC 000F8B                       u2160 0926  
                     u3017 189C                       u2410 0B4E                       u2170 0930  
                     u3027 17E0                       u3037 1366                       u3047 1370  
                     u1800 12A8                       u2505 0BBC                       u2460 0BAA  
                     u2428 0B50                       u1920 1588                       u1840 1490  
                     u2490 0BBA                       u2475 0BAC                       u1950 160C  
                     u2807 11E4                       u1880 16B6                       u2817 17BA  
                     u2907 101C                       u2827 1658                       u2917 102C  
                     u2837 18B4                       u2927 103C                       u2847 1698  
                     u2937 1052                       u2857 184C                       u2947 1066  
                     u2867 170A                       u2957 107A                       u2877 1716  
                     u2967 108E                       u2887 1726                       u2977 10A6  
                     u2897 100C                       u2987 10BE                       u2997 10D2  
                     _TXIF 007CF4                       _main 00A0                       fsr2h 000FDA  
                     indf2 000FDF                       fsr1l 000FE1                       fsr2l 000FD9  
                     btemp 0065              write_byte@val 0049                       prodh 000FF4  
                     prodl 000FF3                       start 009C               ___param_bank 000000  
         _ds18b20_get_temp 127E              ?_EUSART_Write 0043           _ds18b20_readTemp 10FA  
                    ?_main 0043            __end_of___lbdiv 16D2                      _EEADR 000FA9  
                    STR_10 1FF6                      STR_11 1FE3                      STR_12 1FDB  
                    STR_20 1F5B                      STR_13 1FD3                      STR_21 1FA3  
                    STR_14 1FEA                      STR_22 1FBD                      STR_23 1F96  
                    STR_15 1F4B                      STR_24 1FC8                      STR_16 1F2B  
                    STR_25 1F6A                      STR_17 1EEB                      STR_18 1F88  
                    STR_26 1EFB                      STR_19 1F79            __end_of___lbmod 178A  
                    _T1CON 000FCD            __end_of___lwdiv 15B6                      i1l330 0070  
                    i1l331 0066                      i1l325 008A                      i1l326 0058  
                    i1l335 007E                      i1l327 004E            __end_of___lwmod 1632  
                    i1l338 008C                      i2l317 1814                      _TMR0H 000FD7  
                    _TMR1H 000FCF                      _TMR0L 000FD6                      _TMR1L 000FCE  
                    _SPBRG 000FAF                      _PORTA 000F80                      _PORTB 000F81  
                    _PORTC 000F82                      _TRISA 000F92                      _TRISB 000F93  
                    _TRISC 000F94                      _TXREG 000FAD            __end_of_initLCD 10FA  
                    _fract 1ED3                      _snd_b 02D5                      _snd_k 02D6  
           write_byte@temp 004A             __pbitbssCOMRAM 02D0                      tablat 000FF5  
                    ttemp5 0066                      ttemp6 0069                      ttemp7 006D  
                    status 000FD8                      wtemp8 0066            ___lbdiv@divisor 0046  
          ___lbdiv@counter 0048           __end_of_Delay_ms 17D2            write_bit@bitval 0046  
          __initialization 15B6            ds18b20_crc8@crc 004C               __end_of_main 0F00  
      ds18b20_crc8@data_in 0046             ??_EUSART_Write 0046                     ??_main 0057  
            __activetblptr 000002              ?_init_ds18b20 0043    __end_of_ds18b20_readrom 14CA  
                   _EEDATA 000FA8                     _EECON2 000FA7         __size_of_Main_init 0078  
                   i1l2531 0080                     i1l2523 0068                     i1l2515 0050  
         __end_of_clearLCD 18A8           __end_of_lcdPrint 126A           __end_of_lcdWrite 17F6  
         __end_of_lcd_putc 18DC                  ??___lbdiv 0047                  ??___lbmod 004B  
                ??___lwdiv 004A                  ??___lwmod 0051                     _dq_num 0060  
            Delay_ms@delay 0046                     _myIntH 0008                     _myIntL 0018  
         __end_of_read_eep 18D0           __end_of_read_bit 18BE                     clear_0 15E0  
                   _select 0062                     _rom_dq 0011             ??_init_ds18b20 004C  
                ??_initLCD 004B               __pdataCOMRAM 005C               __mediumconst 1E92  
         __end_of_ow_reset 1734                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8           ___lbdiv@dividend 0047           __end_of_symbol_4 1EEB  
          ___lbmod@divisor 004A                 __accesstop 0080    __end_of__initialization 15E6  
          ___lbmod@counter 004C              ___rparam_used 000001           write_eep@address 0047  
         ds18b20_crc8@data 0049             __pcstackCOMRAM 0043              __end_of_fract 1EE3  
        __end_of_Main_init 13FA     ds18b20_crc8@loop_count 004B                 __end_ofPL2 0F10  
               __end_ofPL4 0F1C                 __end_ofPL6 0F28                 __end_ofPL8 0F30  
         ___lbdiv@quotient 0049              ?_ds18b20_crc8 0046         __size_of_lcdNibble 0070  
     ds18b20_readTemp@temp 0051           ?_ds18b20_readrom 0043                  ?_Delay_ms 0046  
        ?_EUSART_Write_Str 0047          lcd_gotoxy@address 004C         ??_EUSART_Write_Str 0049  
 __end_of_ds18b20_get_temp 1308       __end_of_EUSART_Write 1764   __end_of_ds18b20_readTemp 11C8  
       __size_of_key_press 004E         __size_of_init_uart 001C         __size_of_read_byte 0036  
  ds18b20_crc8@bit_counter 0048           ds18b20_readrom@i 0056        __end_of_HD44780_CYR 1ED3  
                  ?_myIntH 0043                    ?_myIntL 0043             ??_ds18b20_crc8 0048  
               _cgrom_char 16D2              _eusartRxCount 002B                  ?_clearLCD 0043  
               ??_Delay_ms 0048                 _lcd_gotoxy 1856                  ?_lcdPrint 004D  
                ?_lcdWrite 0048                  ?_lcd_putc 0043                  ?_read_eep 0046  
                ?_read_bit 0043                 _key_GetKey 18DC       __end_of_init_ds18b20 146E  
        __end_of_lcdNibble 1378         __size_of_write_bit 001E         __size_of_write_eep 0024  
                  __Hparam 0000                    __Lparam 0000                  ?_ow_reset 0043  
                  ___lbdiv 169E                    ___lbmod 1764                    ___lwdiv 156C  
                  ___lwmod 15F4                    __pcinit 15B6            __size_of_myIntH 1810  
          __size_of_myIntL 0084    ds18b20_readrom@temp_rom 004D                    __ramtop 0200  
                  __ptext0 00A0                    __ptext1 18D0                    __ptext2 11D6  
                  __ptext3 1856                    __ptext4 14D4                    __ptext5 18DC  
                  __ptext6 146E                    __ptext7 178A                    __ptext8 17AE  
                  __ptext9 10FA                  _T0CONbits 000FD5                    _initLCD 1002  
                _T1CONbits 000FCD          __end_of_key_press 1522          __end_of_init_uart 188E  
        __end_of_read_byte 1668                 ??_clearLCD 004A                    _minus_1 0064  
                  _minus_2 0063                    _scratch 0038                    _snd_b_b 02D2  
                  _snd_all 02D4                    _snd_k_b 02D3                    _sub_sel 0034  
               ??_lcdPrint 004F                 ??_lcdWrite 0049             __pintcode_body 17F6  
               ??_lcd_putc 004A       end_of_initialization 15E6                  Delay_ms@i 0049  
             key_press@key 0046              __Lmediumconst 1E92                    int_func 17F6  
               ??_read_eep 0048                 ??_read_bit 0046                _HD44780_CYR 1E93  
                _RCSTAbits 000FAB                 ??_ow_reset 0046                    postdec1 000FE5  
                  postdec2 000FDD                    postinc0 000FEE                    postinc2 000FDE  
               _temp_ready 0021               read_byte@val 0048                 _tik_time_b 0036  
      ds18b20_get_temp@tmp 0049                ?_cgrom_char 004A                  _PORTAbits 000F80  
            key_GetKey@key 0046          __end_of_write_bit 1856          __end_of_write_eep 17AE  
         ___lbmod@dividend 004B          EUSART_Write_Str@t 0047                  _TRISAbits 000F92  
                _TRISCbits 000F94                ?_lcd_gotoxy 004A      __size_of_EUSART_Write 0030  
              ___lbmod@rem 004D       __end_of_ds18b20_crc8 156C                ?_key_GetKey 0043  
                _TXSTAbits 000FAC              __pidataCOMRAM 18E6                 _write_byte 1668  
             _EUSART_Write 1734             __end_of_myIntH 1818             __end_of_myIntL 009C  
                _Main_init 1382                __end_ofPL10 0F3C                __end_ofPL20 1278  
              __end_ofPL12 0F46                __end_ofPL30 0F7E                __end_ofPL22 0F66  
              __end_ofPL14 0F50                __end_ofPL40 0FA2                __end_ofPL32 0F86  
              __end_ofPL24 1838                __end_ofPL16 0F5A                __end_ofPL50 127E  
              __end_ofPL42 0FAC                __end_ofPL34 0F8E                __end_ofPL26 11D6  
              __end_ofPL18 0F60                __end_ofPL60 0FE2                __end_ofPL52 0FC8  
              __end_ofPL44 14D4                __end_ofPL36 1382                __end_ofPL28 0F72  
              __end_ofPL62 0FEA                __end_ofPL54 0FCE                __end_ofPL46 0FB6  
              __end_ofPL38 0F98                __end_ofPL64 0FF2                __end_ofPL56 0FD4  
              __end_ofPL48 0FC0                __end_ofPL66 0FFA                __end_ofPL58 0FDA  
              __end_ofPL68 1002        start_initialization 15B6          __size_of_Delay_ms 0024  
    __size_of_init_ds18b20 0074          ?_ds18b20_get_temp 0046         ??_ds18b20_get_temp 0048  
      __size_of_cgrom_char 0032          ?_ds18b20_readTemp 004D  __size_of_EUSART_Write_Str 0012  
       ??_ds18b20_readTemp 004F   ds18b20_crc8@feedback_bit 004A        __size_of_lcd_gotoxy 001C  
                 ??_myIntH 0043                   ??_myIntL 0043            read_eep@address 0046  
               read_byte@i 0049                 ?_Main_init 0043        __size_of_key_GetKey 000A  
             _init_ds18b20 13FA                __pbssCOMRAM 0001          __size_of_clearLCD 001A  
        __size_of_lcdPrint 0094          __size_of_lcdWrite 0024   __size_of_ds18b20_readrom 005C  
        __size_of_lcd_putc 000C      ds18b20_crc8@num_bytes 0047          ds18b20_readTemp@i 0054  
        ds18b20_readTemp@j 0053          __size_of_read_eep 0012          __size_of_read_bit 0016  
         ___lwdiv@dividend 0046                  __pintcode 0008              __pmediumconst 1E92  
                _lcdNibble 1308                   ?___lbdiv 0046                   ?___lbmod 004A  
                 ?___lwdiv 0046                   ?___lwmod 004D               _eusartTxHead 002D  
        __size_of_ow_reset 0030                __pintcodelo 0018                ?_write_byte 0043  
  _eusartTxBufferRemaining 002C                   ?_initLCD 0043      __size_of_ds18b20_crc8 004A  
         ___lwdiv@quotient 004A                  _key_press 14D4                  _init_uart 1872  
                _read_byte 1632             _eusartTxBuffer 0001                   _LATAbits 000F89  
                 _LATCbits 000F8B                  _temp1_fix 0027                   _IPR1bits 000F9F  
                 _PIE1bits 000F9D              _set_t_dq2_100 0031                   _PIR1bits 000F9E  
                _set_t_dq2 0029              _set_t_dq1_dwn 0032                   _RCONbits 000FD0  
               ?_lcdNibble 0043                  _time_flag 0041                  _timer_val 0042  
                lcdPrint@t 004D               ??_cgrom_char 004D                 _ADCON1bits 000FC1  
             _ds18b20_crc8 1522                ??_Main_init 0050                  _sound_yes 02D7  
                lcd_putc@c 004A                write_byte@i 004B                   _Delay_ms 17AE  
             ??_lcd_gotoxy 004B                 ?_key_press 0043                  _write_bit 1838  
                _write_eep 178A                 ?_init_uart 0043                _INTCON2bits 000FF1  
               ?_read_byte 0043                  copy_data0 15CA              init_ds18b20@i 004F  
            init_ds18b20@q 004E        __size_of_write_byte 0036               ??_key_GetKey 0046  
               _EECON1bits 000FA6         __end_of_cgrom_char 1704           _EUSART_Write_Str 1818  
                 __Hrparam 0000                   __Lrparam 0000          ??_ds18b20_readrom 004D  
       __end_of_lcd_gotoxy 1872             key_press@count 0025           __size_of___lbdiv 0034  
         __size_of___lbmod 0026           __size_of___lwdiv 004A           __size_of___lwmod 003E  
            _temperature_1 005E              _temperature_2 005C           __size_of_initLCD 00F8  
                 _clearLCD 188E                _key_pressed 002E         __end_of_key_GetKey 18E6  
          ___lwdiv@divisor 0048            myIntL@snd_delay 002F            ___lwdiv@counter 004C  
                 __ptext10 1632                   __ptext11 18A8                   __ptext20 13FA  
                 __ptext12 1522                   __ptext21 1668                   __ptext13 127E  
                 __ptext30 1818                   __ptext22 1838                   __ptext14 15F4  
                 __ptext31 1734                   __ptext23 18BE                   __ptext15 156C  
                 __ptext24 1704                   __ptext16 1764                   __ptext25 1002  
                 __ptext17 169E                   __ptext26 188E                   __ptext18 1382  
                 __ptext27 16D2                   __ptext19 1872                   __ptext28 17D2  
                 __ptext29 1308                   _lcdPrint 11D6                   _en_snd_b 02D0  
                 _lcdWrite 17D2                   _en_snd_k 02D1                 ?_write_eep 0046  
               ?_write_bit 0043                   _en_sound 02D8                   _lcd_putc 18D0  
   ds18b20_get_temp@num_dq 0048              __size_of_main 0E60                   _read_bit 18A8  
                 _read_eep 18BE      ds18b20_readrom@num_dq 0055                   _read_key 02D9  
        cgrom_char@address 004C               _set_t_dq2_10 0030               _set_t_dq1_up 0033  
                 _tik_time 0037                ??_lcdNibble 0046                   _ow_reset 1704  
                 int$flags 0065                   _sub_main 0061  __size_of_ds18b20_get_temp 008A  
                 _symbol_4 1EE3  __size_of_ds18b20_readTemp 00CE                 _INTCONbits 000FF2  
              ??_key_press 0046                ??_init_uart 0046                ??_read_byte 0046  
                 intlevel1 0000                   intlevel2 0000           ___lwmod@dividend 004D  
    ds18b20_get_temp@minus 0046                 _OSCCONbits 000FD3  ds18b20_readTemp@time_flag 004D  
ds18b20_readTemp@timer_val 004E           cgrom_char@symbol 004A               ??_write_byte 0047  
          ___lwmod@divisor 004F       ds18b20_get_temp@temp 004A            ___lwmod@counter 0051  
              cgrom_char@i 004D                ??_write_eep 0047                ??_write_bit 0046  
              _pressed_key 0035         EUSART_Write@txData 0046         __end_of_write_byte 169E  
