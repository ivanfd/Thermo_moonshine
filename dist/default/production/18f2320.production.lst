

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Mon Aug 09 11:38:44 2021

Microchip MPLAB XC8 C Compiler v2.30 (Pro license) build 20200825195618 Og9s 
     1                           	processor	18F2320
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    51                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    52                           	psect	pa_nodes0,global,class=CODE,delta=1
    53  0000                     
    54                           ; Version 2.20
    55                           ; Generated 12/02/2020 GMT
    56                           ; 
    57                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F2320 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	idataCOMRAM
    90  0018F6                     __pidataCOMRAM:
    91                           	callstack 0
    92                           
    93                           ;initializer for _temperature_2_old
    94  0018F6  7FFF               	dw	32767
    95                           
    96                           ;initializer for _temperature_1_old
    97  0018F8  7FFF               	dw	32767
    98                           
    99                           ;initializer for _temperature_2
   100  0018FA  7FFF               	dw	32767
   101                           
   102                           ;initializer for _temperature_1
   103  0018FC  7FFF               	dw	32767
   104                           
   105                           ;initializer for _dq_num
   106  0018FE  01                 	db	1
   107                           
   108                           ;initializer for _sub_main
   109  0018FF  01                 	db	1
   110                           
   111                           ;initializer for _select
   112  001900  01                 	db	1
   113                           
   114                           ;initializer for _minus_2
   115  001901  2B                 	db	43
   116                           
   117                           ;initializer for _minus_1
   118  001902  2B                 	db	43
   119                           
   120                           	psect	mediumconst
   121  001E92                     __pmediumconst:
   122                           	callstack 0
   123  001E92  00                 	db	0
   124  001E93                     _HD44780_CYR:
   125                           	callstack 0
   126  001E93  41                 	db	65
   127  001E94  A0                 	db	160
   128  001E95  42                 	db	66
   129  001E96  A1                 	db	161
   130  001E97  E0                 	db	224
   131  001E98  45                 	db	69
   132  001E99  A3                 	db	163
   133  001E9A  A4                 	db	164
   134  001E9B  A5                 	db	165
   135  001E9C  A6                 	db	166
   136  001E9D  4B                 	db	75
   137  001E9E  A7                 	db	167
   138  001E9F  4D                 	db	77
   139  001EA0  48                 	db	72
   140  001EA1  4F                 	db	79
   141  001EA2  A8                 	db	168
   142  001EA3  50                 	db	80
   143  001EA4  43                 	db	67
   144  001EA5  54                 	db	84
   145  001EA6  A9                 	db	169
   146  001EA7  AA                 	db	170
   147  001EA8  58                 	db	88
   148  001EA9  E1                 	db	225
   149  001EAA  AB                 	db	171
   150  001EAB  AC                 	db	172
   151  001EAC  E2                 	db	226
   152  001EAD  AD                 	db	173
   153  001EAE  AE                 	db	174
   154  001EAF  62                 	db	98
   155  001EB0  AF                 	db	175
   156  001EB1  B0                 	db	176
   157  001EB2  B1                 	db	177
   158  001EB3  61                 	db	97
   159  001EB4  B2                 	db	178
   160  001EB5  B3                 	db	179
   161  001EB6  B4                 	db	180
   162  001EB7  E3                 	db	227
   163  001EB8  65                 	db	101
   164  001EB9  B6                 	db	182
   165  001EBA  B7                 	db	183
   166  001EBB  B8                 	db	184
   167  001EBC  B9                 	db	185
   168  001EBD  BA                 	db	186
   169  001EBE  BB                 	db	187
   170  001EBF  BC                 	db	188
   171  001EC0  BD                 	db	189
   172  001EC1  6F                 	db	111
   173  001EC2  BE                 	db	190
   174  001EC3  70                 	db	112
   175  001EC4  63                 	db	99
   176  001EC5  BF                 	db	191
   177  001EC6  79                 	db	121
   178  001EC7  E4                 	db	228
   179  001EC8  78                 	db	120
   180  001EC9  E5                 	db	229
   181  001ECA  C0                 	db	192
   182  001ECB  C1                 	db	193
   183  001ECC  E6                 	db	230
   184  001ECD  C2                 	db	194
   185  001ECE  C3                 	db	195
   186  001ECF  C4                 	db	196
   187  001ED0  C5                 	db	197
   188  001ED1  C6                 	db	198
   189  001ED2  C7                 	db	199
   190  001ED3                     __end_of_HD44780_CYR:
   191                           	callstack 0
   192  001ED3                     _fract:
   193                           	callstack 0
   194  001ED3  00                 	db	0
   195  001ED4  01                 	db	1
   196  001ED5  01                 	db	1
   197  001ED6  02                 	db	2
   198  001ED7  02                 	db	2
   199  001ED8  03                 	db	3
   200  001ED9  04                 	db	4
   201  001EDA  04                 	db	4
   202  001EDB  05                 	db	5
   203  001EDC  06                 	db	6
   204  001EDD  06                 	db	6
   205  001EDE  07                 	db	7
   206  001EDF  07                 	db	7
   207  001EE0  08                 	db	8
   208  001EE1  09                 	db	9
   209  001EE2  09                 	db	9
   210  001EE3                     __end_of_fract:
   211                           	callstack 0
   212  001EE3                     _symbol_4:
   213                           	callstack 0
   214  001EE3  06                 	db	6
   215  001EE4  09                 	db	9
   216  001EE5  09                 	db	9
   217  001EE6  06                 	db	6
   218  001EE7  00                 	db	0
   219  001EE8  00                 	db	0
   220  001EE9  00                 	db	0
   221  001EEA  00                 	db	0
   222  001EEB                     __end_of_symbol_4:
   223                           	callstack 0
   224  0000                     _SPBRG	set	4015
   225  0000                     _RCSTAbits	set	4011
   226  0000                     _TXSTAbits	set	4012
   227  0000                     _TRISCbits	set	3988
   228  0000                     _TXREG	set	4013
   229  0000                     _EECON2	set	4007
   230  0000                     _EEDATA	set	4008
   231  0000                     _EEADR	set	4009
   232  0000                     _EECON1bits	set	4006
   233  0000                     _TRISAbits	set	3986
   234  0000                     _LATAbits	set	3977
   235  0000                     _T1CONbits	set	4045
   236  0000                     _PIR1bits	set	3998
   237  0000                     _RCONbits	set	4048
   238  0000                     _PIE1bits	set	3997
   239  0000                     _INTCON2bits	set	4081
   240  0000                     _INTCONbits	set	4082
   241  0000                     _TMR0L	set	4054
   242  0000                     _TMR0H	set	4055
   243  0000                     _T0CONbits	set	4053
   244  0000                     _IPR1bits	set	3999
   245  0000                     _TMR1L	set	4046
   246  0000                     _TMR1H	set	4047
   247  0000                     _T1CON	set	4045
   248  0000                     _PORTAbits	set	3968
   249  0000                     _ADCON1bits	set	4033
   250  0000                     _OSCCONbits	set	4051
   251  0000                     _TRISC	set	3988
   252  0000                     _LATC	set	3979
   253  0000                     _PORTC	set	3970
   254  0000                     _TRISB	set	3987
   255  0000                     _LATB	set	3978
   256  0000                     _TRISA	set	3986
   257  0000                     _LATA	set	3977
   258  0000                     _PORTA	set	3968
   259  0000                     _LATCbits	set	3979
   260  0000                     _PORTB	set	3969
   261  0000                     _TXIF	set	31988
   262  001EEB                     STR_17:
   263  001EEB  20                 	db	32
   264  001EEC  CA                 	db	-54
   265  001EED  EE                 	db	-18
   266  001EEE  E4                 	db	-28
   267  001EEF  20                 	db	32
   268  001EF0  EF                 	db	-17
   269  001EF1  F0                 	db	-16
   270  001EF2  EE                 	db	-18
   271  001EF3  F7                 	db	-9
   272  001EF4  E8                 	db	-24
   273  001EF5  F2                 	db	-14
   274  001EF6  E0                 	db	-32
   275  001EF7  ED                 	db	-19
   276  001EF8  EE                 	db	-18
   277  001EF9  20                 	db	32
   278  001EFA  00                 	db	0
   279  001EFB                     STR_26:
   280  001EFB  D2                 	db	-46
   281  001EFC  E5                 	db	-27
   282  001EFD  EC                 	db	-20
   283  001EFE  EF                 	db	-17
   284  001EFF  20                 	db	32
   285  001F00  E4                 	db	-28
   286  001F01  F0                 	db	-16
   287  001F02  E1                 	db	-31
   288  001F03  3A                 	db	58	;':'
   289  001F04  20                 	db	32
   290  001F05  20                 	db	32
   291  001F06  20                 	db	32
   292  001F07  20                 	db	32
   293  001F08  20                 	db	32
   294  001F09  20                 	db	32
   295  001F0A  00                 	db	0
   296  001F0B                     STR_1:
   297  001F0B  2D                 	db	45
   298  001F0C  2D                 	db	45
   299  001F0D  2D                 	db	45
   300  001F0E  D2                 	db	-46
   301  001F0F  C5                 	db	-59
   302  001F10  D0                 	db	-48
   303  001F11  CC                 	db	-52
   304  001F12  CE                 	db	-50
   305  001F13  CC                 	db	-52
   306  001F14  C5                 	db	-59
   307  001F15  D2                 	db	-46
   308  001F16  D0                 	db	-48
   309  001F17  2D                 	db	45
   310  001F18  2D                 	db	45
   311  001F19  2D                 	db	45
   312  001F1A  00                 	db	0
   313  001F1B                     STR_3:
   314  001F1B  C4                 	db	-60
   315  001F1C  E0                 	db	-32
   316  001F1D  F2                 	db	-14
   317  001F1E  F7                 	db	-9
   318  001F1F  E8                 	db	-24
   319  001F20  EA                 	db	-22
   320  001F21  20                 	db	32
   321  001F22  31                 	db	49	;'1'
   322  001F23  2C                 	db	44
   323  001F24  20                 	db	32
   324  001F25  E0                 	db	-32
   325  001F26  E1                 	db	-31
   326  001F27  EE                 	db	-18
   327  001F28  20                 	db	32
   328  001F29  32                 	db	50	;'2'
   329  001F2A  00                 	db	0
   330  001F2B                     STR_16:
   331  001F2B  20                 	db	32
   332  001F2C  20                 	db	32
   333  001F2D  31                 	db	49	;'1'
   334  001F2E  20                 	db	32
   335  001F2F  20                 	db	32
   336  001F30  20                 	db	32
   337  001F31  20                 	db	32
   338  001F32  20                 	db	32
   339  001F33  32                 	db	50	;'2'
   340  001F34  20                 	db	32
   341  001F35  20                 	db	32
   342  001F36  20                 	db	32
   343  001F37  31                 	db	49	;'1'
   344  001F38  2D                 	db	45
   345  001F39  32                 	db	50	;'2'
   346  001F3A  00                 	db	0
   347  001F3B                     STR_2:
   348  001F3B  28                 	db	40
   349  001F3C  63                 	db	99	;'c'
   350  001F3D  29                 	db	41
   351  001F3E  49                 	db	73	;'I'
   352  001F3F  76                 	db	118	;'v'
   353  001F40  61                 	db	97	;'a'
   354  001F41  6E                 	db	110	;'n'
   355  001F42  5F                 	db	95	;'_'
   356  001F43  66                 	db	102	;'f'
   357  001F44  64                 	db	100	;'d'
   358  001F45  20                 	db	32
   359  001F46  76                 	db	118	;'v'
   360  001F47  31                 	db	49	;'1'
   361  001F48  2E                 	db	46
   362  001F49  34                 	db	52	;'4'
   363  001F4A  00                 	db	0
   364  001F4B                     STR_15:
   365  001F4B  CF                 	db	-49
   366  001F4C  EE                 	db	-18
   367  001F4D  F0                 	db	-16
   368  001F4E  69                 	db	105	;'i'
   369  001F4F  E3                 	db	-29
   370  001F50  20                 	db	32
   371  001F51  D1                 	db	-47
   372  001F52  E8                 	db	-24
   373  001F53  E3                 	db	-29
   374  001F54  ED                 	db	-19
   375  001F55  2E                 	db	46
   376  001F56  20                 	db	32
   377  001F57  4C                 	db	76	;'L'
   378  001F58  65                 	db	101	;'e'
   379  001F59  64                 	db	100	;'d'
   380  001F5A  00                 	db	0
   381  001F5B                     STR_20:
   382  001F5B  20                 	db	32
   383  001F5C  CA                 	db	-54
   384  001F5D  EE                 	db	-18
   385  001F5E  EB                 	db	-21
   386  001F5F  EE                 	db	-18
   387  001F60  ED                 	db	-19
   388  001F61  E0                 	db	-32
   389  001F62  20                 	db	32
   390  001F63  20                 	db	32
   391  001F64  20                 	db	32
   392  001F65  20                 	db	32
   393  001F66  CA                 	db	-54
   394  001F67  F3                 	db	-13
   395  001F68  E1                 	db	-31
   396  001F69  00                 	db	0
   397  001F6A                     STR_25:
   398  001F6A  D2                 	db	-46
   399  001F6B  E5                 	db	-27
   400  001F6C  EC                 	db	-20
   401  001F6D  EF                 	db	-17
   402  001F6E  20                 	db	32
   403  001F6F  CD                 	db	-51
   404  001F70  E8                 	db	-24
   405  001F71  E7                 	db	-25
   406  001F72  3A                 	db	58	;':'
   407  001F73  20                 	db	32
   408  001F74  20                 	db	32
   409  001F75  20                 	db	32
   410  001F76  20                 	db	32
   411  001F77  20                 	db	32
   412  001F78  00                 	db	0
   413  001F79                     STR_19:
   414  001F79  CA                 	db	-54
   415  001F7A  EE                 	db	-18
   416  001F7B  EB                 	db	-21
   417  001F7C  28                 	db	40
   418  001F7D  31                 	db	49	;'1'
   419  001F7E  29                 	db	41
   420  001F7F  2F                 	db	47
   421  001F80  CA                 	db	-54
   422  001F81  F3                 	db	-13
   423  001F82  E1                 	db	-31
   424  001F83  28                 	db	40
   425  001F84  32                 	db	50	;'2'
   426  001F85  29                 	db	41
   427  001F86  3A                 	db	58	;':'
   428  001F87  00                 	db	0
   429  001F88                     STR_18:
   430  001F88  20                 	db	32
   431  001F89  20                 	db	32
   432  001F8A  20                 	db	32
   433  001F8B  C3                 	db	-61
   434  001F8C  F0                 	db	-16
   435  001F8D  E0                 	db	-32
   436  001F8E  ED                 	db	-19
   437  001F8F  E8                 	db	-24
   438  001F90  F6                 	db	-10
   439  001F91  69                 	db	105	;'i'
   440  001F92  20                 	db	32
   441  001F93  20                 	db	32
   442  001F94  20                 	db	32
   443  001F95  00                 	db	0
   444  001F96                     STR_23:
   445  001F96  20                 	db	32
   446  001F97  20                 	db	32
   447  001F98  20                 	db	32
   448  001F99  20                 	db	32
   449  001F9A  CA                 	db	-54
   450  001F9B  F3                 	db	-13
   451  001F9C  E1                 	db	-31
   452  001F9D  EE                 	db	-18
   453  001F9E  E2                 	db	-30
   454  001F9F  E0                 	db	-32
   455  001FA0  20                 	db	32
   456  001FA1  20                 	db	32
   457  001FA2  00                 	db	0
   458  001FA3                     STR_21:
   459  001FA3  20                 	db	32
   460  001FA4  20                 	db	32
   461  001FA5  20                 	db	32
   462  001FA6  20                 	db	32
   463  001FA7  CA                 	db	-54
   464  001FA8  EE                 	db	-18
   465  001FA9  EB                 	db	-21
   466  001FAA  EE                 	db	-18
   467  001FAB  ED                 	db	-19
   468  001FAC  E0                 	db	-32
   469  001FAD  20                 	db	32
   470  001FAE  20                 	db	32
   471  001FAF  00                 	db	0
   472  001FB0                     STR_4:
   473  001FB0  C2                 	db	-62
   474  001FB1  E8                 	db	-24
   475  001FB2  E1                 	db	-31
   476  001FB3  69                 	db	105	;'i'
   477  001FB4  F0                 	db	-16
   478  001FB5  20                 	db	32
   479  001FB6  31                 	db	49	;'1'
   480  001FB7  38                 	db	56	;'8'
   481  001FB8  42                 	db	66	;'B'
   482  001FB9  32                 	db	50	;'2'
   483  001FBA  30                 	db	48	;'0'
   484  001FBB  3A                 	db	58	;':'
   485  001FBC  00                 	db	0
   486  001FBD                     STR_22:
   487  001FBD  D2                 	db	-46
   488  001FBE  E5                 	db	-27
   489  001FBF  EC                 	db	-20
   490  001FC0  EF                 	db	-17
   491  001FC1  20                 	db	32
   492  001FC2  C2                 	db	-62
   493  001FC3  E5                 	db	-27
   494  001FC4  F0                 	db	-16
   495  001FC5  F5                 	db	-11
   496  001FC6  3A                 	db	58	;':'
   497  001FC7  00                 	db	0
   498  001FC8                     STR_24:
   499  001FC8  D2                 	db	-46
   500  001FC9  E5                 	db	-27
   501  001FCA  EC                 	db	-20
   502  001FCB  EF                 	db	-17
   503  001FCC  20                 	db	32
   504  001FCD  F6                 	db	-10
   505  001FCE  69                 	db	105	;'i'
   506  001FCF  EB                 	db	-21
   507  001FD0  69                 	db	105	;'i'
   508  001FD1  3A                 	db	58	;':'
   509  001FD2  00                 	db	0
   510  001FD3                     STR_13:
   511  001FD3  CA                 	db	-54
   512  001FD4  F3                 	db	-13
   513  001FD5  E1                 	db	-31
   514  001FD6  EE                 	db	-18
   515  001FD7  E2                 	db	-30
   516  001FD8  E0                 	db	-32
   517  001FD9  3A                 	db	58	;':'
   518  001FDA  00                 	db	0
   519  001FDB                     STR_12:
   520  001FDB  CA                 	db	-54
   521  001FDC  EE                 	db	-18
   522  001FDD  EB                 	db	-21
   523  001FDE  EE                 	db	-18
   524  001FDF  ED                 	db	-19
   525  001FE0  E0                 	db	-32
   526  001FE1  3A                 	db	58	;':'
   527  001FE2  00                 	db	0
   528  001FE3                     STR_11:
   529  001FE3  30                 	db	48	;'0'
   530  001FE4  30                 	db	48	;'0'
   531  001FE5  30                 	db	48	;'0'
   532  001FE6  30                 	db	48	;'0'
   533  001FE7  0D                 	db	13
   534  001FE8  0A                 	db	10
   535  001FE9  00                 	db	0
   536  001FEA                     STR_14:
   537  001FEA  CF                 	db	-49
   538  001FEB  EE                 	db	-18
   539  001FEC  F0                 	db	-16
   540  001FED  69                 	db	105	;'i'
   541  001FEE  E3                 	db	-29
   542  001FEF  3A                 	db	58	;':'
   543  001FF0  00                 	db	0
   544  001FF1                     STR_7:
   545  001FF1  30                 	db	48	;'0'
   546  001FF2  30                 	db	48	;'0'
   547  001FF3  30                 	db	48	;'0'
   548  001FF4  30                 	db	48	;'0'
   549  001FF5  00                 	db	0
   550  001FF6                     STR_8:
   551  001FF6  74                 	db	116	;'t'
   552  001FF7  62                 	db	98	;'b'
   553  001FF8  3A                 	db	58	;':'
   554  001FF9  00                 	db	0
   555  001FFA                     STR_5:
   556  001FFA  74                 	db	116	;'t'
   557  001FFB  6B                 	db	107	;'k'
   558  001FFC  3A                 	db	58	;':'
   559  001FFD  00                 	db	0
   560  001FFE  00                 	db	0	; dummy byte at the end
   561  0000                     
   562                           ; #config settings
   563                           
   564                           	psect	cinit
   565  0015DC                     __pcinit:
   566                           	callstack 0
   567  0015DC                     start_initialization:
   568                           	callstack 0
   569  0015DC                     __initialization:
   570                           	callstack 0
   571                           
   572                           ; Initialize objects allocated to COMRAM (13 bytes)
   573                           ; load TBLPTR registers with __pidataCOMRAM
   574  0015DC  0EF6               	movlw	low __pidataCOMRAM
   575  0015DE  6EF6               	movwf	tblptrl,c
   576  0015E0  0E18               	movlw	high __pidataCOMRAM
   577  0015E2  6EF7               	movwf	tblptrh,c
   578  0015E4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   579  0015E6  6EF8               	movwf	tblptru,c
   580  0015E8  EE00  F059         	lfsr	0,__pdataCOMRAM
   581  0015EC  EE10 F00D          	lfsr	1,13
   582  0015F0                     copy_data0:
   583  0015F0  0009               	tblrd		*+
   584  0015F2  CFF5 FFEE          	movff	tablat,postinc0
   585  0015F6  50E5               	movf	postdec1,w,c
   586  0015F8  50E1               	movf	fsr1l,w,c
   587  0015FA  E1FA               	bnz	copy_data0
   588                           
   589                           ; Clear objects allocated to BITCOMRAM (2 bytes)
   590  0015FC  6A67               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
   591  0015FE  6A66               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   592                           
   593                           ; Clear objects allocated to COMRAM (65 bytes)
   594  001600  EE00  F001         	lfsr	0,__pbssCOMRAM
   595  001604  0E41               	movlw	65
   596  001606                     clear_0:
   597  001606  6AEE               	clrf	postinc0,c
   598  001608  06E8               	decf	wreg,f,c
   599  00160A  E1FD               	bnz	clear_0
   600  00160C                     end_of_initialization:
   601                           	callstack 0
   602  00160C                     __end_of__initialization:
   603                           	callstack 0
   604  00160C  9068               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   605  00160E  9268               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   606  001610  0E00               	movlw	low (__Lmediumconst shr (0+16))
   607  001612  6EF8               	movwf	tblptru,c
   608  001614  0100               	movlb	0
   609  001616  EF4F  F000         	goto	_main	;jump to C main() function
   610                           
   611                           	psect	bitbssCOMRAM
   612  000330                     __pbitbssCOMRAM:
   613                           	callstack 0
   614  000330                     _en_snd_b:
   615                           	callstack 0
   616  000330                     	ds	1
   617  000331                     _en_snd_k:
   618                           	callstack 0
   619  000331                     	ds	1
   620  000332                     _snd_b_b:
   621                           	callstack 0
   622  000332                     	ds	1
   623  000333                     _snd_k_b:
   624                           	callstack 0
   625  000333                     	ds	1
   626  000334                     _snd_all:
   627                           	callstack 0
   628  000334                     	ds	1
   629  000335                     _snd_b:
   630                           	callstack 0
   631  000335                     	ds	1
   632  000336                     _snd_k:
   633                           	callstack 0
   634  000336                     	ds	1
   635  000337                     _sound_yes:
   636                           	callstack 0
   637  000337                     	ds	1
   638  000338                     _en_sound:
   639                           	callstack 0
   640  000338                     	ds	1
   641  000339                     _read_key:
   642                           	callstack 0
   643  000339                     	ds	1
   644  00033A                     _en_send_usart:
   645                           	callstack 0
   646  00033A                     	ds	1
   647                           
   648                           	psect	bssCOMRAM
   649  000001                     __pbssCOMRAM:
   650                           	callstack 0
   651  000001                     _eusartTxBuffer:
   652                           	callstack 0
   653  000001                     	ds	16
   654  000011                     _rom_dq:
   655                           	callstack 0
   656  000011                     	ds	16
   657  000021                     _temp_ready:
   658                           	callstack 0
   659  000021                     	ds	4
   660  000025                     key_press@count:
   661                           	callstack 0
   662  000025                     	ds	2
   663  000027                     _temp1_fix:
   664                           	callstack 0
   665  000027                     	ds	2
   666  000029                     _set_t_dq2:
   667                           	callstack 0
   668  000029                     	ds	2
   669  00002B                     _eusartRxCount:
   670                           	callstack 0
   671  00002B                     	ds	1
   672  00002C                     _eusartTxBufferRemaining:
   673                           	callstack 0
   674  00002C                     	ds	1
   675  00002D                     _eusartTxHead:
   676                           	callstack 0
   677  00002D                     	ds	1
   678  00002E                     _key_pressed:
   679                           	callstack 0
   680  00002E                     	ds	1
   681  00002F                     myIntL@snd_delay:
   682                           	callstack 0
   683  00002F                     	ds	1
   684  000030                     _set_t_dq2_10:
   685                           	callstack 0
   686  000030                     	ds	1
   687  000031                     _set_t_dq2_100:
   688                           	callstack 0
   689  000031                     	ds	1
   690  000032                     _set_t_dq1_dwn:
   691                           	callstack 0
   692  000032                     	ds	1
   693  000033                     _set_t_dq1_up:
   694                           	callstack 0
   695  000033                     	ds	1
   696  000034                     _sub_sel:
   697                           	callstack 0
   698  000034                     	ds	1
   699  000035                     _pressed_key:
   700                           	callstack 0
   701  000035                     	ds	1
   702  000036                     _tik_time:
   703                           	callstack 0
   704  000036                     	ds	1
   705  000037                     _scratch:
   706                           	callstack 0
   707  000037                     	ds	9
   708  000040                     _time_flag:
   709                           	callstack 0
   710  000040                     	ds	1
   711  000041                     _timer_val:
   712                           	callstack 0
   713  000041                     	ds	1
   714                           
   715                           	psect	dataCOMRAM
   716  000059                     __pdataCOMRAM:
   717                           	callstack 0
   718  000059                     _temperature_2_old:
   719                           	callstack 0
   720  000059                     	ds	2
   721  00005B                     _temperature_1_old:
   722                           	callstack 0
   723  00005B                     	ds	2
   724  00005D                     _temperature_2:
   725                           	callstack 0
   726  00005D                     	ds	2
   727  00005F                     _temperature_1:
   728                           	callstack 0
   729  00005F                     	ds	2
   730  000061                     _dq_num:
   731                           	callstack 0
   732  000061                     	ds	1
   733  000062                     _sub_main:
   734                           	callstack 0
   735  000062                     	ds	1
   736  000063                     _select:
   737                           	callstack 0
   738  000063                     	ds	1
   739  000064                     _minus_2:
   740                           	callstack 0
   741  000064                     	ds	1
   742  000065                     _minus_1:
   743                           	callstack 0
   744  000065                     	ds	1
   745                           
   746                           	psect	cstackCOMRAM
   747  000042                     __pcstackCOMRAM:
   748                           	callstack 0
   749  000042                     ??_myIntL:
   750  000042                     
   751                           ; 1 bytes @ 0x0
   752  000042                     	ds	3
   753  000045                     ??_read_byte:
   754  000045                     ??_lcdNibble:
   755  000045                     ?_ds18b20_get_temp:
   756                           	callstack 0
   757  000045                     ?___lwdiv:
   758                           	callstack 0
   759  000045                     ds18b20_get_temp@minus:
   760                           	callstack 0
   761  000045                     ds18b20_crc8@data_in:
   762                           	callstack 0
   763  000045                     ow_reset@presence:
   764                           	callstack 0
   765  000045                     write_bit@bitval:
   766                           	callstack 0
   767  000045                     write_eep@data:
   768                           	callstack 0
   769  000045                     key_press@key:
   770                           	callstack 0
   771  000045                     key_GetKey@key:
   772                           	callstack 0
   773  000045                     EUSART_Write@txData:
   774                           	callstack 0
   775  000045                     ___lbdiv@divisor:
   776                           	callstack 0
   777  000045                     Delay_ms@delay:
   778                           	callstack 0
   779  000045                     read_eep@address:
   780                           	callstack 0
   781  000045                     ___lwdiv@dividend:
   782                           	callstack 0
   783                           
   784                           ; 2 bytes @ 0x3
   785  000045                     	ds	1
   786  000046                     ??_write_byte:
   787  000046                     ds18b20_crc8@num_bytes:
   788                           	callstack 0
   789  000046                     lcdNibble@nibble:
   790                           	callstack 0
   791  000046                     write_eep@address:
   792                           	callstack 0
   793  000046                     ___lbdiv@dividend:
   794                           	callstack 0
   795  000046                     EUSART_Write_Str@t:
   796                           	callstack 0
   797                           
   798                           ; 2 bytes @ 0x4
   799  000046                     	ds	1
   800  000047                     ??_Delay_ms:
   801  000047                     ds18b20_get_temp@num_dq:
   802                           	callstack 0
   803  000047                     ds18b20_crc8@bit_counter:
   804                           	callstack 0
   805  000047                     lcdWrite@type:
   806                           	callstack 0
   807  000047                     read_byte@val:
   808                           	callstack 0
   809  000047                     ___lbdiv@counter:
   810                           	callstack 0
   811  000047                     ___lwdiv@divisor:
   812                           	callstack 0
   813                           
   814                           ; 2 bytes @ 0x5
   815  000047                     	ds	1
   816  000048                     ds18b20_get_temp@tmp:
   817                           	callstack 0
   818  000048                     ds18b20_crc8@data:
   819                           	callstack 0
   820  000048                     lcdWrite@byte:
   821                           	callstack 0
   822  000048                     read_byte@i:
   823                           	callstack 0
   824  000048                     write_byte@val:
   825                           	callstack 0
   826  000048                     ___lbdiv@quotient:
   827                           	callstack 0
   828  000048                     Delay_ms@i:
   829                           	callstack 0
   830                           
   831                           ; 2 bytes @ 0x6
   832  000048                     	ds	1
   833  000049                     ??_clearLCD:
   834  000049                     ds18b20_crc8@feedback_bit:
   835                           	callstack 0
   836  000049                     lcd_gotoxy@y:
   837                           	callstack 0
   838  000049                     lcd_putc@c:
   839                           	callstack 0
   840  000049                     write_byte@temp:
   841                           	callstack 0
   842  000049                     ___lbmod@divisor:
   843                           	callstack 0
   844  000049                     ds18b20_get_temp@temp:
   845                           	callstack 0
   846  000049                     cgrom_char@symbol:
   847                           	callstack 0
   848  000049                     ___lwdiv@quotient:
   849                           	callstack 0
   850                           
   851                           ; 2 bytes @ 0x7
   852  000049                     	ds	1
   853  00004A                     ??_initLCD:
   854  00004A                     ds18b20_crc8@loop_count:
   855                           	callstack 0
   856  00004A                     lcd_gotoxy@x:
   857                           	callstack 0
   858  00004A                     write_byte@i:
   859                           	callstack 0
   860  00004A                     ___lbmod@dividend:
   861                           	callstack 0
   862                           
   863                           ; 1 bytes @ 0x8
   864  00004A                     	ds	1
   865  00004B                     ??_init_ds18b20:
   866  00004B                     ds18b20_crc8@crc:
   867                           	callstack 0
   868  00004B                     lcd_gotoxy@address:
   869                           	callstack 0
   870  00004B                     cgrom_char@address:
   871                           	callstack 0
   872  00004B                     ___lbmod@counter:
   873                           	callstack 0
   874  00004B                     ___lwdiv@counter:
   875                           	callstack 0
   876                           
   877                           ; 1 bytes @ 0x9
   878  00004B                     	ds	1
   879  00004C                     ?___lwmod:
   880                           	callstack 0
   881  00004C                     ds18b20_readTemp@time_flag:
   882                           	callstack 0
   883  00004C                     cgrom_char@i:
   884                           	callstack 0
   885  00004C                     ___lbmod@rem:
   886                           	callstack 0
   887  00004C                     lcdPrint@t:
   888                           	callstack 0
   889  00004C                     ___lwmod@dividend:
   890                           	callstack 0
   891  00004C                     ds18b20_readrom@temp_rom:
   892                           	callstack 0
   893                           
   894                           ; 8 bytes @ 0xA
   895  00004C                     	ds	1
   896  00004D                     init_ds18b20@q:
   897                           	callstack 0
   898  00004D                     ds18b20_readTemp@timer_val:
   899                           	callstack 0
   900                           
   901                           ; 1 bytes @ 0xB
   902  00004D                     	ds	1
   903  00004E                     ??_lcdPrint:
   904  00004E                     ??_ds18b20_readTemp:
   905  00004E                     init_ds18b20@i:
   906                           	callstack 0
   907  00004E                     ___lwmod@divisor:
   908                           	callstack 0
   909                           
   910                           ; 2 bytes @ 0xC
   911  00004E                     	ds	1
   912  00004F                     
   913                           ; 1 bytes @ 0xD
   914  00004F                     	ds	1
   915  000050                     ___lwmod@counter:
   916                           	callstack 0
   917  000050                     ds18b20_readTemp@temp:
   918                           	callstack 0
   919                           
   920                           ; 2 bytes @ 0xE
   921  000050                     	ds	2
   922  000052                     ds18b20_readTemp@j:
   923                           	callstack 0
   924                           
   925                           ; 1 bytes @ 0x10
   926  000052                     	ds	1
   927  000053                     ds18b20_readTemp@i:
   928                           	callstack 0
   929                           
   930                           ; 1 bytes @ 0x11
   931  000053                     	ds	1
   932  000054                     ds18b20_readrom@num_dq:
   933                           	callstack 0
   934                           
   935                           ; 1 bytes @ 0x12
   936  000054                     	ds	1
   937  000055                     ds18b20_readrom@i:
   938                           	callstack 0
   939                           
   940                           ; 1 bytes @ 0x13
   941  000055                     	ds	1
   942  000056                     ??_main:
   943                           
   944                           ; 1 bytes @ 0x14
   945  000056                     	ds	3
   946                           
   947 ;;
   948 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   949 ;;
   950 ;; *************** function _main *****************
   951 ;; Defined at:
   952 ;;		line 39 in file "main.c"
   953 ;; Parameters:    Size  Location     Type
   954 ;;		None
   955 ;; Auto vars:     Size  Location     Type
   956 ;;		None
   957 ;; Return value:  Size  Location     Type
   958 ;;                  1    wreg      void 
   959 ;; Registers used:
   960 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   961 ;; Tracked objects:
   962 ;;		On entry : 0/0
   963 ;;		On exit  : 0/0
   964 ;;		Unchanged: 0/0
   965 ;; Data sizes:     COMRAM   BANK0   BANK1
   966 ;;      Params:         0       0       0
   967 ;;      Locals:         0       0       0
   968 ;;      Temps:          3       0       0
   969 ;;      Totals:         3       0       0
   970 ;;Total ram usage:        3 bytes
   971 ;; Hardware stack levels required when called:    7
   972 ;; This function calls:
   973 ;;		_Delay_ms
   974 ;;		_EUSART_Write
   975 ;;		_EUSART_Write_Str
   976 ;;		_Main_init
   977 ;;		___lbdiv
   978 ;;		___lbmod
   979 ;;		___lwdiv
   980 ;;		___lwmod
   981 ;;		_clearLCD
   982 ;;		_ds18b20_get_temp
   983 ;;		_ds18b20_readTemp
   984 ;;		_ds18b20_readrom
   985 ;;		_key_GetKey
   986 ;;		_key_press
   987 ;;		_lcdPrint
   988 ;;		_lcd_gotoxy
   989 ;;		_lcd_putc
   990 ;;		_read_eep
   991 ;;		_write_eep
   992 ;; This function is called by:
   993 ;;		Startup code after reset
   994 ;; This function uses a non-reentrant model
   995 ;;
   996                           
   997                           	psect	text0
   998  00009E                     __ptext0:
   999                           	callstack 0
  1000  00009E                     _main:
  1001                           	callstack 24
  1002                           
  1003                           ;main.c: 40: Main_init();
  1004                           
  1005                           ;incstack = 0
  1006  00009E  ECD4  F009         	call	_Main_init	;wreg free
  1007                           
  1008                           ;main.c: 42: lcd_gotoxy(1, 1);
  1009  0000A2  0E01               	movlw	1
  1010  0000A4  6E49               	movwf	lcd_gotoxy@y^0,c
  1011  0000A6  EC3E  F00C         	call	_lcd_gotoxy
  1012                           
  1013                           ;main.c: 43: lcdPrint("---ÒÅÐÌÎÌÅÒÐ---");
  1014  0000AA  0E0B               	movlw	low STR_1
  1015  0000AC  6E4C               	movwf	lcdPrint@t^0,c
  1016  0000AE  0E1F               	movlw	high STR_1
  1017  0000B0  6E4D               	movwf	(lcdPrint@t+1)^0,c
  1018  0000B2  ECFE  F008         	call	_lcdPrint	;wreg free
  1019                           
  1020                           ;main.c: 44: lcd_gotoxy(1, 2);
  1021  0000B6  ECC3  F007         	call	PL22	;call to abstracted procedure
  1022  0000BA  EC3E  F00C         	call	_lcd_gotoxy
  1023                           
  1024                           ;main.c: 45: lcdPrint("(c)Ivan_fd v1.4");
  1025  0000BE  0E3B               	movlw	low STR_2
  1026  0000C0  6E4C               	movwf	lcdPrint@t^0,c
  1027  0000C2  0E1F               	movlw	high STR_2
  1028  0000C4  6E4D               	movwf	(lcdPrint@t+1)^0,c
  1029  0000C6  ECFE  F008         	call	_lcdPrint	;wreg free
  1030                           
  1031                           ;main.c: 46: Delay_ms(2000);
  1032  0000CA  0E07               	movlw	7
  1033  0000CC  6E46               	movwf	(Delay_ms@delay+1)^0,c
  1034  0000CE  0ED0               	movlw	208
  1035  0000D0  6E45               	movwf	Delay_ms@delay^0,c
  1036  0000D2  ECEA  F00B         	call	_Delay_ms	;wreg free
  1037                           
  1038                           ;main.c: 47: clearLCD();
  1039  0000D6  EC5A  F00C         	call	_clearLCD	;wreg free
  1040                           
  1041                           ;main.c: 48: if ((PORTB & (1 << 1)) == 0) {
  1042  0000DA  B281               	btfsc	129,1,c	;volatile
  1043  0000DC  D017               	goto	l3064
  1044                           
  1045                           ;main.c: 49: clearLCD();
  1046  0000DE  EC5A  F00C         	call	_clearLCD	;wreg free
  1047                           
  1048                           ;main.c: 50: select = 2;
  1049  0000E2  0E02               	movlw	2
  1050                           
  1051                           ;main.c: 51: lcd_gotoxy(1, 1);
  1052  0000E4  ECD2  F007         	call	PL32	;call to abstracted procedure
  1053  0000E8  EC3E  F00C         	call	_lcd_gotoxy
  1054                           
  1055                           ;main.c: 52: lcdPrint("Äàò÷èê 1, àáî 2");
  1056  0000EC  0E1B               	movlw	low STR_3
  1057  0000EE  6E4C               	movwf	lcdPrint@t^0,c
  1058  0000F0  0E1F               	movlw	high STR_3
  1059  0000F2  6E4D               	movwf	(lcdPrint@t+1)^0,c
  1060  0000F4  ECFE  F008         	call	_lcdPrint	;wreg free
  1061                           
  1062                           ;main.c: 53: lcd_gotoxy(1, 2);
  1063  0000F8  ECC3  F007         	call	PL22	;call to abstracted procedure
  1064  0000FC  EC3E  F00C         	call	_lcd_gotoxy
  1065                           
  1066                           ;main.c: 54: lcdPrint("Âèáið 18B20:");
  1067  000100  0EB0               	movlw	low STR_4
  1068  000102  6E4C               	movwf	lcdPrint@t^0,c
  1069  000104  0E1F               	movlw	high STR_4
  1070  000106  6E4D               	movwf	(lcdPrint@t+1)^0,c
  1071  000108  ECFE  F008         	call	_lcdPrint	;wreg free
  1072  00010C                     l3064:
  1073                           
  1074                           ;main.c: 56: };main.c: 58: set_t_dq1_up = read_eep(16);
  1075  00010C  6A46               	clrf	(read_eep@address+1)^0,c
  1076  00010E  0E10               	movlw	16
  1077  000110  6E45               	movwf	read_eep@address^0,c
  1078  000112  EC72  F00C         	call	_read_eep	;wreg free
  1079  000116  6E33               	movwf	_set_t_dq1_up^0,c
  1080                           
  1081                           ;main.c: 59: set_t_dq1_dwn = read_eep(17);
  1082  000118  6A46               	clrf	(read_eep@address+1)^0,c
  1083  00011A  0E11               	movlw	17
  1084  00011C  6E45               	movwf	read_eep@address^0,c
  1085  00011E  EC72  F00C         	call	_read_eep	;wreg free
  1086  000122  6E32               	movwf	_set_t_dq1_dwn^0,c
  1087                           
  1088                           ;main.c: 60: set_t_dq2 = (uint16_t) read_eep(18) << 8 | read_eep(19);
  1089  000124  6A46               	clrf	(read_eep@address+1)^0,c
  1090  000126  0E13               	movlw	19
  1091  000128  6E45               	movwf	read_eep@address^0,c
  1092  00012A  EC72  F00C         	call	_read_eep	;wreg free
  1093  00012E  6E56               	movwf	??_main^0,c
  1094  000130  6A46               	clrf	(read_eep@address+1)^0,c
  1095  000132  0E12               	movlw	18
  1096  000134  6E45               	movwf	read_eep@address^0,c
  1097  000136  EC72  F00C         	call	_read_eep	;wreg free
  1098  00013A  6E57               	movwf	(??_main+1)^0,c
  1099  00013C  5056               	movf	??_main^0,w,c
  1100  00013E  6E29               	movwf	_set_t_dq2^0,c
  1101  000140  C057  F02A         	movff	??_main+1,_set_t_dq2+1
  1102                           
  1103                           ;main.c: 61: temp1_fix = (uint16_t) read_eep(20) << 8 | read_eep(20 + 1);
  1104  000144  6A46               	clrf	(read_eep@address+1)^0,c
  1105  000146  0E15               	movlw	21
  1106  000148  6E45               	movwf	read_eep@address^0,c
  1107  00014A  EC72  F00C         	call	_read_eep	;wreg free
  1108  00014E  6E56               	movwf	??_main^0,c
  1109  000150  6A46               	clrf	(read_eep@address+1)^0,c
  1110  000152  0E14               	movlw	20
  1111  000154  6E45               	movwf	read_eep@address^0,c
  1112  000156  EC72  F00C         	call	_read_eep	;wreg free
  1113  00015A  6E57               	movwf	(??_main+1)^0,c
  1114  00015C  5056               	movf	??_main^0,w,c
  1115  00015E  6E27               	movwf	_temp1_fix^0,c
  1116  000160  C057  F028         	movff	??_main+1,_temp1_fix+1
  1117  000164                     l3072:
  1118                           
  1119                           ;main.c: 68: if (read_key) {
  1120  000164  A267               	btfss	(_read_key/(0+8))^0,_read_key& (0+7),c
  1121  000166  D003               	goto	l3078
  1122                           
  1123                           ;main.c: 69: key_press();
  1124  000168  EC7D  F00A         	call	_key_press	;wreg free
  1125                           
  1126                           ;main.c: 70: read_key = 0;
  1127  00016C  9267               	bcf	(_read_key/(0+8))^0,_read_key& (0+7),c
  1128  00016E                     l3078:
  1129                           
  1130                           ;main.c: 71: };main.c: 72: pressed_key = key_GetKey();
  1131  00016E  EC88  F00C         	call	_key_GetKey	;wreg free
  1132  000172  6E35               	movwf	_pressed_key^0,c
  1133                           
  1134                           ;main.c: 74: switch (select) {
  1135  000174  EF77  F007         	goto	l3520
  1136  000178                     l3080:
  1137                           
  1138                           ;main.c: 76: if (ds18b20_readTemp(&time_flag, &timer_val)) {
  1139  000178  0E40               	movlw	low _time_flag
  1140  00017A  6E4C               	movwf	ds18b20_readTemp@time_flag^0,c
  1141  00017C  0E41               	movlw	low _timer_val
  1142  00017E  6E4D               	movwf	ds18b20_readTemp@timer_val^0,c
  1143  000180  EC90  F008         	call	_ds18b20_readTemp	;wreg free
  1144  000184  0900               	iorlw	0
  1145  000186  E027               	bz	l176
  1146                           
  1147                           ;main.c: 77: temperature_1_old = temperature_1;
  1148  000188  C05F  F05B         	movff	_temperature_1,_temperature_1_old
  1149  00018C  C060  F05C         	movff	_temperature_1+1,_temperature_1_old+1
  1150                           
  1151                           ;main.c: 78: temperature_2_old = temperature_2;
  1152  000190  C05D  F059         	movff	_temperature_2,_temperature_2_old
  1153  000194  C05E  F05A         	movff	_temperature_2+1,_temperature_2_old+1
  1154                           
  1155                           ;main.c: 79: temperature_1 = ds18b20_get_temp(1, &minus_1);
  1156  000198  0E65               	movlw	low _minus_1
  1157  00019A  6E45               	movwf	ds18b20_get_temp@minus^0,c
  1158  00019C  0E01               	movlw	1
  1159  00019E  EC52  F009         	call	_ds18b20_get_temp
  1160  0001A2  C045  F05F         	movff	?_ds18b20_get_temp,_temperature_1
  1161  0001A6  C046  F060         	movff	?_ds18b20_get_temp+1,_temperature_1+1
  1162                           
  1163                           ;main.c: 80: temperature_2 = ds18b20_get_temp(2, &minus_2);
  1164  0001AA  0E64               	movlw	low _minus_2
  1165  0001AC  6E45               	movwf	ds18b20_get_temp@minus^0,c
  1166  0001AE  0E02               	movlw	2
  1167  0001B0  EC52  F009         	call	_ds18b20_get_temp
  1168  0001B4  C045  F05D         	movff	?_ds18b20_get_temp,_temperature_2
  1169  0001B8  C046  F05E         	movff	?_ds18b20_get_temp+1,_temperature_2+1
  1170                           
  1171                           ;main.c: 81: if((temperature_1 != temperature_1_old) || (temperature_2 != temperature_2_
      +                          old))
  1172  0001BC  505B               	movf	_temperature_1_old^0,w,c
  1173  0001BE  185F               	xorwf	_temperature_1^0,w,c
  1174  0001C0  E109               	bnz	l179
  1175  0001C2  505C               	movf	(_temperature_1_old+1)^0,w,c
  1176  0001C4  1860               	xorwf	(_temperature_1+1)^0,w,c
  1177  0001C6  E106               	bnz	u2030
  1178  0001C8  5059               	movf	_temperature_2_old^0,w,c
  1179  0001CA  185D               	xorwf	_temperature_2^0,w,c
  1180  0001CC  E103               	bnz	u2030
  1181  0001CE  505A               	movf	(_temperature_2_old+1)^0,w,c
  1182  0001D0  185E               	xorwf	(_temperature_2+1)^0,w,c
  1183  0001D2  E001               	bz	l176
  1184  0001D4                     u2030:
  1185  0001D4                     l179:
  1186                           
  1187                           ;main.c: 82: en_send_usart = 1;
  1188  0001D4  8467               	bsf	(_en_send_usart/(0+8))^0,_en_send_usart& (0+7),c
  1189  0001D6                     l176:
  1190                           
  1191                           ;main.c: 83: };main.c: 85: if (en_send_usart) {
  1192  0001D6  A467               	btfss	(_en_send_usart/(0+8))^0,_en_send_usart& (0+7),c
  1193  0001D8  D398               	goto	l3184
  1194                           
  1195                           ;main.c: 86: en_send_usart = 0;
  1196  0001DA  9467               	bcf	(_en_send_usart/(0+8))^0,_en_send_usart& (0+7),c
  1197                           
  1198                           ;main.c: 87: if (temperature_1 != 32767) {
  1199  0001DC  285F               	incf	_temperature_1^0,w,c
  1200  0001DE  E103               	bnz	u2050
  1201  0001E0  0E7F               	movlw	127
  1202  0001E2  1860               	xorwf	(_temperature_1+1)^0,w,c
  1203  0001E4  E039               	bz	l3104
  1204  0001E6                     u2050:
  1205                           
  1206                           ;main.c: 88: EUSART_Write_Str("tk:");
  1207  0001E6  ECEE  F007         	call	PL48	;call to abstracted procedure
  1208  0001EA  EC1F  F00C         	call	_EUSART_Write_Str	;wreg free
  1209                           
  1210                           ;main.c: 89: EUSART_Write(((temperature_1 / 1000) % 10) + 48);
  1211  0001EE  ECC0  F007         	call	PL18	;call to abstracted procedure
  1212  0001F2  ECA1  F007         	call	PL6	;call to abstracted procedure
  1213  0001F6  ECC9  F00A         	call	___lwdiv	;wreg free
  1214  0001FA  EC93  F007         	call	PL2	;call to abstracted procedure
  1215  0001FE  EC0D  F00B         	call	___lwmod	;wreg free
  1216  000202  504C               	movf	?___lwmod^0,w,c
  1217  000204  0F30               	addlw	48
  1218  000206  ECAD  F00B         	call	_EUSART_Write
  1219                           
  1220                           ;main.c: 90: EUSART_Write(((temperature_1 / 100) % 10) + 48);
  1221  00020A  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1222  00020C  0E64               	movlw	100
  1223  00020E  ECA1  F007         	call	PL6	;call to abstracted procedure
  1224  000212  ECC9  F00A         	call	___lwdiv	;wreg free
  1225  000216  EC93  F007         	call	PL2	;call to abstracted procedure
  1226  00021A  EC0D  F00B         	call	___lwmod	;wreg free
  1227  00021E  504C               	movf	?___lwmod^0,w,c
  1228  000220  0F30               	addlw	48
  1229  000222  ECAD  F00B         	call	_EUSART_Write
  1230                           
  1231                           ;main.c: 91: EUSART_Write(((temperature_1 / 10) % 10) + 48);
  1232  000226  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1233  000228  0E0A               	movlw	10
  1234  00022A  ECA1  F007         	call	PL6	;call to abstracted procedure
  1235  00022E  ECC9  F00A         	call	___lwdiv	;wreg free
  1236  000232  EC93  F007         	call	PL2	;call to abstracted procedure
  1237  000236  EC0D  F00B         	call	___lwmod	;wreg free
  1238  00023A  504C               	movf	?___lwmod^0,w,c
  1239  00023C  0F30               	addlw	48
  1240  00023E  ECAD  F00B         	call	_EUSART_Write
  1241                           
  1242                           ;main.c: 92: EUSART_Write((temperature_1 % 10) + 48);
  1243  000242  ECB6  F007         	call	PL14	;call to abstracted procedure
  1244  000246  ECA7  F007         	call	PL8	;call to abstracted procedure
  1245  00024A  EC0D  F00B         	call	___lwmod	;wreg free
  1246  00024E  504C               	movf	?___lwmod^0,w,c
  1247  000250  0F30               	addlw	48
  1248  000252  ECAD  F00B         	call	_EUSART_Write
  1249                           
  1250                           ;main.c: 94: } else {
  1251  000256  D00A               	goto	l3106
  1252  000258                     l3104:
  1253                           
  1254                           ;main.c: 95: EUSART_Write_Str("tk:");
  1255  000258  ECEE  F007         	call	PL48	;call to abstracted procedure
  1256  00025C  EC1F  F00C         	call	_EUSART_Write_Str	;wreg free
  1257                           
  1258                           ;main.c: 96: EUSART_Write_Str("0000");
  1259  000260  0EF1               	movlw	low STR_7
  1260  000262  6E46               	movwf	EUSART_Write_Str@t^0,c
  1261  000264  0E1F               	movlw	high STR_7
  1262  000266  6E47               	movwf	(EUSART_Write_Str@t+1)^0,c
  1263  000268  EC1F  F00C         	call	_EUSART_Write_Str	;wreg free
  1264  00026C                     l3106:
  1265                           
  1266                           ;main.c: 97: };main.c: 98: if (temperature_2 != 32767) {
  1267  00026C  285D               	incf	_temperature_2^0,w,c
  1268  00026E  E103               	bnz	u2060
  1269  000270  0E7F               	movlw	127
  1270  000272  185E               	xorwf	(_temperature_2+1)^0,w,c
  1271  000274  E03F               	bz	l3118
  1272  000276                     u2060:
  1273                           
  1274                           ;main.c: 99: EUSART_Write_Str("tb:");
  1275  000276  ECD6  F007         	call	PL34	;call to abstracted procedure
  1276  00027A  EC1F  F00C         	call	_EUSART_Write_Str	;wreg free
  1277                           
  1278                           ;main.c: 100: EUSART_Write(((temperature_2 / 1000) % 10) + 48);
  1279  00027E  ECC0  F007         	call	PL18	;call to abstracted procedure
  1280  000282  EC9B  F007         	call	PL4	;call to abstracted procedure
  1281  000286  ECC9  F00A         	call	___lwdiv	;wreg free
  1282  00028A  EC93  F007         	call	PL2	;call to abstracted procedure
  1283  00028E  EC0D  F00B         	call	___lwmod	;wreg free
  1284  000292  504C               	movf	?___lwmod^0,w,c
  1285  000294  0F30               	addlw	48
  1286  000296  ECAD  F00B         	call	_EUSART_Write
  1287                           
  1288                           ;main.c: 101: EUSART_Write(((temperature_2 / 100) % 10) + 48);
  1289  00029A  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1290  00029C  0E64               	movlw	100
  1291  00029E  EC9B  F007         	call	PL4	;call to abstracted procedure
  1292  0002A2  ECC9  F00A         	call	___lwdiv	;wreg free
  1293  0002A6  EC93  F007         	call	PL2	;call to abstracted procedure
  1294  0002AA  EC0D  F00B         	call	___lwmod	;wreg free
  1295  0002AE  504C               	movf	?___lwmod^0,w,c
  1296  0002B0  0F30               	addlw	48
  1297  0002B2  ECAD  F00B         	call	_EUSART_Write
  1298                           
  1299                           ;main.c: 102: EUSART_Write(((temperature_2 / 10) % 10) + 48);
  1300  0002B6  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1301  0002B8  0E0A               	movlw	10
  1302  0002BA  EC9B  F007         	call	PL4	;call to abstracted procedure
  1303  0002BE  ECC9  F00A         	call	___lwdiv	;wreg free
  1304  0002C2  EC93  F007         	call	PL2	;call to abstracted procedure
  1305  0002C6  EC0D  F00B         	call	___lwmod	;wreg free
  1306  0002CA  504C               	movf	?___lwmod^0,w,c
  1307  0002CC  0F30               	addlw	48
  1308  0002CE  ECAD  F00B         	call	_EUSART_Write
  1309                           
  1310                           ;main.c: 103: EUSART_Write((temperature_2 % 10) + 48);
  1311  0002D2  ECBB  F007         	call	PL16	;call to abstracted procedure
  1312  0002D6  ECA7  F007         	call	PL8	;call to abstracted procedure
  1313  0002DA  EC0D  F00B         	call	___lwmod	;wreg free
  1314  0002DE  504C               	movf	?___lwmod^0,w,c
  1315  0002E0  0F30               	addlw	48
  1316  0002E2  ECAD  F00B         	call	_EUSART_Write
  1317                           
  1318                           ;main.c: 104: EUSART_Write_Str("\r\n");
  1319  0002E6  0EE7               	movlw	low (STR_11+4)
  1320  0002E8  6E46               	movwf	EUSART_Write_Str@t^0,c
  1321  0002EA  0E1F               	movlw	high (STR_11+4)
  1322  0002EC  6E47               	movwf	(EUSART_Write_Str@t+1)^0,c
  1323  0002EE  EC1F  F00C         	call	_EUSART_Write_Str	;wreg free
  1324                           
  1325                           ;main.c: 105: } else {
  1326  0002F2  D30B               	goto	l3184
  1327  0002F4                     l3118:
  1328                           
  1329                           ;main.c: 106: EUSART_Write_Str("tb:");
  1330  0002F4  ECD6  F007         	call	PL34	;call to abstracted procedure
  1331  0002F8  EC1F  F00C         	call	_EUSART_Write_Str	;wreg free
  1332                           
  1333                           ;main.c: 107: EUSART_Write_Str("0000\r\n");
  1334  0002FC  0EE3               	movlw	low STR_11
  1335  0002FE  6E46               	movwf	EUSART_Write_Str@t^0,c
  1336  000300  0E1F               	movlw	high STR_11
  1337  000302  6E47               	movwf	(EUSART_Write_Str@t+1)^0,c
  1338  000304  EC1F  F00C         	call	_EUSART_Write_Str	;wreg free
  1339  000308  D300               	goto	l3184
  1340  00030A                     l3120:
  1341                           
  1342                           ;main.c: 117: lcd_gotoxy(1, 1);
  1343  00030A  0E01               	movlw	1
  1344  00030C  6E49               	movwf	lcd_gotoxy@y^0,c
  1345  00030E  EC3E  F00C         	call	_lcd_gotoxy
  1346                           
  1347                           ;main.c: 118: lcdPrint("Êîëîíà:");
  1348  000312  0EDB               	movlw	low STR_12
  1349  000314  6E4C               	movwf	lcdPrint@t^0,c
  1350  000316  0E1F               	movlw	high STR_12
  1351  000318  6E4D               	movwf	(lcdPrint@t+1)^0,c
  1352  00031A  ECFE  F008         	call	_lcdPrint	;wreg free
  1353                           
  1354                           ;main.c: 120: if (!(temperature_1 == 32767)) {
  1355  00031E  285F               	incf	_temperature_1^0,w,c
  1356  000320  E104               	bnz	u2070
  1357  000322  0E7F               	movlw	127
  1358  000324  1860               	xorwf	(_temperature_1+1)^0,w,c
  1359  000326  E101 D0BC          	bz	l3136
  1360  00032A                     u2070:
  1361                           
  1362                           ;main.c: 121: if (((temperature_1 / 1000) % 10) == 0) {
  1363  00032A  ECC0  F007         	call	PL18	;call to abstracted procedure
  1364  00032E  ECA1  F007         	call	PL6	;call to abstracted procedure
  1365  000332  ECC9  F00A         	call	___lwdiv	;wreg free
  1366  000336  EC93  F007         	call	PL2	;call to abstracted procedure
  1367  00033A  EC0D  F00B         	call	___lwmod	;wreg free
  1368  00033E  504C               	movf	?___lwmod^0,w,c
  1369  000340  104D               	iorwf	(?___lwmod+1)^0,w,c
  1370  000342  E16E               	bnz	l3134
  1371                           
  1372                           ;main.c: 122: if (((temperature_1 / 100) % 10) == 0) {
  1373  000344  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1374  000346  0E64               	movlw	100
  1375  000348  ECA1  F007         	call	PL6	;call to abstracted procedure
  1376  00034C  ECC9  F00A         	call	___lwdiv	;wreg free
  1377  000350  EC93  F007         	call	PL2	;call to abstracted procedure
  1378  000354  EC0D  F00B         	call	___lwmod	;wreg free
  1379  000358  504C               	movf	?___lwmod^0,w,c
  1380  00035A  104D               	iorwf	(?___lwmod+1)^0,w,c
  1381  00035C  E12B               	bnz	l3132
  1382                           
  1383                           ;main.c: 123: lcd_putc(minus_1);
  1384  00035E  5065               	movf	_minus_1^0,w,c
  1385  000360  EC82  F00C         	call	_lcd_putc
  1386                           
  1387                           ;main.c: 125: lcd_putc(((temperature_1 / 10) % 10) + 48);
  1388  000364  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1389  000366  0E0A               	movlw	10
  1390  000368  ECA1  F007         	call	PL6	;call to abstracted procedure
  1391  00036C  ECC9  F00A         	call	___lwdiv	;wreg free
  1392  000370  EC93  F007         	call	PL2	;call to abstracted procedure
  1393  000374  EC0D  F00B         	call	___lwmod	;wreg free
  1394  000378  504C               	movf	?___lwmod^0,w,c
  1395  00037A  0F30               	addlw	48
  1396  00037C  EC82  F00C         	call	_lcd_putc
  1397                           
  1398                           ;main.c: 126: lcd_putc('.');
  1399  000380  0E2E               	movlw	46
  1400  000382  EC82  F00C         	call	_lcd_putc
  1401                           
  1402                           ;main.c: 127: lcd_putc(((temperature_1 % 10) + 48));
  1403  000386  ECB6  F007         	call	PL14	;call to abstracted procedure
  1404  00038A  ECA7  F007         	call	PL8	;call to abstracted procedure
  1405  00038E  EC0D  F00B         	call	___lwmod	;wreg free
  1406  000392  504C               	movf	?___lwmod^0,w,c
  1407  000394  0F30               	addlw	48
  1408  000396  EC82  F00C         	call	_lcd_putc
  1409                           
  1410                           ;main.c: 128: lcd_putc(0x01);
  1411  00039A  0E01               	movlw	1
  1412  00039C  EC82  F00C         	call	_lcd_putc
  1413                           
  1414                           ;main.c: 130: lcd_putc(' ');
  1415  0003A0  0E20               	movlw	32
  1416  0003A2  EC82  F00C         	call	_lcd_putc
  1417                           
  1418                           ;main.c: 131: lcd_putc(' ');
  1419  0003A6  0E20               	movlw	32
  1420  0003A8  EC82  F00C         	call	_lcd_putc
  1421                           
  1422                           ;main.c: 132: lcd_putc(' ');
  1423  0003AC  0E20               	movlw	32
  1424  0003AE  EC82  F00C         	call	_lcd_putc
  1425                           
  1426                           ;main.c: 133: } else {
  1427  0003B2  D08C               	goto	l192
  1428  0003B4                     l3132:
  1429                           
  1430                           ;main.c: 134: lcd_putc(minus_1);
  1431  0003B4  5065               	movf	_minus_1^0,w,c
  1432  0003B6  EC82  F00C         	call	_lcd_putc
  1433                           
  1434                           ;main.c: 135: lcd_putc(((temperature_1 / 100) % 10) + 48);
  1435  0003BA  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1436  0003BC  0E64               	movlw	100
  1437  0003BE  ECA1  F007         	call	PL6	;call to abstracted procedure
  1438  0003C2  ECC9  F00A         	call	___lwdiv	;wreg free
  1439  0003C6  EC93  F007         	call	PL2	;call to abstracted procedure
  1440  0003CA  EC0D  F00B         	call	___lwmod	;wreg free
  1441  0003CE  504C               	movf	?___lwmod^0,w,c
  1442  0003D0  0F30               	addlw	48
  1443  0003D2  EC82  F00C         	call	_lcd_putc
  1444                           
  1445                           ;main.c: 136: lcd_putc(((temperature_1 / 10) % 10) + 48);
  1446  0003D6  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1447  0003D8  0E0A               	movlw	10
  1448  0003DA  ECA1  F007         	call	PL6	;call to abstracted procedure
  1449  0003DE  ECC9  F00A         	call	___lwdiv	;wreg free
  1450  0003E2  EC93  F007         	call	PL2	;call to abstracted procedure
  1451  0003E6  EC0D  F00B         	call	___lwmod	;wreg free
  1452  0003EA  504C               	movf	?___lwmod^0,w,c
  1453  0003EC  0F30               	addlw	48
  1454  0003EE  EC82  F00C         	call	_lcd_putc
  1455                           
  1456                           ;main.c: 137: lcd_putc('.');
  1457  0003F2  0E2E               	movlw	46
  1458  0003F4  EC82  F00C         	call	_lcd_putc
  1459                           
  1460                           ;main.c: 138: lcd_putc(((temperature_1 % 10) + 48));
  1461  0003F8  ECB6  F007         	call	PL14	;call to abstracted procedure
  1462  0003FC  ECA7  F007         	call	PL8	;call to abstracted procedure
  1463  000400  EC0D  F00B         	call	___lwmod	;wreg free
  1464  000404  504C               	movf	?___lwmod^0,w,c
  1465  000406  0F30               	addlw	48
  1466  000408  EC82  F00C         	call	_lcd_putc
  1467                           
  1468                           ;main.c: 139: lcd_putc(0x01);
  1469  00040C  0E01               	movlw	1
  1470  00040E  EC82  F00C         	call	_lcd_putc
  1471                           
  1472                           ;main.c: 141: lcd_putc(' ');
  1473  000412  0E20               	movlw	32
  1474  000414  EC82  F00C         	call	_lcd_putc
  1475                           
  1476                           ;main.c: 142: lcd_putc(' ');
  1477  000418  0E20               	movlw	32
  1478  00041A  EC82  F00C         	call	_lcd_putc
  1479  00041E  D056               	goto	l192
  1480  000420                     l3134:
  1481                           
  1482                           ;main.c: 146: lcd_putc(minus_1);
  1483  000420  5065               	movf	_minus_1^0,w,c
  1484  000422  EC82  F00C         	call	_lcd_putc
  1485                           
  1486                           ;main.c: 147: lcd_putc(((temperature_1 / 1000) % 10) + 48);
  1487  000426  ECC0  F007         	call	PL18	;call to abstracted procedure
  1488  00042A  ECA1  F007         	call	PL6	;call to abstracted procedure
  1489  00042E  ECC9  F00A         	call	___lwdiv	;wreg free
  1490  000432  EC93  F007         	call	PL2	;call to abstracted procedure
  1491  000436  EC0D  F00B         	call	___lwmod	;wreg free
  1492  00043A  504C               	movf	?___lwmod^0,w,c
  1493  00043C  0F30               	addlw	48
  1494  00043E  EC82  F00C         	call	_lcd_putc
  1495                           
  1496                           ;main.c: 148: lcd_putc(((temperature_1 / 100) % 10) + 48);
  1497  000442  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1498  000444  0E64               	movlw	100
  1499  000446  ECA1  F007         	call	PL6	;call to abstracted procedure
  1500  00044A  ECC9  F00A         	call	___lwdiv	;wreg free
  1501  00044E  EC93  F007         	call	PL2	;call to abstracted procedure
  1502  000452  EC0D  F00B         	call	___lwmod	;wreg free
  1503  000456  504C               	movf	?___lwmod^0,w,c
  1504  000458  0F30               	addlw	48
  1505  00045A  EC82  F00C         	call	_lcd_putc
  1506                           
  1507                           ;main.c: 149: lcd_putc(((temperature_1 / 10) % 10) + 48);
  1508  00045E  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1509  000460  0E0A               	movlw	10
  1510  000462  ECA1  F007         	call	PL6	;call to abstracted procedure
  1511  000466  ECC9  F00A         	call	___lwdiv	;wreg free
  1512  00046A  EC93  F007         	call	PL2	;call to abstracted procedure
  1513  00046E  EC0D  F00B         	call	___lwmod	;wreg free
  1514  000472  504C               	movf	?___lwmod^0,w,c
  1515  000474  0F30               	addlw	48
  1516  000476  EC82  F00C         	call	_lcd_putc
  1517                           
  1518                           ;main.c: 150: lcd_putc('.');
  1519  00047A  0E2E               	movlw	46
  1520  00047C  EC82  F00C         	call	_lcd_putc
  1521                           
  1522                           ;main.c: 151: lcd_putc(((temperature_1 % 10) + 48));
  1523  000480  ECB6  F007         	call	PL14	;call to abstracted procedure
  1524  000484  ECA7  F007         	call	PL8	;call to abstracted procedure
  1525  000488  EC0D  F00B         	call	___lwmod	;wreg free
  1526  00048C  504C               	movf	?___lwmod^0,w,c
  1527  00048E  0F30               	addlw	48
  1528  000490  EC82  F00C         	call	_lcd_putc
  1529                           
  1530                           ;main.c: 152: lcd_putc(0x01);
  1531  000494  0E01               	movlw	1
  1532  000496  EC82  F00C         	call	_lcd_putc
  1533                           
  1534                           ;main.c: 154: lcd_putc(' ');
  1535  00049A  0E20               	movlw	32
  1536  00049C  EC82  F00C         	call	_lcd_putc
  1537  0004A0  D015               	goto	l192
  1538  0004A2                     l3136:
  1539                           
  1540                           ;main.c: 158: lcd_putc('-');
  1541  0004A2  0E2D               	movlw	45
  1542  0004A4  EC82  F00C         	call	_lcd_putc
  1543                           
  1544                           ;main.c: 159: lcd_putc('-');
  1545  0004A8  0E2D               	movlw	45
  1546  0004AA  EC82  F00C         	call	_lcd_putc
  1547                           
  1548                           ;main.c: 160: lcd_putc('-');
  1549  0004AE  0E2D               	movlw	45
  1550  0004B0  EC82  F00C         	call	_lcd_putc
  1551                           
  1552                           ;main.c: 161: lcd_putc(' ');
  1553  0004B4  0E20               	movlw	32
  1554  0004B6  EC82  F00C         	call	_lcd_putc
  1555                           
  1556                           ;main.c: 162: lcd_putc(' ');
  1557  0004BA  0E20               	movlw	32
  1558  0004BC  EC82  F00C         	call	_lcd_putc
  1559                           
  1560                           ;main.c: 163: lcd_putc(' ');
  1561  0004C0  0E20               	movlw	32
  1562  0004C2  EC82  F00C         	call	_lcd_putc
  1563                           
  1564                           ;main.c: 164: lcd_putc(' ');
  1565  0004C6  0E20               	movlw	32
  1566  0004C8  EC82  F00C         	call	_lcd_putc
  1567  0004CC                     l192:
  1568                           
  1569                           ;main.c: 165: };main.c: 166: lcd_gotoxy(16, 1);
  1570  0004CC  EC07  F008         	call	PL62	;call to abstracted procedure
  1571  0004D0  EC3E  F00C         	call	_lcd_gotoxy
  1572                           
  1573                           ;main.c: 167: (en_snd_k) ? lcd_putc(0xED): lcd_putc(0xD5);
  1574  0004D4  A266               	btfss	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  1575  0004D6  D004               	goto	l3142
  1576  0004D8  0EED               	movlw	237
  1577  0004DA  EC82  F00C         	call	_lcd_putc
  1578  0004DE  D003               	goto	l196
  1579  0004E0                     l3142:
  1580  0004E0  0ED5               	movlw	213
  1581  0004E2  EC82  F00C         	call	_lcd_putc
  1582  0004E6                     l196:
  1583                           
  1584                           ;main.c: 169: lcd_gotoxy(1, 2);
  1585  0004E6  ECC3  F007         	call	PL22	;call to abstracted procedure
  1586  0004EA  EC3E  F00C         	call	_lcd_gotoxy
  1587                           
  1588                           ;main.c: 170: lcd_putc(0xCE);
  1589  0004EE  0ECE               	movlw	206
  1590  0004F0  EC82  F00C         	call	_lcd_putc
  1591                           
  1592                           ;main.c: 171: lcd_putc(((temp1_fix / 100) % 10) + 48);
  1593  0004F4  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1594  0004F6  0E64               	movlw	100
  1595  0004F8  ECC6  F007         	call	PL28	;call to abstracted procedure
  1596  0004FC  ECC9  F00A         	call	___lwdiv	;wreg free
  1597  000500  EC93  F007         	call	PL2	;call to abstracted procedure
  1598  000504  EC0D  F00B         	call	___lwmod	;wreg free
  1599  000508  504C               	movf	?___lwmod^0,w,c
  1600  00050A  0F30               	addlw	48
  1601  00050C  EC82  F00C         	call	_lcd_putc
  1602                           
  1603                           ;main.c: 172: lcd_putc(((temp1_fix / 10) % 10) + 48);
  1604  000510  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1605  000512  0E0A               	movlw	10
  1606  000514  ECC6  F007         	call	PL28	;call to abstracted procedure
  1607  000518  ECC9  F00A         	call	___lwdiv	;wreg free
  1608  00051C  EC93  F007         	call	PL2	;call to abstracted procedure
  1609  000520  EC0D  F00B         	call	___lwmod	;wreg free
  1610  000524  504C               	movf	?___lwmod^0,w,c
  1611  000526  0F30               	addlw	48
  1612  000528  EC82  F00C         	call	_lcd_putc
  1613                           
  1614                           ;main.c: 173: lcd_putc('.');
  1615  00052C  0E2E               	movlw	46
  1616  00052E  EC82  F00C         	call	_lcd_putc
  1617                           
  1618                           ;main.c: 174: lcd_putc(((temp1_fix % 10) + 48));
  1619  000532  C027  F04C         	movff	_temp1_fix,___lwmod@dividend
  1620  000536  C028  F04D         	movff	_temp1_fix+1,___lwmod@dividend+1
  1621  00053A  ECA7  F007         	call	PL8	;call to abstracted procedure
  1622  00053E  EC0D  F00B         	call	___lwmod	;wreg free
  1623  000542  504C               	movf	?___lwmod^0,w,c
  1624  000544  0F30               	addlw	48
  1625  000546  EC82  F00C         	call	_lcd_putc
  1626                           
  1627                           ;main.c: 175: lcd_putc(0x01);
  1628  00054A  0E01               	movlw	1
  1629  00054C  EC82  F00C         	call	_lcd_putc
  1630                           
  1631                           ;main.c: 176: lcd_putc(' ');
  1632  000550  0E20               	movlw	32
  1633  000552  EC82  F00C         	call	_lcd_putc
  1634                           
  1635                           ;main.c: 177: lcd_putc(0xD9);
  1636  000556  0ED9               	movlw	217
  1637  000558  EC82  F00C         	call	_lcd_putc
  1638                           
  1639                           ;main.c: 178: lcd_putc(((set_t_dq1_up / 10) % 10) + 48);
  1640  00055C  ECDF  F007         	call	PL40	;call to abstracted procedure
  1641  000560  EC62  F00B         	call	___lbdiv
  1642  000564  ECC5  F00B         	call	___lbmod
  1643  000568  0F30               	addlw	48
  1644  00056A  EC82  F00C         	call	_lcd_putc
  1645                           
  1646                           ;main.c: 179: lcd_putc('.');
  1647  00056E  0E2E               	movlw	46
  1648  000570  EC82  F00C         	call	_lcd_putc
  1649                           
  1650                           ;main.c: 180: lcd_putc(((set_t_dq1_up % 10) + 48));
  1651  000574  ECF3  F007         	call	PL50	;call to abstracted procedure
  1652  000578  ECC5  F00B         	call	___lbmod
  1653  00057C  0F30               	addlw	48
  1654  00057E  EC82  F00C         	call	_lcd_putc
  1655                           
  1656                           ;main.c: 181: lcd_putc(' ');
  1657  000582  0E20               	movlw	32
  1658  000584  EC82  F00C         	call	_lcd_putc
  1659                           
  1660                           ;main.c: 182: lcd_putc(0xDA);
  1661  000588  0EDA               	movlw	218
  1662  00058A  EC82  F00C         	call	_lcd_putc
  1663                           
  1664                           ;main.c: 183: lcd_putc(((set_t_dq1_dwn / 10) % 10) + 48);
  1665  00058E  ECE9  F007         	call	PL44	;call to abstracted procedure
  1666  000592  EC62  F00B         	call	___lbdiv
  1667  000596  ECC5  F00B         	call	___lbmod
  1668  00059A  0F30               	addlw	48
  1669  00059C  EC82  F00C         	call	_lcd_putc
  1670                           
  1671                           ;main.c: 184: lcd_putc('.');
  1672  0005A0  0E2E               	movlw	46
  1673  0005A2  EC82  F00C         	call	_lcd_putc
  1674                           
  1675                           ;main.c: 185: lcd_putc(((set_t_dq1_dwn % 10) + 48));
  1676  0005A6  EC03  F008         	call	PL60	;call to abstracted procedure
  1677  0005AA  ECC5  F00B         	call	___lbmod
  1678  0005AE  0F30               	addlw	48
  1679  0005B0  EC82  F00C         	call	_lcd_putc
  1680                           
  1681                           ;main.c: 187: break;
  1682  0005B4  D1B1               	goto	l197
  1683  0005B6                     l3144:
  1684                           
  1685                           ;main.c: 189: lcd_gotoxy(1, 1);
  1686  0005B6  0E01               	movlw	1
  1687  0005B8  6E49               	movwf	lcd_gotoxy@y^0,c
  1688  0005BA  EC3E  F00C         	call	_lcd_gotoxy
  1689                           
  1690                           ;main.c: 190: lcdPrint("Êóáîâà:");
  1691  0005BE  0ED3               	movlw	low STR_13
  1692  0005C0  6E4C               	movwf	lcdPrint@t^0,c
  1693  0005C2  0E1F               	movlw	high STR_13
  1694  0005C4  6E4D               	movwf	(lcdPrint@t+1)^0,c
  1695  0005C6  ECFE  F008         	call	_lcdPrint	;wreg free
  1696                           
  1697                           ;main.c: 192: if (!(temperature_2 == 32767)) {
  1698  0005CA  285D               	incf	_temperature_2^0,w,c
  1699  0005CC  E104               	bnz	u2110
  1700  0005CE  0E7F               	movlw	127
  1701  0005D0  185E               	xorwf	(_temperature_2+1)^0,w,c
  1702  0005D2  E101 D0BC          	bz	l3160
  1703  0005D6                     u2110:
  1704                           
  1705                           ;main.c: 193: if (((temperature_2 / 1000) % 10) == 0) {
  1706  0005D6  ECC0  F007         	call	PL18	;call to abstracted procedure
  1707  0005DA  EC9B  F007         	call	PL4	;call to abstracted procedure
  1708  0005DE  ECC9  F00A         	call	___lwdiv	;wreg free
  1709  0005E2  EC93  F007         	call	PL2	;call to abstracted procedure
  1710  0005E6  EC0D  F00B         	call	___lwmod	;wreg free
  1711  0005EA  504C               	movf	?___lwmod^0,w,c
  1712  0005EC  104D               	iorwf	(?___lwmod+1)^0,w,c
  1713  0005EE  E16E               	bnz	l3158
  1714                           
  1715                           ;main.c: 194: if (((temperature_2 / 100) % 10) == 0) {
  1716  0005F0  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1717  0005F2  0E64               	movlw	100
  1718  0005F4  EC9B  F007         	call	PL4	;call to abstracted procedure
  1719  0005F8  ECC9  F00A         	call	___lwdiv	;wreg free
  1720  0005FC  EC93  F007         	call	PL2	;call to abstracted procedure
  1721  000600  EC0D  F00B         	call	___lwmod	;wreg free
  1722  000604  504C               	movf	?___lwmod^0,w,c
  1723  000606  104D               	iorwf	(?___lwmod+1)^0,w,c
  1724  000608  E12B               	bnz	l3156
  1725                           
  1726                           ;main.c: 195: lcd_putc(minus_2);
  1727  00060A  5064               	movf	_minus_2^0,w,c
  1728  00060C  EC82  F00C         	call	_lcd_putc
  1729                           
  1730                           ;main.c: 197: lcd_putc(((temperature_2 / 10) % 10) + 48);
  1731  000610  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1732  000612  0E0A               	movlw	10
  1733  000614  EC9B  F007         	call	PL4	;call to abstracted procedure
  1734  000618  ECC9  F00A         	call	___lwdiv	;wreg free
  1735  00061C  EC93  F007         	call	PL2	;call to abstracted procedure
  1736  000620  EC0D  F00B         	call	___lwmod	;wreg free
  1737  000624  504C               	movf	?___lwmod^0,w,c
  1738  000626  0F30               	addlw	48
  1739  000628  EC82  F00C         	call	_lcd_putc
  1740                           
  1741                           ;main.c: 198: lcd_putc('.');
  1742  00062C  0E2E               	movlw	46
  1743  00062E  EC82  F00C         	call	_lcd_putc
  1744                           
  1745                           ;main.c: 199: lcd_putc(((temperature_2 % 10) + 48));
  1746  000632  ECBB  F007         	call	PL16	;call to abstracted procedure
  1747  000636  ECA7  F007         	call	PL8	;call to abstracted procedure
  1748  00063A  EC0D  F00B         	call	___lwmod	;wreg free
  1749  00063E  504C               	movf	?___lwmod^0,w,c
  1750  000640  0F30               	addlw	48
  1751  000642  EC82  F00C         	call	_lcd_putc
  1752                           
  1753                           ;main.c: 200: lcd_putc(0x01);
  1754  000646  0E01               	movlw	1
  1755  000648  EC82  F00C         	call	_lcd_putc
  1756                           
  1757                           ;main.c: 202: lcd_putc(' ');
  1758  00064C  0E20               	movlw	32
  1759  00064E  EC82  F00C         	call	_lcd_putc
  1760                           
  1761                           ;main.c: 203: lcd_putc(' ');
  1762  000652  0E20               	movlw	32
  1763  000654  EC82  F00C         	call	_lcd_putc
  1764                           
  1765                           ;main.c: 204: lcd_putc(' ');
  1766  000658  0E20               	movlw	32
  1767  00065A  EC82  F00C         	call	_lcd_putc
  1768                           
  1769                           ;main.c: 205: } else {
  1770  00065E  D08C               	goto	l204
  1771  000660                     l3156:
  1772                           
  1773                           ;main.c: 206: lcd_putc(minus_2);
  1774  000660  5064               	movf	_minus_2^0,w,c
  1775  000662  EC82  F00C         	call	_lcd_putc
  1776                           
  1777                           ;main.c: 207: lcd_putc(((temperature_2 / 100) % 10) + 48);
  1778  000666  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1779  000668  0E64               	movlw	100
  1780  00066A  EC9B  F007         	call	PL4	;call to abstracted procedure
  1781  00066E  ECC9  F00A         	call	___lwdiv	;wreg free
  1782  000672  EC93  F007         	call	PL2	;call to abstracted procedure
  1783  000676  EC0D  F00B         	call	___lwmod	;wreg free
  1784  00067A  504C               	movf	?___lwmod^0,w,c
  1785  00067C  0F30               	addlw	48
  1786  00067E  EC82  F00C         	call	_lcd_putc
  1787                           
  1788                           ;main.c: 208: lcd_putc(((temperature_2 / 10) % 10) + 48);
  1789  000682  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1790  000684  0E0A               	movlw	10
  1791  000686  EC9B  F007         	call	PL4	;call to abstracted procedure
  1792  00068A  ECC9  F00A         	call	___lwdiv	;wreg free
  1793  00068E  EC93  F007         	call	PL2	;call to abstracted procedure
  1794  000692  EC0D  F00B         	call	___lwmod	;wreg free
  1795  000696  504C               	movf	?___lwmod^0,w,c
  1796  000698  0F30               	addlw	48
  1797  00069A  EC82  F00C         	call	_lcd_putc
  1798                           
  1799                           ;main.c: 209: lcd_putc('.');
  1800  00069E  0E2E               	movlw	46
  1801  0006A0  EC82  F00C         	call	_lcd_putc
  1802                           
  1803                           ;main.c: 210: lcd_putc(((temperature_2 % 10) + 48));
  1804  0006A4  ECBB  F007         	call	PL16	;call to abstracted procedure
  1805  0006A8  ECA7  F007         	call	PL8	;call to abstracted procedure
  1806  0006AC  EC0D  F00B         	call	___lwmod	;wreg free
  1807  0006B0  504C               	movf	?___lwmod^0,w,c
  1808  0006B2  0F30               	addlw	48
  1809  0006B4  EC82  F00C         	call	_lcd_putc
  1810                           
  1811                           ;main.c: 211: lcd_putc(0x01);
  1812  0006B8  0E01               	movlw	1
  1813  0006BA  EC82  F00C         	call	_lcd_putc
  1814                           
  1815                           ;main.c: 213: lcd_putc(' ');
  1816  0006BE  0E20               	movlw	32
  1817  0006C0  EC82  F00C         	call	_lcd_putc
  1818                           
  1819                           ;main.c: 214: lcd_putc(' ');
  1820  0006C4  0E20               	movlw	32
  1821  0006C6  EC82  F00C         	call	_lcd_putc
  1822  0006CA  D056               	goto	l204
  1823  0006CC                     l3158:
  1824                           
  1825                           ;main.c: 218: lcd_putc(minus_2);
  1826  0006CC  5064               	movf	_minus_2^0,w,c
  1827  0006CE  EC82  F00C         	call	_lcd_putc
  1828                           
  1829                           ;main.c: 219: lcd_putc(((temperature_2 / 1000) % 10) + 48);
  1830  0006D2  ECC0  F007         	call	PL18	;call to abstracted procedure
  1831  0006D6  EC9B  F007         	call	PL4	;call to abstracted procedure
  1832  0006DA  ECC9  F00A         	call	___lwdiv	;wreg free
  1833  0006DE  EC93  F007         	call	PL2	;call to abstracted procedure
  1834  0006E2  EC0D  F00B         	call	___lwmod	;wreg free
  1835  0006E6  504C               	movf	?___lwmod^0,w,c
  1836  0006E8  0F30               	addlw	48
  1837  0006EA  EC82  F00C         	call	_lcd_putc
  1838                           
  1839                           ;main.c: 220: lcd_putc(((temperature_2 / 100) % 10) + 48);
  1840  0006EE  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1841  0006F0  0E64               	movlw	100
  1842  0006F2  EC9B  F007         	call	PL4	;call to abstracted procedure
  1843  0006F6  ECC9  F00A         	call	___lwdiv	;wreg free
  1844  0006FA  EC93  F007         	call	PL2	;call to abstracted procedure
  1845  0006FE  EC0D  F00B         	call	___lwmod	;wreg free
  1846  000702  504C               	movf	?___lwmod^0,w,c
  1847  000704  0F30               	addlw	48
  1848  000706  EC82  F00C         	call	_lcd_putc
  1849                           
  1850                           ;main.c: 221: lcd_putc(((temperature_2 / 10) % 10) + 48);
  1851  00070A  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1852  00070C  0E0A               	movlw	10
  1853  00070E  EC9B  F007         	call	PL4	;call to abstracted procedure
  1854  000712  ECC9  F00A         	call	___lwdiv	;wreg free
  1855  000716  EC93  F007         	call	PL2	;call to abstracted procedure
  1856  00071A  EC0D  F00B         	call	___lwmod	;wreg free
  1857  00071E  504C               	movf	?___lwmod^0,w,c
  1858  000720  0F30               	addlw	48
  1859  000722  EC82  F00C         	call	_lcd_putc
  1860                           
  1861                           ;main.c: 222: lcd_putc('.');
  1862  000726  0E2E               	movlw	46
  1863  000728  EC82  F00C         	call	_lcd_putc
  1864                           
  1865                           ;main.c: 223: lcd_putc(((temperature_2 % 10) + 48));
  1866  00072C  ECBB  F007         	call	PL16	;call to abstracted procedure
  1867  000730  ECA7  F007         	call	PL8	;call to abstracted procedure
  1868  000734  EC0D  F00B         	call	___lwmod	;wreg free
  1869  000738  504C               	movf	?___lwmod^0,w,c
  1870  00073A  0F30               	addlw	48
  1871  00073C  EC82  F00C         	call	_lcd_putc
  1872                           
  1873                           ;main.c: 224: lcd_putc(0x01);
  1874  000740  0E01               	movlw	1
  1875  000742  EC82  F00C         	call	_lcd_putc
  1876                           
  1877                           ;main.c: 226: lcd_putc(' ');
  1878  000746  0E20               	movlw	32
  1879  000748  EC82  F00C         	call	_lcd_putc
  1880  00074C  D015               	goto	l204
  1881  00074E                     l3160:
  1882                           
  1883                           ;main.c: 230: lcd_putc('-');
  1884  00074E  0E2D               	movlw	45
  1885  000750  EC82  F00C         	call	_lcd_putc
  1886                           
  1887                           ;main.c: 231: lcd_putc('-');
  1888  000754  0E2D               	movlw	45
  1889  000756  EC82  F00C         	call	_lcd_putc
  1890                           
  1891                           ;main.c: 232: lcd_putc('-');
  1892  00075A  0E2D               	movlw	45
  1893  00075C  EC82  F00C         	call	_lcd_putc
  1894                           
  1895                           ;main.c: 233: lcd_putc(' ');
  1896  000760  0E20               	movlw	32
  1897  000762  EC82  F00C         	call	_lcd_putc
  1898                           
  1899                           ;main.c: 234: lcd_putc(' ');
  1900  000766  0E20               	movlw	32
  1901  000768  EC82  F00C         	call	_lcd_putc
  1902                           
  1903                           ;main.c: 235: lcd_putc(' ');
  1904  00076C  0E20               	movlw	32
  1905  00076E  EC82  F00C         	call	_lcd_putc
  1906                           
  1907                           ;main.c: 236: lcd_putc(' ');
  1908  000772  0E20               	movlw	32
  1909  000774  EC82  F00C         	call	_lcd_putc
  1910  000778                     l204:
  1911                           
  1912                           ;main.c: 237: };main.c: 238: lcd_gotoxy(16, 1);
  1913  000778  EC07  F008         	call	PL62	;call to abstracted procedure
  1914  00077C  EC3E  F00C         	call	_lcd_gotoxy
  1915                           
  1916                           ;main.c: 239: (en_snd_b) ? lcd_putc(0xED) : lcd_putc(0xD5);
  1917  000780  A066               	btfss	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  1918  000782  D004               	goto	l3166
  1919  000784  0EED               	movlw	237
  1920  000786  EC82  F00C         	call	_lcd_putc
  1921  00078A  D003               	goto	l208
  1922  00078C                     l3166:
  1923  00078C  0ED5               	movlw	213
  1924  00078E  EC82  F00C         	call	_lcd_putc
  1925  000792                     l208:
  1926                           
  1927                           ;main.c: 240: lcd_gotoxy(1, 2);
  1928  000792  DBF9               	call	PL22	;call to abstracted procedure
  1929  000794  EC3E  F00C         	call	_lcd_gotoxy
  1930                           
  1931                           ;main.c: 241: lcdPrint("Ïîðiã:");
  1932  000798  0EEA               	movlw	low STR_14
  1933  00079A  6E4C               	movwf	lcdPrint@t^0,c
  1934  00079C  0E1F               	movlw	high STR_14
  1935  00079E  6E4D               	movwf	(lcdPrint@t+1)^0,c
  1936  0007A0  ECFE  F008         	call	_lcdPrint	;wreg free
  1937                           
  1938                           ;main.c: 242: lcd_putc('+');
  1939  0007A4  0E2B               	movlw	43
  1940  0007A6  EC82  F00C         	call	_lcd_putc
  1941                           
  1942                           ;main.c: 243: if (!(((set_t_dq2 / 1000) % 10) == 0)) {
  1943  0007AA  DBEA               	call	PL18	;call to abstracted procedure
  1944  0007AC  DBD4               	call	PL10	;call to abstracted procedure
  1945  0007AE  ECC9  F00A         	call	___lwdiv	;wreg free
  1946  0007B2  DBB9               	call	PL2	;call to abstracted procedure
  1947  0007B4  EC0D  F00B         	call	___lwmod	;wreg free
  1948  0007B8  504C               	movf	?___lwmod^0,w,c
  1949  0007BA  104D               	iorwf	(?___lwmod+1)^0,w,c
  1950  0007BC  E03B               	bz	l3176
  1951                           
  1952                           ;main.c: 244: lcd_putc(((set_t_dq2 / 1000) % 10) + 48);
  1953  0007BE  DBE0               	call	PL18	;call to abstracted procedure
  1954  0007C0  DBCA               	call	PL10	;call to abstracted procedure
  1955  0007C2  ECC9  F00A         	call	___lwdiv	;wreg free
  1956  0007C6  DBAF               	call	PL2	;call to abstracted procedure
  1957  0007C8  EC0D  F00B         	call	___lwmod	;wreg free
  1958  0007CC  504C               	movf	?___lwmod^0,w,c
  1959  0007CE  0F30               	addlw	48
  1960  0007D0  EC82  F00C         	call	_lcd_putc
  1961                           
  1962                           ;main.c: 245: lcd_putc(((set_t_dq2 / 100) % 10) + 48);
  1963  0007D4  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1964  0007D6  0E64               	movlw	100
  1965  0007D8  DBBE               	call	PL10	;call to abstracted procedure
  1966  0007DA  ECC9  F00A         	call	___lwdiv	;wreg free
  1967  0007DE  DBA3               	call	PL2	;call to abstracted procedure
  1968  0007E0  EC0D  F00B         	call	___lwmod	;wreg free
  1969  0007E4  504C               	movf	?___lwmod^0,w,c
  1970  0007E6  0F30               	addlw	48
  1971  0007E8  EC82  F00C         	call	_lcd_putc
  1972                           
  1973                           ;main.c: 246: lcd_putc(((set_t_dq2 / 10) % 10) + 48);
  1974  0007EC  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  1975  0007EE  0E0A               	movlw	10
  1976  0007F0  DBB2               	call	PL10	;call to abstracted procedure
  1977  0007F2  ECC9  F00A         	call	___lwdiv	;wreg free
  1978  0007F6  DB97               	call	PL2	;call to abstracted procedure
  1979  0007F8  EC0D  F00B         	call	___lwmod	;wreg free
  1980  0007FC  504C               	movf	?___lwmod^0,w,c
  1981  0007FE  0F30               	addlw	48
  1982  000800  EC82  F00C         	call	_lcd_putc
  1983                           
  1984                           ;main.c: 247: lcd_putc('.');
  1985  000804  0E2E               	movlw	46
  1986  000806  EC82  F00C         	call	_lcd_putc
  1987                           
  1988                           ;main.c: 248: lcd_putc(((set_t_dq2 % 10) + 48));
  1989  00080A  DBAB               	call	PL12	;call to abstracted procedure
  1990  00080C  DBA0               	call	PL8	;call to abstracted procedure
  1991  00080E  EC0D  F00B         	call	___lwmod	;wreg free
  1992  000812  504C               	movf	?___lwmod^0,w,c
  1993  000814  0F30               	addlw	48
  1994  000816  EC82  F00C         	call	_lcd_putc
  1995                           
  1996                           ;main.c: 249: lcd_putc(0x01);
  1997  00081A  0E01               	movlw	1
  1998  00081C  EC82  F00C         	call	_lcd_putc
  1999                           
  2000                           ;main.c: 250: lcd_putc(' ');
  2001  000820  0E20               	movlw	32
  2002  000822  EC82  F00C         	call	_lcd_putc
  2003                           
  2004                           ;main.c: 251: lcd_putc(' ');
  2005  000826  0E20               	movlw	32
  2006  000828  EC82  F00C         	call	_lcd_putc
  2007                           
  2008                           ;main.c: 252: lcd_putc(' ');
  2009  00082C  0E20               	movlw	32
  2010  00082E  EC82  F00C         	call	_lcd_putc
  2011                           
  2012                           ;main.c: 253: } else if (!(((set_t_dq2 / 100) % 10) == 0)) {
  2013  000832  D072               	goto	l197
  2014  000834                     l3176:
  2015  000834  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  2016  000836  0E64               	movlw	100
  2017  000838  DB8E               	call	PL10	;call to abstracted procedure
  2018  00083A  ECC9  F00A         	call	___lwdiv	;wreg free
  2019  00083E  DB73               	call	PL2	;call to abstracted procedure
  2020  000840  EC0D  F00B         	call	___lwmod	;wreg free
  2021  000844  504C               	movf	?___lwmod^0,w,c
  2022  000846  104D               	iorwf	(?___lwmod+1)^0,w,c
  2023  000848  E033               	bz	l3180
  2024                           
  2025                           ;main.c: 254: lcd_putc(((set_t_dq2 / 100) % 10) + 48);
  2026  00084A  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  2027  00084C  0E64               	movlw	100
  2028  00084E  DB83               	call	PL10	;call to abstracted procedure
  2029  000850  ECC9  F00A         	call	___lwdiv	;wreg free
  2030  000854  DB68               	call	PL2	;call to abstracted procedure
  2031  000856  EC0D  F00B         	call	___lwmod	;wreg free
  2032  00085A  504C               	movf	?___lwmod^0,w,c
  2033  00085C  0F30               	addlw	48
  2034  00085E  EC82  F00C         	call	_lcd_putc
  2035                           
  2036                           ;main.c: 255: lcd_putc(((set_t_dq2 / 10) % 10) + 48);
  2037  000862  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  2038  000864  0E0A               	movlw	10
  2039  000866  DB77               	call	PL10	;call to abstracted procedure
  2040  000868  ECC9  F00A         	call	___lwdiv	;wreg free
  2041  00086C  DB5C               	call	PL2	;call to abstracted procedure
  2042  00086E  EC0D  F00B         	call	___lwmod	;wreg free
  2043  000872  504C               	movf	?___lwmod^0,w,c
  2044  000874  0F30               	addlw	48
  2045  000876  EC82  F00C         	call	_lcd_putc
  2046                           
  2047                           ;main.c: 256: lcd_putc('.');
  2048  00087A  0E2E               	movlw	46
  2049  00087C  EC82  F00C         	call	_lcd_putc
  2050                           
  2051                           ;main.c: 257: lcd_putc(((set_t_dq2 % 10) + 48));
  2052  000880  DB70               	call	PL12	;call to abstracted procedure
  2053  000882  DB65               	call	PL8	;call to abstracted procedure
  2054  000884  EC0D  F00B         	call	___lwmod	;wreg free
  2055  000888  504C               	movf	?___lwmod^0,w,c
  2056  00088A  0F30               	addlw	48
  2057  00088C  EC82  F00C         	call	_lcd_putc
  2058                           
  2059                           ;main.c: 258: lcd_putc(0x01);
  2060  000890  0E01               	movlw	1
  2061  000892  EC82  F00C         	call	_lcd_putc
  2062                           
  2063                           ;main.c: 259: lcd_putc(' ');
  2064  000896  0E20               	movlw	32
  2065  000898  EC82  F00C         	call	_lcd_putc
  2066                           
  2067                           ;main.c: 260: lcd_putc(' ');
  2068  00089C  0E20               	movlw	32
  2069  00089E  EC82  F00C         	call	_lcd_putc
  2070                           
  2071                           ;main.c: 261: lcd_putc(' ');
  2072  0008A2  0E20               	movlw	32
  2073  0008A4  EC82  F00C         	call	_lcd_putc
  2074                           
  2075                           ;main.c: 262: lcd_putc(' ');
  2076  0008A8  0E20               	movlw	32
  2077  0008AA  EC82  F00C         	call	_lcd_putc
  2078                           
  2079                           ;main.c: 263: } else {
  2080  0008AE  D034               	goto	l197
  2081  0008B0                     l3180:
  2082                           
  2083                           ;main.c: 264: lcd_putc(((set_t_dq2 / 10) % 10) + 48);
  2084  0008B0  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  2085  0008B2  0E0A               	movlw	10
  2086  0008B4  DB50               	call	PL10	;call to abstracted procedure
  2087  0008B6  ECC9  F00A         	call	___lwdiv	;wreg free
  2088  0008BA  DB35               	call	PL2	;call to abstracted procedure
  2089  0008BC  EC0D  F00B         	call	___lwmod	;wreg free
  2090  0008C0  504C               	movf	?___lwmod^0,w,c
  2091  0008C2  0F30               	addlw	48
  2092  0008C4  EC82  F00C         	call	_lcd_putc
  2093                           
  2094                           ;main.c: 265: lcd_putc('.');
  2095  0008C8  0E2E               	movlw	46
  2096  0008CA  EC82  F00C         	call	_lcd_putc
  2097                           
  2098                           ;main.c: 266: lcd_putc(((set_t_dq2 % 10) + 48));
  2099  0008CE  DB49               	call	PL12	;call to abstracted procedure
  2100  0008D0  DB3E               	call	PL8	;call to abstracted procedure
  2101  0008D2  EC0D  F00B         	call	___lwmod	;wreg free
  2102  0008D6  504C               	movf	?___lwmod^0,w,c
  2103  0008D8  0F30               	addlw	48
  2104  0008DA  EC82  F00C         	call	_lcd_putc
  2105                           
  2106                           ;main.c: 267: lcd_putc(0x01);
  2107  0008DE  0E01               	movlw	1
  2108  0008E0  EC82  F00C         	call	_lcd_putc
  2109                           
  2110                           ;main.c: 268: lcd_putc(' ');
  2111  0008E4  0E20               	movlw	32
  2112  0008E6  EC82  F00C         	call	_lcd_putc
  2113                           
  2114                           ;main.c: 269: lcd_putc(' ');
  2115  0008EA  0E20               	movlw	32
  2116  0008EC  EC82  F00C         	call	_lcd_putc
  2117                           
  2118                           ;main.c: 270: lcd_putc(' ');
  2119  0008F0  0E20               	movlw	32
  2120  0008F2  EC82  F00C         	call	_lcd_putc
  2121                           
  2122                           ;main.c: 271: lcd_putc(' ');
  2123  0008F6  0E20               	movlw	32
  2124  0008F8  EC82  F00C         	call	_lcd_putc
  2125                           
  2126                           ;main.c: 272: lcd_putc(' ');
  2127  0008FC  0E20               	movlw	32
  2128  0008FE  EC82  F00C         	call	_lcd_putc
  2129                           
  2130                           ;main.c: 273: lcd_putc(' ');
  2131  000902  0E20               	movlw	32
  2132  000904  EC82  F00C         	call	_lcd_putc
  2133  000908  D007               	goto	l197
  2134  00090A                     l3184:
  2135  00090A  5062               	movf	_sub_main^0,w,c
  2136                           
  2137                           ; Switch size 1, requested type "space"
  2138                           ; Number of cases is 2, Range of values is 1 to 2
  2139                           ; switch strategies available:
  2140                           ; Name         Instructions Cycles
  2141                           ; simple_byte            7     4 (average)
  2142                           ;	Chosen strategy is simple_byte
  2143  00090C  0A01               	xorlw	1	; case 1
  2144  00090E  E101 D4FC          	bz	l3120
  2145  000912  0A03               	xorlw	3	; case 2
  2146  000914  E101 D64F          	bz	l3144
  2147  000918                     l197:
  2148                           
  2149                           ;main.c: 283: if (sound_yes) {
  2150  000918  AE66               	btfss	(_sound_yes/(0+8))^0,_sound_yes& (0+7),c
  2151  00091A  D090               	goto	l213
  2152                           
  2153                           ;main.c: 287: if (en_snd_k) {
  2154  00091C  A266               	btfss	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2155  00091E  D01D               	goto	l215
  2156                           
  2157                           ;main.c: 288: if (((temperature_1 >= (temp1_fix + set_t_dq1_up)) ||;main.c: 289: (temper
      +                          ature_1 <= (temp1_fix - set_t_dq1_dwn))) &&;main.c: 290: !(temperature_1 == 32767)) {
  2158  000920  5033               	movf	_set_t_dq1_up^0,w,c
  2159  000922  2427               	addwf	_temp1_fix^0,w,c
  2160  000924  6E56               	movwf	??_main^0,c
  2161  000926  0E00               	movlw	0
  2162  000928  2028               	addwfc	(_temp1_fix+1)^0,w,c
  2163  00092A  6E57               	movwf	(??_main+1)^0,c
  2164  00092C  5056               	movf	??_main^0,w,c
  2165  00092E  5C5F               	subwf	_temperature_1^0,w,c
  2166  000930  5057               	movf	(??_main+1)^0,w,c
  2167  000932  5860               	subwfb	(_temperature_1+1)^0,w,c
  2168  000934  E20B               	bc	u2200
  2169  000936  5032               	movf	_set_t_dq1_dwn^0,w,c
  2170  000938  5C27               	subwf	_temp1_fix^0,w,c
  2171  00093A  6E56               	movwf	??_main^0,c
  2172  00093C  0E00               	movlw	0
  2173  00093E  5828               	subwfb	(_temp1_fix+1)^0,w,c
  2174  000940  6E57               	movwf	(??_main+1)^0,c
  2175  000942  505F               	movf	_temperature_1^0,w,c
  2176  000944  5C56               	subwf	??_main^0,w,c
  2177  000946  5060               	movf	(_temperature_1+1)^0,w,c
  2178  000948  5857               	subwfb	(??_main+1)^0,w,c
  2179  00094A  E307               	bnc	l215
  2180  00094C                     u2200:
  2181  00094C  285F               	incf	_temperature_1^0,w,c
  2182  00094E  E103               	bnz	u2210
  2183  000950  0E7F               	movlw	127
  2184  000952  1860               	xorwf	(_temperature_1+1)^0,w,c
  2185  000954  E002               	bz	l215
  2186  000956                     u2210:
  2187                           
  2188                           ;main.c: 292: snd_k_b = 1;
  2189  000956  8666               	bsf	(_snd_k_b/(0+8))^0,_snd_k_b& (0+7),c
  2190                           
  2191                           ;main.c: 293: } else
  2192  000958  D001               	goto	l219
  2193  00095A                     l215:
  2194                           
  2195                           ;main.c: 294: snd_k_b = 0;
  2196  00095A  9666               	bcf	(_snd_k_b/(0+8))^0,_snd_k_b& (0+7),c
  2197  00095C                     l219:
  2198                           
  2199                           ;main.c: 298: if (en_snd_b) {
  2200  00095C  A066               	btfss	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2201  00095E  D00C               	goto	l221
  2202                           
  2203                           ;main.c: 299: if ((temperature_2 >= set_t_dq2) && !(temperature_2 == 32767))
  2204  000960  5029               	movf	_set_t_dq2^0,w,c
  2205  000962  5C5D               	subwf	_temperature_2^0,w,c
  2206  000964  502A               	movf	(_set_t_dq2+1)^0,w,c
  2207  000966  585E               	subwfb	(_temperature_2+1)^0,w,c
  2208  000968  E307               	bnc	l221
  2209  00096A  285D               	incf	_temperature_2^0,w,c
  2210  00096C  E103               	bnz	u2240
  2211  00096E  0E7F               	movlw	127
  2212  000970  185E               	xorwf	(_temperature_2+1)^0,w,c
  2213  000972  E002               	bz	l221
  2214  000974                     u2240:
  2215                           
  2216                           ;main.c: 300: snd_b_b = 1;
  2217  000974  8466               	bsf	(_snd_b_b/(0+8))^0,_snd_b_b& (0+7),c
  2218  000976  D001               	goto	l223
  2219  000978                     l221:
  2220                           
  2221                           ;main.c: 301: else;main.c: 302: snd_b_b = 0;
  2222  000978  9466               	bcf	(_snd_b_b/(0+8))^0,_snd_b_b& (0+7),c
  2223  00097A                     l223:
  2224                           
  2225                           ;main.c: 306: if (snd_k_b && snd_b_b) {
  2226  00097A  B666               	btfsc	(_snd_k_b/(0+8))^0,_snd_k_b& (0+7),c
  2227  00097C  A466               	btfss	(_snd_b_b/(0+8))^0,_snd_b_b& (0+7),c
  2228  00097E  D01E               	goto	l224
  2229                           
  2230                           ;main.c: 307: en_sound = 1;
  2231  000980  8067               	bsf	(_en_sound/(0+8))^0,_en_sound& (0+7),c
  2232                           
  2233                           ;main.c: 308: snd_k = 0;
  2234  000982  9C66               	bcf	(_snd_k/(0+8))^0,_snd_k& (0+7),c
  2235                           
  2236                           ;main.c: 309: snd_b = 0;
  2237  000984  9A66               	bcf	(_snd_b/(0+8))^0,_snd_b& (0+7),c
  2238                           
  2239                           ;main.c: 310: snd_all = 1;
  2240  000986  8866               	bsf	(_snd_all/(0+8))^0,_snd_all& (0+7),c
  2241                           
  2242                           ;main.c: 311: if (tik_time >= 100) {
  2243  000988  0E63               	movlw	99
  2244  00098A  6436               	cpfsgt	_tik_time^0,c
  2245  00098C  D059               	goto	l3228
  2246                           
  2247                           ;main.c: 312: tik_time = 0;
  2248  00098E  6A36               	clrf	_tik_time^0,c
  2249                           
  2250                           ;main.c: 313: EUSART_Write('A');
  2251  000990  0E41               	movlw	65
  2252  000992  ECAD  F00B         	call	_EUSART_Write
  2253                           
  2254                           ;main.c: 314: EUSART_Write('l');
  2255  000996  0E6C               	movlw	108
  2256  000998  ECAD  F00B         	call	_EUSART_Write
  2257                           
  2258                           ;main.c: 315: EUSART_Write('r');
  2259  00099C  0E72               	movlw	114
  2260  00099E  ECAD  F00B         	call	_EUSART_Write
  2261                           
  2262                           ;main.c: 316: EUSART_Write('_');
  2263  0009A2  0E5F               	movlw	95
  2264  0009A4  ECAD  F00B         	call	_EUSART_Write
  2265                           
  2266                           ;main.c: 317: EUSART_Write('A');
  2267  0009A8  0E41               	movlw	65
  2268  0009AA  ECAD  F00B         	call	_EUSART_Write
  2269                           
  2270                           ;main.c: 318: EUSART_Write('\r');
  2271  0009AE  0E0D               	movlw	13
  2272  0009B0  ECAD  F00B         	call	_EUSART_Write
  2273                           
  2274                           ;main.c: 319: EUSART_Write('\n');
  2275  0009B4  0E0A               	movlw	10
  2276  0009B6  ECAD  F00B         	call	_EUSART_Write
  2277  0009BA  D042               	goto	l3228
  2278  0009BC                     l224:
  2279  0009BC  A466               	btfss	(_snd_b_b/(0+8))^0,_snd_b_b& (0+7),c
  2280  0009BE  D01E               	goto	l227
  2281                           
  2282                           ;main.c: 322: en_sound = 1;
  2283  0009C0  8067               	bsf	(_en_sound/(0+8))^0,_en_sound& (0+7),c
  2284                           
  2285                           ;main.c: 323: snd_k = 0;
  2286  0009C2  9C66               	bcf	(_snd_k/(0+8))^0,_snd_k& (0+7),c
  2287                           
  2288                           ;main.c: 324: snd_all = 0;
  2289  0009C4  9866               	bcf	(_snd_all/(0+8))^0,_snd_all& (0+7),c
  2290                           
  2291                           ;main.c: 325: snd_b = 1;
  2292  0009C6  8A66               	bsf	(_snd_b/(0+8))^0,_snd_b& (0+7),c
  2293                           
  2294                           ;main.c: 326: if (tik_time >= 100) {
  2295  0009C8  0E63               	movlw	99
  2296  0009CA  6436               	cpfsgt	_tik_time^0,c
  2297  0009CC  D039               	goto	l3228
  2298                           
  2299                           ;main.c: 327: tik_time = 0;
  2300  0009CE  6A36               	clrf	_tik_time^0,c
  2301                           
  2302                           ;main.c: 328: EUSART_Write('A');
  2303  0009D0  0E41               	movlw	65
  2304  0009D2  ECAD  F00B         	call	_EUSART_Write
  2305                           
  2306                           ;main.c: 329: EUSART_Write('l');
  2307  0009D6  0E6C               	movlw	108
  2308  0009D8  ECAD  F00B         	call	_EUSART_Write
  2309                           
  2310                           ;main.c: 330: EUSART_Write('r');
  2311  0009DC  0E72               	movlw	114
  2312  0009DE  ECAD  F00B         	call	_EUSART_Write
  2313                           
  2314                           ;main.c: 331: EUSART_Write('_');
  2315  0009E2  0E5F               	movlw	95
  2316  0009E4  ECAD  F00B         	call	_EUSART_Write
  2317                           
  2318                           ;main.c: 332: EUSART_Write('B');
  2319  0009E8  0E42               	movlw	66
  2320  0009EA  ECAD  F00B         	call	_EUSART_Write
  2321                           
  2322                           ;main.c: 333: EUSART_Write('\r');
  2323  0009EE  0E0D               	movlw	13
  2324  0009F0  ECAD  F00B         	call	_EUSART_Write
  2325                           
  2326                           ;main.c: 334: EUSART_Write('\n');
  2327  0009F4  0E0A               	movlw	10
  2328  0009F6  ECAD  F00B         	call	_EUSART_Write
  2329  0009FA  D022               	goto	l3228
  2330  0009FC                     l227:
  2331  0009FC  A666               	btfss	(_snd_k_b/(0+8))^0,_snd_k_b& (0+7),c
  2332  0009FE  D01F               	goto	L1
  2333                           
  2334                           ;main.c: 337: en_sound = 1;
  2335  000A00  8067               	bsf	(_en_sound/(0+8))^0,_en_sound& (0+7),c
  2336                           
  2337                           ;main.c: 338: snd_k = 1;
  2338  000A02  8C66               	bsf	(_snd_k/(0+8))^0,_snd_k& (0+7),c
  2339                           
  2340                           ;main.c: 339: snd_all = 0;
  2341  000A04  9866               	bcf	(_snd_all/(0+8))^0,_snd_all& (0+7),c
  2342                           
  2343                           ;main.c: 340: snd_b = 0;
  2344  000A06  9A66               	bcf	(_snd_b/(0+8))^0,_snd_b& (0+7),c
  2345                           
  2346                           ;main.c: 341: if (tik_time >= 100) {
  2347  000A08  0E63               	movlw	99
  2348  000A0A  6436               	cpfsgt	_tik_time^0,c
  2349  000A0C  D019               	goto	l3228
  2350                           
  2351                           ;main.c: 342: tik_time = 0;
  2352  000A0E  6A36               	clrf	_tik_time^0,c
  2353                           
  2354                           ;main.c: 343: EUSART_Write('A');
  2355  000A10  0E41               	movlw	65
  2356  000A12  ECAD  F00B         	call	_EUSART_Write
  2357                           
  2358                           ;main.c: 344: EUSART_Write('l');
  2359  000A16  0E6C               	movlw	108
  2360  000A18  ECAD  F00B         	call	_EUSART_Write
  2361                           
  2362                           ;main.c: 345: EUSART_Write('r');
  2363  000A1C  0E72               	movlw	114
  2364  000A1E  ECAD  F00B         	call	_EUSART_Write
  2365                           
  2366                           ;main.c: 346: EUSART_Write('_');
  2367  000A22  0E5F               	movlw	95
  2368  000A24  ECAD  F00B         	call	_EUSART_Write
  2369                           
  2370                           ;main.c: 347: EUSART_Write('K');
  2371  000A28  0E4B               	movlw	75
  2372  000A2A  ECAD  F00B         	call	_EUSART_Write
  2373                           
  2374                           ;main.c: 348: EUSART_Write('\r');
  2375  000A2E  0E0D               	movlw	13
  2376  000A30  ECAD  F00B         	call	_EUSART_Write
  2377                           
  2378                           ;main.c: 349: EUSART_Write('\n');
  2379  000A34  0E0A               	movlw	10
  2380  000A36  ECAD  F00B         	call	_EUSART_Write
  2381  000A3A  D002               	goto	l3228
  2382  000A3C                     l213:
  2383                           
  2384                           ;main.c: 358: LATCbits.LATC4 = 0;
  2385  000A3C  988B               	bcf	139,4,c	;volatile
  2386  000A3E                     L1:
  2387                           
  2388                           ;main.c: 359: en_sound = 0;
  2389  000A3E  9067               	bcf	(_en_sound/(0+8))^0,_en_sound& (0+7),c
  2390  000A40                     l3228:
  2391                           
  2392                           ;main.c: 360: };main.c: 363: if (pressed_key == 1) {
  2393  000A40  0435               	decf	_pressed_key^0,w,c
  2394  000A42  E115               	bnz	l3242
  2395                           
  2396                           ;main.c: 364: clearLCD();
  2397  000A44  EC5A  F00C         	call	_clearLCD	;wreg free
  2398                           
  2399                           ;main.c: 365: select = 7;
  2400  000A48  0E07               	movlw	7
  2401                           
  2402                           ;main.c: 366: lcd_gotoxy(1, 1);
  2403  000A4A  DAAC               	call	PL32	;call to abstracted procedure
  2404  000A4C  EC3E  F00C         	call	_lcd_gotoxy
  2405                           
  2406                           ;main.c: 367: lcdPrint("Ïîðiã Ñèãí. Led");
  2407  000A50  0E4B               	movlw	low STR_15
  2408  000A52  6E4C               	movwf	lcdPrint@t^0,c
  2409  000A54  0E1F               	movlw	high STR_15
  2410  000A56  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2411  000A58  ECFE  F008         	call	_lcdPrint	;wreg free
  2412                           
  2413                           ;main.c: 368: lcd_gotoxy(1, 2);
  2414  000A5C  DA94               	call	PL22	;call to abstracted procedure
  2415  000A5E  EC3E  F00C         	call	_lcd_gotoxy
  2416                           
  2417                           ;main.c: 369: lcdPrint("  1     2   1-2");
  2418  000A62  0E2B               	movlw	low STR_16
  2419  000A64  6E4C               	movwf	lcdPrint@t^0,c
  2420  000A66  0E1F               	movlw	high STR_16
  2421  000A68  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2422  000A6A  ECFE  F008         	call	_lcdPrint	;wreg free
  2423  000A6E                     l3242:
  2424                           
  2425                           ;main.c: 371: };main.c: 373: if (pressed_key == 2) {
  2426  000A6E  0E02               	movlw	2
  2427  000A70  1835               	xorwf	_pressed_key^0,w,c
  2428  000A72  E105               	bnz	l3250
  2429                           
  2430                           ;main.c: 374: if (sub_main == 1)
  2431  000A74  0462               	decf	_sub_main^0,w,c
  2432                           
  2433                           ;main.c: 375: sub_main = 2;
  2434  000A76  0E02               	movlw	2
  2435  000A78  A4D8               	btfss	status,2,c
  2436                           
  2437                           ;main.c: 376: else;main.c: 377: sub_main = 1;
  2438  000A7A  0E01               	movlw	1
  2439  000A7C  6E62               	movwf	_sub_main^0,c
  2440  000A7E                     l3250:
  2441                           
  2442                           ;main.c: 378: };main.c: 380: if (pressed_key == 3) {
  2443  000A7E  0E03               	movlw	3
  2444  000A80  1835               	xorwf	_pressed_key^0,w,c
  2445  000A82  E011               	bz	l3258
  2446  000A84  EFB2  F000         	goto	l3072
  2447  000A88                     l240:
  2448                           
  2449                           ;main.c: 384: temp1_fix = temperature_1;
  2450  000A88  C05F  F027         	movff	_temperature_1,_temp1_fix
  2451  000A8C  C060  F028         	movff	_temperature_1+1,_temp1_fix+1
  2452                           
  2453                           ;main.c: 385: write_eep(20, (temp1_fix >> 8));
  2454  000A90  C028  F045         	movff	_temp1_fix+1,write_eep@data
  2455  000A94  0E14               	movlw	20
  2456  000A96  ECD8  F00B         	call	_write_eep
  2457                           
  2458                           ;main.c: 386: write_eep(20 + 1, (uint8_t) temp1_fix);
  2459  000A9A  C027  F045         	movff	_temp1_fix,write_eep@data
  2460  000A9E  0E15               	movlw	21
  2461  000AA0  ECD8  F00B         	call	_write_eep
  2462                           
  2463                           ;main.c: 387: break;
  2464  000AA4  D004               	goto	l3260
  2465  000AA6                     l3258:
  2466  000AA6  5062               	movf	_sub_main^0,w,c
  2467                           
  2468                           ; Switch size 1, requested type "space"
  2469                           ; Number of cases is 2, Range of values is 1 to 2
  2470                           ; switch strategies available:
  2471                           ; Name         Instructions Cycles
  2472                           ; simple_byte            7     4 (average)
  2473                           ;	Chosen strategy is simple_byte
  2474  000AA8  0A01               	xorlw	1	; case 1
  2475  000AAA  E0EE               	bz	l240
  2476  000AAC  0A03               	xorlw	3	; case 2
  2477  000AAE                     l3260:
  2478                           
  2479                           ;main.c: 394: Delay_ms(10);
  2480  000AAE  DAA7               	call	PL56	;call to abstracted procedure
  2481  000AB0  ECEA  F00B         	call	_Delay_ms	;wreg free
  2482  000AB4  EFB2  F000         	goto	l3072
  2483  000AB8                     l3262:
  2484                           
  2485                           ;main.c: 401: lcd_gotoxy(14, 2);
  2486  000AB8  0E02               	movlw	2
  2487  000ABA  6E49               	movwf	lcd_gotoxy@y^0,c
  2488  000ABC  0E0E               	movlw	14
  2489  000ABE  EC3E  F00C         	call	_lcd_gotoxy
  2490                           
  2491                           ;main.c: 402: lcd_putc(dq_num + 48);
  2492  000AC2  5061               	movf	_dq_num^0,w,c
  2493  000AC4  0F30               	addlw	48
  2494  000AC6  EC82  F00C         	call	_lcd_putc
  2495                           
  2496                           ;main.c: 403: if (pressed_key == 1) {
  2497  000ACA  0435               	decf	_pressed_key^0,w,c
  2498  000ACC  E106               	bnz	l3272
  2499                           
  2500                           ;main.c: 404: dq_num++;
  2501  000ACE  2A61               	incf	_dq_num^0,f,c
  2502                           
  2503                           ;main.c: 405: if (dq_num == 3)
  2504  000AD0  0E03               	movlw	3
  2505  000AD2  1861               	xorwf	_dq_num^0,w,c
  2506  000AD4  E102               	bnz	l3272
  2507                           
  2508                           ;main.c: 406: dq_num = 1;
  2509  000AD6  0E01               	movlw	1
  2510  000AD8  6E61               	movwf	_dq_num^0,c
  2511  000ADA                     l3272:
  2512                           
  2513                           ;main.c: 407: };main.c: 408: if (pressed_key == 2) {
  2514  000ADA  0E02               	movlw	2
  2515  000ADC  1835               	xorwf	_pressed_key^0,w,c
  2516  000ADE  E105               	bnz	l3280
  2517                           
  2518                           ;main.c: 409: dq_num--;
  2519  000AE0  0661               	decf	_dq_num^0,f,c
  2520                           
  2521                           ;main.c: 410: if (dq_num == 0)
  2522  000AE2  5061               	movf	_dq_num^0,w,c
  2523  000AE4  E102               	bnz	l3280
  2524                           
  2525                           ;main.c: 411: dq_num = 2;
  2526  000AE6  0E02               	movlw	2
  2527  000AE8  6E61               	movwf	_dq_num^0,c
  2528  000AEA                     l3280:
  2529                           
  2530                           ;main.c: 412: };main.c: 413: if (pressed_key == 3) {
  2531  000AEA  0E03               	movlw	3
  2532  000AEC  1835               	xorwf	_pressed_key^0,w,c
  2533  000AEE  E002 EFB2  F000    	bnz	l3072
  2534                           
  2535                           ;main.c: 414: if (ds18b20_readrom(dq_num)) {
  2536  000AF4  5061               	movf	_dq_num^0,w,c
  2537  000AF6  EC4A  F00A         	call	_ds18b20_readrom
  2538  000AFA  0900               	iorlw	0
  2539  000AFC  E009               	bz	l3288
  2540                           
  2541                           ;main.c: 415: lcd_gotoxy(1, 2);
  2542  000AFE  DA43               	call	PL22	;call to abstracted procedure
  2543  000B00  EC3E  F00C         	call	_lcd_gotoxy
  2544                           
  2545                           ;main.c: 416: lcdPrint(" Êîä ïðî÷èòàíî ");
  2546  000B04  0EEB               	movlw	low STR_17
  2547  000B06  6E4C               	movwf	lcdPrint@t^0,c
  2548  000B08  0E1E               	movlw	high STR_17
  2549  000B0A  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2550  000B0C  ECFE  F008         	call	_lcdPrint	;wreg free
  2551  000B10                     l3288:
  2552                           
  2553                           ;main.c: 417: };main.c: 419: select = 3;
  2554  000B10  0E03               	movlw	3
  2555  000B12  D039               	goto	L3
  2556  000B14                     l3290:
  2557                           
  2558                           ;main.c: 425: if (pressed_key == 1) {
  2559  000B14  0435               	decf	_pressed_key^0,w,c
  2560  000B16  E115               	bnz	l3304
  2561                           
  2562                           ;main.c: 426: clearLCD();
  2563  000B18  EC5A  F00C         	call	_clearLCD	;wreg free
  2564                           
  2565                           ;main.c: 427: select = 4;
  2566  000B1C  0E04               	movlw	4
  2567                           
  2568                           ;main.c: 428: lcd_gotoxy(1, 1);
  2569  000B1E  DA42               	call	PL32	;call to abstracted procedure
  2570  000B20  EC3E  F00C         	call	_lcd_gotoxy
  2571                           
  2572                           ;main.c: 429: lcdPrint("   Ãðàíèöi   ");
  2573  000B24  0E88               	movlw	low STR_18
  2574  000B26  6E4C               	movwf	lcdPrint@t^0,c
  2575  000B28  0E1F               	movlw	high STR_18
  2576  000B2A  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2577  000B2C  ECFE  F008         	call	_lcdPrint	;wreg free
  2578                           
  2579                           ;main.c: 430: lcd_gotoxy(1, 2);
  2580  000B30  DA2A               	call	PL22	;call to abstracted procedure
  2581  000B32  EC3E  F00C         	call	_lcd_gotoxy
  2582                           
  2583                           ;main.c: 431: lcdPrint("Êîë(1)/Êóá(2):");
  2584  000B36  0E79               	movlw	low STR_19
  2585  000B38  6E4C               	movwf	lcdPrint@t^0,c
  2586  000B3A  0E1F               	movlw	high STR_19
  2587  000B3C  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2588  000B3E  ECFE  F008         	call	_lcdPrint	;wreg free
  2589  000B42                     l3304:
  2590                           
  2591                           ;main.c: 432: };main.c: 434: if (pressed_key == 2) {
  2592  000B42  0E02               	movlw	2
  2593  000B44  1835               	xorwf	_pressed_key^0,w,c
  2594  000B46  E10C               	bnz	l3314
  2595                           
  2596                           ;main.c: 437: clearLCD();
  2597  000B48  EC5A  F00C         	call	_clearLCD	;wreg free
  2598                           
  2599                           ;main.c: 438: select = 8;
  2600  000B4C  0E08               	movlw	8
  2601                           
  2602                           ;main.c: 439: lcd_gotoxy(1, 1);
  2603  000B4E  DA2A               	call	PL32	;call to abstracted procedure
  2604  000B50  EC3E  F00C         	call	_lcd_gotoxy
  2605                           
  2606                           ;main.c: 440: lcdPrint(" Êîëîíà    Êóá");
  2607  000B54  0E5B               	movlw	low STR_20
  2608  000B56  6E4C               	movwf	lcdPrint@t^0,c
  2609  000B58  0E1F               	movlw	high STR_20
  2610  000B5A  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2611  000B5C  ECFE  F008         	call	_lcdPrint	;wreg free
  2612  000B60                     l3314:
  2613                           
  2614                           ;main.c: 441: };main.c: 442: if (pressed_key == 3) {
  2615  000B60  0E03               	movlw	3
  2616  000B62  1835               	xorwf	_pressed_key^0,w,c
  2617  000B64  E002 EFB2  F000    	bnz	l3072
  2618                           
  2619                           ;main.c: 443: LATCbits.LATC5 = !(LATCbits.LATC5);
  2620  000B6A  BA8B               	btfsc	139,5,c	;volatile
  2621  000B6C  D003               	goto	u2450
  2622  000B6E  6A56               	clrf	??_main^0,c
  2623  000B70  2A56               	incf	??_main^0,f,c
  2624  000B72  D001               	goto	u2468
  2625  000B74                     u2450:
  2626  000B74  6A56               	clrf	??_main^0,c
  2627  000B76                     u2468:
  2628  000B76  3A56               	swapf	??_main^0,f,c
  2629  000B78  4656               	rlncf	??_main^0,f,c
  2630  000B7A  508B               	movf	139,w,c	;volatile
  2631  000B7C  1856               	xorwf	??_main^0,w,c
  2632  000B7E  0BDF               	andlw	-33
  2633  000B80  1856               	xorwf	??_main^0,w,c
  2634  000B82  6E8B               	movwf	139,c	;volatile
  2635  000B84                     l3318:
  2636                           
  2637                           ;main.c: 444: select = 1;
  2638  000B84  0E01               	movlw	1
  2639  000B86                     L3:
  2640  000B86  6E63               	movwf	_select^0,c
  2641  000B88  EFB2  F000         	goto	l3072
  2642  000B8C                     l3320:
  2643                           
  2644                           ;main.c: 448: lcd_gotoxy(4, 2);
  2645  000B8C  0E02               	movlw	2
  2646  000B8E  6E49               	movwf	lcd_gotoxy@y^0,c
  2647  000B90  0E04               	movlw	4
  2648  000B92  EC3E  F00C         	call	_lcd_gotoxy
  2649                           
  2650                           ;main.c: 449: (en_snd_k) ? lcd_putc(0xED) : lcd_putc(0xD5);
  2651  000B96  A266               	btfss	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2652  000B98  D004               	goto	l3326
  2653  000B9A  0EED               	movlw	237
  2654  000B9C  EC82  F00C         	call	_lcd_putc
  2655  000BA0  D003               	goto	l260
  2656  000BA2                     l3326:
  2657  000BA2  0ED5               	movlw	213
  2658  000BA4  EC82  F00C         	call	_lcd_putc
  2659  000BA8                     l260:
  2660                           
  2661                           ;main.c: 450: lcd_gotoxy(13, 2);
  2662  000BA8  0E02               	movlw	2
  2663  000BAA  6E49               	movwf	lcd_gotoxy@y^0,c
  2664  000BAC  0E0D               	movlw	13
  2665  000BAE  EC3E  F00C         	call	_lcd_gotoxy
  2666                           
  2667                           ;main.c: 451: (en_snd_b) ? lcd_putc(0xED) : lcd_putc(0xD5);
  2668  000BB2  A066               	btfss	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2669  000BB4  D004               	goto	l3332
  2670  000BB6  0EED               	movlw	237
  2671  000BB8  EC82  F00C         	call	_lcd_putc
  2672  000BBC  D003               	goto	l3334
  2673  000BBE                     l3332:
  2674  000BBE  0ED5               	movlw	213
  2675  000BC0  EC82  F00C         	call	_lcd_putc
  2676  000BC4                     l3334:
  2677                           
  2678                           ;main.c: 453: if (pressed_key == 1) {
  2679  000BC4  0435               	decf	_pressed_key^0,w,c
  2680  000BC6  E105               	bnz	u2515
  2681                           
  2682                           ;main.c: 454: en_snd_k = !(en_snd_k);
  2683  000BC8  B266               	btfsc	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2684  000BCA  D002               	goto	u2500
  2685  000BCC  8266               	bsf	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2686  000BCE  D001               	goto	u2515
  2687  000BD0                     u2500:
  2688  000BD0  9266               	bcf	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2689  000BD2                     u2515:
  2690                           
  2691                           ;main.c: 455: };main.c: 457: if (pressed_key == 2) {
  2692  000BD2  0E02               	movlw	2
  2693  000BD4  1835               	xorwf	_pressed_key^0,w,c
  2694  000BD6  E105               	bnz	u2545
  2695                           
  2696                           ;main.c: 458: en_snd_b = !(en_snd_b);
  2697  000BD8  B066               	btfsc	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2698  000BDA  D002               	goto	u2530
  2699  000BDC  8066               	bsf	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2700  000BDE  D001               	goto	u2545
  2701  000BE0                     u2530:
  2702  000BE0  9066               	bcf	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2703  000BE2                     u2545:
  2704                           
  2705                           ;main.c: 459: };main.c: 460: if (pressed_key == 3) {
  2706  000BE2  0E03               	movlw	3
  2707  000BE4  1835               	xorwf	_pressed_key^0,w,c
  2708  000BE6  E002 EFB2  F000    	bnz	l3072
  2709                           
  2710                           ;main.c: 461: if (!(en_snd_k) && !(en_snd_b)) {
  2711  000BEC  A266               	btfss	(_en_snd_k/(0+8))^0,_en_snd_k& (0+7),c
  2712  000BEE  B066               	btfsc	(_en_snd_b/(0+8))^0,_en_snd_b& (0+7),c
  2713  000BF0  D002               	goto	l268
  2714                           
  2715                           ;main.c: 462: sound_yes = 0;
  2716  000BF2  9E66               	bcf	(_sound_yes/(0+8))^0,_sound_yes& (0+7),c
  2717                           
  2718                           ;main.c: 463: } else
  2719  000BF4  D7C7               	goto	l3318
  2720  000BF6                     l268:
  2721                           
  2722                           ;main.c: 464: sound_yes = 1;
  2723  000BF6  8E66               	bsf	(_sound_yes/(0+8))^0,_sound_yes& (0+7),c
  2724  000BF8  D7C5               	goto	l3318
  2725  000BFA                     l3352:
  2726                           
  2727                           ;main.c: 470: lcd_gotoxy(16, 2);
  2728  000BFA  0E02               	movlw	2
  2729  000BFC  6E49               	movwf	lcd_gotoxy@y^0,c
  2730  000BFE  0E10               	movlw	16
  2731  000C00  EC3E  F00C         	call	_lcd_gotoxy
  2732                           
  2733                           ;main.c: 471: lcd_putc(dq_num + 48);
  2734  000C04  5061               	movf	_dq_num^0,w,c
  2735  000C06  0F30               	addlw	48
  2736  000C08  EC82  F00C         	call	_lcd_putc
  2737                           
  2738                           ;main.c: 472: if (pressed_key == 1) {
  2739  000C0C  0435               	decf	_pressed_key^0,w,c
  2740  000C0E  E106               	bnz	l3362
  2741                           
  2742                           ;main.c: 473: dq_num++;
  2743  000C10  2A61               	incf	_dq_num^0,f,c
  2744                           
  2745                           ;main.c: 474: if (dq_num == 3)
  2746  000C12  0E03               	movlw	3
  2747  000C14  1861               	xorwf	_dq_num^0,w,c
  2748  000C16  E102               	bnz	l3362
  2749                           
  2750                           ;main.c: 475: dq_num = 1;
  2751  000C18  0E01               	movlw	1
  2752  000C1A  6E61               	movwf	_dq_num^0,c
  2753  000C1C                     l3362:
  2754                           
  2755                           ;main.c: 476: };main.c: 477: if (pressed_key == 2) {
  2756  000C1C  0E02               	movlw	2
  2757  000C1E  1835               	xorwf	_pressed_key^0,w,c
  2758  000C20  E105               	bnz	l3370
  2759                           
  2760                           ;main.c: 478: dq_num--;
  2761  000C22  0661               	decf	_dq_num^0,f,c
  2762                           
  2763                           ;main.c: 479: if (dq_num == 0)
  2764  000C24  5061               	movf	_dq_num^0,w,c
  2765  000C26  E102               	bnz	l3370
  2766                           
  2767                           ;main.c: 480: dq_num = 2;
  2768  000C28  0E02               	movlw	2
  2769  000C2A  6E61               	movwf	_dq_num^0,c
  2770  000C2C                     l3370:
  2771                           
  2772                           ;main.c: 481: };main.c: 482: if (pressed_key == 3) {
  2773  000C2C  0E03               	movlw	3
  2774  000C2E  1835               	xorwf	_pressed_key^0,w,c
  2775  000C30  E002 EFB2  F000    	bnz	l3072
  2776                           
  2777                           ;main.c: 483: if (dq_num == 1) {
  2778  000C36  0461               	decf	_dq_num^0,w,c
  2779  000C38  E119               	bnz	l3386
  2780                           
  2781                           ;main.c: 484: select = 5;
  2782  000C3A  0E05               	movlw	5
  2783                           
  2784                           ;main.c: 485: sub_sel = 1;
  2785  000C3C  D9D8               	call	PL52	;call to abstracted procedure
  2786                           
  2787                           ;main.c: 486: clearLCD();
  2788  000C3E  EC5A  F00C         	call	_clearLCD	;wreg free
  2789                           
  2790                           ;main.c: 487: lcd_gotoxy(1, 1);
  2791  000C42  0E01               	movlw	1
  2792  000C44  6E49               	movwf	lcd_gotoxy@y^0,c
  2793  000C46  EC3E  F00C         	call	_lcd_gotoxy
  2794                           
  2795                           ;main.c: 488: lcdPrint("    Êîëîíà  ");
  2796  000C4A  0EA3               	movlw	low STR_21
  2797  000C4C  6E4C               	movwf	lcdPrint@t^0,c
  2798  000C4E  0E1F               	movlw	high STR_21
  2799  000C50  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2800  000C52  ECFE  F008         	call	_lcdPrint	;wreg free
  2801                           
  2802                           ;main.c: 489: lcd_gotoxy(1, 2);
  2803  000C56  D997               	call	PL22	;call to abstracted procedure
  2804  000C58  EC3E  F00C         	call	_lcd_gotoxy
  2805                           
  2806                           ;main.c: 490: lcdPrint("Òåìï Âåðõ:");
  2807  000C5C  0EBD               	movlw	low STR_22
  2808  000C5E  6E4C               	movwf	lcdPrint@t^0,c
  2809  000C60  0E1F               	movlw	high STR_22
  2810  000C62  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2811  000C64  ECFE  F008         	call	_lcdPrint	;wreg free
  2812                           
  2813                           ;main.c: 491: } else {
  2814  000C68  EFB2  F000         	goto	l3072
  2815  000C6C                     l3386:
  2816                           
  2817                           ;main.c: 492: select = 6;
  2818  000C6C  0E06               	movlw	6
  2819                           
  2820                           ;main.c: 493: sub_sel = 1;
  2821  000C6E  D9BF               	call	PL52	;call to abstracted procedure
  2822                           
  2823                           ;main.c: 494: clearLCD();
  2824  000C70  EC5A  F00C         	call	_clearLCD	;wreg free
  2825                           
  2826                           ;main.c: 495: lcd_gotoxy(1, 1);
  2827  000C74  0E01               	movlw	1
  2828  000C76  6E49               	movwf	lcd_gotoxy@y^0,c
  2829  000C78  EC3E  F00C         	call	_lcd_gotoxy
  2830                           
  2831                           ;main.c: 496: lcdPrint("    Êóáîâà  ");
  2832  000C7C  0E96               	movlw	low STR_23
  2833  000C7E  6E4C               	movwf	lcdPrint@t^0,c
  2834  000C80  0E1F               	movlw	high STR_23
  2835  000C82  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2836  000C84  ECFE  F008         	call	_lcdPrint	;wreg free
  2837                           
  2838                           ;main.c: 497: lcd_gotoxy(1, 2);
  2839  000C88  D97E               	call	PL22	;call to abstracted procedure
  2840  000C8A  EC3E  F00C         	call	_lcd_gotoxy
  2841                           
  2842                           ;main.c: 498: lcdPrint("Òåìï öiëi:");
  2843  000C8E  0EC8               	movlw	low STR_24
  2844  000C90  6E4C               	movwf	lcdPrint@t^0,c
  2845  000C92  0E1F               	movlw	high STR_24
  2846  000C94  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2847  000C96  ECFE  F008         	call	_lcdPrint	;wreg free
  2848                           
  2849                           ;main.c: 499: set_t_dq2_100 = set_t_dq2 / 10;
  2850  000C9A  C029  F045         	movff	_set_t_dq2,___lwdiv@dividend
  2851  000C9E  C02A  F046         	movff	_set_t_dq2+1,___lwdiv@dividend+1
  2852  000CA2  6A48               	clrf	(___lwdiv@divisor+1)^0,c
  2853  000CA4  0E0A               	movlw	10
  2854  000CA6  6E47               	movwf	___lwdiv@divisor^0,c
  2855  000CA8  ECC9  F00A         	call	___lwdiv	;wreg free
  2856  000CAC  5045               	movf	?___lwdiv^0,w,c
  2857  000CAE  6E31               	movwf	_set_t_dq2_100^0,c
  2858                           
  2859                           ;main.c: 500: set_t_dq2_10 = set_t_dq2 % 10;
  2860  000CB0  D958               	call	PL12	;call to abstracted procedure
  2861  000CB2  D94D               	call	PL8	;call to abstracted procedure
  2862  000CB4  EC0D  F00B         	call	___lwmod	;wreg free
  2863  000CB8  504C               	movf	?___lwmod^0,w,c
  2864  000CBA  6E30               	movwf	_set_t_dq2_10^0,c
  2865  000CBC  EFB2  F000         	goto	l3072
  2866  000CC0                     l3402:
  2867                           
  2868                           ;main.c: 508: lcd_gotoxy(11, 2);
  2869  000CC0  D9AC               	call	PL66	;call to abstracted procedure
  2870  000CC2  EC3E  F00C         	call	_lcd_gotoxy
  2871                           
  2872                           ;main.c: 509: lcd_putc('+');
  2873  000CC6  0E2B               	movlw	43
  2874  000CC8  EC82  F00C         	call	_lcd_putc
  2875                           
  2876                           ;main.c: 510: lcd_putc(((set_t_dq1_up / 10) % 10) + 48);
  2877  000CCC  D978               	call	PL40	;call to abstracted procedure
  2878  000CCE  EC62  F00B         	call	___lbdiv
  2879  000CD2  ECC5  F00B         	call	___lbmod
  2880  000CD6  0F30               	addlw	48
  2881  000CD8  EC82  F00C         	call	_lcd_putc
  2882                           
  2883                           ;main.c: 511: lcd_putc('.');
  2884  000CDC  0E2E               	movlw	46
  2885  000CDE  EC82  F00C         	call	_lcd_putc
  2886                           
  2887                           ;main.c: 512: lcd_putc(((set_t_dq1_up % 10) + 48));
  2888  000CE2  D981               	call	PL50	;call to abstracted procedure
  2889  000CE4  ECC5  F00B         	call	___lbmod
  2890  000CE8  0F30               	addlw	48
  2891  000CEA  EC82  F00C         	call	_lcd_putc
  2892                           
  2893                           ;main.c: 514: if (pressed_key == 1) {
  2894  000CEE  0435               	decf	_pressed_key^0,w,c
  2895  000CF0  E105               	bnz	l3412
  2896                           
  2897                           ;main.c: 515: set_t_dq1_up++;
  2898  000CF2  2A33               	incf	_set_t_dq1_up^0,f,c
  2899                           
  2900                           ;main.c: 516: if (set_t_dq1_up == 11)
  2901  000CF4  0E0B               	movlw	11
  2902  000CF6  1833               	xorwf	_set_t_dq1_up^0,w,c
  2903  000CF8  E101               	bnz	l3412
  2904                           
  2905                           ;main.c: 517: set_t_dq1_up = 0;
  2906  000CFA  6A33               	clrf	_set_t_dq1_up^0,c
  2907  000CFC                     l3412:
  2908                           
  2909                           ;main.c: 518: };main.c: 519: if (pressed_key == 2) {
  2910  000CFC  0E02               	movlw	2
  2911  000CFE  1835               	xorwf	_pressed_key^0,w,c
  2912  000D00  E105               	bnz	l3420
  2913                           
  2914                           ;main.c: 520: set_t_dq1_up--;
  2915  000D02  0633               	decf	_set_t_dq1_up^0,f,c
  2916                           
  2917                           ;main.c: 521: if (set_t_dq1_up == 255)
  2918  000D04  2833               	incf	_set_t_dq1_up^0,w,c
  2919  000D06  E102               	bnz	l3420
  2920                           
  2921                           ;main.c: 522: set_t_dq1_up = 10;
  2922  000D08  0E0A               	movlw	10
  2923  000D0A  6E33               	movwf	_set_t_dq1_up^0,c
  2924  000D0C                     l3420:
  2925                           
  2926                           ;main.c: 523: };main.c: 524: if (pressed_key == 3) {
  2927  000D0C  0E03               	movlw	3
  2928  000D0E  1835               	xorwf	_pressed_key^0,w,c
  2929  000D10  E002 EFB2  F000    	bnz	l3072
  2930                           
  2931                           ;main.c: 525: sub_sel = 2;
  2932                           
  2933                           ;main.c: 526: lcd_gotoxy(1, 2);
  2934  000D16  D94F               	call	PL36	;call to abstracted procedure
  2935  000D18  EC3E  F00C         	call	_lcd_gotoxy
  2936                           
  2937                           ;main.c: 527: lcdPrint("Òåìï Íèç:     ");
  2938  000D1C  0E6A               	movlw	low STR_25
  2939  000D1E  6E4C               	movwf	lcdPrint@t^0,c
  2940  000D20  0E1F               	movlw	high STR_25
  2941  000D22  6E4D               	movwf	(lcdPrint@t+1)^0,c
  2942  000D24  ECFE  F008         	call	_lcdPrint	;wreg free
  2943  000D28  EFB2  F000         	goto	l3072
  2944  000D2C                     l3428:
  2945                           
  2946                           ;main.c: 531: lcd_gotoxy(10, 2);
  2947  000D2C  D973               	call	PL64	;call to abstracted procedure
  2948  000D2E  EC3E  F00C         	call	_lcd_gotoxy
  2949                           
  2950                           ;main.c: 532: lcd_putc('-');
  2951  000D32  0E2D               	movlw	45
  2952  000D34  EC82  F00C         	call	_lcd_putc
  2953                           
  2954                           ;main.c: 533: lcd_putc(((set_t_dq1_dwn / 10) % 10) + 48);
  2955  000D38  D94C               	call	PL44	;call to abstracted procedure
  2956  000D3A  EC62  F00B         	call	___lbdiv
  2957  000D3E  ECC5  F00B         	call	___lbmod
  2958  000D42  0F30               	addlw	48
  2959  000D44  EC82  F00C         	call	_lcd_putc
  2960                           
  2961                           ;main.c: 534: lcd_putc('.');
  2962  000D48  0E2E               	movlw	46
  2963  000D4A  EC82  F00C         	call	_lcd_putc
  2964                           
  2965                           ;main.c: 535: lcd_putc(((set_t_dq1_dwn % 10) + 48));
  2966  000D4E  D95B               	call	PL60	;call to abstracted procedure
  2967  000D50  ECC5  F00B         	call	___lbmod
  2968  000D54  0F30               	addlw	48
  2969  000D56  EC82  F00C         	call	_lcd_putc
  2970                           
  2971                           ;main.c: 537: if (pressed_key == 1) {
  2972  000D5A  0435               	decf	_pressed_key^0,w,c
  2973  000D5C  E105               	bnz	l3438
  2974                           
  2975                           ;main.c: 538: set_t_dq1_dwn++;
  2976  000D5E  2A32               	incf	_set_t_dq1_dwn^0,f,c
  2977                           
  2978                           ;main.c: 539: if (set_t_dq1_dwn == 11)
  2979  000D60  0E0B               	movlw	11
  2980  000D62  1832               	xorwf	_set_t_dq1_dwn^0,w,c
  2981  000D64  E101               	bnz	l3438
  2982                           
  2983                           ;main.c: 540: set_t_dq1_dwn = 0;
  2984  000D66  6A32               	clrf	_set_t_dq1_dwn^0,c
  2985  000D68                     l3438:
  2986                           
  2987                           ;main.c: 541: };main.c: 542: if (pressed_key == 2) {
  2988  000D68  0E02               	movlw	2
  2989  000D6A  1835               	xorwf	_pressed_key^0,w,c
  2990  000D6C  E105               	bnz	l3446
  2991                           
  2992                           ;main.c: 543: set_t_dq1_dwn--;
  2993  000D6E  0632               	decf	_set_t_dq1_dwn^0,f,c
  2994                           
  2995                           ;main.c: 544: if (set_t_dq1_dwn == 255)
  2996  000D70  2832               	incf	_set_t_dq1_dwn^0,w,c
  2997  000D72  E102               	bnz	l3446
  2998                           
  2999                           ;main.c: 545: set_t_dq1_dwn = 10;
  3000  000D74  0E0A               	movlw	10
  3001  000D76  6E32               	movwf	_set_t_dq1_dwn^0,c
  3002  000D78                     l3446:
  3003                           
  3004                           ;main.c: 546: };main.c: 547: if (pressed_key == 3) {
  3005  000D78  0E03               	movlw	3
  3006  000D7A  1835               	xorwf	_pressed_key^0,w,c
  3007  000D7C  E002 EFB2  F000    	bnz	l3072
  3008                           
  3009                           ;main.c: 548: select = 1;
  3010  000D82  0E01               	movlw	1
  3011  000D84  6E63               	movwf	_select^0,c
  3012                           
  3013                           ;main.c: 549: write_eep(16, set_t_dq1_up);
  3014  000D86  C033  F045         	movff	_set_t_dq1_up,write_eep@data
  3015  000D8A  0E10               	movlw	16
  3016  000D8C  ECD8  F00B         	call	_write_eep
  3017                           
  3018                           ;main.c: 550: write_eep(17, set_t_dq1_dwn);
  3019  000D90  C032  F045         	movff	_set_t_dq1_dwn,write_eep@data
  3020  000D94  0E11               	movlw	17
  3021  000D96  ECD8  F00B         	call	_write_eep
  3022  000D9A  EFB2  F000         	goto	l3072
  3023  000D9E                     l3456:
  3024  000D9E  5034               	movf	_sub_sel^0,w,c
  3025                           
  3026                           ; Switch size 1, requested type "space"
  3027                           ; Number of cases is 2, Range of values is 1 to 2
  3028                           ; switch strategies available:
  3029                           ; Name         Instructions Cycles
  3030                           ; simple_byte            7     4 (average)
  3031                           ;	Chosen strategy is simple_byte
  3032  000DA0  0A01               	xorlw	1	; case 1
  3033  000DA2  E08E               	bz	l3402
  3034  000DA4  0A03               	xorlw	3	; case 2
  3035  000DA6  E0C2               	bz	l3428
  3036  000DA8  EFB2  F000         	goto	l3072
  3037  000DAC                     l3458:
  3038                           
  3039                           ;main.c: 559: lcd_gotoxy(11, 2);
  3040  000DAC  D936               	call	PL66	;call to abstracted procedure
  3041  000DAE  EC3E  F00C         	call	_lcd_gotoxy
  3042                           
  3043                           ;main.c: 560: lcd_putc('+');
  3044  000DB2  0E2B               	movlw	43
  3045  000DB4  EC82  F00C         	call	_lcd_putc
  3046                           
  3047                           ;main.c: 561: lcd_putc(((set_t_dq2_100 / 100) % 10) + 48);
  3048  000DB8  D8EF               	call	PL30	;call to abstracted procedure
  3049  000DBA  EC62  F00B         	call	___lbdiv
  3050  000DBE  ECC5  F00B         	call	___lbmod
  3051  000DC2  0F30               	addlw	48
  3052  000DC4  EC82  F00C         	call	_lcd_putc
  3053                           
  3054                           ;main.c: 562: lcd_putc(((set_t_dq2_100 / 10) % 10) + 48);
  3055  000DC8  D8FF               	call	PL42	;call to abstracted procedure
  3056  000DCA  EC62  F00B         	call	___lbdiv
  3057  000DCE  ECC5  F00B         	call	___lbmod
  3058  000DD2  0F30               	addlw	48
  3059  000DD4  EC82  F00C         	call	_lcd_putc
  3060                           
  3061                           ;main.c: 563: lcd_putc(((set_t_dq2_100 % 10) + 48));
  3062  000DD8  D90E               	call	PL54	;call to abstracted procedure
  3063  000DDA  ECC5  F00B         	call	___lbmod
  3064  000DDE  0F30               	addlw	48
  3065  000DE0  EC82  F00C         	call	_lcd_putc
  3066                           
  3067                           ;main.c: 564: lcd_putc('.');
  3068  000DE4  0E2E               	movlw	46
  3069  000DE6  EC82  F00C         	call	_lcd_putc
  3070                           
  3071                           ;main.c: 565: lcd_putc((set_t_dq2_10 % 10) + 48);
  3072  000DEA  D91A               	call	PL68	;call to abstracted procedure
  3073  000DEC  ECC5  F00B         	call	___lbmod
  3074  000DF0  0F30               	addlw	48
  3075  000DF2  EC82  F00C         	call	_lcd_putc
  3076                           
  3077                           ;main.c: 568: if (pressed_key == 1) {
  3078  000DF6  0435               	decf	_pressed_key^0,w,c
  3079  000DF8  E105               	bnz	l3468
  3080                           
  3081                           ;main.c: 569: set_t_dq2_100++;
  3082  000DFA  2A31               	incf	_set_t_dq2_100^0,f,c
  3083                           
  3084                           ;main.c: 570: if (set_t_dq2_100 >= 105)
  3085  000DFC  0E68               	movlw	104
  3086  000DFE  6431               	cpfsgt	_set_t_dq2_100^0,c
  3087  000E00  D001               	goto	l3468
  3088                           
  3089                           ;main.c: 571: set_t_dq2_100 = 0;
  3090  000E02  6A31               	clrf	_set_t_dq2_100^0,c
  3091  000E04                     l3468:
  3092                           
  3093                           ;main.c: 572: };main.c: 573: if (pressed_key == 2) {
  3094  000E04  0E02               	movlw	2
  3095  000E06  1835               	xorwf	_pressed_key^0,w,c
  3096  000E08  E105               	bnz	l3476
  3097                           
  3098                           ;main.c: 574: set_t_dq2_100--;
  3099  000E0A  0631               	decf	_set_t_dq2_100^0,f,c
  3100                           
  3101                           ;main.c: 575: if (set_t_dq2_100 == 255)
  3102  000E0C  2831               	incf	_set_t_dq2_100^0,w,c
  3103  000E0E  E102               	bnz	l3476
  3104                           
  3105                           ;main.c: 576: set_t_dq2_100 = 105;
  3106  000E10  0E69               	movlw	105
  3107  000E12  6E31               	movwf	_set_t_dq2_100^0,c
  3108  000E14                     l3476:
  3109                           
  3110                           ;main.c: 577: };main.c: 578: if (pressed_key == 3) {
  3111  000E14  0E03               	movlw	3
  3112  000E16  1835               	xorwf	_pressed_key^0,w,c
  3113  000E18  E002 EFB2  F000    	bnz	l3072
  3114                           
  3115                           ;main.c: 579: sub_sel = 2;
  3116                           
  3117                           ;main.c: 580: lcd_gotoxy(1, 2);
  3118  000E1E  D8CB               	call	PL36	;call to abstracted procedure
  3119  000E20  EC3E  F00C         	call	_lcd_gotoxy
  3120                           
  3121                           ;main.c: 581: lcdPrint("Òåìï äðá:      ");
  3122  000E24  0EFB               	movlw	low STR_26
  3123  000E26  6E4C               	movwf	lcdPrint@t^0,c
  3124  000E28  0E1E               	movlw	high STR_26
  3125  000E2A  6E4D               	movwf	(lcdPrint@t+1)^0,c
  3126  000E2C  ECFE  F008         	call	_lcdPrint	;wreg free
  3127  000E30  EFB2  F000         	goto	l3072
  3128  000E34                     l3484:
  3129                           
  3130                           ;main.c: 585: lcd_gotoxy(10, 2);
  3131  000E34  D8EF               	call	PL64	;call to abstracted procedure
  3132  000E36  EC3E  F00C         	call	_lcd_gotoxy
  3133                           
  3134                           ;main.c: 586: lcd_putc('+');
  3135  000E3A  0E2B               	movlw	43
  3136  000E3C  EC82  F00C         	call	_lcd_putc
  3137                           
  3138                           ;main.c: 587: lcd_putc(((set_t_dq2_100 / 100) % 10) + 48);
  3139  000E40  D8AB               	call	PL30	;call to abstracted procedure
  3140  000E42  EC62  F00B         	call	___lbdiv
  3141  000E46  ECC5  F00B         	call	___lbmod
  3142  000E4A  0F30               	addlw	48
  3143  000E4C  EC82  F00C         	call	_lcd_putc
  3144                           
  3145                           ;main.c: 588: lcd_putc(((set_t_dq2_100 / 10) % 10) + 48);
  3146  000E50  D8BB               	call	PL42	;call to abstracted procedure
  3147  000E52  EC62  F00B         	call	___lbdiv
  3148  000E56  ECC5  F00B         	call	___lbmod
  3149  000E5A  0F30               	addlw	48
  3150  000E5C  EC82  F00C         	call	_lcd_putc
  3151                           
  3152                           ;main.c: 589: lcd_putc(((set_t_dq2_100 % 10) + 48));
  3153  000E60  D8CA               	call	PL54	;call to abstracted procedure
  3154  000E62  ECC5  F00B         	call	___lbmod
  3155  000E66  0F30               	addlw	48
  3156  000E68  EC82  F00C         	call	_lcd_putc
  3157                           
  3158                           ;main.c: 590: lcd_putc('.');
  3159  000E6C  0E2E               	movlw	46
  3160  000E6E  EC82  F00C         	call	_lcd_putc
  3161                           
  3162                           ;main.c: 591: lcd_putc((set_t_dq2_10 % 10) + 48);
  3163  000E72  D8D6               	call	PL68	;call to abstracted procedure
  3164  000E74  ECC5  F00B         	call	___lbmod
  3165  000E78  0F30               	addlw	48
  3166  000E7A  EC82  F00C         	call	_lcd_putc
  3167                           
  3168                           ;main.c: 592: lcd_putc(' ');
  3169  000E7E  0E20               	movlw	32
  3170  000E80  EC82  F00C         	call	_lcd_putc
  3171                           
  3172                           ;main.c: 594: if (pressed_key == 1) {
  3173  000E84  0435               	decf	_pressed_key^0,w,c
  3174  000E86  E105               	bnz	l3494
  3175                           
  3176                           ;main.c: 595: set_t_dq2_10++;
  3177  000E88  2A30               	incf	_set_t_dq2_10^0,f,c
  3178                           
  3179                           ;main.c: 596: if (set_t_dq2_10 == 10)
  3180  000E8A  0E0A               	movlw	10
  3181  000E8C  1830               	xorwf	_set_t_dq2_10^0,w,c
  3182  000E8E  E101               	bnz	l3494
  3183                           
  3184                           ;main.c: 597: set_t_dq2_10 = 0;
  3185  000E90  6A30               	clrf	_set_t_dq2_10^0,c
  3186  000E92                     l3494:
  3187                           
  3188                           ;main.c: 598: };main.c: 599: if (pressed_key == 2) {
  3189  000E92  0E02               	movlw	2
  3190  000E94  1835               	xorwf	_pressed_key^0,w,c
  3191  000E96  E105               	bnz	l3502
  3192                           
  3193                           ;main.c: 600: set_t_dq2_10--;
  3194  000E98  0630               	decf	_set_t_dq2_10^0,f,c
  3195                           
  3196                           ;main.c: 601: if (set_t_dq2_10 == 255)
  3197  000E9A  2830               	incf	_set_t_dq2_10^0,w,c
  3198  000E9C  E102               	bnz	l3502
  3199                           
  3200                           ;main.c: 602: set_t_dq2_10 = 9;
  3201  000E9E  0E09               	movlw	9
  3202  000EA0  6E30               	movwf	_set_t_dq2_10^0,c
  3203  000EA2                     l3502:
  3204                           
  3205                           ;main.c: 603: };main.c: 604: if (pressed_key == 3) {
  3206  000EA2  0E03               	movlw	3
  3207  000EA4  1835               	xorwf	_pressed_key^0,w,c
  3208  000EA6  E002 EFB2  F000    	bnz	l3072
  3209                           
  3210                           ;main.c: 605: select = 1;
  3211  000EAC  0E01               	movlw	1
  3212  000EAE  6E63               	movwf	_select^0,c
  3213                           
  3214                           ;main.c: 606: set_t_dq2 = (set_t_dq2_100 * 10) + set_t_dq2_10;
  3215  000EB0  5031               	movf	_set_t_dq2_100^0,w,c
  3216  000EB2  0D0A               	mullw	10
  3217  000EB4  CFF3 F056          	movff	prodl,??_main
  3218  000EB8  CFF4 F057          	movff	prodh,??_main+1
  3219  000EBC  5030               	movf	_set_t_dq2_10^0,w,c
  3220  000EBE  2456               	addwf	??_main^0,w,c
  3221  000EC0  6E29               	movwf	_set_t_dq2^0,c
  3222  000EC2  0E00               	movlw	0
  3223  000EC4  2057               	addwfc	(??_main+1)^0,w,c
  3224  000EC6  6E2A               	movwf	(_set_t_dq2+1)^0,c
  3225                           
  3226                           ;main.c: 607: write_eep(18, ((unsigned char)(((set_t_dq2)>>8)&0xFF)));
  3227  000EC8  C02A  F045         	movff	_set_t_dq2+1,write_eep@data
  3228  000ECC  0E12               	movlw	18
  3229  000ECE  ECD8  F00B         	call	_write_eep
  3230                           
  3231                           ;main.c: 608: write_eep(19, ((unsigned char)((set_t_dq2)&0xFF)));
  3232  000ED2  C029  F045         	movff	_set_t_dq2,write_eep@data
  3233  000ED6  0E13               	movlw	19
  3234  000ED8  ECD8  F00B         	call	_write_eep
  3235  000EDC  D5E8               	goto	l3260
  3236  000EDE                     l3516:
  3237  000EDE  5034               	movf	_sub_sel^0,w,c
  3238                           
  3239                           ; Switch size 1, requested type "space"
  3240                           ; Number of cases is 2, Range of values is 1 to 2
  3241                           ; switch strategies available:
  3242                           ; Name         Instructions Cycles
  3243                           ; simple_byte            7     4 (average)
  3244                           ;	Chosen strategy is simple_byte
  3245  000EE0  0A01               	xorlw	1	; case 1
  3246  000EE2  E101 D763          	bz	l3458
  3247  000EE6  0A03               	xorlw	3	; case 2
  3248  000EE8  E0A5               	bz	l3484
  3249  000EEA  EFB2  F000         	goto	l3072
  3250  000EEE                     l3520:
  3251  000EEE  5063               	movf	_select^0,w,c
  3252                           
  3253                           ; Switch size 1, requested type "space"
  3254                           ; Number of cases is 8, Range of values is 1 to 8
  3255                           ; switch strategies available:
  3256                           ; Name         Instructions Cycles
  3257                           ; simple_byte           25    13 (average)
  3258                           ;	Chosen strategy is simple_byte
  3259  000EF0  0A01               	xorlw	1	; case 1
  3260  000EF2  E102 EFBC  F000    	bz	l3080
  3261  000EF8  0A03               	xorlw	3	; case 2
  3262  000EFA  E101 D5DD          	bz	l3262
  3263  000EFE  0A01               	xorlw	1	; case 3
  3264  000F00  E102 EFB2  F000    	bz	l3072
  3265  000F06  0A07               	xorlw	7	; case 4
  3266  000F08  E101 D677          	bz	l3352
  3267  000F0C  0A01               	xorlw	1	; case 5
  3268  000F0E  E101 D746          	bz	l3456
  3269  000F12  0A03               	xorlw	3	; case 6
  3270  000F14  E0E4               	bz	l3516
  3271  000F16  0A01               	xorlw	1	; case 7
  3272  000F18  E101 D5FC          	bz	l3290
  3273  000F1C  0A0F               	xorlw	15	; case 8
  3274  000F1E  E101 D635          	bz	l3320
  3275  000F22  EFB2  F000         	goto	l3072
  3276  000F26                     __end_of_main:
  3277                           	callstack 0
  3278  000F26                     PL2:
  3279                           	callstack 24
  3280  000F26  C045  F04C         	movff	?___lwdiv,___lwmod@dividend
  3281  000F2A  C046  F04D         	movff	?___lwdiv+1,___lwmod@dividend+1
  3282  000F2E  6A4F               	clrf	(___lwmod@divisor+1)^0,c
  3283  000F30  0E0A               	movlw	10
  3284  000F32  6E4E               	movwf	___lwmod@divisor^0,c
  3285  000F34  0C0A               	retlw	10
  3286  000F36                     __end_ofPL2:
  3287                           	callstack 0
  3288  000F36                     PL4:
  3289                           	callstack 24
  3290  000F36  6E47               	movwf	___lwdiv@divisor^0,c
  3291  000F38  C05D  F045         	movff	_temperature_2,___lwdiv@dividend
  3292  000F3C  C05E  F046         	movff	_temperature_2+1,___lwdiv@dividend+1
  3293  000F40  0012               	return	
  3294  000F42                     __end_ofPL4:
  3295                           	callstack 0
  3296  000F42                     PL6:
  3297                           	callstack 24
  3298  000F42  6E47               	movwf	___lwdiv@divisor^0,c
  3299  000F44  C05F  F045         	movff	_temperature_1,___lwdiv@dividend
  3300  000F48  C060  F046         	movff	_temperature_1+1,___lwdiv@dividend+1
  3301  000F4C  0012               	return	
  3302  000F4E                     __end_ofPL6:
  3303                           	callstack 0
  3304  000F4E                     PL8:
  3305                           	callstack 24
  3306  000F4E  6A4F               	clrf	(___lwmod@divisor+1)^0,c
  3307  000F50  0E0A               	movlw	10
  3308  000F52  6E4E               	movwf	___lwmod@divisor^0,c
  3309  000F54  0C0A               	retlw	10
  3310  000F56                     __end_ofPL8:
  3311                           	callstack 0
  3312  000F56                     PL10:
  3313                           	callstack 24
  3314  000F56  6E47               	movwf	___lwdiv@divisor^0,c
  3315  000F58  C029  F045         	movff	_set_t_dq2,___lwdiv@dividend
  3316  000F5C  C02A  F046         	movff	_set_t_dq2+1,___lwdiv@dividend+1
  3317  000F60  0012               	return	
  3318  000F62                     __end_ofPL10:
  3319                           	callstack 0
  3320  000F62                     PL12:
  3321                           	callstack 24
  3322  000F62  C029  F04C         	movff	_set_t_dq2,___lwmod@dividend
  3323  000F66  C02A  F04D         	movff	_set_t_dq2+1,___lwmod@dividend+1
  3324  000F6A  0012               	return	
  3325  000F6C                     __end_ofPL12:
  3326                           	callstack 0
  3327  000F6C                     PL14:
  3328                           	callstack 24
  3329  000F6C  C05F  F04C         	movff	_temperature_1,___lwmod@dividend
  3330  000F70  C060  F04D         	movff	_temperature_1+1,___lwmod@dividend+1
  3331  000F74  0012               	return	
  3332  000F76                     __end_ofPL14:
  3333                           	callstack 0
  3334  000F76                     PL16:
  3335                           	callstack 24
  3336  000F76  C05D  F04C         	movff	_temperature_2,___lwmod@dividend
  3337  000F7A  C05E  F04D         	movff	_temperature_2+1,___lwmod@dividend+1
  3338  000F7E  0012               	return	
  3339  000F80                     __end_ofPL16:
  3340                           	callstack 0
  3341  000F80                     PL18:
  3342                           	callstack 24
  3343  000F80  0E03               	movlw	3
  3344  000F82  6E48               	movwf	(___lwdiv@divisor+1)^0,c
  3345  000F84  0CE8               	retlw	232
  3346  000F86                     __end_ofPL18:
  3347                           	callstack 0
  3348  000F86                     PL22:
  3349                           	callstack 24
  3350  000F86  0E02               	movlw	2
  3351  000F88  6E49               	movwf	lcd_gotoxy@y^0,c
  3352  000F8A  0C01               	retlw	1
  3353  000F8C                     __end_ofPL22:
  3354                           	callstack 0
  3355  000F8C                     PL28:
  3356                           	callstack 24
  3357  000F8C  6E47               	movwf	___lwdiv@divisor^0,c
  3358  000F8E  C027  F045         	movff	_temp1_fix,___lwdiv@dividend
  3359  000F92  C028  F046         	movff	_temp1_fix+1,___lwdiv@dividend+1
  3360  000F96  0012               	return	
  3361  000F98                     __end_ofPL28:
  3362                           	callstack 0
  3363  000F98                     PL30:
  3364                           	callstack 24
  3365  000F98  0E0A               	movlw	10
  3366  000F9A  6E49               	movwf	___lbmod@divisor^0,c
  3367  000F9C  0E64               	movlw	100
  3368  000F9E  6E45               	movwf	___lbdiv@divisor^0,c
  3369  000FA0  5031               	movf	_set_t_dq2_100^0,w,c
  3370  000FA2  0012               	return	
  3371  000FA4                     __end_ofPL30:
  3372                           	callstack 0
  3373  000FA4                     PL32:
  3374                           	callstack 24
  3375  000FA4  6E63               	movwf	_select^0,c
  3376  000FA6  0E01               	movlw	1
  3377  000FA8  6E49               	movwf	lcd_gotoxy@y^0,c
  3378  000FAA  0C01               	retlw	1
  3379  000FAC                     __end_ofPL32:
  3380                           	callstack 0
  3381  000FAC                     PL34:
  3382                           	callstack 24
  3383  000FAC  0EF6               	movlw	low STR_8
  3384  000FAE  6E46               	movwf	EUSART_Write_Str@t^0,c
  3385  000FB0  0E1F               	movlw	high STR_8
  3386  000FB2  6E47               	movwf	(EUSART_Write_Str@t+1)^0,c
  3387  000FB4  0012               	return	
  3388  000FB6                     __end_ofPL34:
  3389                           	callstack 0
  3390  000FB6                     PL36:
  3391                           	callstack 24
  3392  000FB6  0E02               	movlw	2
  3393  000FB8  6E34               	movwf	_sub_sel^0,c
  3394  000FBA  6E49               	movwf	lcd_gotoxy@y^0,c
  3395  000FBC  0C01               	retlw	1
  3396  000FBE                     __end_ofPL36:
  3397                           	callstack 0
  3398  000FBE                     PL40:
  3399                           	callstack 24
  3400  000FBE  0E0A               	movlw	10
  3401  000FC0  6E49               	movwf	___lbmod@divisor^0,c
  3402  000FC2  6E45               	movwf	___lbdiv@divisor^0,c
  3403  000FC4  5033               	movf	_set_t_dq1_up^0,w,c
  3404  000FC6  0012               	return	
  3405  000FC8                     __end_ofPL40:
  3406                           	callstack 0
  3407  000FC8                     PL42:
  3408                           	callstack 24
  3409  000FC8  0E0A               	movlw	10
  3410  000FCA  6E49               	movwf	___lbmod@divisor^0,c
  3411  000FCC  6E45               	movwf	___lbdiv@divisor^0,c
  3412  000FCE  5031               	movf	_set_t_dq2_100^0,w,c
  3413  000FD0  0012               	return	
  3414  000FD2                     __end_ofPL42:
  3415                           	callstack 0
  3416  000FD2                     PL44:
  3417                           	callstack 24
  3418  000FD2  0E0A               	movlw	10
  3419  000FD4  6E49               	movwf	___lbmod@divisor^0,c
  3420  000FD6  6E45               	movwf	___lbdiv@divisor^0,c
  3421  000FD8  5032               	movf	_set_t_dq1_dwn^0,w,c
  3422  000FDA  0012               	return	
  3423  000FDC                     __end_ofPL44:
  3424                           	callstack 0
  3425  000FDC                     PL48:
  3426                           	callstack 24
  3427  000FDC  0EFA               	movlw	low STR_5
  3428  000FDE  6E46               	movwf	EUSART_Write_Str@t^0,c
  3429  000FE0  0E1F               	movlw	high STR_5
  3430  000FE2  6E47               	movwf	(EUSART_Write_Str@t+1)^0,c
  3431  000FE4  0012               	return	
  3432  000FE6                     __end_ofPL48:
  3433                           	callstack 0
  3434  000FE6                     PL50:
  3435                           	callstack 24
  3436  000FE6  0E0A               	movlw	10
  3437  000FE8  6E49               	movwf	___lbmod@divisor^0,c
  3438  000FEA  5033               	movf	_set_t_dq1_up^0,w,c
  3439  000FEC  0012               	return	
  3440  000FEE                     __end_ofPL50:
  3441                           	callstack 0
  3442  000FEE                     PL52:
  3443                           	callstack 24
  3444  000FEE  6E63               	movwf	_select^0,c
  3445  000FF0  0E01               	movlw	1
  3446  000FF2  6E34               	movwf	_sub_sel^0,c
  3447  000FF4  0C01               	retlw	1
  3448  000FF6                     __end_ofPL52:
  3449                           	callstack 0
  3450  000FF6                     PL54:
  3451                           	callstack 24
  3452  000FF6  0E0A               	movlw	10
  3453  000FF8  6E49               	movwf	___lbmod@divisor^0,c
  3454  000FFA  5031               	movf	_set_t_dq2_100^0,w,c
  3455  000FFC  0012               	return	
  3456  000FFE                     __end_ofPL54:
  3457                           	callstack 0
  3458  000FFE                     PL56:
  3459                           	callstack 26
  3460  000FFE  6A46               	clrf	(Delay_ms@delay+1)^0,c
  3461  001000  0E0A               	movlw	10
  3462  001002  6E45               	movwf	Delay_ms@delay^0,c
  3463  001004  0C0A               	retlw	10
  3464  001006                     __end_ofPL56:
  3465                           	callstack 0
  3466  001006                     PL60:
  3467                           	callstack 24
  3468  001006  0E0A               	movlw	10
  3469  001008  6E49               	movwf	___lbmod@divisor^0,c
  3470  00100A  5032               	movf	_set_t_dq1_dwn^0,w,c
  3471  00100C  0012               	return	
  3472  00100E                     __end_ofPL60:
  3473                           	callstack 0
  3474  00100E                     PL62:
  3475                           	callstack 24
  3476  00100E  0E01               	movlw	1
  3477  001010  6E49               	movwf	lcd_gotoxy@y^0,c
  3478  001012  0C10               	retlw	16
  3479  001014                     __end_ofPL62:
  3480                           	callstack 0
  3481  001014                     PL64:
  3482                           	callstack 24
  3483  001014  0E02               	movlw	2
  3484  001016  6E49               	movwf	lcd_gotoxy@y^0,c
  3485  001018  0C0A               	retlw	10
  3486  00101A                     __end_ofPL64:
  3487                           	callstack 0
  3488  00101A                     PL66:
  3489                           	callstack 24
  3490  00101A  0E02               	movlw	2
  3491  00101C  6E49               	movwf	lcd_gotoxy@y^0,c
  3492  00101E  0C0B               	retlw	11
  3493  001020                     __end_ofPL66:
  3494                           	callstack 0
  3495  001020                     PL68:
  3496                           	callstack 24
  3497  001020  0E0A               	movlw	10
  3498  001022  6E49               	movwf	___lbmod@divisor^0,c
  3499  001024  5030               	movf	_set_t_dq2_10^0,w,c
  3500  001026  0012               	return	
  3501  001028                     __end_ofPL68:
  3502                           	callstack 0
  3503                           
  3504 ;; *************** function _lcd_putc *****************
  3505 ;; Defined at:
  3506 ;;		line 90 in file "hd44780.c"
  3507 ;; Parameters:    Size  Location     Type
  3508 ;;  c               1    wreg     unsigned char 
  3509 ;; Auto vars:     Size  Location     Type
  3510 ;;  c               1    7[COMRAM] unsigned char 
  3511 ;; Return value:  Size  Location     Type
  3512 ;;                  1    wreg      void 
  3513 ;; Registers used:
  3514 ;;		wreg, status,2, status,0, cstack
  3515 ;; Tracked objects:
  3516 ;;		On entry : 0/0
  3517 ;;		On exit  : 0/0
  3518 ;;		Unchanged: 0/0
  3519 ;; Data sizes:     COMRAM   BANK0   BANK1
  3520 ;;      Params:         0       0       0
  3521 ;;      Locals:         1       0       0
  3522 ;;      Temps:          0       0       0
  3523 ;;      Totals:         1       0       0
  3524 ;;Total ram usage:        1 bytes
  3525 ;; Hardware stack levels used:    1
  3526 ;; Hardware stack levels required when called:    4
  3527 ;; This function calls:
  3528 ;;		_lcdWrite
  3529 ;; This function is called by:
  3530 ;;		_main
  3531 ;; This function uses a non-reentrant model
  3532 ;;
  3533                           
  3534                           	psect	text1
  3535  001904                     __ptext1:
  3536                           	callstack 0
  3537  001904                     _lcd_putc:
  3538                           	callstack 26
  3539                           
  3540                           ;incstack = 0
  3541                           ;lcd_putc@c stored from wreg
  3542  001904  6E49               	movwf	lcd_putc@c^0,c
  3543                           
  3544                           ;hd44780.c: 92: lcdWrite(c, DATA);
  3545  001906  0E01               	movlw	1
  3546  001908  6E47               	movwf	lcdWrite@type^0,c
  3547  00190A  5049               	movf	lcd_putc@c^0,w,c
  3548  00190C  EFFC  F00B         	goto	_lcdWrite
  3549  001910                     __end_of_lcd_putc:
  3550                           	callstack 0
  3551                           
  3552 ;; *************** function _lcdPrint *****************
  3553 ;; Defined at:
  3554 ;;		line 96 in file "hd44780.c"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;  t               2   10[COMRAM] PTR const unsigned char 
  3557 ;;		 -> STR_26(16), STR_25(15), STR_24(11), STR_23(13), 
  3558 ;;		 -> STR_22(11), STR_21(13), STR_20(15), STR_19(15), 
  3559 ;;		 -> STR_18(14), STR_17(16), STR_16(16), STR_15(16), 
  3560 ;;		 -> STR_14(7), STR_13(8), STR_12(8), STR_4(13), 
  3561 ;;		 -> STR_3(16), STR_2(16), STR_1(16), 
  3562 ;; Auto vars:     Size  Location     Type
  3563 ;;		None
  3564 ;; Return value:  Size  Location     Type
  3565 ;;                  1    wreg      void 
  3566 ;; Registers used:
  3567 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3568 ;; Tracked objects:
  3569 ;;		On entry : 0/0
  3570 ;;		On exit  : 0/0
  3571 ;;		Unchanged: 0/0
  3572 ;; Data sizes:     COMRAM   BANK0   BANK1
  3573 ;;      Params:         2       0       0
  3574 ;;      Locals:         0       0       0
  3575 ;;      Temps:          4       0       0
  3576 ;;      Totals:         6       0       0
  3577 ;;Total ram usage:        6 bytes
  3578 ;; Hardware stack levels used:    1
  3579 ;; Hardware stack levels required when called:    5
  3580 ;; This function calls:
  3581 ;;		_lcdWrite
  3582 ;;		_lcd_gotoxy
  3583 ;; This function is called by:
  3584 ;;		_main
  3585 ;; This function uses a non-reentrant model
  3586 ;;
  3587                           
  3588                           	psect	text2
  3589  0011FC                     __ptext2:
  3590                           	callstack 0
  3591  0011FC                     _lcdPrint:
  3592                           	callstack 25
  3593                           
  3594                           ;hd44780.c: 97: while(*t != '\0'){
  3595                           
  3596                           ;incstack = 0
  3597  0011FC  D046               	goto	l2790
  3598  0011FE                     l2770:
  3599                           
  3600                           ;hd44780.c: 100: lcdWrite(1, COMMAND);
  3601  0011FE  D84F               	call	PL58	;call to abstracted procedure
  3602  001200  ECFC  F00B         	call	_lcdWrite
  3603                           
  3604                           ;hd44780.c: 101: _delay((unsigned long)((2)*(8000000/4000.0)));
  3605  001204  0E06               	movlw	6
  3606  001206  6E4E               	movwf	??_lcdPrint^0,c
  3607  001208  0E30               	movlw	48
  3608  00120A                     u2847:
  3609  00120A  2EE8               	decfsz	wreg,f,c
  3610  00120C  D7FE               	bra	u2847
  3611  00120E  2E4E               	decfsz	??_lcdPrint^0,f,c
  3612  001210  D7FC               	bra	u2847
  3613  001212  D000               	nop2	
  3614                           
  3615                           ;hd44780.c: 102: break;
  3616  001214  D038               	goto	l2788
  3617  001216                     l2774:
  3618                           
  3619                           ;hd44780.c: 105: lcd_gotoxy(1, 2);
  3620  001216  ECC3  F007         	call	PL22	;call to abstracted procedure
  3621  00121A  EC3E  F00C         	call	_lcd_gotoxy
  3622                           
  3623                           ;hd44780.c: 106: break;
  3624  00121E  D033               	goto	l2788
  3625  001220                     l2776:
  3626                           
  3627                           ;hd44780.c: 109: lcdWrite(0x10, COMMAND);
  3628  001220  0E00               	movlw	0
  3629  001222  6E47               	movwf	lcdWrite@type^0,c
  3630  001224  0E10               	movlw	16
  3631  001226  ECFC  F00B         	call	_lcdWrite
  3632                           
  3633                           ;hd44780.c: 110: break;
  3634  00122A  D02D               	goto	l2788
  3635  00122C                     l2778:
  3636                           
  3637                           ;hd44780.c: 113: if (*t < 0xC0) {
  3638  00122C  C04C  FFF6         	movff	lcdPrint@t,tblptrl
  3639  001230  C04D  FFF7         	movff	lcdPrint@t+1,tblptrh
  3640  001234                     	if	0	;tblptru may be non-zero
  3641  001234                     	endif
  3642  001234                     	if	0	;tblptru may be non-zero
  3643  001234                     	endif
  3644  001234  0EC0               	movlw	192
  3645  001236  0008               	tblrd		*
  3646  001238  60F5               	cpfslt	tablat,c
  3647  00123A  D006               	goto	l2782
  3648                           
  3649                           ;hd44780.c: 114: lcdWrite(*t, DATA);
  3650  00123C  0E01               	movlw	1
  3651  00123E  6E47               	movwf	lcdWrite@type^0,c
  3652  001240  D827               	call	PL20	;call to abstracted procedure
  3653  001242  ECFC  F00B         	call	_lcdWrite
  3654                           
  3655                           ;hd44780.c: 115: } else {
  3656  001246  D01F               	goto	l2788
  3657  001248                     l2782:
  3658                           
  3659                           ;hd44780.c: 116: lcdWrite(HD44780_CYR[(unsigned char) (*t) - 0xC0], DATA);
  3660  001248  0E01               	movlw	1
  3661  00124A  6E47               	movwf	lcdWrite@type^0,c
  3662  00124C  0E40               	movlw	64
  3663  00124E  6E4E               	movwf	??_lcdPrint^0,c
  3664  001250  684F               	setf	(??_lcdPrint+1)^0,c
  3665  001252  D81E               	call	PL20	;call to abstracted procedure
  3666  001254  6E50               	movwf	(??_lcdPrint+2)^0,c
  3667  001256  6A51               	clrf	(??_lcdPrint+3)^0,c
  3668  001258  504E               	movf	??_lcdPrint^0,w,c
  3669  00125A  2650               	addwf	(??_lcdPrint+2)^0,f,c
  3670  00125C  504F               	movf	(??_lcdPrint+1)^0,w,c
  3671  00125E  2251               	addwfc	(??_lcdPrint+3)^0,f,c
  3672  001260  0E93               	movlw	low _HD44780_CYR
  3673  001262  2450               	addwf	(??_lcdPrint+2)^0,w,c
  3674  001264  6EF6               	movwf	tblptrl,c
  3675  001266  0E1E               	movlw	high _HD44780_CYR
  3676  001268  2051               	addwfc	(??_lcdPrint+3)^0,w,c
  3677  00126A  6EF7               	movwf	tblptrh,c
  3678  00126C                     	if	0	;There are less than 3 active tblptr bytes
  3679  00126C                     	endif
  3680  00126C  0008               	tblrd		*
  3681  00126E  50F5               	movf	tablat,w,c
  3682  001270  ECFC  F00B         	call	_lcdWrite
  3683  001274  D008               	goto	l2788
  3684  001276                     l2786:
  3685  001276  D80C               	call	PL20	;call to abstracted procedure
  3686                           
  3687                           ; Switch size 1, requested type "space"
  3688                           ; Number of cases is 3, Range of values is 8 to 12
  3689                           ; switch strategies available:
  3690                           ; Name         Instructions Cycles
  3691                           ; simple_byte           10     6 (average)
  3692                           ;	Chosen strategy is simple_byte
  3693  001278  0A08               	xorlw	8	; case 8
  3694  00127A  E0D2               	bz	l2776
  3695  00127C  0A02               	xorlw	2	; case 10
  3696  00127E  E0CB               	bz	l2774
  3697  001280  0A06               	xorlw	6	; case 12
  3698  001282  E0BD               	bz	l2770
  3699  001284  D7D3               	goto	l2778
  3700  001286                     l2788:
  3701                           
  3702                           ;hd44780.c: 121: *t++;
  3703  001286  4A4C               	infsnz	lcdPrint@t^0,f,c
  3704  001288  2A4D               	incf	(lcdPrint@t+1)^0,f,c
  3705  00128A                     l2790:
  3706  00128A  D802               	call	PL20	;call to abstracted procedure
  3707  00128C  E1F4               	bnz	l2786
  3708  00128E  0012               	return		;funcret
  3709  001290                     __end_of_lcdPrint:
  3710                           	callstack 0
  3711  001290                     PL20:
  3712                           	callstack 25
  3713  001290  C04C  FFF6         	movff	lcdPrint@t,tblptrl
  3714  001294  C04D  FFF7         	movff	lcdPrint@t+1,tblptrh
  3715  001298                     	if	0	;tblptru may be non-zero
  3716  001298                     	endif
  3717  001298                     	if	0	;tblptru may be non-zero
  3718  001298                     	endif
  3719  001298  0008               	tblrd		*
  3720  00129A  50F5               	movf	tablat,w,c
  3721  00129C  0012               	return	
  3722  00129E                     __end_ofPL20:
  3723                           	callstack 0
  3724  00129E                     PL58:
  3725                           	callstack 26
  3726  00129E  0E00               	movlw	0
  3727  0012A0  6E47               	movwf	lcdWrite@type^0,c
  3728  0012A2  0C01               	retlw	1
  3729  0012A4                     __end_ofPL58:
  3730                           	callstack 0
  3731                           
  3732 ;; *************** function _lcd_gotoxy *****************
  3733 ;; Defined at:
  3734 ;;		line 76 in file "hd44780.c"
  3735 ;; Parameters:    Size  Location     Type
  3736 ;;  x               1    wreg     unsigned char 
  3737 ;;  y               1    7[COMRAM] unsigned char 
  3738 ;; Auto vars:     Size  Location     Type
  3739 ;;  x               1    8[COMRAM] unsigned char 
  3740 ;;  address         1    9[COMRAM] unsigned char 
  3741 ;; Return value:  Size  Location     Type
  3742 ;;                  1    wreg      void 
  3743 ;; Registers used:
  3744 ;;		wreg, status,2, status,0, cstack
  3745 ;; Tracked objects:
  3746 ;;		On entry : 0/0
  3747 ;;		On exit  : 0/0
  3748 ;;		Unchanged: 0/0
  3749 ;; Data sizes:     COMRAM   BANK0   BANK1
  3750 ;;      Params:         1       0       0
  3751 ;;      Locals:         2       0       0
  3752 ;;      Temps:          0       0       0
  3753 ;;      Totals:         3       0       0
  3754 ;;Total ram usage:        3 bytes
  3755 ;; Hardware stack levels used:    1
  3756 ;; Hardware stack levels required when called:    4
  3757 ;; This function calls:
  3758 ;;		_lcdWrite
  3759 ;; This function is called by:
  3760 ;;		_main
  3761 ;;		_lcdPrint
  3762 ;; This function uses a non-reentrant model
  3763 ;;
  3764                           
  3765                           	psect	text3
  3766  00187C                     __ptext3:
  3767                           	callstack 0
  3768  00187C                     _lcd_gotoxy:
  3769                           	callstack 26
  3770                           
  3771                           ;incstack = 0
  3772                           ;lcd_gotoxy@x stored from wreg
  3773  00187C  6E4A               	movwf	lcd_gotoxy@x^0,c
  3774                           
  3775                           ;hd44780.c: 77: uint8_t address;;hd44780.c: 79: if (y != 1)
  3776  00187E  0449               	decf	lcd_gotoxy@y^0,w,c
  3777  001880  E003               	bz	l458
  3778                           
  3779                           ;hd44780.c: 80: address = 0x40;
  3780  001882  0E40               	movlw	64
  3781  001884  6E4B               	movwf	lcd_gotoxy@address^0,c
  3782  001886  D001               	goto	l2570
  3783  001888                     l458:
  3784                           
  3785                           ;hd44780.c: 81: else;hd44780.c: 82: address = 0;
  3786  001888  6A4B               	clrf	lcd_gotoxy@address^0,c
  3787  00188A                     l2570:
  3788                           
  3789                           ;hd44780.c: 84: address += x - 1;
  3790  00188A  044A               	decf	lcd_gotoxy@x^0,w,c
  3791  00188C  264B               	addwf	lcd_gotoxy@address^0,f,c
  3792                           
  3793                           ;hd44780.c: 85: lcdWrite(0x80 | address, COMMAND);
  3794  00188E  6A47               	clrf	lcdWrite@type^0,c
  3795  001890  504B               	movf	lcd_gotoxy@address^0,w,c
  3796  001892  0980               	iorlw	128
  3797  001894  EFFC  F00B         	goto	_lcdWrite
  3798  001898                     __end_of_lcd_gotoxy:
  3799                           	callstack 0
  3800                           
  3801 ;; *************** function _key_press *****************
  3802 ;; Defined at:
  3803 ;;		line 5 in file "key.c"
  3804 ;; Parameters:    Size  Location     Type
  3805 ;;		None
  3806 ;; Auto vars:     Size  Location     Type
  3807 ;;  key             1    3[COMRAM] unsigned char 
  3808 ;; Return value:  Size  Location     Type
  3809 ;;                  1    wreg      void 
  3810 ;; Registers used:
  3811 ;;		wreg, status,2, status,0
  3812 ;; Tracked objects:
  3813 ;;		On entry : 0/0
  3814 ;;		On exit  : 0/0
  3815 ;;		Unchanged: 0/0
  3816 ;; Data sizes:     COMRAM   BANK0   BANK1
  3817 ;;      Params:         0       0       0
  3818 ;;      Locals:         1       0       0
  3819 ;;      Temps:          0       0       0
  3820 ;;      Totals:         1       0       0
  3821 ;;Total ram usage:        1 bytes
  3822 ;; Hardware stack levels used:    1
  3823 ;; Hardware stack levels required when called:    2
  3824 ;; This function calls:
  3825 ;;		Nothing
  3826 ;; This function is called by:
  3827 ;;		_main
  3828 ;; This function uses a non-reentrant model
  3829 ;;
  3830                           
  3831                           	psect	text4
  3832  0014FA                     __ptext4:
  3833                           	callstack 0
  3834  0014FA                     _key_press:
  3835                           	callstack 28
  3836                           
  3837                           ;key.c: 7: static uint16_t count = 0;;key.c: 8: uint8_t key;;key.c: 9: if (((PORTB & (1 
      +                          << 1)) == 0) && ((PORTB & (1 << 2)) == 0))
  3838                           
  3839                           ;incstack = 0
  3840  0014FA  A281               	btfss	129,1,c	;volatile
  3841  0014FC  B481               	btfsc	129,2,c	;volatile
  3842  0014FE  D002               	goto	l551
  3843                           
  3844                           ;key.c: 10: key = 3;
  3845  001500  0E03               	movlw	3
  3846  001502  D007               	goto	L5
  3847  001504                     l551:
  3848                           
  3849                           ;key.c: 11: else if ((PORTB & (1 << 1)) == 0)
  3850  001504  B281               	btfsc	129,1,c	;volatile
  3851  001506  D002               	goto	l553
  3852                           
  3853                           ;key.c: 12: key = 1;
  3854  001508  0E01               	movlw	1
  3855  00150A  D003               	goto	L5
  3856  00150C                     l553:
  3857                           
  3858                           ;key.c: 13: else if ((PORTB & (1 << 2)) == 0)
  3859  00150C  B481               	btfsc	129,2,c	;volatile
  3860  00150E  D003               	goto	l555
  3861                           
  3862                           ;key.c: 14: key = 2;
  3863  001510  0E02               	movlw	2
  3864  001512                     L5:
  3865  001512  6E45               	movwf	key_press@key^0,c
  3866  001514  D001               	goto	l1736
  3867  001516                     l555:
  3868                           
  3869                           ;key.c: 15: else;key.c: 16: key = 0;
  3870  001516  6A45               	clrf	key_press@key^0,c
  3871  001518                     l1736:
  3872                           
  3873                           ;key.c: 19: if (key) {
  3874  001518  5045               	movf	key_press@key^0,w,c
  3875  00151A  E013               	bz	l557
  3876                           
  3877                           ;key.c: 20: if (count > 300) {
  3878  00151C  0E2D               	movlw	45
  3879  00151E  5C25               	subwf	key_press@count^0,w,c
  3880  001520  0E01               	movlw	1
  3881  001522  5826               	subwfb	(key_press@count+1)^0,w,c
  3882  001524  E307               	bnc	l1748
  3883                           
  3884                           ;key.c: 21: count = 300 - 10;
  3885  001526  0E01               	movlw	1
  3886  001528  6E26               	movwf	(key_press@count+1)^0,c
  3887  00152A  0E22               	movlw	34
  3888  00152C  6E25               	movwf	key_press@count^0,c
  3889  00152E                     l1742:
  3890                           
  3891                           ;key.c: 22: key_pressed = key;
  3892  00152E  C045  F02E         	movff	key_press@key,_key_pressed	;volatile
  3893  001532  0012               	return	
  3894  001534                     l1748:
  3895  001534  4A25               	infsnz	key_press@count^0,f,c
  3896  001536  2A26               	incf	(key_press@count+1)^0,f,c
  3897                           
  3898                           ;key.c: 26: if (count == 15) {
  3899  001538  0E0F               	movlw	15
  3900  00153A  1825               	xorwf	key_press@count^0,w,c
  3901  00153C  1026               	iorwf	(key_press@count+1)^0,w,c
  3902  00153E  E0F7               	bz	l1742
  3903  001540  0012               	return	
  3904  001542                     l557:
  3905  001542  6A25               	clrf	key_press@count^0,c
  3906  001544  6A26               	clrf	(key_press@count+1)^0,c
  3907  001546  0012               	return		;funcret
  3908  001548                     __end_of_key_press:
  3909                           	callstack 0
  3910                           
  3911 ;; *************** function _key_GetKey *****************
  3912 ;; Defined at:
  3913 ;;		line 48 in file "key.c"
  3914 ;; Parameters:    Size  Location     Type
  3915 ;;		None
  3916 ;; Auto vars:     Size  Location     Type
  3917 ;;  key             1    3[COMRAM] unsigned char 
  3918 ;; Return value:  Size  Location     Type
  3919 ;;                  1    wreg      unsigned char 
  3920 ;; Registers used:
  3921 ;;		wreg, status,2
  3922 ;; Tracked objects:
  3923 ;;		On entry : 0/0
  3924 ;;		On exit  : 0/0
  3925 ;;		Unchanged: 0/0
  3926 ;; Data sizes:     COMRAM   BANK0   BANK1
  3927 ;;      Params:         0       0       0
  3928 ;;      Locals:         1       0       0
  3929 ;;      Temps:          0       0       0
  3930 ;;      Totals:         1       0       0
  3931 ;;Total ram usage:        1 bytes
  3932 ;; Hardware stack levels used:    1
  3933 ;; Hardware stack levels required when called:    2
  3934 ;; This function calls:
  3935 ;;		Nothing
  3936 ;; This function is called by:
  3937 ;;		_main
  3938 ;; This function uses a non-reentrant model
  3939 ;;
  3940                           
  3941                           	psect	text5
  3942  001910                     __ptext5:
  3943                           	callstack 0
  3944  001910                     _key_GetKey:
  3945                           	callstack 28
  3946                           
  3947                           ;key.c: 50: uint8_t key = key_pressed;
  3948                           
  3949                           ;incstack = 0
  3950  001910  C02E  F045         	movff	_key_pressed,key_GetKey@key	;volatile
  3951                           
  3952                           ;key.c: 52: key_pressed = 0;
  3953  001914  6A2E               	clrf	_key_pressed^0,c	;volatile
  3954                           
  3955                           ;key.c: 53: return key;
  3956  001916  5045               	movf	key_GetKey@key^0,w,c
  3957  001918  0012               	return		;funcret
  3958  00191A                     __end_of_key_GetKey:
  3959                           	callstack 0
  3960                           
  3961 ;; *************** function _ds18b20_readrom *****************
  3962 ;; Defined at:
  3963 ;;		line 172 in file "ds18b20.c"
  3964 ;; Parameters:    Size  Location     Type
  3965 ;;  num_dq          1    wreg     unsigned char 
  3966 ;; Auto vars:     Size  Location     Type
  3967 ;;  num_dq          1   18[COMRAM] unsigned char 
  3968 ;;  temp_rom        8   10[COMRAM] unsigned char [8]
  3969 ;;  i               1   19[COMRAM] unsigned char 
  3970 ;; Return value:  Size  Location     Type
  3971 ;;                  1    wreg      unsigned char 
  3972 ;; Registers used:
  3973 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3974 ;; Tracked objects:
  3975 ;;		On entry : 0/0
  3976 ;;		On exit  : 0/0
  3977 ;;		Unchanged: 0/0
  3978 ;; Data sizes:     COMRAM   BANK0   BANK1
  3979 ;;      Params:         0       0       0
  3980 ;;      Locals:        10       0       0
  3981 ;;      Temps:          0       0       0
  3982 ;;      Totals:        10       0       0
  3983 ;;Total ram usage:       10 bytes
  3984 ;; Hardware stack levels used:    1
  3985 ;; Hardware stack levels required when called:    4
  3986 ;; This function calls:
  3987 ;;		_Delay_ms
  3988 ;;		_ds18b20_crc8
  3989 ;;		_ow_reset
  3990 ;;		_read_byte
  3991 ;;		_write_byte
  3992 ;;		_write_eep
  3993 ;; This function is called by:
  3994 ;;		_main
  3995 ;; This function uses a non-reentrant model
  3996 ;;
  3997                           
  3998                           	psect	text6
  3999  001494                     __ptext6:
  4000                           	callstack 0
  4001  001494                     _ds18b20_readrom:
  4002                           	callstack 26
  4003                           
  4004                           ;incstack = 0
  4005                           ;ds18b20_readrom@num_dq stored from wreg
  4006  001494  6E54               	movwf	ds18b20_readrom@num_dq^0,c
  4007                           
  4008                           ;ds18b20.c: 173: uint8_t i;;ds18b20.c: 174: uint8_t temp_rom[8];;ds18b20.c: 176: if (!ow
      +                          _reset())
  4009  001496  EC95  F00B         	call	_ow_reset	;wreg free
  4010  00149A  0900               	iorlw	0
  4011  00149C  E10C               	bnz	u1860
  4012                           
  4013                           ;ds18b20.c: 177: {;ds18b20.c: 178: write_byte(0x33);
  4014  00149E  0E33               	movlw	51
  4015  0014A0  EC47  F00B         	call	_write_byte
  4016                           
  4017                           ;ds18b20.c: 179: for (i = 0; i < 8; i++) {
  4018  0014A4  6A55               	clrf	ds18b20_readrom@i^0,c
  4019  0014A6                     l2924:
  4020                           
  4021                           ;ds18b20.c: 180: temp_rom[i] = read_byte();
  4022  0014A6  D824               	call	PL46	;call to abstracted procedure
  4023  0014A8  EC2C  F00B         	call	_read_byte	;wreg free
  4024  0014AC  6EDF               	movwf	indf2,c
  4025  0014AE  2A55               	incf	ds18b20_readrom@i^0,f,c
  4026  0014B0  0E07               	movlw	7
  4027  0014B2  6455               	cpfsgt	ds18b20_readrom@i^0,c
  4028  0014B4  D7F8               	goto	l2924
  4029  0014B6                     u1860:
  4030                           
  4031                           ;ds18b20.c: 181: };ds18b20.c: 182: };ds18b20.c: 183: if (!(ds18b20_crc8(temp_rom, 8))) {
  4032  0014B6  0E4C               	movlw	low ds18b20_readrom@temp_rom
  4033  0014B8  6E45               	movwf	ds18b20_crc8@data_in^0,c
  4034  0014BA  0E08               	movlw	8
  4035  0014BC  6E46               	movwf	ds18b20_crc8@num_bytes^0,c
  4036  0014BE  ECA4  F00A         	call	_ds18b20_crc8	;wreg free
  4037  0014C2  0900               	iorlw	0
  4038  0014C4  E114               	bnz	l2950
  4039                           
  4040                           ;ds18b20.c: 184: for (i = 0; i < 8; i++) {
  4041  0014C6  6A55               	clrf	ds18b20_readrom@i^0,c
  4042  0014C8                     l2938:
  4043                           
  4044                           ;ds18b20.c: 185: write_eep(((num_dq - 1)*8) + i, temp_rom[i]);
  4045  0014C8  D813               	call	PL46	;call to abstracted procedure
  4046  0014CA  50DF               	movf	indf2,w,c
  4047  0014CC  6E45               	movwf	write_eep@data^0,c
  4048  0014CE  5054               	movf	ds18b20_readrom@num_dq^0,w,c
  4049  0014D0  0D08               	mullw	8
  4050  0014D2  50F3               	movf	243,w,c
  4051  0014D4  2455               	addwf	ds18b20_readrom@i^0,w,c
  4052  0014D6  0FF8               	addlw	248
  4053  0014D8  ECD8  F00B         	call	_write_eep
  4054  0014DC  2A55               	incf	ds18b20_readrom@i^0,f,c
  4055  0014DE  0E07               	movlw	7
  4056  0014E0  6455               	cpfsgt	ds18b20_readrom@i^0,c
  4057  0014E2  D7F2               	goto	l2938
  4058                           
  4059                           ;ds18b20.c: 186: };ds18b20.c: 187: Delay_ms(10);
  4060  0014E4  ECFF  F007         	call	PL56	;call to abstracted procedure
  4061  0014E8  ECEA  F00B         	call	_Delay_ms	;wreg free
  4062                           
  4063                           ;ds18b20.c: 188: return 1;
  4064  0014EC  0C01               	retlw	1
  4065  0014EE                     l2950:
  4066                           
  4067                           ;ds18b20.c: 189: };ds18b20.c: 190: return 0;
  4068  0014EE  0C00               	retlw	0	;funcret
  4069  0014F0                     __end_of_ds18b20_readrom:
  4070                           	callstack 0
  4071  0014F0                     PL46:
  4072                           	callstack 26
  4073  0014F0  5055               	movf	ds18b20_readrom@i^0,w,c
  4074  0014F2  0F4C               	addlw	low ds18b20_readrom@temp_rom
  4075  0014F4  6ED9               	movwf	fsr2l,c
  4076  0014F6  6ADA               	clrf	fsr2h,c
  4077  0014F8  0012               	return	
  4078  0014FA                     __end_ofPL46:
  4079                           	callstack 0
  4080                           
  4081 ;; *************** function _write_eep *****************
  4082 ;; Defined at:
  4083 ;;		line 5 in file "eeprom.c"
  4084 ;; Parameters:    Size  Location     Type
  4085 ;;  address         1    wreg     unsigned char 
  4086 ;;  data            1    3[COMRAM] unsigned char 
  4087 ;; Auto vars:     Size  Location     Type
  4088 ;;  address         1    4[COMRAM] unsigned char 
  4089 ;; Return value:  Size  Location     Type
  4090 ;;                  1    wreg      void 
  4091 ;; Registers used:
  4092 ;;		wreg, status,2
  4093 ;; Tracked objects:
  4094 ;;		On entry : 0/0
  4095 ;;		On exit  : 0/0
  4096 ;;		Unchanged: 0/0
  4097 ;; Data sizes:     COMRAM   BANK0   BANK1
  4098 ;;      Params:         1       0       0
  4099 ;;      Locals:         1       0       0
  4100 ;;      Temps:          0       0       0
  4101 ;;      Totals:         2       0       0
  4102 ;;Total ram usage:        2 bytes
  4103 ;; Hardware stack levels used:    1
  4104 ;; Hardware stack levels required when called:    2
  4105 ;; This function calls:
  4106 ;;		Nothing
  4107 ;; This function is called by:
  4108 ;;		_main
  4109 ;;		_ds18b20_readrom
  4110 ;; This function uses a non-reentrant model
  4111 ;;
  4112                           
  4113                           	psect	text7
  4114  0017B0                     __ptext7:
  4115                           	callstack 0
  4116  0017B0                     _write_eep:
  4117                           	callstack 28
  4118                           
  4119                           ;incstack = 0
  4120                           ;write_eep@address stored from wreg
  4121  0017B0  6E46               	movwf	write_eep@address^0,c
  4122  0017B2                     
  4123                           ;eeprom.c: 8: {}
  4124  0017B2  B2A6               	btfsc	166,1,c	;volsfr
  4125  0017B4  D7FE               	goto	l2580
  4126                           
  4127                           ;eeprom.c: 11: EEADR = address;
  4128  0017B6  C046  FFA9         	movff	write_eep@address,4009	;volatile
  4129                           
  4130                           ;eeprom.c: 12: EEDATA = data;
  4131  0017BA  C045  FFA8         	movff	write_eep@data,4008	;volatile
  4132                           
  4133                           ;eeprom.c: 13: EECON1bits.EEPGD = 0;
  4134  0017BE  9EA6               	bcf	166,7,c	;volsfr
  4135                           
  4136                           ;eeprom.c: 14: EECON1bits.CFGS = 0;
  4137  0017C0  9CA6               	bcf	166,6,c	;volsfr
  4138                           
  4139                           ;eeprom.c: 15: EECON1bits.WREN = 1;
  4140  0017C2  84A6               	bsf	166,2,c	;volsfr
  4141                           
  4142                           ;eeprom.c: 16: INTCONbits.GIE = 0;
  4143  0017C4  9EF2               	bcf	242,7,c	;volatile
  4144                           
  4145                           ;eeprom.c: 18: EECON2 = 0x55;
  4146  0017C6  0E55               	movlw	85
  4147  0017C8  6EA7               	movwf	167,c	;volsfr
  4148                           
  4149                           ;eeprom.c: 19: EECON2 = 0xAA;
  4150  0017CA  0EAA               	movlw	170
  4151  0017CC  6EA7               	movwf	167,c	;volsfr
  4152                           
  4153                           ;eeprom.c: 20: EECON1bits.WR = 1;
  4154  0017CE  82A6               	bsf	166,1,c	;volsfr
  4155                           
  4156                           ;eeprom.c: 22: INTCONbits.GIE = 1;
  4157  0017D0  8EF2               	bsf	242,7,c	;volatile
  4158  0017D2  0CAA               	retlw	170	;funcret
  4159  0017D4                     __end_of_write_eep:
  4160                           	callstack 0
  4161                           
  4162 ;; *************** function _Delay_ms *****************
  4163 ;; Defined at:
  4164 ;;		line 679 in file "main.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;  delay           2    3[COMRAM] unsigned int 
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;  i               2    6[COMRAM] unsigned int 
  4169 ;; Return value:  Size  Location     Type
  4170 ;;                  1    wreg      void 
  4171 ;; Registers used:
  4172 ;;		wreg, status,2, status,0
  4173 ;; Tracked objects:
  4174 ;;		On entry : 0/0
  4175 ;;		On exit  : 0/0
  4176 ;;		Unchanged: 0/0
  4177 ;; Data sizes:     COMRAM   BANK0   BANK1
  4178 ;;      Params:         2       0       0
  4179 ;;      Locals:         2       0       0
  4180 ;;      Temps:          1       0       0
  4181 ;;      Totals:         5       0       0
  4182 ;;Total ram usage:        5 bytes
  4183 ;; Hardware stack levels used:    1
  4184 ;; Hardware stack levels required when called:    2
  4185 ;; This function calls:
  4186 ;;		Nothing
  4187 ;; This function is called by:
  4188 ;;		_main
  4189 ;;		_ds18b20_readrom
  4190 ;; This function uses a non-reentrant model
  4191 ;;
  4192                           
  4193                           	psect	text8
  4194  0017D4                     __ptext8:
  4195                           	callstack 0
  4196  0017D4                     _Delay_ms:
  4197                           	callstack 27
  4198                           
  4199                           ;main.c: 680: for (uint16_t i = 0; i <= delay; i++)
  4200                           
  4201                           ;incstack = 0
  4202  0017D4  6A48               	clrf	Delay_ms@i^0,c
  4203  0017D6  6A49               	clrf	(Delay_ms@i+1)^0,c
  4204  0017D8  D009               	goto	l316
  4205  0017DA                     l2576:
  4206                           
  4207                           ;main.c: 681: _delay((unsigned long)((1)*(8000000/4000.0)));
  4208  0017DA  0E03               	movlw	3
  4209  0017DC  6E47               	movwf	??_Delay_ms^0,c
  4210  0017DE  0E98               	movlw	152
  4211  0017E0                     u2857:
  4212  0017E0  2EE8               	decfsz	wreg,f,c
  4213  0017E2  D7FE               	bra	u2857
  4214  0017E4  2E47               	decfsz	??_Delay_ms^0,f,c
  4215  0017E6  D7FC               	bra	u2857
  4216  0017E8  4A48               	infsnz	Delay_ms@i^0,f,c
  4217  0017EA  2A49               	incf	(Delay_ms@i+1)^0,f,c
  4218  0017EC                     l316:
  4219  0017EC  5048               	movf	Delay_ms@i^0,w,c
  4220  0017EE  5C45               	subwf	Delay_ms@delay^0,w,c
  4221  0017F0  5049               	movf	(Delay_ms@i+1)^0,w,c
  4222  0017F2  5846               	subwfb	(Delay_ms@delay+1)^0,w,c
  4223  0017F4  E2F2               	bc	l2576
  4224  0017F6  0012               	return		;funcret
  4225  0017F8                     __end_of_Delay_ms:
  4226                           	callstack 0
  4227                           
  4228 ;; *************** function _ds18b20_readTemp *****************
  4229 ;; Defined at:
  4230 ;;		line 117 in file "ds18b20.c"
  4231 ;; Parameters:    Size  Location     Type
  4232 ;;  time_flag       1   10[COMRAM] PTR unsigned char 
  4233 ;;		 -> time_flag(1), 
  4234 ;;  timer_val       1   11[COMRAM] PTR unsigned char 
  4235 ;;		 -> timer_val(1), 
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;  j               1   16[COMRAM] unsigned char 
  4238 ;;  temp            2   14[COMRAM] unsigned int 
  4239 ;;  i               1   17[COMRAM] unsigned char 
  4240 ;; Return value:  Size  Location     Type
  4241 ;;                  1    wreg      unsigned char 
  4242 ;; Registers used:
  4243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4244 ;; Tracked objects:
  4245 ;;		On entry : 0/0
  4246 ;;		On exit  : 0/0
  4247 ;;		Unchanged: 0/0
  4248 ;; Data sizes:     COMRAM   BANK0   BANK1
  4249 ;;      Params:         2       0       0
  4250 ;;      Locals:         4       0       0
  4251 ;;      Temps:          2       0       0
  4252 ;;      Totals:         8       0       0
  4253 ;;Total ram usage:        8 bytes
  4254 ;; Hardware stack levels used:    1
  4255 ;; Hardware stack levels required when called:    4
  4256 ;; This function calls:
  4257 ;;		_ds18b20_crc8
  4258 ;;		_ow_reset
  4259 ;;		_read_byte
  4260 ;;		_write_byte
  4261 ;; This function is called by:
  4262 ;;		_main
  4263 ;; This function uses a non-reentrant model
  4264 ;;
  4265                           
  4266                           	psect	text9
  4267  001120                     __ptext9:
  4268                           	callstack 0
  4269  001120                     _ds18b20_readTemp:
  4270                           	callstack 26
  4271                           
  4272                           ;ds18b20.c: 120: uint8_t i;;ds18b20.c: 122: switch (*time_flag) {
  4273                           
  4274                           ;incstack = 0
  4275  001120  D05D               	goto	l2872
  4276  001122                     l2794:
  4277                           
  4278                           ;ds18b20.c: 124: if (!ow_reset())
  4279  001122  EC95  F00B         	call	_ow_reset	;wreg free
  4280  001126  0900               	iorlw	0
  4281  001128  A4D8               	btfss	status,2,c
  4282  00112A  0C00               	retlw	0
  4283                           
  4284                           ;ds18b20.c: 125: {;ds18b20.c: 126: write_byte(0xCC);
  4285  00112C  0ECC               	movlw	204
  4286  00112E  EC47  F00B         	call	_write_byte
  4287                           
  4288                           ;ds18b20.c: 127: write_byte(0x44);
  4289  001132  0E44               	movlw	68
  4290  001134  EC47  F00B         	call	_write_byte
  4291                           
  4292                           ;ds18b20.c: 128: *timer_val = 0;
  4293  001138  504D               	movf	ds18b20_readTemp@timer_val^0,w,c
  4294  00113A  6ED9               	movwf	fsr2l,c
  4295  00113C  6ADA               	clrf	fsr2h,c
  4296  00113E  6ADF               	clrf	indf2,c
  4297                           
  4298                           ;ds18b20.c: 129: *time_flag = 2;
  4299  001140  504C               	movf	ds18b20_readTemp@time_flag^0,w,c
  4300  001142  6ED9               	movwf	fsr2l,c
  4301  001144  6ADA               	clrf	fsr2h,c
  4302  001146  0E02               	movlw	2
  4303  001148  6EDF               	movwf	indf2,c
  4304                           
  4305                           ;ds18b20.c: 130: T1CONbits.TMR1ON = 1;
  4306  00114A  80CD               	bsf	205,0,c	;volatile
  4307                           
  4308                           ;ds18b20.c: 132: return 0;
  4309  00114C  0C00               	retlw	0
  4310  00114E                     l392:
  4311                           
  4312                           ;ds18b20.c: 136: for (uint8_t j = 0; j < 2; j++) {
  4313  00114E  6A52               	clrf	ds18b20_readTemp@j^0,c
  4314  001150                     l393:
  4315                           
  4316                           ;ds18b20.c: 137: (INTCONbits.GIE = 0);
  4317  001150  9EF2               	bcf	242,7,c	;volatile
  4318                           
  4319                           ;ds18b20.c: 138: ow_reset();
  4320  001152  EC95  F00B         	call	_ow_reset	;wreg free
  4321                           
  4322                           ;ds18b20.c: 139: write_byte(0x55);
  4323  001156  0E55               	movlw	85
  4324  001158  EC47  F00B         	call	_write_byte
  4325                           
  4326                           ;ds18b20.c: 140: for (i = 0; i < 8; i++) {
  4327  00115C  6A53               	clrf	ds18b20_readTemp@i^0,c
  4328  00115E                     l2822:
  4329                           
  4330                           ;ds18b20.c: 141: write_byte(rom_dq[j][i]);
  4331  00115E  5052               	movf	ds18b20_readTemp@j^0,w,c
  4332  001160  0D08               	mullw	8
  4333  001162  50F3               	movf	243,w,c
  4334  001164  0F11               	addlw	low _rom_dq
  4335  001166  2453               	addwf	ds18b20_readTemp@i^0,w,c
  4336  001168  6ED9               	movwf	fsr2l,c
  4337  00116A  6ADA               	clrf	fsr2h,c
  4338  00116C  50DF               	movf	indf2,w,c
  4339  00116E  EC47  F00B         	call	_write_byte
  4340  001172  2A53               	incf	ds18b20_readTemp@i^0,f,c
  4341  001174  0E07               	movlw	7
  4342  001176  6453               	cpfsgt	ds18b20_readTemp@i^0,c
  4343  001178  D7F2               	goto	l2822
  4344                           
  4345                           ;ds18b20.c: 142: };ds18b20.c: 143: write_byte(0xBE);
  4346  00117A  0EBE               	movlw	190
  4347  00117C  EC47  F00B         	call	_write_byte
  4348                           
  4349                           ;ds18b20.c: 145: for (i = 0; i < 9; i++)
  4350  001180  6A53               	clrf	ds18b20_readTemp@i^0,c
  4351  001182                     l2836:
  4352                           
  4353                           ;ds18b20.c: 146: {;ds18b20.c: 147: scratch[i] = read_byte();
  4354  001182  5053               	movf	ds18b20_readTemp@i^0,w,c
  4355  001184  0F37               	addlw	low _scratch
  4356  001186  6ED9               	movwf	fsr2l,c
  4357  001188  6ADA               	clrf	fsr2h,c
  4358  00118A  EC2C  F00B         	call	_read_byte	;wreg free
  4359  00118E  6EDF               	movwf	indf2,c
  4360  001190  2A53               	incf	ds18b20_readTemp@i^0,f,c
  4361  001192  0E08               	movlw	8
  4362  001194  6453               	cpfsgt	ds18b20_readTemp@i^0,c
  4363  001196  D7F5               	goto	l2836
  4364                           
  4365                           ;ds18b20.c: 148: };ds18b20.c: 150: if (!(ds18b20_crc8(scratch, 9))) {
  4366  001198  0E37               	movlw	low _scratch
  4367  00119A  6E45               	movwf	ds18b20_crc8@data_in^0,c
  4368  00119C  0E09               	movlw	9
  4369  00119E  6E46               	movwf	ds18b20_crc8@num_bytes^0,c
  4370  0011A0  ECA4  F00A         	call	_ds18b20_crc8	;wreg free
  4371  0011A4  0900               	iorlw	0
  4372  0011A6  E10C               	bnz	l2848
  4373                           
  4374                           ;ds18b20.c: 151: temp = (((uint16_t) scratch[1]) << 8) | ((uint16_t) scratch[0]);
  4375  0011A8  5038               	movf	(_scratch+1)^0,w,c
  4376  0011AA  6E4E               	movwf	??_ds18b20_readTemp^0,c
  4377  0011AC  5037               	movf	_scratch^0,w,c
  4378  0011AE  6E50               	movwf	ds18b20_readTemp@temp^0,c
  4379  0011B0  C04E  F051         	movff	??_ds18b20_readTemp,ds18b20_readTemp@temp+1
  4380                           
  4381                           ;ds18b20.c: 152: temp_ready[j] = temp;
  4382  0011B4  D81C               	call	PL26	;call to abstracted procedure
  4383  0011B6  C050  FFDE         	movff	ds18b20_readTemp@temp,postinc2
  4384  0011BA  C051  FFDD         	movff	ds18b20_readTemp@temp+1,postdec2
  4385                           
  4386                           ;ds18b20.c: 153: }else
  4387  0011BE  D004               	goto	l2850
  4388  0011C0                     l2848:
  4389                           
  4390                           ;ds18b20.c: 154: temp_ready[j] = 32767;
  4391  0011C0  D816               	call	PL26	;call to abstracted procedure
  4392  0011C2  68DE               	setf	postinc2,c
  4393  0011C4  0E7F               	movlw	127
  4394  0011C6  6EDD               	movwf	postdec2,c
  4395  0011C8                     l2850:
  4396                           
  4397                           ;ds18b20.c: 155: (INTCONbits.GIE = 1);
  4398  0011C8  8EF2               	bsf	242,7,c	;volatile
  4399  0011CA  2A52               	incf	ds18b20_readTemp@j^0,f,c
  4400  0011CC  0E01               	movlw	1
  4401  0011CE  6452               	cpfsgt	ds18b20_readTemp@j^0,c
  4402  0011D0  D7BF               	goto	l393
  4403                           
  4404                           ;ds18b20.c: 156: };ds18b20.c: 157: *time_flag = 0;
  4405  0011D2  504C               	movf	ds18b20_readTemp@time_flag^0,w,c
  4406  0011D4  6ED9               	movwf	fsr2l,c
  4407  0011D6  6ADA               	clrf	fsr2h,c
  4408  0011D8  6ADF               	clrf	indf2,c
  4409                           
  4410                           ;ds18b20.c: 158: return 1;
  4411  0011DA  0C01               	retlw	1
  4412  0011DC                     l2872:
  4413  0011DC  504C               	movf	ds18b20_readTemp@time_flag^0,w,c
  4414  0011DE  6ED9               	movwf	fsr2l,c
  4415  0011E0  6ADA               	clrf	fsr2h,c
  4416  0011E2  50DF               	movf	indf2,w,c
  4417                           
  4418                           ; Switch size 1, requested type "space"
  4419                           ; Number of cases is 3, Range of values is 0 to 2
  4420                           ; switch strategies available:
  4421                           ; Name         Instructions Cycles
  4422                           ; simple_byte           10     6 (average)
  4423                           ;	Chosen strategy is simple_byte
  4424  0011E4  E09E               	bz	l2794
  4425  0011E6  0A01               	xorlw	1	; case 1
  4426  0011E8  E0B2               	bz	l392
  4427  0011EA  0A03               	xorlw	3	; case 2
  4428  0011EC  0C00               	retlw	0
  4429  0011EE                     __end_of_ds18b20_readTemp:
  4430                           	callstack 0
  4431  0011EE                     PL26:
  4432                           	callstack 26
  4433  0011EE  5052               	movf	ds18b20_readTemp@j^0,w,c
  4434  0011F0  0D02               	mullw	2
  4435  0011F2  50F3               	movf	243,w,c
  4436  0011F4  0F21               	addlw	low _temp_ready
  4437  0011F6  6ED9               	movwf	fsr2l,c
  4438  0011F8  6ADA               	clrf	fsr2h,c
  4439  0011FA  0012               	return	
  4440  0011FC                     __end_ofPL26:
  4441                           	callstack 0
  4442                           
  4443 ;; *************** function _read_byte *****************
  4444 ;; Defined at:
  4445 ;;		line 50 in file "onewire.c"
  4446 ;; Parameters:    Size  Location     Type
  4447 ;;		None
  4448 ;; Auto vars:     Size  Location     Type
  4449 ;;  i               1    6[COMRAM] unsigned char 
  4450 ;;  val             1    5[COMRAM] unsigned char 
  4451 ;; Return value:  Size  Location     Type
  4452 ;;                  1    wreg      unsigned char 
  4453 ;; Registers used:
  4454 ;;		wreg, status,2, status,0, cstack
  4455 ;; Tracked objects:
  4456 ;;		On entry : 0/0
  4457 ;;		On exit  : 0/0
  4458 ;;		Unchanged: 0/0
  4459 ;; Data sizes:     COMRAM   BANK0   BANK1
  4460 ;;      Params:         0       0       0
  4461 ;;      Locals:         2       0       0
  4462 ;;      Temps:          2       0       0
  4463 ;;      Totals:         4       0       0
  4464 ;;Total ram usage:        4 bytes
  4465 ;; Hardware stack levels used:    1
  4466 ;; Hardware stack levels required when called:    3
  4467 ;; This function calls:
  4468 ;;		_read_bit
  4469 ;; This function is called by:
  4470 ;;		_ds18b20_readTemp
  4471 ;;		_ds18b20_readrom
  4472 ;; This function uses a non-reentrant model
  4473 ;;
  4474                           
  4475                           	psect	text10
  4476  001658                     __ptext10:
  4477                           	callstack 0
  4478  001658                     _read_byte:
  4479                           	callstack 26
  4480                           
  4481                           ;onewire.c: 52: uint8_t i;;onewire.c: 53: uint8_t val = 0;
  4482                           
  4483                           ;incstack = 0
  4484  001658  6A47               	clrf	read_byte@val^0,c
  4485                           
  4486                           ;onewire.c: 55: for(i=0;i<8;i++)
  4487  00165A  6A48               	clrf	read_byte@i^0,c
  4488  00165C                     l1594:
  4489                           
  4490                           ;onewire.c: 56: {;onewire.c: 57: if(read_bit()) val |= (0x01 << i);
  4491  00165C  EC67  F00C         	call	_read_bit	;wreg free
  4492  001660  0900               	iorlw	0
  4493  001662  E00C               	bz	l1598
  4494  001664  C048  F045         	movff	read_byte@i,??_read_byte
  4495  001668  0E01               	movlw	1
  4496  00166A  6E46               	movwf	(??_read_byte+1)^0,c
  4497  00166C  2A45               	incf	??_read_byte^0,f,c
  4498  00166E  D002               	goto	u274
  4499  001670                     u275:
  4500  001670  90D8               	bcf	status,0,c
  4501  001672  3646               	rlcf	(??_read_byte+1)^0,f,c
  4502  001674                     u274:
  4503  001674  2E45               	decfsz	??_read_byte^0,f,c
  4504  001676  D7FC               	goto	u275
  4505  001678  5046               	movf	(??_read_byte+1)^0,w,c
  4506  00167A  1247               	iorwf	read_byte@val^0,f,c
  4507  00167C                     l1598:
  4508                           
  4509                           ;onewire.c: 58: _delay((unsigned long)((120)*(8000000/4000000.0)));
  4510  00167C  0E50               	movlw	80
  4511  00167E                     u2867:
  4512  00167E  2EE8               	decfsz	wreg,f,c
  4513  001680  D7FE               	bra	u2867
  4514  001682  2A48               	incf	read_byte@i^0,f,c
  4515  001684  0E07               	movlw	7
  4516  001686  6448               	cpfsgt	read_byte@i^0,c
  4517  001688  D7E9               	goto	l1594
  4518                           
  4519                           ;onewire.c: 59: };onewire.c: 61: return val;
  4520  00168A  5047               	movf	read_byte@val^0,w,c
  4521  00168C  0012               	return		;funcret
  4522  00168E                     __end_of_read_byte:
  4523                           	callstack 0
  4524                           
  4525 ;; *************** function _read_bit *****************
  4526 ;; Defined at:
  4527 ;;		line 22 in file "onewire.c"
  4528 ;; Parameters:    Size  Location     Type
  4529 ;;		None
  4530 ;; Auto vars:     Size  Location     Type
  4531 ;;		None
  4532 ;; Return value:  Size  Location     Type
  4533 ;;                  1    wreg      unsigned char 
  4534 ;; Registers used:
  4535 ;;		wreg
  4536 ;; Tracked objects:
  4537 ;;		On entry : 0/0
  4538 ;;		On exit  : 0/0
  4539 ;;		Unchanged: 0/0
  4540 ;; Data sizes:     COMRAM   BANK0   BANK1
  4541 ;;      Params:         0       0       0
  4542 ;;      Locals:         0       0       0
  4543 ;;      Temps:          0       0       0
  4544 ;;      Totals:         0       0       0
  4545 ;;Total ram usage:        0 bytes
  4546 ;; Hardware stack levels used:    1
  4547 ;; Hardware stack levels required when called:    2
  4548 ;; This function calls:
  4549 ;;		Nothing
  4550 ;; This function is called by:
  4551 ;;		_read_byte
  4552 ;; This function uses a non-reentrant model
  4553 ;;
  4554                           
  4555                           	psect	text11
  4556  0018CE                     __ptext11:
  4557                           	callstack 0
  4558  0018CE                     _read_bit:
  4559                           	callstack 26
  4560                           
  4561                           ;onewire.c: 24: PORTAbits.RA6 = 0;
  4562                           
  4563                           ;incstack = 0
  4564  0018CE  9C80               	bcf	128,6,c	;volatile
  4565                           
  4566                           ;onewire.c: 25: TRISAbits.TRISA6 = 0;
  4567  0018D0  9C92               	bcf	146,6,c	;volatile
  4568                           
  4569                           ;onewire.c: 26: _delay((unsigned long)((1)*(8000000/4000000.0)));
  4570  0018D2  D000               	nop2		;2 cycle nop
  4571                           
  4572                           ;onewire.c: 27: PORTAbits.RA6 = 1;
  4573  0018D4  8C80               	bsf	128,6,c	;volatile
  4574                           
  4575                           ;onewire.c: 28: TRISAbits.TRISA6 = 1;
  4576  0018D6  8C92               	bsf	146,6,c	;volatile
  4577                           
  4578                           ;onewire.c: 29: _delay((unsigned long)((6)*(8000000/4000000.0)));
  4579  0018D8  0E04               	movlw	4
  4580  0018DA                     u2877:
  4581  0018DA  2EE8               	decfsz	wreg,f,c
  4582  0018DC  D7FE               	bra	u2877
  4583                           
  4584                           ;onewire.c: 30: return(PORTAbits.RA6);
  4585  0018DE  BC80               	btfsc	128,6,c	;volatile
  4586  0018E0  0C01               	retlw	1
  4587  0018E2  0C00               	retlw	0	;funcret
  4588  0018E4                     __end_of_read_bit:
  4589                           	callstack 0
  4590                           
  4591 ;; *************** function _ds18b20_crc8 *****************
  4592 ;; Defined at:
  4593 ;;		line 221 in file "ds18b20.c"
  4594 ;; Parameters:    Size  Location     Type
  4595 ;;  data_in         1    3[COMRAM] PTR unsigned char 
  4596 ;;		 -> ds18b20_readrom@temp_rom(8), scratch(9), 
  4597 ;;  num_bytes       1    4[COMRAM] unsigned char 
  4598 ;; Auto vars:     Size  Location     Type
  4599 ;;  crc             1    9[COMRAM] unsigned char 
  4600 ;;  loop_count      1    8[COMRAM] unsigned char 
  4601 ;;  feedback_bit    1    7[COMRAM] unsigned char 
  4602 ;;  data            1    6[COMRAM] unsigned char 
  4603 ;;  bit_counter     1    5[COMRAM] unsigned char 
  4604 ;; Return value:  Size  Location     Type
  4605 ;;                  1    wreg      unsigned char 
  4606 ;; Registers used:
  4607 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4608 ;; Tracked objects:
  4609 ;;		On entry : 0/0
  4610 ;;		On exit  : 0/0
  4611 ;;		Unchanged: 0/0
  4612 ;; Data sizes:     COMRAM   BANK0   BANK1
  4613 ;;      Params:         2       0       0
  4614 ;;      Locals:         5       0       0
  4615 ;;      Temps:          0       0       0
  4616 ;;      Totals:         7       0       0
  4617 ;;Total ram usage:        7 bytes
  4618 ;; Hardware stack levels used:    1
  4619 ;; Hardware stack levels required when called:    2
  4620 ;; This function calls:
  4621 ;;		Nothing
  4622 ;; This function is called by:
  4623 ;;		_ds18b20_readTemp
  4624 ;;		_ds18b20_readrom
  4625 ;; This function uses a non-reentrant model
  4626 ;;
  4627                           
  4628                           	psect	text12
  4629  001548                     __ptext12:
  4630                           	callstack 0
  4631  001548                     _ds18b20_crc8:
  4632                           	callstack 27
  4633                           
  4634                           ;ds18b20.c: 222: uint8_t crc;;ds18b20.c: 223: uint8_t loop_count;;ds18b20.c: 224: uint8_
      +                          t bit_counter;;ds18b20.c: 225: uint8_t data;;ds18b20.c: 226: uint8_t feedback_bit;;ds18b
      +                          20.c: 228: crc = 0x00;
  4635                           
  4636                           ;incstack = 0
  4637  001548  6A4B               	clrf	ds18b20_crc8@crc^0,c
  4638                           
  4639                           ;ds18b20.c: 230: for (loop_count = 0; loop_count != num_bytes; loop_count++) {
  4640  00154A  6A4A               	clrf	ds18b20_crc8@loop_count^0,c
  4641  00154C  D01D               	goto	l2694
  4642  00154E                     l2674:
  4643                           
  4644                           ;ds18b20.c: 231: data = data_in[loop_count];
  4645  00154E  5045               	movf	ds18b20_crc8@data_in^0,w,c
  4646  001550  244A               	addwf	ds18b20_crc8@loop_count^0,w,c
  4647  001552  6ED9               	movwf	fsr2l,c
  4648  001554  6ADA               	clrf	fsr2h,c
  4649  001556  50DF               	movf	indf2,w,c
  4650  001558  6E48               	movwf	ds18b20_crc8@data^0,c
  4651                           
  4652                           ;ds18b20.c: 233: bit_counter = 8;
  4653  00155A  0E08               	movlw	8
  4654  00155C  6E47               	movwf	ds18b20_crc8@bit_counter^0,c
  4655  00155E                     l2678:
  4656                           
  4657                           ;ds18b20.c: 235: feedback_bit = (crc ^ data) & 0x01;
  4658  00155E  504B               	movf	ds18b20_crc8@crc^0,w,c
  4659  001560  1848               	xorwf	ds18b20_crc8@data^0,w,c
  4660  001562  0B01               	andlw	1
  4661  001564  6E49               	movwf	ds18b20_crc8@feedback_bit^0,c
  4662                           
  4663                           ;ds18b20.c: 237: if (feedback_bit == 0x01) {
  4664  001566  0449               	decf	ds18b20_crc8@feedback_bit^0,w,c
  4665  001568  E102               	bnz	l421
  4666                           
  4667                           ;ds18b20.c: 238: crc = crc ^ 0x18;
  4668  00156A  0E18               	movlw	24
  4669  00156C  1A4B               	xorwf	ds18b20_crc8@crc^0,f,c
  4670  00156E                     l421:
  4671                           
  4672                           ;ds18b20.c: 239: };ds18b20.c: 240: crc = (crc >> 1) & 0x7F;
  4673  00156E  90D8               	bcf	status,0,c
  4674  001570  304B               	rrcf	ds18b20_crc8@crc^0,w,c
  4675  001572  0B7F               	andlw	127
  4676  001574  6E4B               	movwf	ds18b20_crc8@crc^0,c
  4677                           
  4678                           ;ds18b20.c: 241: if (feedback_bit == 0x01) {
  4679  001576  0449               	decf	ds18b20_crc8@feedback_bit^0,w,c
  4680  001578  E101               	bnz	l2686
  4681                           
  4682                           ;ds18b20.c: 242: crc = crc | 0x80;
  4683  00157A  8E4B               	bsf	ds18b20_crc8@crc^0,7,c
  4684  00157C                     l2686:
  4685                           
  4686                           ;ds18b20.c: 243: };ds18b20.c: 245: data = data >> 1;
  4687  00157C  90D8               	bcf	status,0,c
  4688  00157E  3248               	rrcf	ds18b20_crc8@data^0,f,c
  4689                           
  4690                           ;ds18b20.c: 246: bit_counter--;
  4691  001580  0647               	decf	ds18b20_crc8@bit_counter^0,f,c
  4692                           
  4693                           ;ds18b20.c: 248: } while (bit_counter > 0);
  4694  001582  5047               	movf	ds18b20_crc8@bit_counter^0,w,c
  4695  001584  E1EC               	bnz	l2678
  4696  001586  2A4A               	incf	ds18b20_crc8@loop_count^0,f,c
  4697  001588                     l2694:
  4698  001588  5046               	movf	ds18b20_crc8@num_bytes^0,w,c
  4699  00158A  184A               	xorwf	ds18b20_crc8@loop_count^0,w,c
  4700  00158C  E1E0               	bnz	l2674
  4701                           
  4702                           ;ds18b20.c: 249: };ds18b20.c: 251: return crc;
  4703  00158E  504B               	movf	ds18b20_crc8@crc^0,w,c
  4704  001590  0012               	return		;funcret
  4705  001592                     __end_of_ds18b20_crc8:
  4706                           	callstack 0
  4707                           
  4708 ;; *************** function _ds18b20_get_temp *****************
  4709 ;; Defined at:
  4710 ;;		line 198 in file "ds18b20.c"
  4711 ;; Parameters:    Size  Location     Type
  4712 ;;  num_dq          1    wreg     unsigned char 
  4713 ;;  minus           1    3[COMRAM] PTR unsigned char 
  4714 ;;		 -> minus_2(1), minus_1(1), 
  4715 ;; Auto vars:     Size  Location     Type
  4716 ;;  num_dq          1    5[COMRAM] unsigned char 
  4717 ;;  temp            2    7[COMRAM] unsigned int 
  4718 ;;  tmp             1    6[COMRAM] unsigned char 
  4719 ;; Return value:  Size  Location     Type
  4720 ;;                  2    3[COMRAM] unsigned int 
  4721 ;; Registers used:
  4722 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4723 ;; Tracked objects:
  4724 ;;		On entry : 0/0
  4725 ;;		On exit  : 0/0
  4726 ;;		Unchanged: 0/0
  4727 ;; Data sizes:     COMRAM   BANK0   BANK1
  4728 ;;      Params:         2       0       0
  4729 ;;      Locals:         4       0       0
  4730 ;;      Temps:          0       0       0
  4731 ;;      Totals:         6       0       0
  4732 ;;Total ram usage:        6 bytes
  4733 ;; Hardware stack levels used:    1
  4734 ;; Hardware stack levels required when called:    2
  4735 ;; This function calls:
  4736 ;;		Nothing
  4737 ;; This function is called by:
  4738 ;;		_main
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           	psect	text13
  4743  0012A4                     __ptext13:
  4744                           	callstack 0
  4745  0012A4                     _ds18b20_get_temp:
  4746                           	callstack 28
  4747                           
  4748                           ;incstack = 0
  4749                           ;ds18b20_get_temp@num_dq stored from wreg
  4750  0012A4  6E47               	movwf	ds18b20_get_temp@num_dq^0,c
  4751                           
  4752                           ;ds18b20.c: 199: uint16_t temp = temp_ready[num_dq-1];
  4753  0012A6  5047               	movf	ds18b20_get_temp@num_dq^0,w,c
  4754  0012A8  0D02               	mullw	2
  4755  0012AA  50F3               	movf	243,w,c
  4756  0012AC  0F1F               	addlw	low (_temp_ready+254)
  4757  0012AE  6ED9               	movwf	fsr2l,c
  4758  0012B0  6ADA               	clrf	fsr2h,c
  4759  0012B2  CFDE F049          	movff	postinc2,ds18b20_get_temp@temp
  4760  0012B6  CFDD F04A          	movff	postdec2,ds18b20_get_temp@temp+1
  4761                           
  4762                           ;ds18b20.c: 200: uint8_t tmp;;ds18b20.c: 201: *minus = '+';
  4763  0012BA  5045               	movf	ds18b20_get_temp@minus^0,w,c
  4764  0012BC  6ED9               	movwf	fsr2l,c
  4765  0012BE  6ADA               	clrf	fsr2h,c
  4766  0012C0  0E2B               	movlw	43
  4767  0012C2  6EDF               	movwf	indf2,c
  4768                           
  4769                           ;ds18b20.c: 202: if(temp == 32767)
  4770  0012C4  2849               	incf	ds18b20_get_temp@temp^0,w,c
  4771  0012C6  E108               	bnz	l413
  4772  0012C8  0E7F               	movlw	127
  4773  0012CA  184A               	xorwf	(ds18b20_get_temp@temp+1)^0,w,c
  4774  0012CC  E105               	bnz	l413
  4775  0012CE                     u1820:
  4776                           
  4777                           ;ds18b20.c: 203: return temp;
  4778  0012CE  C049  F045         	movff	ds18b20_get_temp@temp,?_ds18b20_get_temp
  4779  0012D2  C04A  F046         	movff	ds18b20_get_temp@temp+1,?_ds18b20_get_temp+1
  4780  0012D6  0012               	return	
  4781  0012D8                     l413:
  4782                           
  4783                           ;ds18b20.c: 204: if (temp & 0x8000) {
  4784  0012D8  AE4A               	btfss	(ds18b20_get_temp@temp+1)^0,7,c
  4785  0012DA  D009               	goto	l2890
  4786                           
  4787                           ;ds18b20.c: 205: temp = -temp;
  4788  0012DC  6C49               	negf	ds18b20_get_temp@temp^0,c
  4789  0012DE  1E4A               	comf	(ds18b20_get_temp@temp+1)^0,f,c
  4790  0012E0  B0D8               	btfsc	status,0,c
  4791  0012E2  2A4A               	incf	(ds18b20_get_temp@temp+1)^0,f,c
  4792                           
  4793                           ;ds18b20.c: 206: *minus = '-';
  4794  0012E4  5045               	movf	ds18b20_get_temp@minus^0,w,c
  4795  0012E6  6ED9               	movwf	fsr2l,c
  4796  0012E8  6ADA               	clrf	fsr2h,c
  4797  0012EA  0E2D               	movlw	45
  4798  0012EC  6EDF               	movwf	indf2,c
  4799  0012EE                     l2890:
  4800                           
  4801                           ;ds18b20.c: 207: };ds18b20.c: 209: tmp = temp & 0x0f;
  4802  0012EE  5049               	movf	ds18b20_get_temp@temp^0,w,c
  4803  0012F0  0B0F               	andlw	15
  4804  0012F2  6E48               	movwf	ds18b20_get_temp@tmp^0,c
  4805                           
  4806                           ;ds18b20.c: 210: tmp = fract[tmp];
  4807  0012F4  0ED3               	movlw	low _fract
  4808  0012F6  2448               	addwf	ds18b20_get_temp@tmp^0,w,c
  4809  0012F8  6EF6               	movwf	tblptrl,c
  4810  0012FA  6AF7               	clrf	tblptrh,c
  4811  0012FC  0E1E               	movlw	high _fract
  4812  0012FE  22F7               	addwfc	tblptrh,f,c
  4813  001300                     	if	0	;There are less than 3 active tblptr bytes
  4814  001300                     	endif
  4815  001300  0008               	tblrd		*
  4816  001302  CFF5 F048          	movff	tablat,ds18b20_get_temp@tmp
  4817                           
  4818                           ;ds18b20.c: 211: temp = temp >> 4;
  4819  001306  3A49               	swapf	ds18b20_get_temp@temp^0,f,c
  4820  001308  3A4A               	swapf	(ds18b20_get_temp@temp+1)^0,f,c
  4821  00130A  0E0F               	movlw	15
  4822  00130C  1649               	andwf	ds18b20_get_temp@temp^0,f,c
  4823  00130E  504A               	movf	(ds18b20_get_temp@temp+1)^0,w,c
  4824  001310  0BF0               	andlw	240
  4825  001312  1249               	iorwf	ds18b20_get_temp@temp^0,f,c
  4826  001314  0E0F               	movlw	15
  4827  001316  164A               	andwf	(ds18b20_get_temp@temp+1)^0,f,c
  4828                           
  4829                           ;ds18b20.c: 212: temp = (temp & 0x00ff) * 10;
  4830  001318  5049               	movf	ds18b20_get_temp@temp^0,w,c
  4831  00131A  0D0A               	mullw	10
  4832  00131C  CFF3 F049          	movff	prodl,ds18b20_get_temp@temp
  4833  001320  CFF4 F04A          	movff	prodh,ds18b20_get_temp@temp+1
  4834                           
  4835                           ;ds18b20.c: 213: temp = temp + tmp;
  4836  001324  5048               	movf	ds18b20_get_temp@tmp^0,w,c
  4837  001326  2649               	addwf	ds18b20_get_temp@temp^0,f,c
  4838  001328  0E00               	movlw	0
  4839  00132A  224A               	addwfc	(ds18b20_get_temp@temp+1)^0,f,c
  4840  00132C  D7D0               	goto	u1820
  4841  00132E                     __end_of_ds18b20_get_temp:
  4842                           	callstack 0
  4843                           
  4844 ;; *************** function ___lwmod *****************
  4845 ;; Defined at:
  4846 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.30\pic\sources\c90\common\lwmod.c"
  4847 ;; Parameters:    Size  Location     Type
  4848 ;;  dividend        2   10[COMRAM] unsigned int 
  4849 ;;  divisor         2   12[COMRAM] unsigned int 
  4850 ;; Auto vars:     Size  Location     Type
  4851 ;;  counter         1   14[COMRAM] unsigned char 
  4852 ;; Return value:  Size  Location     Type
  4853 ;;                  2   10[COMRAM] unsigned int 
  4854 ;; Registers used:
  4855 ;;		wreg, status,2, status,0
  4856 ;; Tracked objects:
  4857 ;;		On entry : 0/0
  4858 ;;		On exit  : 0/0
  4859 ;;		Unchanged: 0/0
  4860 ;; Data sizes:     COMRAM   BANK0   BANK1
  4861 ;;      Params:         4       0       0
  4862 ;;      Locals:         1       0       0
  4863 ;;      Temps:          0       0       0
  4864 ;;      Totals:         5       0       0
  4865 ;;Total ram usage:        5 bytes
  4866 ;; Hardware stack levels used:    1
  4867 ;; Hardware stack levels required when called:    2
  4868 ;; This function calls:
  4869 ;;		Nothing
  4870 ;; This function is called by:
  4871 ;;		_main
  4872 ;; This function uses a non-reentrant model
  4873 ;;
  4874                           
  4875                           	psect	text14
  4876  00161A                     __ptext14:
  4877                           	callstack 0
  4878  00161A                     ___lwmod:
  4879                           	callstack 28
  4880                           
  4881                           ;incstack = 0
  4882  00161A  504E               	movf	___lwmod@divisor^0,w,c
  4883  00161C  104F               	iorwf	(___lwmod@divisor+1)^0,w,c
  4884  00161E  E017               	bz	l1126
  4885  001620  0E01               	movlw	1
  4886  001622  6E50               	movwf	___lwmod@counter^0,c
  4887  001624  D004               	goto	l3026
  4888  001626                     l3024:
  4889  001626  90D8               	bcf	status,0,c
  4890  001628  364E               	rlcf	___lwmod@divisor^0,f,c
  4891  00162A  364F               	rlcf	(___lwmod@divisor+1)^0,f,c
  4892  00162C  2A50               	incf	___lwmod@counter^0,f,c
  4893  00162E                     l3026:
  4894  00162E  AE4F               	btfss	(___lwmod@divisor+1)^0,7,c
  4895  001630  D7FA               	goto	l3024
  4896  001632                     u1970:
  4897  001632  504E               	movf	___lwmod@divisor^0,w,c
  4898  001634  5C4C               	subwf	___lwmod@dividend^0,w,c
  4899  001636  504F               	movf	(___lwmod@divisor+1)^0,w,c
  4900  001638  584D               	subwfb	(___lwmod@dividend+1)^0,w,c
  4901  00163A  E304               	bnc	l3032
  4902  00163C  504E               	movf	___lwmod@divisor^0,w,c
  4903  00163E  5E4C               	subwf	___lwmod@dividend^0,f,c
  4904  001640  504F               	movf	(___lwmod@divisor+1)^0,w,c
  4905  001642  5A4D               	subwfb	(___lwmod@dividend+1)^0,f,c
  4906  001644                     l3032:
  4907  001644  90D8               	bcf	status,0,c
  4908  001646  324F               	rrcf	(___lwmod@divisor+1)^0,f,c
  4909  001648  324E               	rrcf	___lwmod@divisor^0,f,c
  4910  00164A  2E50               	decfsz	___lwmod@counter^0,f,c
  4911  00164C  D7F2               	goto	u1970
  4912  00164E                     l1126:
  4913  00164E  C04C  F04C         	movff	___lwmod@dividend,?___lwmod
  4914  001652  C04D  F04D         	movff	___lwmod@dividend+1,?___lwmod+1
  4915  001656  0012               	return		;funcret
  4916  001658                     __end_of___lwmod:
  4917                           	callstack 0
  4918                           
  4919 ;; *************** function ___lwdiv *****************
  4920 ;; Defined at:
  4921 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.30\pic\sources\c90\common\lwdiv.c"
  4922 ;; Parameters:    Size  Location     Type
  4923 ;;  dividend        2    3[COMRAM] unsigned int 
  4924 ;;  divisor         2    5[COMRAM] unsigned int 
  4925 ;; Auto vars:     Size  Location     Type
  4926 ;;  quotient        2    7[COMRAM] unsigned int 
  4927 ;;  counter         1    9[COMRAM] unsigned char 
  4928 ;; Return value:  Size  Location     Type
  4929 ;;                  2    3[COMRAM] unsigned int 
  4930 ;; Registers used:
  4931 ;;		wreg, status,2, status,0
  4932 ;; Tracked objects:
  4933 ;;		On entry : 0/0
  4934 ;;		On exit  : 0/0
  4935 ;;		Unchanged: 0/0
  4936 ;; Data sizes:     COMRAM   BANK0   BANK1
  4937 ;;      Params:         4       0       0
  4938 ;;      Locals:         3       0       0
  4939 ;;      Temps:          0       0       0
  4940 ;;      Totals:         7       0       0
  4941 ;;Total ram usage:        7 bytes
  4942 ;; Hardware stack levels used:    1
  4943 ;; Hardware stack levels required when called:    2
  4944 ;; This function calls:
  4945 ;;		Nothing
  4946 ;; This function is called by:
  4947 ;;		_main
  4948 ;; This function uses a non-reentrant model
  4949 ;;
  4950                           
  4951                           	psect	text15
  4952  001592                     __ptext15:
  4953                           	callstack 0
  4954  001592                     ___lwdiv:
  4955                           	callstack 28
  4956                           
  4957                           ;incstack = 0
  4958  001592  6A49               	clrf	___lwdiv@quotient^0,c
  4959  001594  6A4A               	clrf	(___lwdiv@quotient+1)^0,c
  4960  001596  5047               	movf	___lwdiv@divisor^0,w,c
  4961  001598  1048               	iorwf	(___lwdiv@divisor+1)^0,w,c
  4962  00159A  E01B               	bz	l1116
  4963  00159C  0E01               	movlw	1
  4964  00159E  6E4B               	movwf	___lwdiv@counter^0,c
  4965  0015A0  D004               	goto	l3006
  4966  0015A2                     l3004:
  4967  0015A2  90D8               	bcf	status,0,c
  4968  0015A4  3647               	rlcf	___lwdiv@divisor^0,f,c
  4969  0015A6  3648               	rlcf	(___lwdiv@divisor+1)^0,f,c
  4970  0015A8  2A4B               	incf	___lwdiv@counter^0,f,c
  4971  0015AA                     l3006:
  4972  0015AA  AE48               	btfss	(___lwdiv@divisor+1)^0,7,c
  4973  0015AC  D7FA               	goto	l3004
  4974  0015AE                     u1940:
  4975  0015AE  90D8               	bcf	status,0,c
  4976  0015B0  3649               	rlcf	___lwdiv@quotient^0,f,c
  4977  0015B2  364A               	rlcf	(___lwdiv@quotient+1)^0,f,c
  4978  0015B4  5047               	movf	___lwdiv@divisor^0,w,c
  4979  0015B6  5C45               	subwf	___lwdiv@dividend^0,w,c
  4980  0015B8  5048               	movf	(___lwdiv@divisor+1)^0,w,c
  4981  0015BA  5846               	subwfb	(___lwdiv@dividend+1)^0,w,c
  4982  0015BC  E305               	bnc	l3016
  4983  0015BE  5047               	movf	___lwdiv@divisor^0,w,c
  4984  0015C0  5E45               	subwf	___lwdiv@dividend^0,f,c
  4985  0015C2  5048               	movf	(___lwdiv@divisor+1)^0,w,c
  4986  0015C4  5A46               	subwfb	(___lwdiv@dividend+1)^0,f,c
  4987  0015C6  8049               	bsf	___lwdiv@quotient^0,0,c
  4988  0015C8                     l3016:
  4989  0015C8  90D8               	bcf	status,0,c
  4990  0015CA  3248               	rrcf	(___lwdiv@divisor+1)^0,f,c
  4991  0015CC  3247               	rrcf	___lwdiv@divisor^0,f,c
  4992  0015CE  2E4B               	decfsz	___lwdiv@counter^0,f,c
  4993  0015D0  D7EE               	goto	u1940
  4994  0015D2                     l1116:
  4995  0015D2  C049  F045         	movff	___lwdiv@quotient,?___lwdiv
  4996  0015D6  C04A  F046         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4997  0015DA  0012               	return		;funcret
  4998  0015DC                     __end_of___lwdiv:
  4999                           	callstack 0
  5000                           
  5001 ;; *************** function ___lbmod *****************
  5002 ;; Defined at:
  5003 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.30\pic\sources\c90\common\lbmod.c"
  5004 ;; Parameters:    Size  Location     Type
  5005 ;;  dividend        1    wreg     unsigned char 
  5006 ;;  divisor         1    7[COMRAM] unsigned char 
  5007 ;; Auto vars:     Size  Location     Type
  5008 ;;  dividend        1    8[COMRAM] unsigned char 
  5009 ;;  rem             1   10[COMRAM] unsigned char 
  5010 ;;  counter         1    9[COMRAM] unsigned char 
  5011 ;; Return value:  Size  Location     Type
  5012 ;;                  1    wreg      unsigned char 
  5013 ;; Registers used:
  5014 ;;		wreg, status,2, status,0
  5015 ;; Tracked objects:
  5016 ;;		On entry : 0/0
  5017 ;;		On exit  : 0/0
  5018 ;;		Unchanged: 0/0
  5019 ;; Data sizes:     COMRAM   BANK0   BANK1
  5020 ;;      Params:         1       0       0
  5021 ;;      Locals:         3       0       0
  5022 ;;      Temps:          0       0       0
  5023 ;;      Totals:         4       0       0
  5024 ;;Total ram usage:        4 bytes
  5025 ;; Hardware stack levels used:    1
  5026 ;; Hardware stack levels required when called:    2
  5027 ;; This function calls:
  5028 ;;		Nothing
  5029 ;; This function is called by:
  5030 ;;		_main
  5031 ;; This function uses a non-reentrant model
  5032 ;;
  5033                           
  5034                           	psect	text16
  5035  00178A                     __ptext16:
  5036                           	callstack 0
  5037  00178A                     ___lbmod:
  5038                           	callstack 28
  5039                           
  5040                           ;incstack = 0
  5041                           ;___lbmod@dividend stored from wreg
  5042  00178A  6E4A               	movwf	___lbmod@dividend^0,c
  5043  00178C  0E08               	movlw	8
  5044  00178E  6E4B               	movwf	___lbmod@counter^0,c
  5045  001790  6A4C               	clrf	___lbmod@rem^0,c
  5046  001792                     l2984:
  5047  001792  90D8               	bcf	status,0,c
  5048  001794  344A               	rlcf	___lbmod@dividend^0,w,c
  5049  001796  344C               	rlcf	___lbmod@rem^0,w,c
  5050  001798  6E4C               	movwf	___lbmod@rem^0,c
  5051  00179A  90D8               	bcf	status,0,c
  5052  00179C  364A               	rlcf	___lbmod@dividend^0,f,c
  5053  00179E  5049               	movf	___lbmod@divisor^0,w,c
  5054  0017A0  5C4C               	subwf	___lbmod@rem^0,w,c
  5055  0017A2  E302               	bnc	l2992
  5056  0017A4  5049               	movf	___lbmod@divisor^0,w,c
  5057  0017A6  5E4C               	subwf	___lbmod@rem^0,f,c
  5058  0017A8                     l2992:
  5059  0017A8  2E4B               	decfsz	___lbmod@counter^0,f,c
  5060  0017AA  D7F3               	goto	l2984
  5061  0017AC  504C               	movf	___lbmod@rem^0,w,c
  5062  0017AE  0012               	return		;funcret
  5063  0017B0                     __end_of___lbmod:
  5064                           	callstack 0
  5065                           
  5066 ;; *************** function ___lbdiv *****************
  5067 ;; Defined at:
  5068 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.30\pic\sources\c90\common\lbdiv.c"
  5069 ;; Parameters:    Size  Location     Type
  5070 ;;  dividend        1    wreg     unsigned char 
  5071 ;;  divisor         1    3[COMRAM] unsigned char 
  5072 ;; Auto vars:     Size  Location     Type
  5073 ;;  dividend        1    4[COMRAM] unsigned char 
  5074 ;;  quotient        1    6[COMRAM] unsigned char 
  5075 ;;  counter         1    5[COMRAM] unsigned char 
  5076 ;; Return value:  Size  Location     Type
  5077 ;;                  1    wreg      unsigned char 
  5078 ;; Registers used:
  5079 ;;		wreg, status,2, status,0
  5080 ;; Tracked objects:
  5081 ;;		On entry : 0/0
  5082 ;;		On exit  : 0/0
  5083 ;;		Unchanged: 0/0
  5084 ;; Data sizes:     COMRAM   BANK0   BANK1
  5085 ;;      Params:         1       0       0
  5086 ;;      Locals:         3       0       0
  5087 ;;      Temps:          0       0       0
  5088 ;;      Totals:         4       0       0
  5089 ;;Total ram usage:        4 bytes
  5090 ;; Hardware stack levels used:    1
  5091 ;; Hardware stack levels required when called:    2
  5092 ;; This function calls:
  5093 ;;		Nothing
  5094 ;; This function is called by:
  5095 ;;		_main
  5096 ;; This function uses a non-reentrant model
  5097 ;;
  5098                           
  5099                           	psect	text17
  5100  0016C4                     __ptext17:
  5101                           	callstack 0
  5102  0016C4                     ___lbdiv:
  5103                           	callstack 28
  5104                           
  5105                           ;incstack = 0
  5106                           ;___lbdiv@dividend stored from wreg
  5107  0016C4  6E46               	movwf	___lbdiv@dividend^0,c
  5108  0016C6  6A48               	clrf	___lbdiv@quotient^0,c
  5109  0016C8  5045               	movf	___lbdiv@divisor^0,w,c
  5110  0016CA  E014               	bz	l2976
  5111  0016CC  0E01               	movlw	1
  5112  0016CE  6E47               	movwf	___lbdiv@counter^0,c
  5113  0016D0  D003               	goto	l2964
  5114  0016D2                     l2960:
  5115  0016D2  90D8               	bcf	status,0,c
  5116  0016D4  3645               	rlcf	___lbdiv@divisor^0,f,c
  5117  0016D6  2A47               	incf	___lbdiv@counter^0,f,c
  5118  0016D8                     l2964:
  5119  0016D8  AE45               	btfss	___lbdiv@divisor^0,7,c
  5120  0016DA  D7FB               	goto	l2960
  5121  0016DC                     u1900:
  5122  0016DC  90D8               	bcf	status,0,c
  5123  0016DE  3648               	rlcf	___lbdiv@quotient^0,f,c
  5124  0016E0  5045               	movf	___lbdiv@divisor^0,w,c
  5125  0016E2  5C46               	subwf	___lbdiv@dividend^0,w,c
  5126  0016E4  E303               	bnc	l2972
  5127  0016E6  5045               	movf	___lbdiv@divisor^0,w,c
  5128  0016E8  5E46               	subwf	___lbdiv@dividend^0,f,c
  5129  0016EA  8048               	bsf	___lbdiv@quotient^0,0,c
  5130  0016EC                     l2972:
  5131  0016EC  90D8               	bcf	status,0,c
  5132  0016EE  3245               	rrcf	___lbdiv@divisor^0,f,c
  5133  0016F0  2E47               	decfsz	___lbdiv@counter^0,f,c
  5134  0016F2  D7F4               	goto	u1900
  5135  0016F4                     l2976:
  5136  0016F4  5048               	movf	___lbdiv@quotient^0,w,c
  5137  0016F6  0012               	return		;funcret
  5138  0016F8                     __end_of___lbdiv:
  5139                           	callstack 0
  5140                           
  5141 ;; *************** function _Main_init *****************
  5142 ;; Defined at:
  5143 ;;		line 625 in file "main.c"
  5144 ;; Parameters:    Size  Location     Type
  5145 ;;		None
  5146 ;; Auto vars:     Size  Location     Type
  5147 ;;		None
  5148 ;; Return value:  Size  Location     Type
  5149 ;;                  1    wreg      void 
  5150 ;; Registers used:
  5151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5152 ;; Tracked objects:
  5153 ;;		On entry : 0/0
  5154 ;;		On exit  : 0/0
  5155 ;;		Unchanged: 0/0
  5156 ;; Data sizes:     COMRAM   BANK0   BANK1
  5157 ;;      Params:         0       0       0
  5158 ;;      Locals:         0       0       0
  5159 ;;      Temps:          0       0       0
  5160 ;;      Totals:         0       0       0
  5161 ;;Total ram usage:        0 bytes
  5162 ;; Hardware stack levels used:    1
  5163 ;; Hardware stack levels required when called:    6
  5164 ;; This function calls:
  5165 ;;		_cgrom_char
  5166 ;;		_initLCD
  5167 ;;		_init_ds18b20
  5168 ;;		_init_uart
  5169 ;; This function is called by:
  5170 ;;		_main
  5171 ;; This function uses a non-reentrant model
  5172 ;;
  5173                           
  5174                           	psect	text18
  5175  0013A8                     __ptext18:
  5176                           	callstack 0
  5177  0013A8                     _Main_init:
  5178                           	callstack 24
  5179                           
  5180                           ;main.c: 628: PORTA = 0;
  5181                           
  5182                           ;incstack = 0
  5183  0013A8  6A80               	clrf	128,c	;volatile
  5184                           
  5185                           ;main.c: 629: LATA = 0;
  5186  0013AA  6A89               	clrf	137,c	;volatile
  5187                           
  5188                           ;main.c: 630: TRISA = 0;
  5189  0013AC  6A92               	clrf	146,c	;volatile
  5190                           
  5191                           ;main.c: 631: PORTB = 0;
  5192  0013AE  6A81               	clrf	129,c	;volatile
  5193                           
  5194                           ;main.c: 632: LATB = 0;
  5195  0013B0  6A8A               	clrf	138,c	;volatile
  5196                           
  5197                           ;main.c: 633: TRISB = 0b00000110;
  5198  0013B2  0E06               	movlw	6
  5199  0013B4  6E93               	movwf	147,c	;volatile
  5200                           
  5201                           ;main.c: 634: PORTC = 0;
  5202  0013B6  6A82               	clrf	130,c	;volatile
  5203                           
  5204                           ;main.c: 635: LATC = 0;
  5205  0013B8  6A8B               	clrf	139,c	;volatile
  5206                           
  5207                           ;main.c: 636: TRISC = 0;
  5208  0013BA  6A94               	clrf	148,c	;volatile
  5209                           
  5210                           ;main.c: 637: OSCCONbits.SCS0 = 0;
  5211  0013BC  90D3               	bcf	211,0,c	;volatile
  5212                           
  5213                           ;main.c: 638: OSCCONbits.SCS1 = 1;
  5214  0013BE  82D3               	bsf	211,1,c	;volatile
  5215                           
  5216                           ;main.c: 639: OSCCONbits.IRCF = 0b111;
  5217  0013C0  0E70               	movlw	112
  5218  0013C2  12D3               	iorwf	211,f,c	;volatile
  5219                           
  5220                           ;main.c: 640: ADCON1bits.PCFG = 0b1111;
  5221  0013C4  0E0F               	movlw	15
  5222  0013C6  12C1               	iorwf	193,f,c	;volatile
  5223                           
  5224                           ;main.c: 642: PORTAbits.RA6 = 1;
  5225  0013C8  8C80               	bsf	128,6,c	;volatile
  5226                           
  5227                           ;main.c: 644: init_ds18b20();
  5228  0013CA  EC10  F00A         	call	_init_ds18b20	;wreg free
  5229                           
  5230                           ;main.c: 646: T1CON = 0b10000000;
  5231  0013CE  0E80               	movlw	128
  5232  0013D0  6ECD               	movwf	205,c	;volatile
  5233                           
  5234                           ;main.c: 648: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
  5235  0013D2  0E3C               	movlw	60
  5236  0013D4  6ECF               	movwf	207,c	;volatile
  5237                           
  5238                           ;main.c: 649: TMR1L = ((unsigned char)((15536)&0xFF));
  5239  0013D6  0EB0               	movlw	176
  5240  0013D8  6ECE               	movwf	206,c	;volatile
  5241                           
  5242                           ;main.c: 650: IPR1bits.TMR1IP = 1;
  5243  0013DA  809F               	bsf	159,0,c	;volatile
  5244                           
  5245                           ;main.c: 652: T0CONbits.T0PS = 0b000;
  5246  0013DC  0EF8               	movlw	-8
  5247  0013DE  16D5               	andwf	213,f,c	;volatile
  5248                           
  5249                           ;main.c: 653: T0CONbits.PSA = 1;
  5250  0013E0  86D5               	bsf	213,3,c	;volatile
  5251                           
  5252                           ;main.c: 654: T0CONbits.T08BIT = 0;
  5253  0013E2  9CD5               	bcf	213,6,c	;volatile
  5254                           
  5255                           ;main.c: 655: T0CONbits.T0CS = 0;
  5256  0013E4  9AD5               	bcf	213,5,c	;volatile
  5257                           
  5258                           ;main.c: 656: T0CONbits.TMR0ON = 1;
  5259  0013E6  8ED5               	bsf	213,7,c	;volatile
  5260                           
  5261                           ;main.c: 657: TMR0H = ((unsigned char)(((45536)>>8)&0xFF));
  5262  0013E8  0EB1               	movlw	177
  5263  0013EA  6ED7               	movwf	215,c	;volatile
  5264                           
  5265                           ;main.c: 658: TMR0L = ((unsigned char)((45536)&0xFF));
  5266  0013EC  0EE0               	movlw	224
  5267  0013EE  6ED6               	movwf	214,c	;volatile
  5268                           
  5269                           ;main.c: 659: INTCONbits.T0IE = 1;
  5270  0013F0  8AF2               	bsf	242,5,c	;volatile
  5271                           
  5272                           ;main.c: 660: INTCON2bits.T0IP = 0;
  5273  0013F2  94F1               	bcf	241,2,c	;volatile
  5274                           
  5275                           ;main.c: 661: INTCON2bits.RBPU = 0;
  5276  0013F4  9EF1               	bcf	241,7,c	;volatile
  5277                           
  5278                           ;main.c: 665: PIE1bits.TMR1IE = 1;
  5279  0013F6  809D               	bsf	157,0,c	;volatile
  5280                           
  5281                           ;main.c: 666: RCONbits.IPEN = 1;
  5282  0013F8  8ED0               	bsf	208,7,c	;volatile
  5283                           
  5284                           ;main.c: 667: INTCONbits.PEIE = 1;
  5285  0013FA  8CF2               	bsf	242,6,c	;volatile
  5286                           
  5287                           ;main.c: 668: INTCONbits.GIE = 1;
  5288  0013FC  8EF2               	bsf	242,7,c	;volatile
  5289                           
  5290                           ;main.c: 669: initLCD();
  5291  0013FE  EC14  F008         	call	_initLCD	;wreg free
  5292                           
  5293                           ;main.c: 670: init_uart();
  5294  001402  EC4C  F00C         	call	_init_uart	;wreg free
  5295                           
  5296                           ;main.c: 671: cgrom_char(symbol_4, 1);
  5297  001406  0EE3               	movlw	low _symbol_4
  5298  001408  6E49               	movwf	cgrom_char@symbol^0,c
  5299  00140A  0E1E               	movlw	high _symbol_4
  5300  00140C  6E4A               	movwf	(cgrom_char@symbol+1)^0,c
  5301  00140E  0E01               	movlw	1
  5302  001410  6E4B               	movwf	cgrom_char@address^0,c
  5303  001412  EC7C  F00B         	call	_cgrom_char	;wreg free
  5304                           
  5305                           ;main.c: 672: LATCbits.LATC4 = 0;
  5306  001416  988B               	bcf	139,4,c	;volatile
  5307                           
  5308                           ;main.c: 673: snd_k = 0;
  5309  001418  9C66               	bcf	(_snd_k/(0+8))^0,_snd_k& (0+7),c
  5310                           
  5311                           ;main.c: 674: snd_b = 0;
  5312  00141A  9A66               	bcf	(_snd_b/(0+8))^0,_snd_b& (0+7),c
  5313                           
  5314                           ;main.c: 675: snd_all = 0;
  5315  00141C  9866               	bcf	(_snd_all/(0+8))^0,_snd_all& (0+7),c
  5316  00141E  0012               	return		;funcret
  5317  001420                     __end_of_Main_init:
  5318                           	callstack 0
  5319                           
  5320 ;; *************** function _init_uart *****************
  5321 ;; Defined at:
  5322 ;;		line 28 in file "eusart.c"
  5323 ;; Parameters:    Size  Location     Type
  5324 ;;		None
  5325 ;; Auto vars:     Size  Location     Type
  5326 ;;		None
  5327 ;; Return value:  Size  Location     Type
  5328 ;;                  1    wreg      void 
  5329 ;; Registers used:
  5330 ;;		wreg, status,2
  5331 ;; Tracked objects:
  5332 ;;		On entry : 0/0
  5333 ;;		On exit  : 0/0
  5334 ;;		Unchanged: 0/0
  5335 ;; Data sizes:     COMRAM   BANK0   BANK1
  5336 ;;      Params:         0       0       0
  5337 ;;      Locals:         0       0       0
  5338 ;;      Temps:          0       0       0
  5339 ;;      Totals:         0       0       0
  5340 ;;Total ram usage:        0 bytes
  5341 ;; Hardware stack levels used:    1
  5342 ;; Hardware stack levels required when called:    2
  5343 ;; This function calls:
  5344 ;;		Nothing
  5345 ;; This function is called by:
  5346 ;;		_Main_init
  5347 ;; This function uses a non-reentrant model
  5348 ;;
  5349                           
  5350                           	psect	text19
  5351  001898                     __ptext19:
  5352                           	callstack 0
  5353  001898                     _init_uart:
  5354                           	callstack 27
  5355                           
  5356                           ;eusart.c: 30: TRISCbits.RC6 = 0;
  5357                           
  5358                           ;incstack = 0
  5359  001898  9C94               	bcf	148,6,c	;volatile
  5360                           
  5361                           ;eusart.c: 31: TRISCbits.RC7 = 1;
  5362  00189A  8E94               	bsf	148,7,c	;volatile
  5363                           
  5364                           ;eusart.c: 32: TXSTAbits.SYNC = 0;
  5365  00189C  98AC               	bcf	172,4,c	;volatile
  5366                           
  5367                           ;eusart.c: 33: TXSTAbits.TXEN = 1;
  5368  00189E  8AAC               	bsf	172,5,c	;volatile
  5369                           
  5370                           ;eusart.c: 34: RCSTAbits.CREN = 1;
  5371  0018A0  88AB               	bsf	171,4,c	;volatile
  5372                           
  5373                           ;eusart.c: 35: RCSTAbits.SPEN = 1;
  5374  0018A2  8EAB               	bsf	171,7,c	;volatile
  5375                           
  5376                           ;eusart.c: 38: TXSTAbits.BRGH = 1;
  5377  0018A4  84AC               	bsf	172,2,c	;volatile
  5378                           
  5379                           ;eusart.c: 39: SPBRG = 0x33;
  5380  0018A6  0E33               	movlw	51
  5381  0018A8  6EAF               	movwf	175,c	;volatile
  5382                           
  5383                           ;eusart.c: 52: eusartTxHead = 0;
  5384  0018AA  6A2D               	clrf	_eusartTxHead^0,c
  5385                           
  5386                           ;eusart.c: 57: eusartRxTail = 0;
  5387  0018AC  0E10               	movlw	16
  5388  0018AE  6E2C               	movwf	_eusartTxBufferRemaining^0,c	;volatile
  5389                           
  5390                           ;eusart.c: 58: eusartRxCount = 0;
  5391  0018B0  6A2B               	clrf	_eusartRxCount^0,c	;volatile
  5392  0018B2  0012               	return		;funcret
  5393  0018B4                     __end_of_init_uart:
  5394                           	callstack 0
  5395                           
  5396 ;; *************** function _init_ds18b20 *****************
  5397 ;; Defined at:
  5398 ;;		line 18 in file "ds18b20.c"
  5399 ;; Parameters:    Size  Location     Type
  5400 ;;		None
  5401 ;; Auto vars:     Size  Location     Type
  5402 ;;  i               1   12[COMRAM] unsigned char 
  5403 ;;  q               1   11[COMRAM] unsigned char 
  5404 ;; Return value:  Size  Location     Type
  5405 ;;                  1    wreg      void 
  5406 ;; Registers used:
  5407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5408 ;; Tracked objects:
  5409 ;;		On entry : 0/0
  5410 ;;		On exit  : 0/0
  5411 ;;		Unchanged: 0/0
  5412 ;; Data sizes:     COMRAM   BANK0   BANK1
  5413 ;;      Params:         0       0       0
  5414 ;;      Locals:         2       0       0
  5415 ;;      Temps:          2       0       0
  5416 ;;      Totals:         4       0       0
  5417 ;;Total ram usage:        4 bytes
  5418 ;; Hardware stack levels used:    1
  5419 ;; Hardware stack levels required when called:    4
  5420 ;; This function calls:
  5421 ;;		_ow_reset
  5422 ;;		_read_eep
  5423 ;;		_write_byte
  5424 ;; This function is called by:
  5425 ;;		_Main_init
  5426 ;; This function uses a non-reentrant model
  5427 ;;
  5428                           
  5429                           	psect	text20
  5430  001420                     __ptext20:
  5431                           	callstack 0
  5432  001420                     _init_ds18b20:
  5433                           	callstack 25
  5434                           
  5435                           ;ds18b20.c: 20: if (!ow_reset())
  5436                           
  5437                           ;incstack = 0
  5438  001420  EC95  F00B         	call	_ow_reset	;wreg free
  5439  001424  0900               	iorlw	0
  5440  001426  E10F               	bnz	l2606
  5441                           
  5442                           ;ds18b20.c: 21: {;ds18b20.c: 23: write_byte(0xCC);
  5443  001428  0ECC               	movlw	204
  5444  00142A  EC47  F00B         	call	_write_byte
  5445                           
  5446                           ;ds18b20.c: 24: write_byte(0x4E);
  5447  00142E  0E4E               	movlw	78
  5448  001430  EC47  F00B         	call	_write_byte
  5449                           
  5450                           ;ds18b20.c: 25: write_byte(0x00);
  5451  001434  0E00               	movlw	0
  5452  001436  EC47  F00B         	call	_write_byte
  5453                           
  5454                           ;ds18b20.c: 26: write_byte(0x00);
  5455  00143A  0E00               	movlw	0
  5456  00143C  EC47  F00B         	call	_write_byte
  5457                           
  5458                           ;ds18b20.c: 27: write_byte(0x7F);
  5459  001440  0E7F               	movlw	127
  5460  001442  EC47  F00B         	call	_write_byte
  5461  001446                     l2606:
  5462                           
  5463                           ;ds18b20.c: 28: };ds18b20.c: 30: for (uint8_t q = 0; q < 2; q++) {
  5464  001446  6A4D               	clrf	init_ds18b20@q^0,c
  5465  001448                     l380:
  5466                           
  5467                           ;ds18b20.c: 31: for (uint8_t i = 0; i < 8; i++) {
  5468  001448  6A4E               	clrf	init_ds18b20@i^0,c
  5469  00144A                     l2616:
  5470                           
  5471                           ;ds18b20.c: 32: rom_dq[q][i] = read_eep((q*8) + i);
  5472  00144A  504D               	movf	init_ds18b20@q^0,w,c
  5473  00144C  0D08               	mullw	8
  5474  00144E  50F3               	movf	243,w,c
  5475  001450  0F11               	addlw	low _rom_dq
  5476  001452  244E               	addwf	init_ds18b20@i^0,w,c
  5477  001454  6ED9               	movwf	fsr2l,c
  5478  001456  6ADA               	clrf	fsr2h,c
  5479  001458  504D               	movf	init_ds18b20@q^0,w,c
  5480  00145A  6E4B               	movwf	??_init_ds18b20^0,c
  5481  00145C  6A4C               	clrf	(??_init_ds18b20+1)^0,c
  5482  00145E  90D8               	bcf	status,0,c
  5483  001460  364B               	rlcf	??_init_ds18b20^0,f,c
  5484  001462  364C               	rlcf	(??_init_ds18b20+1)^0,f,c
  5485  001464  90D8               	bcf	status,0,c
  5486  001466  364B               	rlcf	??_init_ds18b20^0,f,c
  5487  001468  364C               	rlcf	(??_init_ds18b20+1)^0,f,c
  5488  00146A  90D8               	bcf	status,0,c
  5489  00146C  364B               	rlcf	??_init_ds18b20^0,f,c
  5490  00146E  364C               	rlcf	(??_init_ds18b20+1)^0,f,c
  5491  001470  504E               	movf	init_ds18b20@i^0,w,c
  5492  001472  244B               	addwf	??_init_ds18b20^0,w,c
  5493  001474  6E45               	movwf	read_eep@address^0,c
  5494  001476  0E00               	movlw	0
  5495  001478  204C               	addwfc	(??_init_ds18b20+1)^0,w,c
  5496  00147A  6E46               	movwf	(read_eep@address+1)^0,c
  5497  00147C  EC72  F00C         	call	_read_eep	;wreg free
  5498  001480  6EDF               	movwf	indf2,c
  5499  001482  2A4E               	incf	init_ds18b20@i^0,f,c
  5500  001484  0E07               	movlw	7
  5501  001486  644E               	cpfsgt	init_ds18b20@i^0,c
  5502  001488  D7E0               	goto	l2616
  5503  00148A  2A4D               	incf	init_ds18b20@q^0,f,c
  5504  00148C  0E01               	movlw	1
  5505  00148E  644D               	cpfsgt	init_ds18b20@q^0,c
  5506  001490  D7DB               	goto	l380
  5507  001492  0C01               	retlw	1
  5508  001494                     __end_of_init_ds18b20:
  5509                           	callstack 0
  5510                           
  5511 ;; *************** function _write_byte *****************
  5512 ;; Defined at:
  5513 ;;		line 66 in file "onewire.c"
  5514 ;; Parameters:    Size  Location     Type
  5515 ;;  val             1    wreg     unsigned char 
  5516 ;; Auto vars:     Size  Location     Type
  5517 ;;  val             1    6[COMRAM] unsigned char 
  5518 ;;  i               1    8[COMRAM] unsigned char 
  5519 ;;  temp            1    7[COMRAM] unsigned char 
  5520 ;; Return value:  Size  Location     Type
  5521 ;;                  1    wreg      void 
  5522 ;; Registers used:
  5523 ;;		wreg, status,2, status,0, cstack
  5524 ;; Tracked objects:
  5525 ;;		On entry : 0/0
  5526 ;;		On exit  : 0/0
  5527 ;;		Unchanged: 0/0
  5528 ;; Data sizes:     COMRAM   BANK0   BANK1
  5529 ;;      Params:         0       0       0
  5530 ;;      Locals:         3       0       0
  5531 ;;      Temps:          2       0       0
  5532 ;;      Totals:         5       0       0
  5533 ;;Total ram usage:        5 bytes
  5534 ;; Hardware stack levels used:    1
  5535 ;; Hardware stack levels required when called:    3
  5536 ;; This function calls:
  5537 ;;		_write_bit
  5538 ;; This function is called by:
  5539 ;;		_init_ds18b20
  5540 ;;		_ds18b20_readTemp
  5541 ;;		_ds18b20_readrom
  5542 ;; This function uses a non-reentrant model
  5543 ;;
  5544                           
  5545                           	psect	text21
  5546  00168E                     __ptext21:
  5547                           	callstack 0
  5548  00168E                     _write_byte:
  5549                           	callstack 26
  5550                           
  5551                           ;incstack = 0
  5552                           ;write_byte@val stored from wreg
  5553  00168E  6E48               	movwf	write_byte@val^0,c
  5554                           
  5555                           ;onewire.c: 68: uint8_t i;;onewire.c: 69: uint8_t temp;;onewire.c: 71: for (i=0;i<8;i++)
  5556  001690  6A4A               	clrf	write_byte@i^0,c
  5557  001692                     l1442:
  5558                           
  5559                           ;onewire.c: 72: {;onewire.c: 73: temp = val >> i;
  5560  001692  C04A  F046         	movff	write_byte@i,??_write_byte
  5561  001696  C048  F047         	movff	write_byte@val,??_write_byte+1
  5562  00169A  2A46               	incf	??_write_byte^0,f,c
  5563  00169C  D002               	goto	u124
  5564  00169E                     u125:
  5565  00169E  90D8               	bcf	status,0,c
  5566  0016A0  3247               	rrcf	(??_write_byte+1)^0,f,c
  5567  0016A2                     u124:
  5568  0016A2  2E46               	decfsz	??_write_byte^0,f,c
  5569  0016A4  D7FC               	goto	u125
  5570  0016A6  5047               	movf	(??_write_byte+1)^0,w,c
  5571  0016A8  6E49               	movwf	write_byte@temp^0,c
  5572                           
  5573                           ;onewire.c: 74: temp &= 0x01;
  5574  0016AA  0E01               	movlw	1
  5575  0016AC  1649               	andwf	write_byte@temp^0,f,c
  5576                           
  5577                           ;onewire.c: 75: write_bit(temp);
  5578  0016AE  5049               	movf	write_byte@temp^0,w,c
  5579  0016B0  EC2F  F00C         	call	_write_bit
  5580  0016B4  2A4A               	incf	write_byte@i^0,f,c
  5581  0016B6  0E07               	movlw	7
  5582  0016B8  644A               	cpfsgt	write_byte@i^0,c
  5583  0016BA  D7EB               	goto	l1442
  5584                           
  5585                           ;onewire.c: 76: };onewire.c: 78: _delay((unsigned long)((105)*(8000000/4000000.0)));
  5586  0016BC  0E46               	movlw	70
  5587  0016BE                     u2887:
  5588  0016BE  2EE8               	decfsz	wreg,f,c
  5589  0016C0  D7FE               	bra	u2887
  5590  0016C2  0012               	return		;funcret
  5591  0016C4                     __end_of_write_byte:
  5592                           	callstack 0
  5593                           
  5594 ;; *************** function _write_bit *****************
  5595 ;; Defined at:
  5596 ;;		line 34 in file "onewire.c"
  5597 ;; Parameters:    Size  Location     Type
  5598 ;;  bitval          1    wreg     unsigned char 
  5599 ;; Auto vars:     Size  Location     Type
  5600 ;;  bitval          1    3[COMRAM] unsigned char 
  5601 ;; Return value:  Size  Location     Type
  5602 ;;                  1    wreg      void 
  5603 ;; Registers used:
  5604 ;;		wreg, status,2, status,0, cstack
  5605 ;; Tracked objects:
  5606 ;;		On entry : 0/0
  5607 ;;		On exit  : 0/0
  5608 ;;		Unchanged: 0/0
  5609 ;; Data sizes:     COMRAM   BANK0   BANK1
  5610 ;;      Params:         0       0       0
  5611 ;;      Locals:         1       0       0
  5612 ;;      Temps:          0       0       0
  5613 ;;      Totals:         1       0       0
  5614 ;;Total ram usage:        1 bytes
  5615 ;; Hardware stack levels used:    1
  5616 ;; Hardware stack levels required when called:    2
  5617 ;; This function calls:
  5618 ;;		Nothing
  5619 ;; This function is called by:
  5620 ;;		_write_byte
  5621 ;; This function uses a non-reentrant model
  5622 ;;
  5623                           
  5624                           	psect	text22
  5625  00185E                     __ptext22:
  5626                           	callstack 0
  5627  00185E                     _write_bit:
  5628                           	callstack 26
  5629                           
  5630                           ;incstack = 0
  5631                           ;write_bit@bitval stored from wreg
  5632  00185E  6E45               	movwf	write_bit@bitval^0,c
  5633                           
  5634                           ;onewire.c: 36: PORTAbits.RA6 = 0;
  5635  001860  9C80               	bcf	128,6,c	;volatile
  5636                           
  5637                           ;onewire.c: 37: TRISAbits.TRISA6 = 0;
  5638  001862  9C92               	bcf	146,6,c	;volatile
  5639                           
  5640                           ;onewire.c: 38: if(bitval == 1) {
  5641  001864  0445               	decf	write_bit@bitval^0,w,c
  5642  001866  E104               	bnz	l1408
  5643                           
  5644                           ;onewire.c: 39: _delay((unsigned long)((2)*(8000000/4000000.0)));
  5645  001868  D000               	nop2		;2 cycle nop
  5646  00186A  D000               	nop2		;2 cycle nop
  5647                           
  5648                           ;onewire.c: 40: PORTAbits.RA6 = 1;
  5649  00186C  8C80               	bsf	128,6,c	;volatile
  5650                           
  5651                           ;onewire.c: 41: TRISAbits.TRISA6 = 1;
  5652  00186E  8C92               	bsf	146,6,c	;volatile
  5653  001870                     l1408:
  5654                           
  5655                           ;onewire.c: 42: };onewire.c: 43: _delay((unsigned long)((105)*(8000000/4000000.0)));
  5656  001870  0E46               	movlw	70
  5657  001872                     u2897:
  5658  001872  2EE8               	decfsz	wreg,f,c
  5659  001874  D7FE               	bra	u2897
  5660                           
  5661                           ;onewire.c: 44: PORTAbits.RA6 = 1;
  5662  001876  8C80               	bsf	128,6,c	;volatile
  5663                           
  5664                           ;onewire.c: 45: TRISAbits.TRISA6 = 1;
  5665  001878  8C92               	bsf	146,6,c	;volatile
  5666  00187A  0012               	return		;funcret
  5667  00187C                     __end_of_write_bit:
  5668                           	callstack 0
  5669                           
  5670 ;; *************** function _read_eep *****************
  5671 ;; Defined at:
  5672 ;;		line 25 in file "eeprom.c"
  5673 ;; Parameters:    Size  Location     Type
  5674 ;;  address         2    3[COMRAM] unsigned short 
  5675 ;; Auto vars:     Size  Location     Type
  5676 ;;		None
  5677 ;; Return value:  Size  Location     Type
  5678 ;;                  1    wreg      unsigned char 
  5679 ;; Registers used:
  5680 ;;		wreg, status,2
  5681 ;; Tracked objects:
  5682 ;;		On entry : 0/0
  5683 ;;		On exit  : 0/0
  5684 ;;		Unchanged: 0/0
  5685 ;; Data sizes:     COMRAM   BANK0   BANK1
  5686 ;;      Params:         2       0       0
  5687 ;;      Locals:         0       0       0
  5688 ;;      Temps:          0       0       0
  5689 ;;      Totals:         2       0       0
  5690 ;;Total ram usage:        2 bytes
  5691 ;; Hardware stack levels used:    1
  5692 ;; Hardware stack levels required when called:    2
  5693 ;; This function calls:
  5694 ;;		Nothing
  5695 ;; This function is called by:
  5696 ;;		_main
  5697 ;;		_init_ds18b20
  5698 ;; This function uses a non-reentrant model
  5699 ;;
  5700                           
  5701                           	psect	text23
  5702  0018E4                     __ptext23:
  5703                           	callstack 0
  5704  0018E4                     _read_eep:
  5705                           	callstack 28
  5706                           
  5707                           ;eeprom.c: 28: {}
  5708                           
  5709                           ;incstack = 0
  5710  0018E4  B2A6               	btfsc	166,1,c	;volsfr
  5711  0018E6  D7FE               	goto	_read_eep
  5712                           
  5713                           ;eeprom.c: 30: EEADR = address;
  5714  0018E8  C045  FFA9         	movff	read_eep@address,4009	;volatile
  5715                           
  5716                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
  5717  0018EC  9EA6               	bcf	166,7,c	;volsfr
  5718                           
  5719                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
  5720  0018EE  9CA6               	bcf	166,6,c	;volsfr
  5721                           
  5722                           ;eeprom.c: 33: EECON1bits.RD = 1;
  5723  0018F0  80A6               	bsf	166,0,c	;volsfr
  5724                           
  5725                           ;eeprom.c: 34: return( EEDATA );
  5726  0018F2  50A8               	movf	168,w,c	;volatile
  5727  0018F4  0012               	return		;funcret
  5728  0018F6                     __end_of_read_eep:
  5729                           	callstack 0
  5730                           
  5731 ;; *************** function _ow_reset *****************
  5732 ;; Defined at:
  5733 ;;		line 5 in file "onewire.c"
  5734 ;; Parameters:    Size  Location     Type
  5735 ;;		None
  5736 ;; Auto vars:     Size  Location     Type
  5737 ;;  presence        1    3[COMRAM] unsigned char 
  5738 ;; Return value:  Size  Location     Type
  5739 ;;                  1    wreg      unsigned char 
  5740 ;; Registers used:
  5741 ;;		wreg, status,2
  5742 ;; Tracked objects:
  5743 ;;		On entry : 0/0
  5744 ;;		On exit  : 0/0
  5745 ;;		Unchanged: 0/0
  5746 ;; Data sizes:     COMRAM   BANK0   BANK1
  5747 ;;      Params:         0       0       0
  5748 ;;      Locals:         1       0       0
  5749 ;;      Temps:          0       0       0
  5750 ;;      Totals:         1       0       0
  5751 ;;Total ram usage:        1 bytes
  5752 ;; Hardware stack levels used:    1
  5753 ;; Hardware stack levels required when called:    2
  5754 ;; This function calls:
  5755 ;;		Nothing
  5756 ;; This function is called by:
  5757 ;;		_init_ds18b20
  5758 ;;		_ds18b20_readTemp
  5759 ;;		_ds18b20_readrom
  5760 ;; This function uses a non-reentrant model
  5761 ;;
  5762                           
  5763                           	psect	text24
  5764  00172A                     __ptext24:
  5765                           	callstack 0
  5766  00172A                     _ow_reset:
  5767                           	callstack 27
  5768                           
  5769                           ;onewire.c: 7: uint8_t presence;;onewire.c: 8: PORTAbits.RA6 = 0;
  5770                           
  5771                           ;incstack = 0
  5772  00172A  9C80               	bcf	128,6,c	;volatile
  5773                           
  5774                           ;onewire.c: 9: TRISAbits.TRISA6 = 0;
  5775  00172C  9C92               	bcf	146,6,c	;volatile
  5776                           
  5777                           ;onewire.c: 10: _delay((unsigned long)((500)*(8000000/4000000.0)));
  5778  00172E  0EC8               	movlw	200
  5779  001730                     u2907:
  5780  001730  D000               	nop2	
  5781  001732  2EE8               	decfsz	wreg,f,c
  5782  001734  D7FD               	bra	u2907
  5783                           
  5784                           ;onewire.c: 11: PORTAbits.RA6 = 1;
  5785  001736  8C80               	bsf	128,6,c	;volatile
  5786                           
  5787                           ;onewire.c: 12: TRISAbits.TRISA6 = 1;
  5788  001738  8C92               	bsf	146,6,c	;volatile
  5789                           
  5790                           ;onewire.c: 13: _delay((unsigned long)((100)*(8000000/4000000.0)));
  5791  00173A  0E42               	movlw	66
  5792  00173C                     u2917:
  5793  00173C  2EE8               	decfsz	wreg,f,c
  5794  00173E  D7FE               	bra	u2917
  5795  001740  D000               	nop2	
  5796                           
  5797                           ;onewire.c: 14: presence = PORTAbits.RA6;
  5798  001742  0E00               	movlw	0
  5799  001744  BC80               	btfsc	128,6,c	;volatile
  5800  001746  0E01               	movlw	1
  5801  001748  6E45               	movwf	ow_reset@presence^0,c
  5802                           
  5803                           ;onewire.c: 15: _delay((unsigned long)((424)*(8000000/4000000.0)));
  5804  00174A  0EA9               	movlw	169
  5805  00174C                     u2927:
  5806  00174C  D000               	nop2	
  5807  00174E  2EE8               	decfsz	wreg,f,c
  5808  001750  D7FD               	bra	u2927
  5809  001752  D000               	nop2	
  5810  001754  F000               	nop	
  5811                           
  5812                           ;onewire.c: 16: return(presence);
  5813  001756  5045               	movf	ow_reset@presence^0,w,c
  5814  001758  0012               	return		;funcret
  5815  00175A                     __end_of_ow_reset:
  5816                           	callstack 0
  5817                           
  5818 ;; *************** function _initLCD *****************
  5819 ;; Defined at:
  5820 ;;		line 10 in file "hd44780.c"
  5821 ;; Parameters:    Size  Location     Type
  5822 ;;		None
  5823 ;; Auto vars:     Size  Location     Type
  5824 ;;		None
  5825 ;; Return value:  Size  Location     Type
  5826 ;;                  1    wreg      void 
  5827 ;; Registers used:
  5828 ;;		wreg, status,2, status,0, cstack
  5829 ;; Tracked objects:
  5830 ;;		On entry : 0/0
  5831 ;;		On exit  : 0/0
  5832 ;;		Unchanged: 0/0
  5833 ;; Data sizes:     COMRAM   BANK0   BANK1
  5834 ;;      Params:         0       0       0
  5835 ;;      Locals:         0       0       0
  5836 ;;      Temps:          1       0       0
  5837 ;;      Totals:         1       0       0
  5838 ;;Total ram usage:        1 bytes
  5839 ;; Hardware stack levels used:    1
  5840 ;; Hardware stack levels required when called:    5
  5841 ;; This function calls:
  5842 ;;		_clearLCD
  5843 ;;		_lcdNibble
  5844 ;;		_lcdWrite
  5845 ;; This function is called by:
  5846 ;;		_Main_init
  5847 ;; This function uses a non-reentrant model
  5848 ;;
  5849                           
  5850                           	psect	text25
  5851  001028                     __ptext25:
  5852                           	callstack 0
  5853  001028                     _initLCD:
  5854                           	callstack 24
  5855                           
  5856                           ;hd44780.c: 11: LATAbits.LATA2 = 0;
  5857                           
  5858                           ;incstack = 0
  5859  001028  9489               	bcf	137,2,c	;volatile
  5860                           
  5861                           ;hd44780.c: 12: LATAbits.LATA1 = 0;
  5862  00102A  9289               	bcf	137,1,c	;volatile
  5863                           
  5864                           ;hd44780.c: 14: _delay((unsigned long)((10)*(8000000/4000.0)));
  5865  00102C  0E1A               	movlw	26
  5866  00102E  6E4A               	movwf	??_initLCD^0,c
  5867  001030  0EF8               	movlw	248
  5868  001032                     u2937:
  5869  001032  2EE8               	decfsz	wreg,f,c
  5870  001034  D7FE               	bra	u2937
  5871  001036  2E4A               	decfsz	??_initLCD^0,f,c
  5872  001038  D7FC               	bra	u2937
  5873  00103A  D000               	nop2	
  5874                           
  5875                           ;hd44780.c: 15: _delay((unsigned long)((10)*(8000000/4000.0)));
  5876  00103C  0E1A               	movlw	26
  5877  00103E  6E4A               	movwf	??_initLCD^0,c
  5878  001040  0EF8               	movlw	248
  5879  001042                     u2947:
  5880  001042  2EE8               	decfsz	wreg,f,c
  5881  001044  D7FE               	bra	u2947
  5882  001046  2E4A               	decfsz	??_initLCD^0,f,c
  5883  001048  D7FC               	bra	u2947
  5884  00104A  D000               	nop2	
  5885                           
  5886                           ;hd44780.c: 16: _delay((unsigned long)((10)*(8000000/4000.0)));
  5887  00104C  0E1A               	movlw	26
  5888  00104E  6E4A               	movwf	??_initLCD^0,c
  5889  001050  0EF8               	movlw	248
  5890  001052                     u2957:
  5891  001052  2EE8               	decfsz	wreg,f,c
  5892  001054  D7FE               	bra	u2957
  5893  001056  2E4A               	decfsz	??_initLCD^0,f,c
  5894  001058  D7FC               	bra	u2957
  5895  00105A  D000               	nop2	
  5896                           
  5897                           ;hd44780.c: 17: _delay((unsigned long)((10)*(8000000/4000.0)));
  5898  00105C  0E1A               	movlw	26
  5899  00105E  6E4A               	movwf	??_initLCD^0,c
  5900  001060  0EF8               	movlw	248
  5901  001062                     u2967:
  5902  001062  2EE8               	decfsz	wreg,f,c
  5903  001064  D7FE               	bra	u2967
  5904  001066  2E4A               	decfsz	??_initLCD^0,f,c
  5905  001068  D7FC               	bra	u2967
  5906  00106A  D000               	nop2	
  5907                           
  5908                           ;hd44780.c: 21: lcdNibble(0b0011);
  5909  00106C  0E03               	movlw	3
  5910  00106E  EC97  F009         	call	_lcdNibble
  5911                           
  5912                           ;hd44780.c: 22: _delay((unsigned long)((5)*(8000000/4000.0)));
  5913  001072  0E0D               	movlw	13
  5914  001074  6E4A               	movwf	??_initLCD^0,c
  5915  001076  0EFC               	movlw	252
  5916  001078                     u2977:
  5917  001078  2EE8               	decfsz	wreg,f,c
  5918  00107A  D7FE               	bra	u2977
  5919  00107C  2E4A               	decfsz	??_initLCD^0,f,c
  5920  00107E  D7FC               	bra	u2977
  5921                           
  5922                           ;hd44780.c: 23: lcdNibble(0b0011);
  5923  001080  0E03               	movlw	3
  5924  001082  EC97  F009         	call	_lcdNibble
  5925                           
  5926                           ;hd44780.c: 24: _delay((unsigned long)((5)*(8000000/4000.0)));
  5927  001086  0E0D               	movlw	13
  5928  001088  6E4A               	movwf	??_initLCD^0,c
  5929  00108A  0EFC               	movlw	252
  5930  00108C                     u2987:
  5931  00108C  2EE8               	decfsz	wreg,f,c
  5932  00108E  D7FE               	bra	u2987
  5933  001090  2E4A               	decfsz	??_initLCD^0,f,c
  5934  001092  D7FC               	bra	u2987
  5935                           
  5936                           ;hd44780.c: 25: lcdNibble(0b0011);
  5937  001094  0E03               	movlw	3
  5938  001096  EC97  F009         	call	_lcdNibble
  5939                           
  5940                           ;hd44780.c: 26: _delay((unsigned long)((5)*(8000000/4000.0)));
  5941  00109A  0E0D               	movlw	13
  5942  00109C  6E4A               	movwf	??_initLCD^0,c
  5943  00109E  0EFC               	movlw	252
  5944  0010A0                     u2997:
  5945  0010A0  2EE8               	decfsz	wreg,f,c
  5946  0010A2  D7FE               	bra	u2997
  5947  0010A4  2E4A               	decfsz	??_initLCD^0,f,c
  5948  0010A6  D7FC               	bra	u2997
  5949                           
  5950                           ;hd44780.c: 27: lcdNibble(0b0010);
  5951  0010A8  0E02               	movlw	2
  5952  0010AA  EC97  F009         	call	_lcdNibble
  5953                           
  5954                           ;hd44780.c: 28: _delay((unsigned long)((5)*(8000000/4000.0)));
  5955  0010AE  0E0D               	movlw	13
  5956  0010B0  6E4A               	movwf	??_initLCD^0,c
  5957  0010B2  0EFC               	movlw	252
  5958  0010B4                     u3007:
  5959  0010B4  2EE8               	decfsz	wreg,f,c
  5960  0010B6  D7FE               	bra	u3007
  5961  0010B8  2E4A               	decfsz	??_initLCD^0,f,c
  5962  0010BA  D7FC               	bra	u3007
  5963                           
  5964                           ;hd44780.c: 31: lcdWrite(((0b0010 << 4) | (1 << 3)), COMMAND);
  5965  0010BC  0E00               	movlw	0
  5966  0010BE  6E47               	movwf	lcdWrite@type^0,c
  5967  0010C0  0E28               	movlw	40
  5968  0010C2  ECFC  F00B         	call	_lcdWrite
  5969                           
  5970                           ;hd44780.c: 32: _delay((unsigned long)((5)*(8000000/4000.0)));
  5971  0010C6  0E0D               	movlw	13
  5972  0010C8  6E4A               	movwf	??_initLCD^0,c
  5973  0010CA  0EFC               	movlw	252
  5974  0010CC                     u3017:
  5975  0010CC  2EE8               	decfsz	wreg,f,c
  5976  0010CE  D7FE               	bra	u3017
  5977  0010D0  2E4A               	decfsz	??_initLCD^0,f,c
  5978  0010D2  D7FC               	bra	u3017
  5979                           
  5980                           ;hd44780.c: 33: lcdWrite(((0b1100) | (0 << 1) | (0 << 0)), COMMAND);
  5981  0010D4  0E00               	movlw	0
  5982  0010D6  6E47               	movwf	lcdWrite@type^0,c
  5983  0010D8  0E0C               	movlw	12
  5984  0010DA  ECFC  F00B         	call	_lcdWrite
  5985                           
  5986                           ;hd44780.c: 34: _delay((unsigned long)((8)*(8000000/4000.0)));
  5987  0010DE  0E15               	movlw	21
  5988  0010E0  6E4A               	movwf	??_initLCD^0,c
  5989  0010E2  0EC6               	movlw	198
  5990  0010E4                     u3027:
  5991  0010E4  2EE8               	decfsz	wreg,f,c
  5992  0010E6  D7FE               	bra	u3027
  5993  0010E8  2E4A               	decfsz	??_initLCD^0,f,c
  5994  0010EA  D7FC               	bra	u3027
  5995  0010EC  D000               	nop2	
  5996                           
  5997                           ;hd44780.c: 35: clearLCD();
  5998  0010EE  EC5A  F00C         	call	_clearLCD	;wreg free
  5999                           
  6000                           ;hd44780.c: 36: _delay((unsigned long)((5)*(8000000/4000.0)));
  6001  0010F2  0E0D               	movlw	13
  6002  0010F4  6E4A               	movwf	??_initLCD^0,c
  6003  0010F6  0EFC               	movlw	252
  6004  0010F8                     u3037:
  6005  0010F8  2EE8               	decfsz	wreg,f,c
  6006  0010FA  D7FE               	bra	u3037
  6007  0010FC  2E4A               	decfsz	??_initLCD^0,f,c
  6008  0010FE  D7FC               	bra	u3037
  6009                           
  6010                           ;hd44780.c: 37: lcdWrite(0x06, COMMAND);
  6011  001100  0E00               	movlw	0
  6012  001102  6E47               	movwf	lcdWrite@type^0,c
  6013  001104  0E06               	movlw	6
  6014  001106  ECFC  F00B         	call	_lcdWrite
  6015                           
  6016                           ;hd44780.c: 38: _delay((unsigned long)((5)*(8000000/4000.0)));
  6017  00110A  0E0D               	movlw	13
  6018  00110C  6E4A               	movwf	??_initLCD^0,c
  6019  00110E  0EFC               	movlw	252
  6020  001110                     u3047:
  6021  001110  2EE8               	decfsz	wreg,f,c
  6022  001112  D7FE               	bra	u3047
  6023  001114  2E4A               	decfsz	??_initLCD^0,f,c
  6024  001116  D7FC               	bra	u3047
  6025                           
  6026                           ;hd44780.c: 39: clearLCD();
  6027  001118  EC5A  F00C         	call	_clearLCD	;wreg free
  6028                           
  6029                           ;hd44780.c: 41: LATAbits.LATA2 = 1;
  6030  00111C  8489               	bsf	137,2,c	;volatile
  6031  00111E  0012               	return		;funcret
  6032  001120                     __end_of_initLCD:
  6033                           	callstack 0
  6034                           
  6035 ;; *************** function _clearLCD *****************
  6036 ;; Defined at:
  6037 ;;		line 45 in file "hd44780.c"
  6038 ;; Parameters:    Size  Location     Type
  6039 ;;		None
  6040 ;; Auto vars:     Size  Location     Type
  6041 ;;		None
  6042 ;; Return value:  Size  Location     Type
  6043 ;;                  1    wreg      void 
  6044 ;; Registers used:
  6045 ;;		wreg, status,2, status,0, cstack
  6046 ;; Tracked objects:
  6047 ;;		On entry : 0/0
  6048 ;;		On exit  : 0/0
  6049 ;;		Unchanged: 0/0
  6050 ;; Data sizes:     COMRAM   BANK0   BANK1
  6051 ;;      Params:         0       0       0
  6052 ;;      Locals:         0       0       0
  6053 ;;      Temps:          1       0       0
  6054 ;;      Totals:         1       0       0
  6055 ;;Total ram usage:        1 bytes
  6056 ;; Hardware stack levels used:    1
  6057 ;; Hardware stack levels required when called:    4
  6058 ;; This function calls:
  6059 ;;		_lcdWrite
  6060 ;; This function is called by:
  6061 ;;		_main
  6062 ;;		_initLCD
  6063 ;; This function uses a non-reentrant model
  6064 ;;
  6065                           
  6066                           	psect	text26
  6067  0018B4                     __ptext26:
  6068                           	callstack 0
  6069  0018B4                     _clearLCD:
  6070                           	callstack 0
  6071                           
  6072                           ;hd44780.c: 46: lcdWrite(0x01, COMMAND);
  6073                           
  6074                           ;incstack = 0
  6075  0018B4  EC4F  F009         	call	PL58	;call to abstracted procedure
  6076  0018B8  ECFC  F00B         	call	_lcdWrite
  6077                           
  6078                           ;hd44780.c: 47: _delay((unsigned long)((2)*(8000000/4000.0)));
  6079  0018BC  0E06               	movlw	6
  6080  0018BE  6E49               	movwf	??_clearLCD^0,c
  6081  0018C0  0E30               	movlw	48
  6082  0018C2                     u3057:
  6083  0018C2  2EE8               	decfsz	wreg,f,c
  6084  0018C4  D7FE               	bra	u3057
  6085  0018C6  2E49               	decfsz	??_clearLCD^0,f,c
  6086  0018C8  D7FC               	bra	u3057
  6087  0018CA  D000               	nop2	
  6088  0018CC  0012               	return		;funcret
  6089  0018CE                     __end_of_clearLCD:
  6090                           	callstack 0
  6091                           
  6092 ;; *************** function _cgrom_char *****************
  6093 ;; Defined at:
  6094 ;;		line 127 in file "hd44780.c"
  6095 ;; Parameters:    Size  Location     Type
  6096 ;;  symbol          2    7[COMRAM] PTR unsigned char 
  6097 ;;		 -> symbol_4(8), 
  6098 ;;  address         1    9[COMRAM] unsigned char 
  6099 ;; Auto vars:     Size  Location     Type
  6100 ;;  i               1   10[COMRAM] unsigned char 
  6101 ;; Return value:  Size  Location     Type
  6102 ;;                  1    wreg      void 
  6103 ;; Registers used:
  6104 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6105 ;; Tracked objects:
  6106 ;;		On entry : 0/0
  6107 ;;		On exit  : 0/0
  6108 ;;		Unchanged: 0/0
  6109 ;; Data sizes:     COMRAM   BANK0   BANK1
  6110 ;;      Params:         3       0       0
  6111 ;;      Locals:         1       0       0
  6112 ;;      Temps:          0       0       0
  6113 ;;      Totals:         4       0       0
  6114 ;;Total ram usage:        4 bytes
  6115 ;; Hardware stack levels used:    1
  6116 ;; Hardware stack levels required when called:    4
  6117 ;; This function calls:
  6118 ;;		_lcdWrite
  6119 ;; This function is called by:
  6120 ;;		_Main_init
  6121 ;; This function uses a non-reentrant model
  6122 ;;
  6123                           
  6124                           	psect	text27
  6125  0016F8                     __ptext27:
  6126                           	callstack 0
  6127  0016F8                     _cgrom_char:
  6128                           	callstack 25
  6129                           
  6130                           ;hd44780.c: 128: uint8_t i;;hd44780.c: 129: lcdWrite(0x40 | (address * 8), COMMAND);
  6131                           
  6132                           ;incstack = 0
  6133  0016F8  6A47               	clrf	lcdWrite@type^0,c
  6134  0016FA  504B               	movf	cgrom_char@address^0,w,c
  6135  0016FC  0D08               	mullw	8
  6136  0016FE  50F3               	movf	243,w,c
  6137  001700  0940               	iorlw	64
  6138  001702  ECFC  F00B         	call	_lcdWrite
  6139                           
  6140                           ;hd44780.c: 130: for (i = 0; i < 8; i++)
  6141  001706  6A4C               	clrf	cgrom_char@i^0,c
  6142  001708                     l2664:
  6143                           
  6144                           ;hd44780.c: 131: lcdWrite(*symbol++, DATA);
  6145  001708  0E01               	movlw	1
  6146  00170A  6E47               	movwf	lcdWrite@type^0,c
  6147  00170C  C049  FFF6         	movff	cgrom_char@symbol,tblptrl
  6148  001710  C04A  FFF7         	movff	cgrom_char@symbol+1,tblptrh
  6149  001714                     	if	0	;tblptru may be non-zero
  6150  001714                     	endif
  6151  001714                     	if	0	;tblptru may be non-zero
  6152  001714                     	endif
  6153  001714  0008               	tblrd		*
  6154  001716  50F5               	movf	tablat,w,c
  6155  001718  ECFC  F00B         	call	_lcdWrite
  6156  00171C  4A49               	infsnz	cgrom_char@symbol^0,f,c
  6157  00171E  2A4A               	incf	(cgrom_char@symbol+1)^0,f,c
  6158  001720  2A4C               	incf	cgrom_char@i^0,f,c
  6159  001722  0E07               	movlw	7
  6160  001724  644C               	cpfsgt	cgrom_char@i^0,c
  6161  001726  D7F0               	goto	l2664
  6162  001728  0C07               	retlw	7
  6163  00172A                     __end_of_cgrom_char:
  6164                           	callstack 0
  6165                           
  6166 ;; *************** function _lcdWrite *****************
  6167 ;; Defined at:
  6168 ;;		line 50 in file "hd44780.c"
  6169 ;; Parameters:    Size  Location     Type
  6170 ;;  byte            1    wreg     unsigned char 
  6171 ;;  type            1    5[COMRAM] enum E2021
  6172 ;; Auto vars:     Size  Location     Type
  6173 ;;  byte            1    6[COMRAM] unsigned char 
  6174 ;; Return value:  Size  Location     Type
  6175 ;;                  1    wreg      void 
  6176 ;; Registers used:
  6177 ;;		wreg, status,2, status,0, cstack
  6178 ;; Tracked objects:
  6179 ;;		On entry : 0/0
  6180 ;;		On exit  : 0/0
  6181 ;;		Unchanged: 0/0
  6182 ;; Data sizes:     COMRAM   BANK0   BANK1
  6183 ;;      Params:         1       0       0
  6184 ;;      Locals:         1       0       0
  6185 ;;      Temps:          0       0       0
  6186 ;;      Totals:         2       0       0
  6187 ;;Total ram usage:        2 bytes
  6188 ;; Hardware stack levels used:    1
  6189 ;; Hardware stack levels required when called:    3
  6190 ;; This function calls:
  6191 ;;		_lcdNibble
  6192 ;; This function is called by:
  6193 ;;		_initLCD
  6194 ;;		_clearLCD
  6195 ;;		_lcd_gotoxy
  6196 ;;		_lcd_putc
  6197 ;;		_lcdPrint
  6198 ;;		_cgrom_char
  6199 ;; This function uses a non-reentrant model
  6200 ;;
  6201                           
  6202                           	psect	text28
  6203  0017F8                     __ptext28:
  6204                           	callstack 0
  6205  0017F8                     _lcdWrite:
  6206                           	callstack 26
  6207                           
  6208                           ;incstack = 0
  6209                           ;lcdWrite@byte stored from wreg
  6210  0017F8  6E48               	movwf	lcdWrite@byte^0,c
  6211                           
  6212                           ;hd44780.c: 51: if (type == COMMAND)
  6213  0017FA  5047               	movf	lcdWrite@type^0,w,c
  6214  0017FC  E102               	bnz	l450
  6215                           
  6216                           ;hd44780.c: 52: LATAbits.LATA2 = 0;
  6217  0017FE  9489               	bcf	137,2,c	;volatile
  6218  001800  D001               	goto	l2550
  6219  001802                     l450:
  6220                           
  6221                           ;hd44780.c: 53: else;hd44780.c: 54: LATAbits.LATA2 = 1;
  6222  001802  8489               	bsf	137,2,c	;volatile
  6223  001804                     l2550:
  6224                           
  6225                           ;hd44780.c: 56: _delay((unsigned long)((100)*(8000000/4000000.0)));
  6226  001804  0E42               	movlw	66
  6227  001806                     u3067:
  6228  001806  2EE8               	decfsz	wreg,f,c
  6229  001808  D7FE               	bra	u3067
  6230  00180A  D000               	nop2	
  6231                           
  6232                           ;hd44780.c: 58: lcdNibble(byte >> 4);
  6233  00180C  3848               	swapf	lcdWrite@byte^0,w,c
  6234  00180E  0B0F               	andlw	15
  6235  001810  EC97  F009         	call	_lcdNibble
  6236                           
  6237                           ;hd44780.c: 59: lcdNibble(byte & 0x0F);
  6238  001814  5048               	movf	lcdWrite@byte^0,w,c
  6239  001816  0B0F               	andlw	15
  6240  001818  EF97  F009         	goto	_lcdNibble
  6241  00181C                     __end_of_lcdWrite:
  6242                           	callstack 0
  6243                           
  6244 ;; *************** function _lcdNibble *****************
  6245 ;; Defined at:
  6246 ;;		line 63 in file "hd44780.c"
  6247 ;; Parameters:    Size  Location     Type
  6248 ;;  nibble          1    wreg     unsigned char 
  6249 ;; Auto vars:     Size  Location     Type
  6250 ;;  nibble          1    4[COMRAM] unsigned char 
  6251 ;; Return value:  Size  Location     Type
  6252 ;;                  1    wreg      void 
  6253 ;; Registers used:
  6254 ;;		wreg, status,2, status,0
  6255 ;; Tracked objects:
  6256 ;;		On entry : 0/0
  6257 ;;		On exit  : 0/0
  6258 ;;		Unchanged: 0/0
  6259 ;; Data sizes:     COMRAM   BANK0   BANK1
  6260 ;;      Params:         0       0       0
  6261 ;;      Locals:         1       0       0
  6262 ;;      Temps:          1       0       0
  6263 ;;      Totals:         2       0       0
  6264 ;;Total ram usage:        2 bytes
  6265 ;; Hardware stack levels used:    1
  6266 ;; Hardware stack levels required when called:    2
  6267 ;; This function calls:
  6268 ;;		Nothing
  6269 ;; This function is called by:
  6270 ;;		_initLCD
  6271 ;;		_lcdWrite
  6272 ;; This function uses a non-reentrant model
  6273 ;;
  6274                           
  6275                           	psect	text29
  6276  00132E                     __ptext29:
  6277                           	callstack 0
  6278  00132E                     _lcdNibble:
  6279                           	callstack 26
  6280                           
  6281                           ;incstack = 0
  6282                           ;lcdNibble@nibble stored from wreg
  6283  00132E  6E46               	movwf	lcdNibble@nibble^0,c
  6284                           
  6285                           ;hd44780.c: 64: LATCbits.LATC0 = (nibble & 0x01) ? 1 : 0;
  6286  001330  A046               	btfss	lcdNibble@nibble^0,0,c
  6287  001332  D003               	goto	u10
  6288  001334  6A45               	clrf	??_lcdNibble^0,c
  6289  001336  2A45               	incf	??_lcdNibble^0,f,c
  6290  001338  D001               	goto	u28
  6291  00133A                     u10:
  6292  00133A  6A45               	clrf	??_lcdNibble^0,c
  6293  00133C                     u28:
  6294  00133C  508B               	movf	139,w,c	;volatile
  6295  00133E  1845               	xorwf	??_lcdNibble^0,w,c
  6296  001340  0BFE               	andlw	-2
  6297  001342  1845               	xorwf	??_lcdNibble^0,w,c
  6298  001344  6E8B               	movwf	139,c	;volatile
  6299                           
  6300                           ;hd44780.c: 65: LATCbits.LATC1 = (nibble & 0x02) ? 1 : 0;
  6301  001346  A246               	btfss	lcdNibble@nibble^0,1,c
  6302  001348  D003               	goto	u30
  6303  00134A  6A45               	clrf	??_lcdNibble^0,c
  6304  00134C  2A45               	incf	??_lcdNibble^0,f,c
  6305  00134E  D001               	goto	u48
  6306  001350                     u30:
  6307  001350  6A45               	clrf	??_lcdNibble^0,c
  6308  001352                     u48:
  6309  001352  4645               	rlncf	??_lcdNibble^0,f,c
  6310  001354  508B               	movf	139,w,c	;volatile
  6311  001356  1845               	xorwf	??_lcdNibble^0,w,c
  6312  001358  0BFD               	andlw	-3
  6313  00135A  1845               	xorwf	??_lcdNibble^0,w,c
  6314  00135C  6E8B               	movwf	139,c	;volatile
  6315                           
  6316                           ;hd44780.c: 66: LATCbits.LATC2 = (nibble & 0x04) ? 1 : 0;
  6317  00135E  A446               	btfss	lcdNibble@nibble^0,2,c
  6318  001360  D003               	goto	u50
  6319  001362  6A45               	clrf	??_lcdNibble^0,c
  6320  001364  2A45               	incf	??_lcdNibble^0,f,c
  6321  001366  D001               	goto	u68
  6322  001368                     u50:
  6323  001368  6A45               	clrf	??_lcdNibble^0,c
  6324  00136A                     u68:
  6325  00136A  D819               	call	PL38	;call to abstracted procedure
  6326  00136C  0BFB               	andlw	-5
  6327  00136E  1845               	xorwf	??_lcdNibble^0,w,c
  6328  001370  6E8B               	movwf	139,c	;volatile
  6329                           
  6330                           ;hd44780.c: 67: LATCbits.LATC3 = (nibble & 0x08) ? 1 : 0;
  6331  001372  A646               	btfss	lcdNibble@nibble^0,3,c
  6332  001374  D003               	goto	u70
  6333  001376  6A45               	clrf	??_lcdNibble^0,c
  6334  001378  2A45               	incf	??_lcdNibble^0,f,c
  6335  00137A  D001               	goto	u88
  6336  00137C                     u70:
  6337  00137C  6A45               	clrf	??_lcdNibble^0,c
  6338  00137E                     u88:
  6339  00137E  4645               	rlncf	??_lcdNibble^0,f,c
  6340  001380  D80E               	call	PL38	;call to abstracted procedure
  6341  001382  0BF7               	andlw	-9
  6342  001384  1845               	xorwf	??_lcdNibble^0,w,c
  6343  001386  6E8B               	movwf	139,c	;volatile
  6344                           
  6345                           ;hd44780.c: 70: LATAbits.LATA1 = 1;
  6346  001388  8289               	bsf	137,1,c	;volatile
  6347                           
  6348                           ;hd44780.c: 71: _delay((unsigned long)((100)*(8000000/4000000.0)));
  6349  00138A  0E42               	movlw	66
  6350  00138C                     u3077:
  6351  00138C  2EE8               	decfsz	wreg,f,c
  6352  00138E  D7FE               	bra	u3077
  6353  001390  D000               	nop2	
  6354                           
  6355                           ;hd44780.c: 72: LATAbits.LATA1 = 0;
  6356  001392  9289               	bcf	137,1,c	;volatile
  6357                           
  6358                           ;hd44780.c: 73: _delay((unsigned long)((100)*(8000000/4000000.0)));
  6359  001394  0E42               	movlw	66
  6360  001396                     u3087:
  6361  001396  2EE8               	decfsz	wreg,f,c
  6362  001398  D7FE               	bra	u3087
  6363  00139A  D000               	nop2	
  6364  00139C  0012               	return		;funcret
  6365  00139E                     __end_of_lcdNibble:
  6366                           	callstack 0
  6367  00139E                     PL38:
  6368                           	callstack 26
  6369  00139E  4645               	rlncf	??_lcdNibble^0,f,c
  6370  0013A0  4645               	rlncf	??_lcdNibble^0,f,c
  6371  0013A2  508B               	movf	139,w,c	;volatile
  6372  0013A4  1845               	xorwf	??_lcdNibble^0,w,c
  6373  0013A6  0012               	return	
  6374  0013A8                     __end_ofPL38:
  6375                           	callstack 0
  6376                           
  6377 ;; *************** function _EUSART_Write_Str *****************
  6378 ;; Defined at:
  6379 ;;		line 106 in file "eusart.c"
  6380 ;; Parameters:    Size  Location     Type
  6381 ;;  t               2    4[COMRAM] PTR const unsigned char 
  6382 ;;		 -> STR_11(7), STR_10(4), STR_9(3), STR_8(4), 
  6383 ;;		 -> STR_7(5), STR_6(4), STR_5(4), 
  6384 ;; Auto vars:     Size  Location     Type
  6385 ;;		None
  6386 ;; Return value:  Size  Location     Type
  6387 ;;                  1    wreg      void 
  6388 ;; Registers used:
  6389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6390 ;; Tracked objects:
  6391 ;;		On entry : 0/0
  6392 ;;		On exit  : 0/0
  6393 ;;		Unchanged: 0/0
  6394 ;; Data sizes:     COMRAM   BANK0   BANK1
  6395 ;;      Params:         2       0       0
  6396 ;;      Locals:         0       0       0
  6397 ;;      Temps:          0       0       0
  6398 ;;      Totals:         2       0       0
  6399 ;;Total ram usage:        2 bytes
  6400 ;; Hardware stack levels used:    1
  6401 ;; Hardware stack levels required when called:    3
  6402 ;; This function calls:
  6403 ;;		_EUSART_Write
  6404 ;; This function is called by:
  6405 ;;		_main
  6406 ;; This function uses a non-reentrant model
  6407 ;;
  6408                           
  6409                           	psect	text30
  6410  00183E                     __ptext30:
  6411                           	callstack 0
  6412  00183E                     _EUSART_Write_Str:
  6413                           	callstack 27
  6414                           
  6415                           ;eusart.c: 107: while (*t != '\0') {
  6416                           
  6417                           ;incstack = 0
  6418  00183E  D005               	goto	l2910
  6419  001840                     l2906:
  6420                           
  6421                           ;eusart.c: 108: EUSART_Write(*t);
  6422  001840  D807               	call	PL24	;call to abstracted procedure
  6423  001842  ECAD  F00B         	call	_EUSART_Write
  6424                           
  6425                           ;eusart.c: 109: *t++;
  6426  001846  4A46               	infsnz	EUSART_Write_Str@t^0,f,c
  6427  001848  2A47               	incf	(EUSART_Write_Str@t+1)^0,f,c
  6428  00184A                     l2910:
  6429  00184A  D802               	call	PL24	;call to abstracted procedure
  6430  00184C  E1F9               	bnz	l2906
  6431  00184E  0012               	return		;funcret
  6432  001850                     __end_of_EUSART_Write_Str:
  6433                           	callstack 0
  6434  001850                     PL24:
  6435                           	callstack 27
  6436  001850  C046  FFF6         	movff	EUSART_Write_Str@t,tblptrl
  6437  001854  C047  FFF7         	movff	EUSART_Write_Str@t+1,tblptrh
  6438  001858                     	if	0	;tblptru may be non-zero
  6439  001858                     	endif
  6440  001858                     	if	0	;tblptru may be non-zero
  6441  001858                     	endif
  6442  001858  0008               	tblrd		*
  6443  00185A  50F5               	movf	tablat,w,c
  6444  00185C  0012               	return	
  6445  00185E                     __end_ofPL24:
  6446                           	callstack 0
  6447                           
  6448 ;; *************** function _EUSART_Write *****************
  6449 ;; Defined at:
  6450 ;;		line 81 in file "eusart.c"
  6451 ;; Parameters:    Size  Location     Type
  6452 ;;  txData          1    wreg     unsigned char 
  6453 ;; Auto vars:     Size  Location     Type
  6454 ;;  txData          1    3[COMRAM] unsigned char 
  6455 ;; Return value:  Size  Location     Type
  6456 ;;                  1    wreg      void 
  6457 ;; Registers used:
  6458 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6459 ;; Tracked objects:
  6460 ;;		On entry : 0/0
  6461 ;;		On exit  : 0/0
  6462 ;;		Unchanged: 0/0
  6463 ;; Data sizes:     COMRAM   BANK0   BANK1
  6464 ;;      Params:         0       0       0
  6465 ;;      Locals:         1       0       0
  6466 ;;      Temps:          0       0       0
  6467 ;;      Totals:         1       0       0
  6468 ;;Total ram usage:        1 bytes
  6469 ;; Hardware stack levels used:    1
  6470 ;; Hardware stack levels required when called:    2
  6471 ;; This function calls:
  6472 ;;		Nothing
  6473 ;; This function is called by:
  6474 ;;		_main
  6475 ;;		_EUSART_Write_Str
  6476 ;; This function uses a non-reentrant model
  6477 ;;
  6478                           
  6479                           	psect	text31
  6480  00175A                     __ptext31:
  6481                           	callstack 0
  6482  00175A                     _EUSART_Write:
  6483                           	callstack 27
  6484                           
  6485                           ;incstack = 0
  6486                           ;EUSART_Write@txData stored from wreg
  6487  00175A  6E45               	movwf	EUSART_Write@txData^0,c
  6488  00175C                     
  6489                           ;eusart.c: 82: while (0 == eusartTxBufferRemaining) {
  6490  00175C  502C               	movf	_eusartTxBufferRemaining^0,w,c	;volatile
  6491  00175E  E0FE               	bz	l1472
  6492                           
  6493                           ;eusart.c: 83: };eusart.c: 85: if (0 == PIE1bits.TXIE) {
  6494  001760  B89D               	btfsc	157,4,c	;volatile
  6495  001762  D005               	goto	l619
  6496  001764                     u180:
  6497  001764  A89E               	btfss	3998,4,c	;volatile
  6498  001766  D7FE               	goto	u180
  6499                           
  6500                           ;eusart.c: 88: TXREG = txData;
  6501  001768  C045  FFAD         	movff	EUSART_Write@txData,4013	;volatile
  6502                           
  6503                           ;eusart.c: 90: } else {
  6504  00176C  0012               	return	
  6505  00176E                     l619:
  6506                           
  6507                           ;eusart.c: 91: PIE1bits.TXIE = 0;
  6508  00176E  989D               	bcf	157,4,c	;volatile
  6509                           
  6510                           ;eusart.c: 92: eusartTxBuffer[eusartTxHead++] = txData;
  6511  001770  502D               	movf	_eusartTxHead^0,w,c
  6512  001772  0F01               	addlw	low _eusartTxBuffer
  6513  001774  6ED9               	movwf	fsr2l,c
  6514  001776  6ADA               	clrf	fsr2h,c
  6515  001778  C045  FFDF         	movff	EUSART_Write@txData,indf2
  6516  00177C  2A2D               	incf	_eusartTxHead^0,f,c
  6517                           
  6518                           ;eusart.c: 93: if (sizeof (eusartTxBuffer) <= eusartTxHead) {
  6519  00177E  0E0F               	movlw	15
  6520  001780  642D               	cpfsgt	_eusartTxHead^0,c
  6521  001782  D001               	goto	l1486
  6522                           
  6523                           ;eusart.c: 94: eusartTxHead = 0;
  6524  001784  6A2D               	clrf	_eusartTxHead^0,c
  6525  001786                     l1486:
  6526                           
  6527                           ;eusart.c: 95: };eusart.c: 96: eusartTxBufferRemaining--;
  6528  001786  062C               	decf	_eusartTxBufferRemaining^0,f,c	;volatile
  6529  001788  0012               	return		;funcret
  6530  00178A                     __end_of_EUSART_Write:
  6531                           	callstack 0
  6532                           
  6533 ;; *************** function _myIntL *****************
  6534 ;; Defined at:
  6535 ;;		line 703 in file "main.c"
  6536 ;; Parameters:    Size  Location     Type
  6537 ;;		None
  6538 ;; Auto vars:     Size  Location     Type
  6539 ;;		None
  6540 ;; Return value:  Size  Location     Type
  6541 ;;                  1    wreg      void 
  6542 ;; Registers used:
  6543 ;;		wreg, status,2, status,0
  6544 ;; Tracked objects:
  6545 ;;		On entry : 0/0
  6546 ;;		On exit  : 0/0
  6547 ;;		Unchanged: 0/0
  6548 ;; Data sizes:     COMRAM   BANK0   BANK1
  6549 ;;      Params:         0       0       0
  6550 ;;      Locals:         0       0       0
  6551 ;;      Temps:          3       0       0
  6552 ;;      Totals:         3       0       0
  6553 ;;Total ram usage:        3 bytes
  6554 ;; Hardware stack levels used:    1
  6555 ;; Hardware stack levels required when called:    1
  6556 ;; This function calls:
  6557 ;;		Nothing
  6558 ;; This function is called by:
  6559 ;;		Interrupt level 1
  6560 ;; This function uses a non-reentrant model
  6561 ;;
  6562                           
  6563                           	psect	intcodelo
  6564  000018                     __pintcodelo:
  6565                           	callstack 0
  6566  000018                     _myIntL:
  6567                           	callstack 24
  6568                           
  6569                           ;incstack = 0
  6570  000018  8068               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6571  00001A  CFD8 F042          	movff	status,??_myIntL
  6572  00001E  CFE8 F043          	movff	wreg,??_myIntL+1
  6573  000022  CFE0 F044          	movff	bsr,??_myIntL+2
  6574                           
  6575                           ;main.c: 704: static uint8_t snd_delay;;main.c: 706: if (INTCONbits.T0IF == 1) {
  6576  000026  A4F2               	btfss	242,2,c	;volatile
  6577  000028  D030               	goto	i1l347
  6578                           
  6579                           ;main.c: 707: INTCONbits.T0IF = 0;
  6580  00002A  94F2               	bcf	242,2,c	;volatile
  6581                           
  6582                           ;main.c: 708: TMR0H = ((unsigned char)(((45536)>>8)&0xFF));
  6583  00002C  0EB1               	movlw	177
  6584  00002E  6ED7               	movwf	215,c	;volatile
  6585                           
  6586                           ;main.c: 709: TMR0L = ((unsigned char)((45536)&0xFF));
  6587  000030  0EE0               	movlw	224
  6588  000032  6ED6               	movwf	214,c	;volatile
  6589                           
  6590                           ;main.c: 710: read_key = 1;
  6591  000034  8267               	bsf	(_read_key/(0+8))^0,_read_key& (0+7),c
  6592                           
  6593                           ;main.c: 712: tik_time_b++;
  6594  000036  2A36               	incf	_tik_time^0,f,c
  6595                           
  6596                           ;main.c: 713: if (en_sound) {
  6597  000038  A067               	btfss	(_en_sound/(0+8))^0,_en_sound& (0+7),c
  6598  00003A  D026               	goto	i1l334
  6599                           
  6600                           ;main.c: 714: snd_delay++;
  6601  00003C  2A2F               	incf	myIntL@snd_delay^0,f,c
  6602                           
  6603                           ;main.c: 715: if (snd_k) {
  6604  00003E  AC66               	btfss	(_snd_k/(0+8))^0,_snd_k& (0+7),c
  6605  000040  D00A               	goto	i1l335
  6606                           
  6607                           ;main.c: 716: if (snd_delay <= 10) {
  6608  000042  0E0B               	movlw	11
  6609  000044  602F               	cpfslt	myIntL@snd_delay^0,c
  6610  000046  D002               	goto	i1l336
  6611                           
  6612                           ;main.c: 717: LATCbits.LATC4 = 1;
  6613  000048  888B               	bsf	139,4,c	;volatile
  6614                           
  6615                           ;main.c: 718: } else
  6616  00004A  D001               	goto	i1l2526
  6617  00004C                     i1l336:
  6618                           
  6619                           ;main.c: 719: LATCbits.LATC4 = 0;
  6620  00004C  988B               	bcf	139,4,c	;volatile
  6621  00004E                     i1l2526:
  6622                           
  6623                           ;main.c: 720: if (snd_delay > 80)
  6624  00004E  0E50               	movlw	80
  6625  000050  642F               	cpfsgt	myIntL@snd_delay^0,c
  6626  000052  D001               	goto	i1l335
  6627                           
  6628                           ;main.c: 721: snd_delay = 0;
  6629  000054  6A2F               	clrf	myIntL@snd_delay^0,c
  6630  000056                     i1l335:
  6631                           
  6632                           ;main.c: 722: };main.c: 723: if (snd_b) {
  6633  000056  AA66               	btfss	(_snd_b/(0+8))^0,_snd_b& (0+7),c
  6634  000058  D00A               	goto	i1l339
  6635                           
  6636                           ;main.c: 724: if (snd_delay <= 15) {
  6637  00005A  0E10               	movlw	16
  6638  00005C  602F               	cpfslt	myIntL@snd_delay^0,c
  6639  00005E  D002               	goto	i1l340
  6640                           
  6641                           ;main.c: 725: LATCbits.LATC4 = 1;
  6642  000060  888B               	bsf	139,4,c	;volatile
  6643                           
  6644                           ;main.c: 726: } else
  6645  000062  D001               	goto	i1l2534
  6646  000064                     i1l340:
  6647                           
  6648                           ;main.c: 727: LATCbits.LATC4 = 0;
  6649  000064  988B               	bcf	139,4,c	;volatile
  6650  000066                     i1l2534:
  6651                           
  6652                           ;main.c: 728: if (snd_delay > 50)
  6653  000066  0E32               	movlw	50
  6654  000068  642F               	cpfsgt	myIntL@snd_delay^0,c
  6655  00006A  D001               	goto	i1l339
  6656                           
  6657                           ;main.c: 729: snd_delay = 0;
  6658  00006C  6A2F               	clrf	myIntL@snd_delay^0,c
  6659  00006E                     i1l339:
  6660                           
  6661                           ;main.c: 730: };main.c: 731: if (snd_all) {
  6662  00006E  A866               	btfss	(_snd_all/(0+8))^0,_snd_all& (0+7),c
  6663  000070  D00C               	goto	i1l347
  6664                           
  6665                           ;main.c: 732: if (snd_delay <= 10) {
  6666  000072  0E0B               	movlw	11
  6667  000074  602F               	cpfslt	myIntL@snd_delay^0,c
  6668  000076  D002               	goto	i1l344
  6669                           
  6670                           ;main.c: 733: LATCbits.LATC4 = 1;
  6671  000078  888B               	bsf	139,4,c	;volatile
  6672                           
  6673                           ;main.c: 734: } else
  6674  00007A  D001               	goto	i1l2542
  6675  00007C                     i1l344:
  6676                           
  6677                           ;main.c: 735: LATCbits.LATC4 = 0;
  6678  00007C  988B               	bcf	139,4,c	;volatile
  6679  00007E                     i1l2542:
  6680                           
  6681                           ;main.c: 736: if (snd_delay > 25)
  6682  00007E  0E19               	movlw	25
  6683  000080  642F               	cpfsgt	myIntL@snd_delay^0,c
  6684  000082  D003               	goto	i1l347
  6685                           
  6686                           ;main.c: 737: snd_delay = 0;
  6687  000084  6A2F               	clrf	myIntL@snd_delay^0,c
  6688  000086  D001               	goto	i1l347
  6689  000088                     i1l334:
  6690                           
  6691                           ;main.c: 740: LATCbits.LATC4 = 0;
  6692  000088  988B               	bcf	139,4,c	;volatile
  6693  00008A                     i1l347:
  6694  00008A  C044  FFE0         	movff	??_myIntL+2,bsr
  6695  00008E  C043  FFE8         	movff	??_myIntL+1,wreg
  6696  000092  C042  FFD8         	movff	??_myIntL,status
  6697  000096  9068               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6698  000098  0010               	retfie	
  6699  00009A                     __end_of_myIntL:
  6700                           	callstack 0
  6701                           
  6702 ;; *************** function _myIntH *****************
  6703 ;; Defined at:
  6704 ;;		line 684 in file "main.c"
  6705 ;; Parameters:    Size  Location     Type
  6706 ;;		None
  6707 ;; Auto vars:     Size  Location     Type
  6708 ;;		None
  6709 ;; Return value:  Size  Location     Type
  6710 ;;                  1    wreg      void 
  6711 ;; Registers used:
  6712 ;;		wreg, status,2, status,0
  6713 ;; Tracked objects:
  6714 ;;		On entry : 0/0
  6715 ;;		On exit  : 0/0
  6716 ;;		Unchanged: 0/0
  6717 ;; Data sizes:     COMRAM   BANK0   BANK1
  6718 ;;      Params:         0       0       0
  6719 ;;      Locals:         0       0       0
  6720 ;;      Temps:          0       0       0
  6721 ;;      Totals:         0       0       0
  6722 ;;Total ram usage:        0 bytes
  6723 ;; Hardware stack levels used:    1
  6724 ;; This function calls:
  6725 ;;		Nothing
  6726 ;; This function is called by:
  6727 ;;		Interrupt level 2
  6728 ;; This function uses a non-reentrant model
  6729 ;;
  6730                           
  6731                           	psect	intcode
  6732  000008                     __pintcode:
  6733                           	callstack 0
  6734  000008                     _myIntH:
  6735                           	callstack 24
  6736                           
  6737                           ;incstack = 0
  6738  000008  8268               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6739  00000A  EF0E  F00C         	goto	int_func
  6740                           
  6741                           	psect	intcode_body
  6742  00181C                     __pintcode_body:
  6743                           	callstack 24
  6744  00181C                     int_func:
  6745                           	callstack 24
  6746                           
  6747                           ;main.c: 686: if (PIR1bits.TMR1IF == 1) {
  6748  00181C  A09E               	btfss	158,0,c	;volatile
  6749  00181E  D00D               	goto	i2l326
  6750                           
  6751                           ;main.c: 687: PIR1bits.TMR1IF = 0;
  6752  001820  909E               	bcf	158,0,c	;volatile
  6753                           
  6754                           ;main.c: 688: TMR1H = ((unsigned char)(((15536)>>8)&0xFF));
  6755  001822  0E3C               	movlw	60
  6756  001824  6ECF               	movwf	207,c	;volatile
  6757                           
  6758                           ;main.c: 689: TMR1L = ((unsigned char)((15536)&0xFF));
  6759  001826  0EB0               	movlw	176
  6760  001828  6ECE               	movwf	206,c	;volatile
  6761                           
  6762                           ;main.c: 690: if (++timer_val >= 30)
  6763  00182A  2A41               	incf	_timer_val^0,f,c
  6764  00182C  0E1D               	movlw	29
  6765  00182E  6441               	cpfsgt	_timer_val^0,c
  6766  001830  D004               	goto	i2l326
  6767                           
  6768                           ;main.c: 691: {;main.c: 692: timer_val = 0;
  6769  001832  6A41               	clrf	_timer_val^0,c
  6770                           
  6771                           ;main.c: 693: time_flag = 1;
  6772  001834  0E01               	movlw	1
  6773  001836  6E40               	movwf	_time_flag^0,c
  6774                           
  6775                           ;main.c: 694: T1CONbits.TMR1ON = 0;
  6776  001838  90CD               	bcf	205,0,c	;volatile
  6777  00183A                     i2l326:
  6778  00183A  9268               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6779  00183C  0011               	retfie		f
  6780  00183E                     __end_of_myIntH:
  6781                           	callstack 0
  6782                           
  6783                           	psect	rparam
  6784  0000                     
  6785                           	psect	temp
  6786  000068                     btemp:
  6787                           	callstack 0
  6788  000068                     	ds	1
  6789  0000                     int$flags	set	btemp
  6790  0000                     wtemp8	set	btemp+1
  6791  0000                     ttemp5	set	btemp+1
  6792  0000                     ttemp6	set	btemp+4
  6793  0000                     ttemp7	set	btemp+8
  6794                           
  6795                           	psect	idloc
  6796                           
  6797                           ;Config register IDLOC0 @ 0x200000
  6798                           ;	unspecified, using default values
  6799  200000                     	org	2097152
  6800  200000  FF                 	db	255
  6801                           
  6802                           ;Config register IDLOC1 @ 0x200001
  6803                           ;	unspecified, using default values
  6804  200001                     	org	2097153
  6805  200001  FF                 	db	255
  6806                           
  6807                           ;Config register IDLOC2 @ 0x200002
  6808                           ;	unspecified, using default values
  6809  200002                     	org	2097154
  6810  200002  FF                 	db	255
  6811                           
  6812                           ;Config register IDLOC3 @ 0x200003
  6813                           ;	unspecified, using default values
  6814  200003                     	org	2097155
  6815  200003  FF                 	db	255
  6816                           
  6817                           ;Config register IDLOC4 @ 0x200004
  6818                           ;	unspecified, using default values
  6819  200004                     	org	2097156
  6820  200004  FF                 	db	255
  6821                           
  6822                           ;Config register IDLOC5 @ 0x200005
  6823                           ;	unspecified, using default values
  6824  200005                     	org	2097157
  6825  200005  FF                 	db	255
  6826                           
  6827                           ;Config register IDLOC6 @ 0x200006
  6828                           ;	unspecified, using default values
  6829  200006                     	org	2097158
  6830  200006  FF                 	db	255
  6831                           
  6832                           ;Config register IDLOC7 @ 0x200007
  6833                           ;	unspecified, using default values
  6834  200007                     	org	2097159
  6835  200007  FF                 	db	255
  6836                           
  6837                           	psect	config
  6838                           
  6839                           ; Padding undefined space
  6840  300000                     	org	3145728
  6841  300000  FF                 	db	255
  6842                           
  6843                           ;Config register CONFIG1H @ 0x300001
  6844                           ;	Oscillator Selection bits
  6845                           ;	OSC = INTIO2, Internal RC oscillator, port function on RA6 and port function on RA7
  6846                           ;	Fail-Safe Clock Monitor Enable bit
  6847                           ;	FSCM = OFF, Fail-Safe Clock Monitor disabled
  6848                           ;	Internal/External Switchover bit
  6849                           ;	IESO = OFF, Internal/External Switchover mode disabled
  6850  300001                     	org	3145729
  6851  300001  08                 	db	8
  6852                           
  6853                           ;Config register CONFIG2L @ 0x300002
  6854                           ;	Power-up Timer enable bit
  6855                           ;	PWRT = ON, PWRT enabled
  6856                           ;	Brown-out Reset enable bit
  6857                           ;	BOR = ON, Brown-out Reset enabled
  6858                           ;	Brown-out Reset Voltage bits
  6859                           ;	BORV = 27, VBOR set to 2.7V
  6860  300002                     	org	3145730
  6861  300002  0A                 	db	10
  6862                           
  6863                           ;Config register CONFIG2H @ 0x300003
  6864                           ;	Watchdog Timer Enable bit
  6865                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  6866                           ;	Watchdog Timer Postscale Select bits
  6867                           ;	WDTPS = 32768, 1:32768
  6868  300003                     	org	3145731
  6869  300003  1E                 	db	30
  6870                           
  6871                           ; Padding undefined space
  6872  300004                     	org	3145732
  6873  300004  FF                 	db	255
  6874                           
  6875                           ;Config register CONFIG3H @ 0x300005
  6876                           ;	CCP2 MUX bit
  6877                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  6878                           ;	PORTB A/D Enable bit
  6879                           ;	PBAD = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  6880                           ;	MCLR Pin Enable bit
  6881                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  6882  300005                     	org	3145733
  6883  300005  81                 	db	129
  6884                           
  6885                           ;Config register CONFIG4L @ 0x300006
  6886                           ;	Stack Full/Underflow Reset Enable bit
  6887                           ;	STVR = ON, Stack full/underflow will cause Reset
  6888                           ;	Single-Supply ICSP Enable bit
  6889                           ;	LVP = OFF, Single-Supply ICSP disabled
  6890                           ;	Background Debugger Enable bit
  6891                           ;	DEBUG = 0x1, unprogrammed default
  6892  300006                     	org	3145734
  6893  300006  81                 	db	129
  6894                           
  6895                           ; Padding undefined space
  6896  300007                     	org	3145735
  6897  300007  FF                 	db	255
  6898                           
  6899                           ;Config register CONFIG5L @ 0x300008
  6900                           ;	Code Protection bit
  6901                           ;	CP0 = OFF, Block 0 (000200-0007FFh) not code-protected
  6902                           ;	Code Protection bit
  6903                           ;	CP1 = OFF, Block 1 (000800-000FFFh) not code-protected
  6904                           ;	Code Protection bit
  6905                           ;	CP2 = OFF, Block 2 (001000-0017FFh) not code-protected
  6906                           ;	Code Protection bit
  6907                           ;	CP3 = OFF, Block 3 (001800-001FFFh) not code-protected
  6908  300008                     	org	3145736
  6909  300008  0F                 	db	15
  6910                           
  6911                           ;Config register CONFIG5H @ 0x300009
  6912                           ;	Boot Block Code Protection bit
  6913                           ;	CPB = OFF, Boot block (000000-0001FFh) is not code-protected
  6914                           ;	Data EEPROM Code Protection bit
  6915                           ;	CPD = OFF, Data EEPROM is not code-protected
  6916  300009                     	org	3145737
  6917  300009  C0                 	db	192
  6918                           
  6919                           ;Config register CONFIG6L @ 0x30000A
  6920                           ;	Write Protection bit
  6921                           ;	WRT0 = OFF, Block 0 (000200-0007FFh) not write-protected
  6922                           ;	Write Protection bit
  6923                           ;	WRT1 = OFF, Block 1 (000800-000FFFh) not write-protected
  6924                           ;	Write Protection bit
  6925                           ;	WRT2 = OFF, Block 2 (001000-0017FFh) not write-protected
  6926                           ;	Write Protection bit
  6927                           ;	WRT3 = OFF, Block 3 (001800-001FFFh) not write-protected
  6928  30000A                     	org	3145738
  6929  30000A  0F                 	db	15
  6930                           
  6931                           ;Config register CONFIG6H @ 0x30000B
  6932                           ;	Configuration Register Write Protection bit
  6933                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  6934                           ;	Boot Block Write Protection bit
  6935                           ;	WRTB = OFF, Boot block (000000-0001FFh) is not write-protected
  6936                           ;	Data EEPROM Write Protection bit
  6937                           ;	WRTD = OFF, Data EEPROM is not write-protected
  6938  30000B                     	org	3145739
  6939  30000B  E0                 	db	224
  6940                           
  6941                           ;Config register CONFIG7L @ 0x30000C
  6942                           ;	Table Read Protection bit
  6943                           ;	EBTR0 = OFF, Block 0 (000200-0007FFh) not protected from table reads executed in other
      +                           blocks
  6944                           ;	Table Read Protection bit
  6945                           ;	EBTR1 = OFF, Block 1 (000800-000FFFh) not protected from table reads executed in other
      +                           blocks
  6946                           ;	Table Read Protection bit
  6947                           ;	EBTR2 = OFF, Block 2 (001000-0017FFh) not protected from table reads executed in other
      +                           blocks
  6948                           ;	Table Read Protection bit
  6949                           ;	EBTR3 = OFF, Block 3 (001800-001FFFh) not protected from table reads executed in other
      +                           blocks
  6950  30000C                     	org	3145740
  6951  30000C  0F                 	db	15
  6952                           
  6953                           ;Config register CONFIG7H @ 0x30000D
  6954                           ;	Boot Block Table Read Protection bit
  6955                           ;	EBTRB = OFF, Boot block (000000-0001FFh) is not protected from table reads executed in
      +                           other blocks
  6956  30000D                     	org	3145741
  6957  30000D  40                 	db	64
  6958                           tosu	equ	0xFFF
  6959                           tosh	equ	0xFFE
  6960                           tosl	equ	0xFFD
  6961                           stkptr	equ	0xFFC
  6962                           pclatu	equ	0xFFB
  6963                           pclath	equ	0xFFA
  6964                           pcl	equ	0xFF9
  6965                           tblptru	equ	0xFF8
  6966                           tblptrh	equ	0xFF7
  6967                           tblptrl	equ	0xFF6
  6968                           tablat	equ	0xFF5
  6969                           prodh	equ	0xFF4
  6970                           prodl	equ	0xFF3
  6971                           indf0	equ	0xFEF
  6972                           postinc0	equ	0xFEE
  6973                           postdec0	equ	0xFED
  6974                           preinc0	equ	0xFEC
  6975                           plusw0	equ	0xFEB
  6976                           fsr0h	equ	0xFEA
  6977                           fsr0l	equ	0xFE9
  6978                           wreg	equ	0xFE8
  6979                           indf1	equ	0xFE7
  6980                           postinc1	equ	0xFE6
  6981                           postdec1	equ	0xFE5
  6982                           preinc1	equ	0xFE4
  6983                           plusw1	equ	0xFE3
  6984                           fsr1h	equ	0xFE2
  6985                           fsr1l	equ	0xFE1
  6986                           bsr	equ	0xFE0
  6987                           indf2	equ	0xFDF
  6988                           postinc2	equ	0xFDE
  6989                           postdec2	equ	0xFDD
  6990                           preinc2	equ	0xFDC
  6991                           plusw2	equ	0xFDB
  6992                           fsr2h	equ	0xFDA
  6993                           fsr2l	equ	0xFD9
  6994                           status	equ	0xFD8

Data Sizes:
    Strings     275
    Constant    88
    Data        13
    BSS         65
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     23     103
    BANK0           128      0       0
    BANK1           256      0       0

Pointer List with Targets:

    EUSART_Write_Str@t	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_11(CODE[7]), STR_10(CODE[4]), STR_9(CODE[3]), STR_8(CODE[4]), 
		 -> STR_7(CODE[5]), STR_6(CODE[4]), STR_5(CODE[4]), 

    cgrom_char@symbol	PTR unsigned char  size(2) Largest target is 8
		 -> symbol_4(CODE[8]), 

    lcdPrint@t	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_26(CODE[16]), STR_25(CODE[15]), STR_24(CODE[11]), STR_23(CODE[13]), 
		 -> STR_22(CODE[11]), STR_21(CODE[13]), STR_20(CODE[15]), STR_19(CODE[15]), 
		 -> STR_18(CODE[14]), STR_17(CODE[16]), STR_16(CODE[16]), STR_15(CODE[16]), 
		 -> STR_14(CODE[7]), STR_13(CODE[8]), STR_12(CODE[8]), STR_4(CODE[13]), 
		 -> STR_3(CODE[16]), STR_2(CODE[16]), STR_1(CODE[16]), 

    ds18b20_crc8@data_in	PTR unsigned char  size(1) Largest target is 9
		 -> ds18b20_readrom@temp_rom(COMRAM[8]), scratch(COMRAM[9]), 

    ds18b20_get_temp@minus	PTR unsigned char  size(1) Largest target is 1
		 -> minus_2(COMRAM[1]), minus_1(COMRAM[1]), 

    ds18b20_readTemp@time_flag	PTR unsigned char  size(1) Largest target is 1
		 -> time_flag(COMRAM[1]), 

    ds18b20_readTemp@timer_val	PTR unsigned char  size(1) Largest target is 1
		 -> timer_val(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_ds18b20_readrom
    _lcd_putc->_lcdWrite
    _lcdPrint->_lcd_gotoxy
    _lcd_gotoxy->_lcdWrite
    _ds18b20_readrom->_ds18b20_crc8
    _ds18b20_readTemp->_ds18b20_crc8
    ___lwmod->___lwdiv
    ___lbmod->___lbdiv
    _Main_init->_init_ds18b20
    _init_ds18b20->_write_byte
    _write_byte->_write_bit
    _initLCD->_clearLCD
    _clearLCD->_lcdWrite
    _cgrom_char->_lcdWrite
    _lcdWrite->_lcdNibble
    _EUSART_Write_Str->_EUSART_Write

Critical Paths under _myIntL in COMRAM

    None.

Critical Paths under _myIntH in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _myIntL in BANK0

    None.

Critical Paths under _myIntH in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myIntL in BANK1

    None.

Critical Paths under _myIntH in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   35927
                                             20 COMRAM     3     3      0
                           _Delay_ms
                       _EUSART_Write
                   _EUSART_Write_Str
                          _Main_init
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
                            ___lwmod
                           _clearLCD
                   _ds18b20_get_temp
                   _ds18b20_readTemp
                    _ds18b20_readrom
                         _key_GetKey
                          _key_press
                           _lcdPrint
                         _lcd_gotoxy
                           _lcd_putc
                           _read_eep
                          _write_eep
 ---------------------------------------------------------------------------------
 (1) _lcd_putc                                             1     1      0    1060
                                              7 COMRAM     1     1      0
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (1) _lcdPrint                                             6     4      2    6056
                                             10 COMRAM     6     4      2
                           _lcdWrite
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (1) _lcd_gotoxy                                           3     2      1    3463
                                              7 COMRAM     3     2      1
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (1) _key_press                                            1     1      0      45
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _key_GetKey                                           1     1      0      15
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ds18b20_readrom                                     10    10      0    1898
                                             10 COMRAM    10    10      0
                           _Delay_ms
                       _ds18b20_crc8
                           _ow_reset
                          _read_byte
                         _write_byte
                          _write_eep
 ---------------------------------------------------------------------------------
 (1) _write_eep                                            2     1      1     576
                                              3 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _Delay_ms                                             5     3      2     350
                                              3 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ds18b20_readTemp                                     8     6      2    1234
                                             10 COMRAM     8     6      2
                       _ds18b20_crc8
                           _ow_reset
                          _read_byte
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _read_byte                                            4     4      0      60
                                              3 COMRAM     4     4      0
                           _read_bit
 ---------------------------------------------------------------------------------
 (3) _read_bit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ds18b20_crc8                                         7     5      2     557
                                              3 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _ds18b20_get_temp                                     6     4      2     423
                                              3 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4    6999
                                             10 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4    5178
                                              3 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___lbmod                                              4     3      1    1375
                                              7 COMRAM     4     3      1
                            ___lbdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lbdiv                                              4     3      1     770
                                              3 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _Main_init                                            0     0      0    4256
                         _cgrom_char
                            _initLCD
                       _init_ds18b20
                          _init_uart
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_ds18b20                                         4     4      0     839
                                              9 COMRAM     4     4      0
                           _ow_reset
                           _read_eep
                         _write_byte
 ---------------------------------------------------------------------------------
 (2) _write_byte                                           5     5      0      90
                                              4 COMRAM     5     5      0
                          _write_bit
 ---------------------------------------------------------------------------------
 (3) _write_bit                                            1     1      0      15
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_eep                                             2     0      2     554
                                              3 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ow_reset                                             1     1      0      15
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0    2136
                                              8 COMRAM     1     1      0
                           _clearLCD
                          _lcdNibble
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (1) _clearLCD                                             1     1      0    1038
                                              7 COMRAM     1     1      0
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (2) _cgrom_char                                           4     1      3    1281
                                              7 COMRAM     4     1      3
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (2) _lcdWrite                                             2     1      1    1038
                                              5 COMRAM     2     1      1
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      60
                                              3 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Write_Str                                     2     0      2     607
                                              4 COMRAM     2     0      2
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         1     1      0      30
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _myIntL                                               3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _myIntH                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay_ms
   _EUSART_Write
   _EUSART_Write_Str
     _EUSART_Write
   _Main_init
     _cgrom_char
       _lcdWrite
         _lcdNibble
     _initLCD
       _clearLCD
         _lcdWrite
           _lcdNibble
       _lcdNibble
       _lcdWrite
         _lcdNibble
     _init_ds18b20
       _ow_reset
       _read_eep
       _write_byte
         _write_bit
     _init_uart
   ___lbdiv
   ___lbmod
     ___lbdiv (ARG)
   ___lwdiv
   ___lwmod
     ___lwdiv (ARG)
   _clearLCD
     _lcdWrite
       _lcdNibble
   _ds18b20_get_temp
   _ds18b20_readTemp
     _ds18b20_crc8
     _ow_reset
     _read_byte
       _read_bit
     _write_byte
       _write_bit
   _ds18b20_readrom
     _Delay_ms
     _ds18b20_crc8
     _ow_reset
     _read_byte
       _read_bit
     _write_byte
       _write_bit
     _write_eep
   _key_GetKey
   _key_press
   _lcdPrint
     _lcdWrite
       _lcdNibble
     _lcd_gotoxy
       _lcdWrite
         _lcdNibble
   _lcd_gotoxy
     _lcdWrite
       _lcdNibble
   _lcd_putc
     _lcdWrite
       _lcdNibble
   _read_eep
   _write_eep

 _myIntL (ROOT)

 _myIntH (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80      0       0       4        0.0%
BITCOMRAM           7E      0       2       0        1.6%
COMRAM              7E     17      67       1       81.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      67       7        0.0%
DATA                 0      0      67       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Mon Aug 09 11:38:44 2021

                       PL2 0F26                         PL4 0F36                         PL6 0F42  
                       PL8 0F4E                         u10 133A                         u30 1350  
                       u50 1368                         u28 133C                         u70 137C  
                       u48 1352                         u68 136A                         u88 137E  
                       bsr 000FE0               lcdWrite@byte 0048                        PL10 0F56  
                      PL20 1290                        PL12 0F62                        PL30 0F98  
                      PL22 0F86                        PL14 0F6C                        PL40 0FBE  
                      PL32 0FA4                        PL24 1850                        PL16 0F76  
                      PL50 0FE6                        PL42 0FC8                        PL34 0FAC  
                      PL26 11EE                        PL18 0F80                        PL60 1006  
                      PL52 0FEE                        PL44 0FD2                        PL36 0FB6  
                      PL28 0F8C                        PL62 100E                        PL54 0FF6  
                      PL46 14F0                        PL38 139E                        PL64 1014  
                      PL56 0FFE                        PL48 0FDC                        PL66 101A  
                      PL58 129E                        PL68 1020               lcdWrite@type 0047  
                      l204 0778                        l221 0978                        l213 0A3C  
                      l223 097A                        l215 095A                        l240 0A88  
                      l224 09BC                        l208 0792                        l227 09FC  
                      l219 095C                        l316 17EC                        l260 0BA8  
                      l413 12D8                        l421 156E                        l192 04CC  
                      l176 01D6                        l450 1802                        l179 01D4  
                      l380 1448                        l268 0BF6                        l196 04E6  
                      l197 0918                        l551 1504                        l392 114E  
                      l393 1150                        l553 150C                        l458 1888  
                      l619 176E                        l555 1516                        l557 1542  
                      u124 16A2                        u125 169E                        u180 1764  
                      u274 1674                        u275 1670   __end_of_EUSART_Write_Str 1850  
                      wreg 000FE8            lcdNibble@nibble 0046              write_eep@data 0045  
              lcd_gotoxy@x 004A                lcd_gotoxy@y 0049                       l1116 15D2  
                     l1126 164E                       l3004 15A2                       l3006 15AA  
                     l1408 1870                       l3016 15C8                       l3032 1644  
                     l3024 1626                       l3120 030A                       l3104 0258  
                     l1442 1692                       l3026 162E                       l3106 026C  
                     l3132 03B4                       l3142 04E0                       l3134 0420  
                     l3118 02F4                       l1472 175C                       l3320 0B8C  
                     l3304 0B42                       l3160 074E                       l3144 05B6  
                     l3136 04A2                       l3080 0178                       l3072 0164  
                     l3064 010C                       l3402 0CC0                       l3314 0B60  
                     l3250 0A7E                       l3242 0A6E                       l3420 0D0C  
                     l3412 0CFC                       l3332 0BBE                       l3260 0AAE  
                     l3228 0A40                       l3180 08B0                       l3156 0660  
                     l1486 1786                       l2550 1804                       l2606 1446  
                     l1742 152E                       l3502 0EA2                       l3334 0BC4  
                     l3326 0BA2                       l3318 0B84                       l3262 0AB8  
                     l3166 078C                       l3158 06CC                       l3078 016E  
                     l2616 144A                       l1736 1518                       l3352 0BFA  
                     l3280 0AEA                       l3272 0ADA                       l3176 0834  
                     l3184 090A                       l3520 0EEE                       l1594 165C  
                     l2570 188A                       l3370 0C2C                       l3362 0C1C  
                     l3290 0B14                       l3258 0AA6                       l2580 17B2  
                     l1748 1534                       l3516 0EDE                       l3428 0D2C  
                     l2910 184A                       l1598 167C                       l2822 115E  
                     l3446 0D78                       l3438 0D68                       l2664 1708  
                     l2576 17DA                       l3456 0D9E                       l3288 0B10  
                     l2906 1840                       l2674 154E                       l2850 11C8  
                     l2770 11FE                       l3458 0DAC                       l3386 0C6C  
                     l2836 1182                       l2924 14A6                       l3484 0E34  
                     l3476 0E14                       l3468 0E04                       l2686 157C  
                     l2678 155E                       l2694 1588                       l2950 14EE  
                     l2782 1248                       l2774 1216                       l2790 128A  
                     l3494 0E92                       l2960 16D2                       l2848 11C0  
                     l2872 11DC                       l2776 1220                       l2890 12EE  
                     l2794 1122                       l2938 14C8                       l2786 1276  
                     l2778 122C                       l2972 16EC                       l2964 16D8  
                     l2788 1286                       l2976 16F4                       l2992 17A8  
                     l2984 1792                       STR_1 1F0B                       STR_2 1F3B  
                     STR_3 1F1B                       STR_4 1FB0                       STR_5 1FFA  
                     STR_6 1FFA                       STR_7 1FF1                       STR_8 1FF6  
                     STR_9 1FE7           ow_reset@presence 0045            _ds18b20_readrom 1494  
                     u2110 05D6                       u2030 01D4                       u2200 094C  
                     u2210 0956                       u2050 01E6                       u2060 0276  
                     _LATA 000F89                       u2070 032A                       _LATB 000F8A  
                     u3007 10B4                       _LATC 000F8B                       u2240 0974  
                     u3017 10CC                       u3027 10E4                       u2500 0BD0  
                     u3037 10F8                       u3047 1110                       u3057 18C2  
                     u2530 0BE0                       u2450 0B74                       u3067 1806  
                     u2515 0BD2                       u1900 16DC                       u1820 12CE  
                     u3077 138C                       u3087 1396                       u2545 0BE2  
                     u1940 15AE                       u1860 14B6                       u2468 0B76  
                     u1970 1632                       u2907 1730                       u2917 173C  
                     u2927 174C                       u2847 120A                       u2937 1032  
                     u2857 17E0                       u2947 1042                       u2867 167E  
                     u2957 1052                       u2877 18DA                       u2967 1062  
                     u2887 16BE                       u2977 1078                       u2897 1872  
                     u2987 108C                       u2997 10A0                       _TXIF 007CF4  
                     _main 009E                       fsr2h 000FDA                       indf2 000FDF  
                     fsr1l 000FE1                       fsr2l 000FD9                       btemp 0068  
            write_byte@val 0048                       prodh 000FF4                       prodl 000FF3  
                     start 009A               ___param_bank 000000           _ds18b20_get_temp 12A4  
            ?_EUSART_Write 0042           _ds18b20_readTemp 1120                      ?_main 0042  
          __end_of___lbdiv 16F8                      _EEADR 000FA9                      STR_10 1FF6  
                    STR_11 1FE3                      STR_12 1FDB                      STR_20 1F5B  
                    STR_13 1FD3                      STR_21 1FA3                      STR_14 1FEA  
                    STR_22 1FBD                      STR_23 1F96                      STR_15 1F4B  
                    STR_24 1FC8                      STR_16 1F2B                      STR_25 1F6A  
                    STR_17 1EEB                      STR_18 1F88                      STR_26 1EFB  
                    STR_19 1F79            __end_of___lbmod 17B0                      _T1CON 000FCD  
          __end_of___lwdiv 15DC                      i1l340 0064                      i1l334 0088  
                    i1l335 0056                      i1l344 007C                      i1l336 004C  
          __end_of___lwmod 1658                      i1l347 008A                      i1l339 006E  
                    i2l326 183A                      _TMR0H 000FD7                      _TMR1H 000FCF  
                    _TMR0L 000FD6                      _TMR1L 000FCE                      _SPBRG 000FAF  
                    _PORTA 000F80                      _PORTB 000F81                      _PORTC 000F82  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
                    _TXREG 000FAD            __end_of_initLCD 1120                      _fract 1ED3  
                    _snd_b 0335                      _snd_k 0336             write_byte@temp 0049  
           __pbitbssCOMRAM 0330                      tablat 000FF5                      ttemp5 0069  
                    ttemp6 006C                      ttemp7 0070                      status 000FD8  
                    wtemp8 0069            ___lbdiv@divisor 0045            ___lbdiv@counter 0047  
         __end_of_Delay_ms 17F8            write_bit@bitval 0045            __initialization 15DC  
          ds18b20_crc8@crc 004B               __end_of_main 0F26        ds18b20_crc8@data_in 0045  
           ??_EUSART_Write 0045                     ??_main 0056              __activetblptr 000002  
            ?_init_ds18b20 0042    __end_of_ds18b20_readrom 14F0          _temperature_1_old 005B  
        _temperature_2_old 0059                     _EEDATA 000FA8                     _EECON2 000FA7  
       __size_of_Main_init 0078                     i1l2542 007E                     i1l2534 0066  
                   i1l2526 004E           __end_of_clearLCD 18CE           __end_of_lcdPrint 1290  
         __end_of_lcdWrite 181C           __end_of_lcd_putc 1910                  ??___lbdiv 0046  
                ??___lbmod 004A                  ??___lwdiv 0049                  ??___lwmod 0050  
                   _dq_num 0061              Delay_ms@delay 0045                     _myIntH 0008  
                   _myIntL 0018           __end_of_read_eep 18F6           __end_of_read_bit 18E4  
                   clear_0 1606                     _select 0063                     _rom_dq 0011  
           ??_init_ds18b20 004B                  ??_initLCD 004A               __pdataCOMRAM 0059  
             __mediumconst 1E92           __end_of_ow_reset 175A                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8           ___lbdiv@dividend 0046  
         __end_of_symbol_4 1EEB            ___lbmod@divisor 0049                 __accesstop 0080  
  __end_of__initialization 160C            ___lbmod@counter 004B              ___rparam_used 000001  
         write_eep@address 0046           ds18b20_crc8@data 0048             __pcstackCOMRAM 0042  
            __end_of_fract 1EE3          __end_of_Main_init 1420     ds18b20_crc8@loop_count 004A  
               __end_ofPL2 0F36                 __end_ofPL4 0F42                 __end_ofPL6 0F4E  
               __end_ofPL8 0F56           ___lbdiv@quotient 0048              ?_ds18b20_crc8 0045  
       __size_of_lcdNibble 0070       ds18b20_readTemp@temp 0050           ?_ds18b20_readrom 0042  
                ?_Delay_ms 0045          ?_EUSART_Write_Str 0046          lcd_gotoxy@address 004B  
       ??_EUSART_Write_Str 0048   __end_of_ds18b20_get_temp 132E       __end_of_EUSART_Write 178A  
 __end_of_ds18b20_readTemp 11EE         __size_of_key_press 004E         __size_of_init_uart 001C  
       __size_of_read_byte 0036    ds18b20_crc8@bit_counter 0047           ds18b20_readrom@i 0055  
      __end_of_HD44780_CYR 1ED3                    ?_myIntH 0042                    ?_myIntL 0042  
           ??_ds18b20_crc8 0047                 _cgrom_char 16F8              _eusartRxCount 002B  
                ?_clearLCD 0042                 ??_Delay_ms 0047                 _lcd_gotoxy 187C  
                ?_lcdPrint 004C                  ?_lcdWrite 0047                  ?_lcd_putc 0042  
                ?_read_eep 0045                  ?_read_bit 0042                 _key_GetKey 1910  
     __end_of_init_ds18b20 1494          __end_of_lcdNibble 139E         __size_of_write_bit 001E  
       __size_of_write_eep 0024                    __Hparam 0000                    __Lparam 0000  
                ?_ow_reset 0042                    ___lbdiv 16C4                    ___lbmod 178A  
                  ___lwdiv 1592                    ___lwmod 161A                    __pcinit 15DC  
          __size_of_myIntH 1836            __size_of_myIntL 0082    ds18b20_readrom@temp_rom 004C  
                  __ramtop 0200                    __ptext0 009E                    __ptext1 1904  
                  __ptext2 11FC                    __ptext3 187C                    __ptext4 14FA  
                  __ptext5 1910                    __ptext6 1494                    __ptext7 17B0  
                  __ptext8 17D4                    __ptext9 1120                  _T0CONbits 000FD5  
                  _initLCD 1028                  _T1CONbits 000FCD          __end_of_key_press 1548  
        __end_of_init_uart 18B4          __end_of_read_byte 168E                 ??_clearLCD 0049  
                  _minus_1 0065                    _minus_2 0064                    _scratch 0037  
                  _snd_b_b 0332                    _snd_all 0334                    _snd_k_b 0333  
                  _sub_sel 0034                 ??_lcdPrint 004E                 ??_lcdWrite 0048  
           __pintcode_body 181C                 ??_lcd_putc 0049       end_of_initialization 160C  
                Delay_ms@i 0048               key_press@key 0045              __Lmediumconst 1E92  
                  int_func 181C                 ??_read_eep 0047                 ??_read_bit 0045  
              _HD44780_CYR 1E93                  _RCSTAbits 000FAB                 ??_ow_reset 0045  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc2 000FDE                 _temp_ready 0021               read_byte@val 0047  
      ds18b20_get_temp@tmp 0048                ?_cgrom_char 0049                  _PORTAbits 000F80  
            key_GetKey@key 0045          __end_of_write_bit 187C          __end_of_write_eep 17D4  
         ___lbmod@dividend 004A          EUSART_Write_Str@t 0046                  _TRISAbits 000F92  
                _TRISCbits 000F94                ?_lcd_gotoxy 0049      __size_of_EUSART_Write 0030  
              ___lbmod@rem 004C       __end_of_ds18b20_crc8 1592                ?_key_GetKey 0042  
                _TXSTAbits 000FAC              __pidataCOMRAM 18F6                 _write_byte 168E  
             _EUSART_Write 175A             __end_of_myIntH 183E             __end_of_myIntL 009A  
                _Main_init 13A8                __end_ofPL10 0F62                __end_ofPL20 129E  
              __end_ofPL12 0F6C                __end_ofPL30 0FA4                __end_ofPL22 0F8C  
              __end_ofPL14 0F76                __end_ofPL40 0FC8                __end_ofPL32 0FAC  
              __end_ofPL24 185E                __end_ofPL16 0F80                __end_ofPL50 0FEE  
              __end_ofPL42 0FD2                __end_ofPL34 0FB6                __end_ofPL26 11FC  
              __end_ofPL18 0F86                __end_ofPL60 100E                __end_ofPL52 0FF6  
              __end_ofPL44 0FDC                __end_ofPL36 0FBE                __end_ofPL28 0F98  
              __end_ofPL62 1014                __end_ofPL54 0FFE                __end_ofPL46 14FA  
              __end_ofPL38 13A8                __end_ofPL64 101A                __end_ofPL56 1006  
              __end_ofPL48 0FE6                __end_ofPL66 1020                __end_ofPL58 12A4  
              __end_ofPL68 1028        start_initialization 15DC          __size_of_Delay_ms 0024  
    __size_of_init_ds18b20 0074          ?_ds18b20_get_temp 0045         ??_ds18b20_get_temp 0047  
      __size_of_cgrom_char 0032          ?_ds18b20_readTemp 004C  __size_of_EUSART_Write_Str 0012  
       ??_ds18b20_readTemp 004E   ds18b20_crc8@feedback_bit 0049        __size_of_lcd_gotoxy 001C  
                 ??_myIntH 0042                   ??_myIntL 0042            read_eep@address 0045  
               read_byte@i 0048                 ?_Main_init 0042        __size_of_key_GetKey 000A  
             _init_ds18b20 1420                __pbssCOMRAM 0001          __size_of_clearLCD 001A  
        __size_of_lcdPrint 0094          __size_of_lcdWrite 0024   __size_of_ds18b20_readrom 005C  
        __size_of_lcd_putc 000C      ds18b20_crc8@num_bytes 0046          ds18b20_readTemp@i 0053  
        ds18b20_readTemp@j 0052          __size_of_read_eep 0012          __size_of_read_bit 0016  
         ___lwdiv@dividend 0045                  __pintcode 0008              __pmediumconst 1E92  
                _lcdNibble 132E                   ?___lbdiv 0045                   ?___lbmod 0049  
                 ?___lwdiv 0045                   ?___lwmod 004C               _eusartTxHead 002D  
        __size_of_ow_reset 0030                __pintcodelo 0018                ?_write_byte 0042  
  _eusartTxBufferRemaining 002C                   ?_initLCD 0042      __size_of_ds18b20_crc8 004A  
         ___lwdiv@quotient 0049                  _key_press 14FA                  _init_uart 1898  
                _read_byte 1658             _eusartTxBuffer 0001                   _LATAbits 000F89  
                 _LATCbits 000F8B                  _temp1_fix 0027                   _IPR1bits 000F9F  
                 _PIE1bits 000F9D              _set_t_dq2_100 0031                   _PIR1bits 000F9E  
                _set_t_dq2 0029              _set_t_dq1_dwn 0032                   _RCONbits 000FD0  
               ?_lcdNibble 0042                  _time_flag 0040                  _timer_val 0041  
                lcdPrint@t 004C               ??_cgrom_char 004C                 _ADCON1bits 000FC1  
             _ds18b20_crc8 1548                ??_Main_init 004F                  _sound_yes 0337  
                lcd_putc@c 0049                write_byte@i 004A                   _Delay_ms 17D4  
             ??_lcd_gotoxy 004A                 ?_key_press 0042                  _write_bit 185E  
                _write_eep 17B0                 ?_init_uart 0042                _INTCON2bits 000FF1  
               ?_read_byte 0042                  copy_data0 15F0              init_ds18b20@i 004E  
            init_ds18b20@q 004D        __size_of_write_byte 0036               ??_key_GetKey 0045  
               _EECON1bits 000FA6         __end_of_cgrom_char 172A           _EUSART_Write_Str 183E  
                 __Hrparam 0000                   __Lrparam 0000          ??_ds18b20_readrom 004C  
       __end_of_lcd_gotoxy 1898             key_press@count 0025           __size_of___lbdiv 0034  
         __size_of___lbmod 0026           __size_of___lwdiv 004A           __size_of___lwmod 003E  
            _temperature_1 005F              _temperature_2 005D           __size_of_initLCD 00F8  
                 _clearLCD 18B4                _key_pressed 002E         __end_of_key_GetKey 191A  
          ___lwdiv@divisor 0047            myIntL@snd_delay 002F            ___lwdiv@counter 004B  
                 __ptext10 1658                   __ptext11 18CE                   __ptext20 1420  
                 __ptext12 1548                   __ptext21 168E                   __ptext13 12A4  
                 __ptext30 183E                   __ptext22 185E                   __ptext14 161A  
                 __ptext31 175A                   __ptext23 18E4                   __ptext15 1592  
                 __ptext24 172A                   __ptext16 178A                   __ptext25 1028  
                 __ptext17 16C4                   __ptext26 18B4                   __ptext18 13A8  
                 __ptext27 16F8                   __ptext19 1898                   __ptext28 17F8  
                 __ptext29 132E                   _lcdPrint 11FC                   _en_snd_b 0330  
                 _lcdWrite 17F8                   _en_snd_k 0331                 ?_write_eep 0045  
               ?_write_bit 0042                   _en_sound 0338                   _lcd_putc 1904  
   ds18b20_get_temp@num_dq 0047              __size_of_main 0E88                   _read_bit 18CE  
                 _read_eep 18E4      ds18b20_readrom@num_dq 0054                   _read_key 0339  
        cgrom_char@address 004B               _set_t_dq2_10 0030               _set_t_dq1_up 0033  
                 _tik_time 0036                ??_lcdNibble 0045                   _ow_reset 172A  
                 int$flags 0068                   _sub_main 0062  __size_of_ds18b20_get_temp 008A  
                 _symbol_4 1EE3              _en_send_usart 033A  __size_of_ds18b20_readTemp 00CE  
               _INTCONbits 000FF2                ??_key_press 0045                ??_init_uart 0045  
              ??_read_byte 0045                   intlevel1 0000                   intlevel2 0000  
         ___lwmod@dividend 004C      ds18b20_get_temp@minus 0045                 _OSCCONbits 000FD3  
ds18b20_readTemp@time_flag 004C  ds18b20_readTemp@timer_val 004D           cgrom_char@symbol 0049  
             ??_write_byte 0046            ___lwmod@divisor 004E       ds18b20_get_temp@temp 0049  
          ___lwmod@counter 0050                cgrom_char@i 004C                ??_write_eep 0046  
              ??_write_bit 0045                _pressed_key 0035         EUSART_Write@txData 0045  
       __end_of_write_byte 16C4  
